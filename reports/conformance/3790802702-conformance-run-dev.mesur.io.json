{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "46ef7a60-67e1-4907-ad2c-e983a6f74770",
        "name": "Clear Cache",
        "item": [
          {
            "id": "37672715-c844-41fa-8518-e3eac63aef73",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1c858854-0f15-4f67-a93a-1055f7260c5f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "68034b25-39f2-4517-a2fc-87ece08dab2b"
                }
              }
            ]
          },
          {
            "id": "e4f19688-99e4-4cbe-96b0-83b8cbf5ff02",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9362b3d1-ed09-4132-8d49-770b928c1535",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "19f960db-de12-4880-a694-3306154a2ce2"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "316dc53a-e4a4-4e09-a8da-3d8d7c82955f",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "76294be4-62f4-4049-814e-9383127be479",
            "name": "Positive Testing",
            "item": [
              {
                "id": "45d5a0e4-91b1-43f1-bb49-a29cee11ef1e",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8e7fb1d1-68f6-40eb-a8cc-35b57b4f6292",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "84347f69-40e6-4936-b80a-1e1ac2025834"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ddd38b54-7e88-4ec9-954d-922c1ba41826",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fb1b12d8-2456-42c8-b0ad-3f37deed4987"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "474490e3-64e1-4d78-a0b6-8dbe9d0417a2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fb7ca28b-9f08-451d-9733-4e51437d0d34"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b757d6b1-f281-479a-b6a0-fe79ca16b7e2",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "213d1e69-bf8f-4c8f-8ae4-4dfac0e1333e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "477b29b7-7ba4-4fc8-9fc4-7b13a9c35f4b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a7740855-48c0-48fe-89e5-b205f5c72416"
            }
          }
        ]
      },
      {
        "id": "f6765659-2848-486b-aa3f-a56bb22d8acd",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "2d0774c3-bc8f-4687-a0bb-d910d2475675",
            "name": "Negative Testing",
            "item": [
              {
                "id": "18d29f49-f642-4b2a-9d04-3098b6761bdb",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "44e17900-7156-4a3c-9901-3aa09ea5f55d",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7711efa-be4e-4591-8927-5e589d3c1806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8013c7de-e149-477b-ab0d-18f40a37dce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48281793-2dc5-4e60-b058-92e1fdda298c",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c251fffc-301f-4c53-a7a0-a5c8a69b7c97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b2be5f12-bc5e-4ccd-9d45-e114fa2ad932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32fd65ce-1579-45a1-9f75-6efe3295bba6",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "776d58e3-2bcd-4c99-80be-46df57c65f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e2108619-41dd-4d43-a910-7c119db0c707"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ad3f99d7-2a06-421b-979c-26cf9f6f2491",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "451220ad-cb42-4e96-9488-48480917c2ec",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab88a080-a7de-4bc5-b8cd-a892ac06ba5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c0e49942-687a-4541-8a15-f1f6322eddbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0d43540-86d7-4cf5-864b-1505409cb581",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8193302-af5c-4b72-948a-1a6855b36022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5464948-78cd-4b77-9f8f-ad6d7514eeb5",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6afa916-7ba9-45b3-b00c-f0285a94a549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "09995953-bc39-4164-bdf2-93e07cce93e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b35618ed-2fee-4002-a09f-786e01deb51d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "b8c3ad46-7889-4aa5-87e7-9bc08d7a48e0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d0edddc1-dbd2-4457-95a1-9b48f32b3f78",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e960d2fc-6837-4517-a052-be0d475ef317",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bbace15f-e7a6-4a73-99ba-470bf87b124f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "7fc1df29-4401-4cca-aa5b-827ea5c00e4b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f34fc9e5-f068-4953-acee-1fdc10f87c69",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "db026a86-b500-4bf8-9737-50d97d27e4e4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dc61a78a-c3d0-4cac-a82d-4d077baac922",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dee7e2df-0be5-4168-bce1-06e227e0ae33"
            }
          }
        ]
      },
      {
        "id": "05b358e2-cc85-4f50-920e-1bb627b628c1",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "dcaaffc1-a5cb-49c8-9015-11f6ab0e92d0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5f9fc2a4-1328-4efc-aaa5-280cbb8598af",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "50b9d8f6-3ffa-4a4b-9a26-3f02e659c470",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72c13007-7d2a-4144-bd5f-2948f9f89fd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "369715b4-6fb5-40f6-9672-fe28e5b9758e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95dbb728-a007-4fc3-a00e-84a0a04bcf4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d49027ff-03f1-421f-abf0-af3083f3cb0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5d0b0e8-ab39-4b8c-922c-d9ddd326f2b6",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "365d3447-e799-450d-be05-940ea9939d97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c02254fc-7717-46f0-a9a8-943284a38ff7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "246f036c-fb5d-4064-9a4a-5809f1c44d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "55c73c3f-f64f-43ce-ba9f-037bf76161a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "075ead5e-ec78-4363-9688-d4a24789d7f3",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8d978ab-6d89-4990-997d-c2672c4dbb63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23504c8c-dc1b-46c4-9f0a-2efad148efe9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a993a9a3-bbc3-4951-8b95-84b76f7f48d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a0704eeb-7865-4bf2-a2ba-a835989bddd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c57add56-2f3f-48e8-bfbc-316ce87e38fb",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ecb8297-7088-4af1-bc25-63418f46f38a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abb6dc1f-3520-4583-9163-6b14bf33eec0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a457183-c1a7-4c70-8fb3-6dd49e1b6d95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b4d91b97-f789-4327-a066-a75bb3d73bf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe03ddb6-5840-443d-ae43-e8eb7ddf6876",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae73b1e1-0302-4765-a39b-20c797d66ed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e490df7-156d-4131-84fd-73ef2b3db84b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b28896de-09df-4a70-8bda-6495909a5bf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "deaae8f2-8f10-4105-b831-7951574e2cfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a38932eb-a901-4338-a2a5-ac3e99382b11",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca4ed502-6596-4c2b-a3c2-fbb91264c2c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2621e2e7-f7a2-43d1-a100-c2cde5ecfd56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "830fc5d5-0708-4a2a-a95b-456a9482518d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fa7e5841-1e4e-4f0e-b0c0-26d0135360d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "890f2cd0-bead-43f9-8117-e31290fe860b",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4621e7ac-b9dc-41ab-aec6-7faf3ff8c9bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f408474a-e3f0-4b13-b814-a369e6f1b9af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "670f2c02-4551-4873-9bd4-b70254d4c3dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "25af8ad5-fbbd-4c4c-a33d-c72502ef5689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1c4ce16-eb20-4cb2-a4f8-bfb1bf009a77",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14ead2ee-6296-4d21-bd2e-7be8b89e7e5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04ca321b-9b8b-4a7e-9d6b-3085d4ab3700"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5055faf7-8987-40c2-8a2c-ea255dbe673f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ffad168c-119f-4787-a188-5dd1ced660ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce95c5b1-8590-43e8-a890-11deb582bd72",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81d5765f-9f5b-465a-9eb1-623888c1f721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2aca565f-2c70-436e-bbad-8490fcc8d22b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c72a17d-036d-4e57-8297-388eb1d5f5a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4208dcfe-03dd-4ef2-8f16-0d56bd956419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9128228b-3b30-4f78-b14e-aa56874d1dba",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66fc7928-ab4e-47d6-959c-6cb22df9c0eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a051101-9204-4223-a960-6e77d9f1e4e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "187da7c8-cd7f-426e-bdad-b830fca009aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db7de0ea-5765-4800-9afc-3b875386b161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25a9b69d-04ca-4d79-9cf0-da9c9f180e04",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "238ea216-1e9b-43fe-827e-7ada3e0e561a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc17a597-07e1-47d1-932d-d42a7078c348"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97d73e27-5faf-4add-9e7e-d55c483a0449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1798bfab-cd5f-4b41-91e5-d3fdffd8a47a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "784de336-08aa-4536-86c5-f697d0d4a3b8",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff3ef15c-3cf7-4aa4-a73e-2e45b7df7c17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a723dba9-40d2-4b47-9703-f4a18106f135"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95b0f894-5a86-46fa-985b-e65f2cb3dd6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "872f0da8-24b9-4db4-993d-ae793d1231d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81025a79-213d-425c-a42d-50020a9b5543",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c266527-6505-43e1-a63f-cef840e576ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ae5d7db-e48b-4d45-a987-54066062659c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e389ef7b-6067-4832-8407-664fdb17e428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6e1f09cb-ec34-4a6e-9ed4-2018ba5df3e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67a4fbe4-eb6a-4f82-9b61-772fefcfef60",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fc0fee7-3689-45af-80e5-4b83f9968e2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46d473b0-30a5-4670-a388-de2cbc716531"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e47a2af1-adf4-4951-be1a-637343e326fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6707cda-1000-4b13-9d75-7c65344ebad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c9a7284-c62c-4cab-95ac-c7cb718a11a5",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57943a7a-7d83-46a3-b367-1eaa9d884b78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aafdee5f-7af1-4f32-b93c-cc329aab9ede"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca560ac1-ba46-47e9-b655-517e72a52bb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9d432e2a-1a18-475c-ae35-7fa2ee9f5c79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0c0c73e-9532-47b1-8052-10ffc7b8fd8f",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f5b785a-b299-4dc0-9286-fb72e8a3108d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df29c3c2-e08a-49ea-b8bc-801869b239e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e015fb9e-187a-441b-b69d-99d6ddc0631b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fa29c38e-eb3c-4a13-ae52-9913c8f43831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6484871-f720-4af4-8cbc-d74869177c43",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "255802ba-109a-4627-9a52-411ea6423692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc3f7e7f-b414-45cd-8f4e-3a1af8da7939"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83f98fbb-75a4-4100-8805-7c2fc0bcbbdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "10dbc978-c7a6-4f30-a785-e2212f654e1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "468d35ec-cecb-4859-9c24-4d97e435e02f",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aafe8779-e48d-45f5-84a8-449e92b88373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77b7b75e-3750-4e9f-a1f7-f7d8d679cfe3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d8bc186-9cdf-430f-b64a-7ffe128f4b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3ad2bbfd-4add-46d6-b1e9-dd976fdfc312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c695f344-4e4d-4ca6-ae12-f5d6f09aba5e",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10e7274d-e076-489f-ac1d-a4cd081fc53b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9559a0d-4fa4-4bf9-8924-2387ec8f59f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "459fdade-605c-44f9-a7d4-1eddf25593ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bc5c6ec4-4b85-4470-a416-d77365627cbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8d8f99f-88c9-444a-b102-f8989c79c86f",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1653dadf-54fb-4421-913d-012f975eff04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81149df1-2542-4aea-8c89-3206440a7d3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eada9a99-adde-4ff9-b5fa-9fc45637d78f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a84ee989-e739-4f9c-bdaf-285dd20bef45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b143627f-372e-4f19-81c2-3c9017adbb63",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52219b07-a9b5-4079-9800-0aceba0f67f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4e4eb1a-9592-4230-a7b1-01ddd7f19234"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac21c693-a24b-4166-aab2-e095c5d6a3f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d23a2712-73fe-4d32-8991-d01ba469efb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e58d861-9b19-463e-aa96-e7ea20daae7b",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acad103c-1e8d-4e5a-acea-1bedf88fe555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19d8b4fd-7aeb-4090-ad33-743ea58cdd11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "946d804f-4830-41d0-b5e0-db660a663668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ae23425-1f99-4803-8cf0-f0a106e82b90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59910be4-f191-4991-950c-16ae06dece9a",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ab17696-2fcd-495a-9aa5-afcf650d1b18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dccfc1be-8641-488c-bcf2-cea52788f225"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3af3045-17b9-4ab4-8c2c-f5cd0cb642a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "87619170-4633-49ef-8927-015d419b9495"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ced8ec2-fc40-4ca6-a612-75d26951591b",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd473917-0f54-4a97-bc0a-1b78c5a90d8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ce85e6a-88dc-46c9-8184-32832a12297d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bf80134-35d8-424c-874f-3fabedad5769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "39216bee-1dd9-4e5a-bcfe-36fbbf2ecde2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ff96c62-dfa8-4102-adc3-32e3a7424b1c",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e976036-222d-4025-a185-106674e9a032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "796693b5-ef61-446e-bb67-d3cb68e8f02a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5eb2c9e-a595-48da-a58f-948d7b8519f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f0e486fd-f48c-48c9-b8b6-3c1076055be9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07ccba50-42f5-4b06-99b1-4270b52df2ac",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54d9ffb8-54a8-4c79-a4d1-90a1e9c580c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4a2d91e-ba3b-466f-b51c-1385f93c60b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e0e5047-6e4c-457e-990f-1b80afc7e802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a6f3976-1b71-41de-b795-14cc42556694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1354f7c-8aa7-4967-909b-37aeabe11dc2",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41d99713-e1ee-4287-878c-688dd918721e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ecc2daf-47a0-4007-a261-23b0aaafdb29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b062fa6d-094f-447a-814d-68ac5ae9301f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "16d46428-f79d-4457-8727-8ae2d61a5d10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa2fbccd-8f20-4923-923b-da32ba940006",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc999b37-6d21-4888-9706-e66c8704d080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2120d4a4-28fa-4119-a4ce-4976ac6b7b36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fda9083-aa92-4d1b-89b7-531e28823fc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b725d70-88e1-4b19-bfa0-d24f9becafca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26657b1e-6982-4743-983e-e46e9b72fe9c",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ffaebc9-3639-464a-b2ad-de6397f07bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f205c52d-7cfe-403f-a9b4-9d5bad6195b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aed6f7b1-7acb-427d-aa05-656c49c354f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "876fdee5-d37b-4af9-be54-dc81a75e16eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe4cc516-0019-4c7e-adee-129b40108011",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb3fba45-83fc-421b-b764-bd57f303383f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4607c1a9-9167-43c5-9e51-2a2deea8b220"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a75e52cd-3feb-4756-8edc-b7f840eaa82d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2aec6ba7-5825-4795-96a9-96ac05664b35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4b708cf-718f-4d28-9125-c569eb5f1c71",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "559f0ba2-a922-49b6-ba9f-eb9b7ea93735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b548be62-2c87-491c-924b-31574aad8abc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0b48112-80f2-4910-b325-06ee322a7ba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "04570ae8-915b-49a9-909a-97983fdcbdc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9db5866b-410d-4c9f-a83b-9ef97bfc27d5",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55379926-9583-418c-94c2-5901271a6f40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f29afb5-6f3c-4e9d-9aa0-38a8c8158983"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "187bee51-f990-4de8-8a0e-745ff585f04f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "83f92429-bd1c-41ea-967f-08eb3e21864e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95372e6d-6d7e-40e4-a5aa-f277a3afce66",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7039eaad-8589-4aa6-94b3-88c9c95f964a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "847615d9-26ac-4f84-8596-02fbc5c73a5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8da46349-e867-43a9-9029-4eca1293d0e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a05a1e0b-1d24-4613-9853-888ce7da6d2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9efd89a9-d30e-4485-a940-4327d192059b",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "575c9bfd-ede4-4e8d-aa8c-6a37f40911fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27b56dcf-7c64-4448-87fd-6bbe199e12d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b528f61-e5f7-4782-8496-3e1e7c3564d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb1708b2-1203-4928-a1e7-84439c0e0eef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e0501ab-4abd-4644-b5b6-224878f6a25f",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bb1f6e2-ed78-4839-bb72-ce67000ba306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed871790-85b5-4b47-b6c9-87a25527ebb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e664270-e699-40ca-9a15-9a32b89722d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3641f8e7-2968-47fe-aa38-edb004c02cc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cddf7bb3-e1d7-471a-abb4-fe2eaed5c48b",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ccd3ae4-08a9-4648-b2d5-0f8350367dad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32ad8c33-aaef-4bb7-8213-dd0591d3b0b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f020938d-9c03-4ce3-a3d5-b1fe4d2763fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b57f38e-3a63-4a07-9dfe-46f218a11824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56e51af7-8786-4e13-9906-58ee6ddcefc4",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2433cbe-9eca-4cd9-adc4-e6d407c0475c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cddb10f4-59c7-40d5-9534-1cd98acfecb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cf7046c-81aa-4c72-ac2d-94c8522ce521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "210d7ffa-6a0a-4962-8bc6-d08805eedebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a533303-d5f6-4335-9b9a-2bade1969cab",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdbaaffb-6c10-486a-89fd-385379cc2f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "adc4bd0f-009c-4198-b173-dbafb0dc11f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5824f9a-b965-40b8-a31e-03edf4766af8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "938f3071-68e2-4f57-96c9-7349c521f3db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0bdf367-c1f3-49b0-a1d4-6c88eb5a39c6",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3bd9d2d-163f-41d8-af0e-709c28c956c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4fa95d1-1c03-4514-b75e-67aa8d946a02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b62f36c9-4580-4529-9a9c-8f6ea7462348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e12b7f31-043c-4579-a7f0-6f7c723dc5a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e267a687-8541-4ed4-85e0-3282f6acf195",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe192d73-b1cf-43fc-9bed-f709fb64b60e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1a4632e-0102-4665-91bf-ee3946bfaa61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06e50c7c-44f6-4879-bd7c-8e4ae357d093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d93bad8-4914-4d4b-b600-6df9137c5082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c2a2245-f391-4bfd-b98b-7e782c04b97f",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67780a52-0e5e-41fd-bd36-38bbca2d3e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b788d78f-093e-4e0b-aeb5-2dacdaa1a38f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3567b2e5-dd4f-4b34-b28f-2c55f06caf05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "932fabd7-f336-419b-a618-b396ea688353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efe89c31-ce39-4760-82ae-9d80ef42522e",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d67378db-8435-4cbd-ab22-b54679803e7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1b823ae-b9da-4b01-b59a-65ff909e8aab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6208c8d-645c-4c74-8060-d4bab033ffad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "21b1cd5f-e106-4fac-8972-c82307361d7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c825e89-e814-4c00-a5af-db035fb8e28a",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "233bd6c2-034a-4897-b81d-85f27c757985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10a79dba-a5d0-47ed-9e0c-999b91ffb819"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b13fbcb-6e72-44e9-b048-762025711f42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2374f267-0275-44cb-b621-bffc1b69b2de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3798261-edb2-4b08-9eb0-978d810c4961",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d3844c-c1e9-4db3-b213-5de9f5da2a3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbf0fd7d-5293-4a9e-874f-0d0894bb9cc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb1ec6d7-0076-4cdf-9e01-39b424cc2aa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "21dc00aa-5ab8-49d2-99a8-731910f10967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbeb736a-bcb1-4593-89aa-fa64b5ad0cc8",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0809945c-ef21-496b-8a26-25a2754db3ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3232dc2-9139-43f7-b013-79083fa5a84a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d80b0f05-7107-405a-8f28-68c3b4ee7f4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3e7baaf-022d-41a4-88bf-0fe8a51b1644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7e5cce7-a85a-4587-921b-46cf0413d3f9",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff90a958-48a7-44bd-9dc2-7f7c05d377dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f42db07-da98-438a-be60-6cf5a4dded58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebfd9494-2b0e-45ca-8538-519d0a6bdeb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "a61990d8-7c67-4d84-9d3e-5fe1d1f64cb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6308c73b-e26e-4d7d-8a87-d4abb1d193b5",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b6687b7-bb86-4375-af55-0c7af886cd33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "500220b2-77f3-4a9f-bab8-4cf697684ae3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "602a5ac0-e539-42fd-bbfa-c603c9cd4be5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5efbddf7-82d6-4ed3-92a8-7243f3a7d384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "848f914d-061c-48ec-86fa-b4fafddce6fd",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a8cb49d-fb14-4551-b6b7-5ef8e19770dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a8bdf50-3a60-4a3e-860e-9f5202ad1d81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6caef848-b373-48be-b8f9-f7eb6859fae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7be5cf43-3e05-4e14-adf9-8a900daa0c29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "534dc899-455f-45ac-a62a-473fe780eab6",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a079461e-04af-45bb-8718-aa5b0cdb49b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8123097-41e0-4249-92b2-29df74ac302a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e021110d-f3d4-4055-a8a8-3731a465d42c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d01e24dd-368e-404c-93c0-9a3b5e3e46dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "268289f0-9b43-4cac-b427-42130009e31c",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb978b9c-483b-496c-8faa-cb5288fb4284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dc88514-6692-4e0e-887d-95b9b277cef2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34e70220-51ed-493c-b670-d4dc20616352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "155468ee-cc11-4186-954a-1d7c39938dc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e6b6866-04f4-4bc4-b9b9-a791bdf9dfdd",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c25b31b-93c9-45dc-8565-26fa59e87aa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc307359-f2c0-4241-98a5-0ea716abb253"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b11656b5-1e30-4692-a0f2-cc48c8462dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fcbaf779-9298-476f-a764-5aa17989d92e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b84f6468-106e-48b2-a378-e56d84d21989",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "955bf624-41de-4139-ad0f-43a3a08619ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f36666f9-5004-4451-967b-8df81ea9297b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "410438fa-f484-4cc9-8e54-db1870384d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d7a64b91-4c3b-4503-9a66-e6a9dc06a5ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ae96e74-85a7-4001-beff-9d53f7e6d651",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38436d8c-8fdf-4eb8-9f7b-d5878d282e32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "107e6b4c-52e5-4fae-b973-e019d07c9c1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afa79cbf-05a0-410d-97af-d0be3fa39e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "f58cfdd6-036e-459d-902e-511ccc41b702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19b175ee-ebe1-45f3-b378-88103a49bc3f",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b97eee99-fa0f-4b03-b489-3fbf0cf979cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c85642d3-144f-4d77-beb5-ef0ac65966e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fea88b4d-de30-464b-8b6b-b3500a0dd756",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3cbf95a3-ee18-4a50-949e-f05b353b3380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3edcbbc-a3b2-4101-bff6-d631647c1533",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89658815-fa66-4aa7-b5c0-0baf0a5fe29c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8f6427a-59f7-4e38-8a20-214f314ab9e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bec72ea4-5209-4b43-9655-435374511df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "acb9fcff-376d-4ef3-996a-dc6754ec1169"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34e035c3-c43e-4414-b586-9ec5ada54188",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efc353c9-1e75-4730-9681-a415c9fee449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cedc34d-7c3f-4894-b776-96f4a1a1175f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98885f32-2dc2-4102-93b9-703db228a2ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d828d4ef-5044-46ec-8978-25c99af0e6ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "969626b6-d9a3-4870-b925-3ed43faec5b3",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2486ade6-8299-4cd6-8200-93abc0ce5509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83863611-47b8-4deb-a9e6-1dff79af4a45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e556569c-b4df-4d31-90cf-820b183b1664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b984eb64-6f9b-42e9-beb3-a40f7db2652e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69c2e6d6-0371-4422-a7fb-7e4553eb6cba",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bac2387-56b3-4801-bbe9-0fb269f0d335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a2b77d2-805f-4126-81c7-95d03c432612"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcbffd2d-7aa4-4ffa-b842-c8e698a3aa06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "26039aba-7592-4e7d-882f-c873e1691a72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e15b7d86-3a30-42b2-be26-bef678808155",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "431c663b-ecdf-499b-9bf7-8d4d14a411da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "588ad1dd-3800-455d-90f0-1df9799e16b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ef89ced-66cd-481e-a02c-abf38a127a05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "69270564-cd1f-47ed-aad9-9224055cfeca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1e89a0b-7d70-443d-a031-d24cc130a77b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "357e4034-ecc4-47ef-9651-a634fd8e518c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25009a81-8e33-435a-bc81-a48321629d46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea2f878-b9ca-4af4-9777-6821a8115a87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "96b2af08-34b0-4b13-9612-226b46080b53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f4d7ea9-0dd3-4ae9-831b-1571e6a66fcd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01ff9777-1f1d-43ca-9442-70f72f8b5962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a3386ab-77f0-42ba-8cba-566d97b60761"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b3c0c07-7c54-4a6c-a26b-cf0e8a40c871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7b3816a3-c8bb-43b1-9a19-b9b3c0c2575d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ec3e484-5819-4390-9bd2-9cdccb86b5b4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02a758d9-33f6-4fe5-9674-4d86f923aa5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b290ee5-a0d1-48c2-8e74-33e68e637bdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27f5c81c-f5e4-40da-9979-bfe897cdd04c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "695adfe6-8bf1-4e69-aca1-64bf1e5a1f40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef04714c-ea45-4c65-87ee-911fca8edaf1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98ad4d64-1125-40c1-89ac-fb4b777ee3dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b643ed2b-de0b-48d4-adf6-f447081cb30b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c12b7040-1c53-4c4c-bd5c-9552724e3757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "69004441-fe4c-4227-bee6-f47a0b6e4d07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5141d0df-eced-4cc9-9bd5-59875c0470f6",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8c64579-fa78-4d62-bc98-c45a8552ee94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f85b6f9b-ad9a-43e1-8645-b2386ac2be0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8253af4a-6db7-41e1-a692-5120218210ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "823e3a2f-0719-4347-809d-c326edc54ed8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aba6b91e-7498-44a7-8b44-bd1157a910d8",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "362540f0-59bc-484d-a0a5-1baeb8627ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad23a1f8-8af3-4874-b990-4a23f83ec0d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed805ebc-2846-4a6a-a228-d9b57fcec9fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d89a550c-7dac-4eae-beeb-d03fc02f8172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a69a9bc-bea3-4ef3-ac53-439631416678",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dff7ac8-9142-4e8d-a768-8cb09dda7ccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75d0e45e-d8bb-4f8e-a027-66e85779b494"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8fc4866-e147-404e-b2cb-791e5a3147d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "beeb1112-88ab-4dc0-8e37-7410eae7f34e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9065477e-d192-4c53-83fc-a133d7d45e13",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be9b389-caa9-4a20-a9a8-ff0f20780ff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96ebbed9-74e3-4dc4-a8d5-67f9b6a8a322"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f45be1-197c-495e-a325-a80a3a226c2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea8cdc7c-ce1f-4424-995f-687da4d3300f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92708512-923b-4d83-9b89-3e13f9193b4b",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df3e4b24-a30b-4d0f-84a1-c9241eb0cfb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d718fdc2-c11e-4fa1-92cf-07f54e7a04a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c248e0ef-b2c0-4a35-b127-a3fb6eb876f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ad85ded-bd9b-40ce-9368-a5ed3ce2da5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f905765-afef-4364-ab1e-3f1767c01415",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae1a438a-f238-47a0-a91e-dc59c14080af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8daca6a2-3ee5-4a2c-b6fc-4792ef30b90c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e09dac1-005f-4c06-9ce5-71d1e8b61dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "56d6fc21-0a13-4077-b7f8-d41d91d9a0ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca52c74-bd30-4134-971e-7e8f3a232c54",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "626b2268-d85c-4947-b744-82ff9e3d0b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0236fad5-0d20-4b24-9386-2a4de64f7fce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d79fe24b-266e-4096-89fe-b09d6cbdff87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e009f85-84bb-4fc5-8ef6-4ecfb4a23108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df0dea9c-12fe-419e-a41b-8bc1255e796d",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2fbca4b-c077-46c8-b44a-16c27fe63c9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78caadf6-8dcf-4803-9c0a-db70dfc8b974"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b4e8557-58a6-42f6-bf53-bf67d1511ad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd767e71-5d22-4126-8bc4-a8965f958a85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47b625e8-37c0-4735-bb61-9c8519f8069b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "affa61fe-3112-4288-a9eb-afefab2033c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5216f47-fc7e-4363-98f6-9f4228f34177"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56723b8f-f76d-42a8-8fd6-e21216697688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "778f8f67-e9bd-4ce6-80da-e37791f52b4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bedfca48-dc02-4fcd-9862-3c736ca843b7",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ce4bd1d-7b80-4b22-bd14-655a6af98fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a4a35c6-a014-4aac-b591-23822cf867ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53c9bf32-00a7-4b50-8fb5-c4f478c6eb09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f56b8653-b603-47c4-8c52-6256469737e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75cd245b-51ef-4c94-8117-642e778914fe",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d815f0ec-a113-4b1a-8fb1-f9e247b03f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68cc56f5-f209-450a-ba36-a40040d7d69f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee44d7ef-7ac5-433c-845e-455e44b5c024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd756608-f162-4e87-bdf1-ce285d7d9dbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fd5d883-a3e9-46cf-b7a3-1579c4690931",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4be0e6b-7e48-4d84-95ec-654027ce823f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39d4a2b2-c45e-4470-997f-8022310ce382"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64cf03d1-08b3-448f-9411-db3e9bb82682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb0f7ee3-7a64-4de4-922e-2adf9c2a8bf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "792625d4-febd-43a4-a326-85987935ab76",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71138347-eaa0-45dc-ad34-32b5a073886d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3437031e-64cb-4bf8-91e9-c65c0feaf77d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2597160-0bb4-4b60-97c8-7772b43293b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b521cf89-6597-406c-8b42-e1cd2aef4610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56051f0c-c6ae-4141-8701-145b742e6571",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f251234-e8fc-4664-9df2-4c427088d0db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04daae01-7519-41fc-8112-3ea70c38c9bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad4b6778-5303-4f28-bb76-b6b6c456b8f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2862f516-eab5-4396-8167-ba15e4a6a331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d964722d-2c3c-400b-8d72-0091bc5677af",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f24b2eb6-5a55-44aa-8e53-474811d6e554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79cf4994-2577-478a-a473-c25e51f78f03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fae35cd8-76a0-4e8b-94bd-61943a1b0120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "86bda1a5-3eb8-4a79-b184-ef3d482dac46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ccf1c51-5a06-4b72-98bc-620b00e7354b",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc82773c-64a7-42c3-81ef-df6018ec7bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "424e6a49-c24c-42e3-b4e5-7c5382817809"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10210c2b-f8b4-4315-a7e2-244afc69c156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "44112d3f-65d7-4d5a-b455-592d7db4ec18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddaf0c70-0751-483e-b37b-aa310e3c56c3",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d98989d-354c-41aa-8e41-e6e0fa403a20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6995eff4-8c45-4fb7-ac14-2c1ac33d1572"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ece11a4-56c6-4616-a815-02734d9f8ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ada2fdc-f5ec-4e3c-acaf-4de73ef64761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c110f03a-7d0a-4b12-b47b-07a39d57539b",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a35f4759-8395-40c8-acdb-e60791e1f66e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12a407a5-e614-40ec-9098-722c6d71bcef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de9c0802-b8e9-4f8c-a041-dd9134219a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc37f3f3-e6ec-4be2-89a4-a3fdff058c3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26e40746-c0ce-426b-b090-aaa1e13884e7",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb43b5a6-8c0c-472e-a688-ac61ef4e3b79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffbe8f85-2b43-4dd1-8663-1cb84e690db1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7053b62e-be13-453f-adac-1e1fa4b955ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "28655430-5216-49eb-821a-2385649ccf04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a70d8fc6-4603-4400-a188-8a7813f78c93",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbb9ed4f-0a89-4acd-a09b-3311906326b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f05e511-e3ec-4615-b0ae-9a11701fbbce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b69aa329-4d9e-464a-b4f5-d8e31f120564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "542988ac-66d3-4faa-9825-88dd6ded7cb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99e97f62-c424-484f-b79f-9cfc93cd75a9",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ac31f0f-fbbd-44fa-a790-f5307f300d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab83d4cf-0f5f-4415-a392-70d306fe1e7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c0acb68-7655-46ab-83ea-16d77867bbb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa8f0bf5-68c0-407f-bb8d-c8c87f25046d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cae68e2-4ed0-4734-8996-c5ffec4ad785",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cad4f80e-2b38-4cb9-a128-ff25473b8ffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c95ecb43-6bc1-4e2a-b2ba-0186d3952267"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec7449f7-ec5d-46f7-b469-834e1d1c8844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f4a8a64-cb8c-4c7d-8a0d-9822e282ab46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f033f344-9310-4614-87da-a7b8715baa54",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12a59663-af0d-4772-a302-163d661baf3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbe67595-32ef-4d92-88ff-5cda9ad6ebac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa9d071b-5ebd-4eb0-bd8a-bb0b14061a7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e804079-525b-4617-aec0-aec32592da10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdce7a6b-6700-4901-a565-436a4e0cdbed",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "123e312c-5790-480a-9396-ed59475ba83b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22e5bcc0-518a-4d5a-9d64-4fe5408cea88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a00130c2-bf6b-46fb-8a34-13009e3b7d7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5274950c-b3ea-4caf-a9a5-79e50bc48e2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e94c4de-7d68-4742-804e-9601d641e4dd",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d837ab4-6ad4-4b6c-af5b-fab69c8d8cb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deed2231-5d52-4599-adbf-beb4e4574b4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31007861-cd30-49b3-bce5-ae7f75cfc9d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "836e2d08-eadf-45eb-9e65-035d8e11dd6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7de96dcf-fbd1-4ce7-bdf5-7affe85ba59e",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "201084ad-da1e-4509-ae2c-a1f7523dbe1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1953c6e5-1384-4ae0-8999-2bb9d37c9b09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "583cb4e0-ebd5-4c71-b531-666c2bda880b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a90f144-fab4-4176-b034-0b30904204a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4577c00a-cf76-46a3-86cb-13aec90ba618",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8b48f22-1e1a-4076-a234-49c5f458d7b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df67b2a9-cef4-41b0-8c86-b5e527be35a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d03b982c-027c-475c-a288-5fc650013495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "49b10ed6-f280-48f3-bb8a-085000eb76f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30775b49-2dff-402b-9a2a-3a1cfb56884a",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8786b7aa-28f7-4851-9cbe-70d6ccd9aade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9029cae-272d-4493-8a01-78bfa1d19d16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f0f785-31cd-4766-97ae-31d76445ebbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b9368b01-7a77-4a90-bb7a-c74c2c380d50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a50ad91e-7d71-43df-a0c5-57ce260d00a2",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddefb5e6-6203-4baa-83b4-338b6b296c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6633a22-6792-447b-b30a-a069c88c977d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1d3ee80-ad40-465b-917c-5be43fb7979c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f688fc9-10e0-447a-aab6-c9642b9e1133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05dc6230-42c8-4248-bfc5-8053cc22b3a8",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "313a2035-14fe-442c-af31-fafec7c4b8ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7bdc4d6-aeef-4c9a-aaa0-57715586d020"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af5242f6-69f5-435a-81a7-c9f1b747bff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "74e3a812-29ec-48cf-b832-9beb9772e746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "867f9ca7-84e1-4bf1-a9e4-b76a72e530b2",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d514888-b768-40b9-8abf-547038dbfae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "1ee5562f-45bd-4751-a14d-153e0360ce8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc34270c-05d0-4bce-b1ed-6e83d4dac304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1cf8c7bc-928a-4667-a232-ae1a5db4f887"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bbe100c2-a9d4-41a9-8aaf-55317f131b79",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1fc9d1bb-4111-4bcb-93fe-6616502b7407",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23cd839e-5d33-42e6-85ae-dd513b57fe60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ed897801-0182-4c53-abcc-280422021be0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98ea9df4-0578-49ec-9aab-5221508ea3b6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "6a24e478-88a1-4521-96f8-dfd8b39f1082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83029450-f538-4325-a7cb-6bc3eb69f246",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d01c23cd-77eb-42ac-b03c-8b45b431a458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f465cdc6-a27f-49e2-ba1c-3ff86ff49b56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fbafb7f-720e-49be-8abe-6e68984ff5b6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "3219388f-f40d-495f-9e47-0829071d063e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "caf36ddd-15c3-4bfa-b38c-68d56ce3e536",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ebad8902-dbc4-4a3a-a4c8-2adf60da6d25"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "baa62461-dbc3-41dc-98a1-ff472ef5de97",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b2f16c5e-f3d9-4447-8fac-1942140bd6c7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1e47af29-bfa7-4fe9-a577-6bfa7383ddd6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fb96c42e-ea7d-4582-8acb-2946af150470"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cb6966ae-0b7d-4be5-b6d5-1d07f0d58459",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7593e5c2-b3f4-46d7-860a-962c44bea817"
                }
              }
            ]
          },
          {
            "id": "f2ff1390-3734-42ab-b943-ce48874f4769",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7c02e434-3bbd-44e3-932a-9867e5d69dd7",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "311a410d-1b78-4b53-beaf-978c334d0050",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d9d02096-0968-4645-a7de-23381d03d424"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "913604ca-dc73-40a5-8389-22a86f5b3b70",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b981cda6-cdc7-401d-8d86-d2c92adc8511"
                    }
                  }
                ]
              },
              {
                "id": "8a97c0aa-d545-4f4d-bd98-282e3cbd2a72",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c84299d9-e84f-4718-8279-0f59acde58a5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d9ac942b-ebdd-449b-897b-45d6cb7216f3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1c1d15be-eb81-4bdf-987b-8e7a17e61198",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ae0c29d5-b04a-46c7-9dfe-6ffb91cc31e0"
                    }
                  }
                ]
              },
              {
                "id": "9b35144f-6445-4fdc-b460-3dc1c08bfdc3",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c0b9a887-537d-4bf7-9481-d2014c2386b1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "516934a7-c15e-4176-ab27-e554df701be5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a5cecf2-96c1-4561-b804-4f9d4b85926b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "71cbd699-3e90-497a-8652-a8973b01e5ab"
                    }
                  }
                ]
              },
              {
                "id": "de711736-5afc-4bbc-a8d3-23638b0f6050",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bb797ff7-a00a-4907-bdd4-3c2f282bd44d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e5f013a6-d746-4140-8430-b584476217d6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b4eb045b-24b1-49b4-b77c-239b02e1b09d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "e7c83e17-cc16-417c-834a-ade5270906e6"
                    }
                  }
                ]
              },
              {
                "id": "5978d751-24f3-4e1e-bf16-7e54b9fe1b6b",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b1352829-b2f3-4216-ad13-066719dafb8f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f74dfd6a-afc9-4f1c-85ba-c6934cdfabaf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "17e686c0-3d28-4d2c-8cdf-511ae6d352e1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "52815d4a-3a19-438a-b384-e6a09705354a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cbc85bbf-b5b2-4c38-887b-bd7b15ccab9d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b988c18c-1e76-404e-b080-ffea156c315b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6e5b445b-d3da-4511-bcf3-e65e8c9c9333",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "89ee5caf-864b-49a3-9dac-1733c461c4b6"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9cccb6ac-a12a-4d9d-b069-05f99c47c810",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "bf843a4d-3822-439e-8a84-b14ae9bb4e4c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "de6f41fe-1392-4547-996e-4a4342099e03",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "feb04e9d-2c38-4e5a-bbc9-6135bc70254c"
            }
          }
        ]
      },
      {
        "id": "1ab7e189-edbb-4756-8327-e58d126a383f",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "848034a9-6ee4-4c0b-bddc-c765b6db42ef",
            "name": "Negative Testing",
            "item": [
              {
                "id": "508b9400-1c11-45a9-9ba0-064d6c4fb163",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "503f5211-4510-44ef-96e2-50dc92cc7e13",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0078f815-871c-4b9a-b7fc-df1104ce5235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e11cd0cb-3547-49b8-80aa-89031ce0ef33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11a7c9d2-6070-4dda-85c6-8513a96405a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd12842d-bfc3-42c9-b7c4-4f8cba2ef3da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c45a85d1-2a4c-4019-8c8c-981629aa12c1",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d0b9a2c-df02-4eef-8f94-7481121e6805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2bb4c2e-893b-4930-90aa-7180ee4d54c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8c75c2f-42ee-4283-b55a-a3800b498ead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff893d9f-14d9-4885-af64-1590df957ff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48f10d36-1c95-4bc7-9708-5f4e7ae5fb44",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c718db4f-a967-4102-bb6e-20a856cbf49a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea7fd321-9353-4d90-b8fe-55e5e4524a1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53cb9fff-8523-4940-970b-404b0014b157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f71d785-02f4-4edb-b846-6bb9f274ac9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ac60b50-516d-42da-8cf9-4db47a4450b9",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c524b63-7538-47a4-969a-ca9158d30703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7690fc2-80e2-478c-ae8e-9d8d2206d4dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca734e1c-fd83-4bc6-adf0-8040d703c612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "820b8aa9-9d17-4e03-bbb0-3ca0766f2b55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2dcf385-4e79-44d9-87cf-920be196ca55",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4905d31-f99d-41e5-80ab-0300ba0e4ac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8c76fb8-38ce-4880-b233-b96abdeb8d47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97f09889-4d1a-45c9-8415-8f10b63e4620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ccd43f9-10fb-4163-a191-484ce5d75189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a336415b-4410-4dad-b56a-68c615915c93",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caeabc88-798f-4047-aef0-122fcd8e5b5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38af1112-09f6-4451-b841-8696d20b2167"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "288d6796-361f-44ce-86f6-f7d39d2de370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3ed8ef15-a4f5-487a-99c4-8c67a2eb11c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a184f69-8a9f-44f5-b5c6-f09bd253d0bc",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "016fba44-c699-4376-b585-2cbf5814004e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66295531-eb11-4faa-9b54-11fde095c0e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49330443-eb94-476a-8d02-4e2c80e6d7b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "adf9b5c1-00af-4310-a444-27048afa386e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9242f14b-8c23-475f-97d4-8b98cf31e6c2",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a65bb9d-5b8d-49fc-b96a-56b11da9da74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fba7f370-7de8-4948-aee5-c9271ae6de1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1224a47-ef85-425a-89fc-52ad2687fce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e11c01bc-2d77-4e8c-8a1d-79953b489923"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f664629-3afa-4c69-9b15-91f4b1884c92",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea7eba20-1893-4245-9e35-3ed696413dc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa432649-ea24-4d1e-9f93-cb184d51d116"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2865327a-7f4e-4c21-b5f5-fc1fec852051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf98d943-1f8d-4057-9a4b-015452d82bb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "509a203b-e674-43f2-9d08-52d04b686930",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9fe0543-b3a8-4f1c-bd40-fb49d5a1bc5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91c2f912-c446-4d52-8b09-d8188c32b607"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95f4e4e7-b403-4eaf-b633-7ea06569c732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9024ee2-f830-4e88-a32e-30c225652ee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4f5b28c-7d66-4089-816e-a855f86aba24",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a3aaf6c-2bc5-41a2-9d30-e4ae0f8a98c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12e620a7-75a4-4ac6-b3c4-6a41d752fd35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d475cfcb-a6c1-41fe-ac91-ea6b3a79cb8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ad1f9847-e2e9-42f4-adfc-414b0f1da10d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b81a5a0d-eecd-4585-8941-1d5b70f31d17",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcc27ae1-dc4b-4f84-a115-e3b3828bba8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ee0a73b-6757-43e6-bc13-556efc04c6a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fed0634b-fa81-43bd-b281-cea16b2af147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4e1e3cf2-a91a-490e-8432-5bac49cd666c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1004aa5-7ba0-44ea-813e-752781148121",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d8a5a62-be17-4ee3-bd62-b1a61800f539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e36094fd-d8aa-4ef7-997d-368ce4823a8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "724392fa-aa48-44be-9476-6a954d77f3c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "247ff3eb-f40a-4310-82ed-d0355aedba42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c753f974-ca83-47cf-9f5c-55f5e00d7ab7",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1302491f-5f09-494d-a5d0-04e334ae903f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6aa063ef-b855-4423-b82e-16573ac2d8a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76a8529d-7886-4104-adca-1d218476fba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "fda5c775-308f-4607-90bb-0695469688d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4fa6080-8790-454d-81d2-19f882b3fe88",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ff26949-6e50-4396-95d8-4fd2f2779e33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da9fac87-3079-4112-9582-75047d1e00fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8e31a00-cb7a-480d-ab02-f42a77a94f2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d828902b-6a44-49fe-b4ab-7b2d360ea2ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4da0e6f3-f372-47f2-a3c1-2eb866072ed5",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78eff367-47f3-473e-85a7-7db331c085ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c969abe7-1549-4c93-87f4-144a8a04d116"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19e266c9-c01c-4b4a-ba91-8575592ccb8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2422f01-b946-4a0f-9ea1-3a535c730413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0527b833-e06e-4ae5-bf00-443d9367ea25",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb2a45cd-8e6a-40cf-ba45-a1a5bea619c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b543d56f-3d72-4a0a-b418-0cf8bfca6c5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7c28a24-1dd2-42cd-a615-957d3dba6908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ebfd34f-1877-4450-a779-a9a9b0ca5387"
                        }
                      }
                    ]
                  },
                  {
                    "id": "197cd22d-16da-451b-a134-fccf33b322a7",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "900e992f-446d-4bab-8ad5-df15df41537d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a137d55-7689-4edb-86c2-c21b33f0adad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62d6647a-5831-4a91-86b7-1a00b5258522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb46415d-6b00-4fbe-9d2a-ca01acc1415a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "333bf7c8-143b-4885-94f1-b1d9f1da47ed",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e17329f8-a8fb-4b27-9792-8c196669a2e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89a09430-3631-4813-a4ec-7f0d9e4a3e56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd4e5abd-233a-47b2-bc69-4bd0fdbc47c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "337a1f9b-732d-4822-96f6-c42e9adb82bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9f40566-6767-4f41-84bc-ab74b62ffc0d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "349fd63d-2860-4440-9dc0-1d9cfc3f93bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43362151-3518-4fc5-b383-ba7a2f4d665d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eb1d0d8-187f-481c-925e-2fe4e5621d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5608afd-f633-46b6-b280-1010aa9c0303"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48db0043-c85b-492c-b118-51b5a9709034",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2747f714-0d55-41f9-9710-18978e06ae88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bed3d68-9672-42eb-8f04-da79556ef282"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fae4bb7-7195-4a28-995f-cd2b01bc6187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d97d75d1-4ce4-4082-ae69-81df46229d41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98599242-614b-40ca-9fc4-98063d8b071f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e49a9d15-db4f-4b37-ab18-f33574066f65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1878120-210a-4896-8231-ec4e5633886c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "771215e5-b7f8-4d46-b9c6-ce3290b83429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "abdb1541-44be-4aec-ad52-c834750f6c46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69c3e761-feaa-4a50-b3f0-cd3200f3bde5",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ba38551-b077-4b28-991b-dedc2d7fbf29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d97a7f36-bbe3-4c18-98f9-b0c33938889c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e32a0e3-3fe3-436a-bbc1-30ba1282e62e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5e0034f-f5b7-4a32-8b07-308eda354f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6e41d21-fd64-4a16-80ea-3e062dbf3db0",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f4822f4-3467-42ef-9163-7ee6bd5b41b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76c13173-0105-400e-b5ec-d55fc61ee34d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b08dc6a-ce6d-4f6f-bedf-632199904cf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab2f431e-0cab-4c6c-b410-7094e1fd1dd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff120b5e-8d58-41c2-8f5f-4641536618ae",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95e60f5b-83dc-4690-ac03-15891a677773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24099d73-cee3-4831-b2d3-b0b7973a0fe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e97d353-e87a-4ae9-a403-8169e8f1af50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7847b44-e091-4366-9b3d-eec61e1be5a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b503648e-3ad2-4e8c-a01f-a83f6f133827",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49917f3d-1c61-4f7b-85b7-dedaa234a129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "687a5f7b-916f-42b8-9d8f-38489abd7f5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6150270d-8095-44ff-b7c6-15db9981d379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe82fc06-4f3e-49db-9119-b7e7df893b1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0479873d-d6a1-464b-871b-6509e0346513",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5066c29-b0dc-44e3-a266-6e0c38c6aac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "240c37f3-facc-474d-a64d-38abf9f95bdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acdd95e9-6e36-4a3d-a995-8b5b273844df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e55676cc-98dd-485a-9fe5-1c2ca0baf676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f42ab29-1da5-4c09-8170-0404ebee0fb4",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f0ec5a4-2fe7-46c6-931a-71f36f3bb071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d2c57ef-efee-4821-8bed-ca59e9a513e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bf36372-6321-4530-b0d6-feb98b295a05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0cb41973-a9a6-4051-8773-50ffe2f059dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f751ce6-08d8-47dd-8754-ba1846b53757",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c3b42c7-8554-4b5e-8501-48b162637bbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd6488ff-4bdd-4753-9990-b8c3fa5c00b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bbd8b00-3bf0-4263-b292-0c8f30256294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7e4c0d6-e8a7-41f3-b61f-6505966a1fae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80ad4606-2055-4a79-ae1c-9eb324093b23",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87af0dd2-989a-470b-aac3-8cdf8cb0639a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c10ef65e-d1f1-4ccb-8af5-ab62be993036"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "519b69ad-769f-4389-8e29-0c5ae4983558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5e1ce64-b8e2-47f1-9120-85453c59e55a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bc26fa6-2537-4cd7-b1db-462d0a5315dd",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f762b85f-fb99-4ca5-93cc-da7414e94a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a94aaced-355a-4830-9d59-332cb9f610f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f923e73c-e7a7-4740-93a5-c66dad760da0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "927c383b-b543-48b5-9434-643a58844317"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8b06df4-ca0c-499d-9398-39a01c6ff3af",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a774641f-2894-4796-97b2-733273f7fce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab98cec3-9774-41a9-ba05-43a944a445d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a910e726-84df-4949-aded-b5a8e7d857c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d78c2fbb-c7e5-451c-8105-daac42c46f33"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ceb2d393-041a-4dfb-ac5b-e158b7aa6b50",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e7915495-8559-4d9f-9e32-50fec4b95307",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6faa8b85-828b-41d8-a078-cc245d3b1c4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1769a71d-cb37-4788-a55c-e1b59c534698"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c2a032d-cbbb-48ff-9274-d68a206c193a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a8dbc045-79fc-4f81-85c1-7580998b2e73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d050819-d766-4375-925b-d0ab411a9f07",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b9e8131-b033-43bb-aecf-c3612e4e2430",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "2172dd91-b2f1-4be9-b76a-5f2b1f723e31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c333fc1-9a8f-4684-ad61-c9da0422a1f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4e7126cb-9ab5-4a69-9ca3-ad63cdff6394"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0d8070dc-98d0-4e0c-b0dc-24d23b89c8c6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e83de723-e513-4ea2-8cd4-974cc2c85613"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "78c909e3-1354-4c28-9ecc-80db54d68480",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "35e4f412-0e6e-4933-b7bc-c8f02f78947b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8bd5a4a4-58fa-4d37-9673-528ba09bf75c",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a89c3d13-0d1d-45f8-b9ef-2825a6331527"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "043ddd08-4516-46bf-90de-520923588949",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bdd598af-dde8-4b24-bf06-8419edfa5d5e"
            }
          }
        ]
      },
      {
        "id": "85daeaa2-0e18-4f6a-ad38-58a5dc8b2941",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "0a56bac2-8526-4fb6-97da-d1b2f43fa03c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "05f5cdbe-01c5-45dc-9fb6-9e4af3393379",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fcf666cd-5146-4b20-aa9f-ad64ac87d1f0",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a44b99b-347b-49bc-bdef-cc09d2433eb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb0d440d-6008-440c-b0b2-5641b5d00824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b147a5a-ed76-4e0c-9cf2-96d5347a773b",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aa73cb7-76d2-4441-bf0a-76230023625a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1309467a-7fab-43ea-96b7-9ee40dbd3779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b83133d8-92c3-48c8-8273-63b56bf7b27b",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2165e971-3f60-463d-b6c1-307e2f0d6977",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0f37fd6-a1a0-4dcd-b6a0-a2fa1e98ad06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9309977b-00ae-4ff9-a531-5b8b4a8c14d7",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd3af3f2-0bec-4b3b-9706-6538f445cf02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3673d03-4cd7-4b80-9f00-af9e6befd6de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deaf06a5-1c52-4c21-952a-65aeeb0de71d",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e295c5e5-668e-4053-9da3-a2884c3fabb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "516cbd23-619c-46f1-82fd-62c755fd16dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58680365-33de-4d18-8d16-39fdb7832872",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "314247b4-993a-4a93-991c-f9e3cdc1d951",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7713ca7-1458-40b0-be1b-34a9570b9762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "143eaad3-d957-4a17-a1dc-2f9aaa6649d1",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0781ccc-9516-4366-86f3-b7793ac9a941",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dc93e33-9b82-48b9-8aa5-d846483432ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c46fa8a2-1ec3-4e27-8c66-fd829cb8ef3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "660bcba7-cf0b-4e81-a56f-d4ca3058a8f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec504565-c6c1-4ac9-9190-04ef47b527e1",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15ff15ce-46b7-484b-823f-031521364252",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "811ceebc-79cf-48c9-907c-5bf47481e93c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eebe440-f618-4c92-9178-299346d7272d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3fdf261-be4a-4b51-b18b-f094aa45996e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e06b139-ba8d-4920-bcf1-b8d2f9d30d7a",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cc8270c-452c-401e-bea3-264c85c4082a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ceacfa76-632e-47fc-a474-b250d90dcaf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "120b529d-cefe-480f-8222-208aa88ced3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ded3bef9-dc3b-4f48-ac0c-db939a4e7ab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29e4371c-6438-4c65-848b-bf42cdaa68a1",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b5347e3-c239-497d-9219-8332599a1892",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0b50f05-35e6-4e29-81be-aa2eac6dd860"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f07fa03-017a-47b0-abe3-0135217826ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fc6368b-3397-4bb6-ab48-af7f366b76a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3d87d1e-c3e1-4386-8396-f5da8c1ad8a4",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9be760b4-9f7d-4ac5-b191-91df823bd5bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdc6cfe5-df82-4aeb-ad7c-8044da0bc5b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3365f222-b0bc-4072-b23f-cc039cc984f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9dcd5bd-1017-48a8-b73a-9868d239beae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6af700f8-1c5b-4986-bea6-92001e867191",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0139d033-1d65-4ad3-89f6-2404c001fc64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45a6fe91-b84f-4c26-9ad5-764395269a32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9c46928-d74f-4edd-a936-b14892bbe4de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "242ffc43-b23e-4367-9ecc-376c6e02289d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f694b420-332d-463b-bf14-6a2ccab03211",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acb78ada-76c7-493e-82f3-6e46ee2b6f41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73a74839-d211-4e9b-b5ba-7b1adbf76832"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c04100b9-d7e5-4a64-b6b1-a02ea0d36ca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87c2e491-4ae9-4c97-8253-310d6c1d459e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "739f5b58-c28d-4737-95f4-f6e1aa07854f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24b6038f-bec5-4876-96e1-6bbb32cb0fff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6166b4a4-faf7-4d42-998e-a3e16b7f4728"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0778f222-f59f-4485-881a-03057d45955b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12cc1519-54e2-4a54-8703-545afafacc68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "584ff1af-5288-4526-b683-1b2164df4c3b",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec37f59b-23f0-4fef-a9ae-4679cd4f7a66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70901372-41c5-42af-acf6-c93999f2b7fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fe471d4-fad2-4ceb-9660-c75eb907c35f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18ad9252-e3da-4846-8577-c6aa7bbaa66e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00feedaf-f5a0-4564-94d6-d28e222813f9",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fc939ea-45be-436a-9ced-352856915d3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6aa42bf-c334-494f-83b5-156e59b7db3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b86f779-d667-4c99-96f6-8fabd6c1c88e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e0c89ba-cbee-493c-8a0d-6268daa14a5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9975f677-78e9-4d4d-8fc1-cb31fade4e02",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e64283e-740a-4605-aa64-01d5fc74e39b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0c6abd8-846b-4703-b6db-0d3b59397fc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fade84f2-777e-45a3-a497-2091e1d59115",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a295ef00-4bbc-4b6c-a4e7-676c9e8fd572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6123b9f9-9341-46d8-9ea6-838c720357a5",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8a80671-f244-4c90-9fa4-40f24b4d9c17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e112324-b4eb-4675-9a80-29e4eafb8759"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c543beb-8707-479f-a292-53112bbb6bc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd1d29c4-cc29-41a3-9c23-c77674cc6d2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8810adf-b558-457a-b02b-0101adf7d0cf",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "447e909b-9f38-4f90-88bc-830122d374e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "630ceeb4-5955-4d0d-a50a-f334d81609e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66993752-03cd-4806-92ee-70d9e231f28d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b7f3cea-6bd1-482f-8f2d-fd305b061c12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54e57582-bdae-41f4-902e-2239e4bae1e2",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6093e7e6-97d0-44af-b183-3cc53f32e691",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79bac9da-7245-4dea-ad8f-063164e6ee6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df12eaf3-bee6-477c-abd8-9f3b1073c948",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fda7b3e1-559d-4973-9761-6231117461aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27ddda68-6818-4337-9334-8a6bbcc6d251",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26322014-5f85-41f2-ba09-1772de22ca1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feeb0ef8-c197-4dc4-b806-96af0b50aaf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a996f6c8-f18a-48e7-8618-18a1093a87a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "493af64c-67ed-4c4d-ab3f-de303aa29bd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c82a230-eac7-4630-badd-041e96a6dd20",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d808e9b0-1e00-475a-ad64-46e92861407f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1fc2000-49b2-431f-95a7-1d27b2d69d5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0849dfe6-352c-4ad9-b955-ad0740d288e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bd5a8a2-16c8-4aa9-830c-dc4d37f31429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2db9321-62e0-4703-8684-34a043c8ef7d",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c87abd0-908e-4f8e-b0de-99d2174d2d1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3812941a-6687-468d-bb11-485f6a4e025c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d842440-e566-41ba-bb62-6e1eb54ea5a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9af3eaba-c352-4de1-a759-9f5f561be098"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f2a725a-3536-4951-b046-ed39c1dba26a",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b35e07b3-a1c8-466f-be7a-7ea49e9c38c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4523a64-321e-4620-bef6-28b31467e04d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bae18e0a-838c-499b-bf9d-58db3e00f899",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70245da5-41ae-4ca5-8149-20bea57b26e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fb2150a-6821-4c27-9d42-922e88f5a986",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "628b6ce3-404c-45f9-b473-b0275ad55eae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c7f3f85-6ea3-4686-a011-18ef69a9ec2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "743dc2e5-7328-4ba0-b2ea-cd2e26b823eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3f6b434-bcd1-4f6c-8771-76073969611d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a5d6855-7a10-403b-9d5f-3b6f0365da75",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87979ee8-b5e6-4d9b-ae5c-b88f3e09e272",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e5cd4f6-1a97-4a29-b8fa-1af35ab21091"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0529c98-6bba-49fb-b8e0-95d4c44a2840",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a07e555-ea27-4bd9-b4a5-14f1910576fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c177aaa8-5e59-4520-91db-84016c72bf2d",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bbe2929-bd62-4c78-8139-bdba7c4e9229",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a52155c7-5e34-47dc-92ab-c24b51bf876f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e06fe1ad-bee8-4c64-8cc1-4424a5504e41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f168e546-6dab-4cb5-b231-491a80a15a1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d15f6a1-bd71-422a-9823-a57024d07ced",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eb67886-4cb7-49d1-9553-55cba7127391",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41e2d5f0-fccb-42dd-9c9e-01ec24e59e47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13c0c230-b9f6-470e-93ff-14ffdc874245",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36784ba3-be1b-42f5-ae0d-7d3604bd7da2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33412e66-72e0-407d-8963-b8b3aa3a30e5",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bb8982a-3cd9-42e5-b960-7d804ebd079b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0313ad55-6fdf-4484-bfb7-390169d8c140"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3e79e15-0227-4af4-acb6-ae427f40dec1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4c66ae6-f78e-473b-a5b2-18510d12e64c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2a87640-1c30-46e7-aad6-c39b7e75c184",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8900a4d-2622-43c1-b4e0-155c908c8bc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfa36292-26e4-4b60-99e3-40ed0aa97aa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "966900b9-a73e-43a9-808a-8b74c3f0df72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af11371b-7e52-45bd-a9c2-4e362a301c06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc1df003-e553-4f30-bf29-925ec58eaeb3",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "402e1a43-da2a-4578-bae0-7e9917086f67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa88d77b-bc3f-404a-983e-0d50227645d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be8c6754-9767-4fc6-9c5b-1ecabefda3ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bcb61e8-c22e-4517-b841-9b89c83f750c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f194017a-9b3b-42bc-ac35-2675a6187d3f",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd2bec27-0209-4b0e-aa8f-78abca82c176",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96216bf0-6065-405f-9c1c-b962a5314cff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea9b1b9a-8b8f-43eb-9f16-5e360f8b4399",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44b619b0-a5ac-4bc5-aed7-401821992ecd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7254bdd-30aa-42e7-a872-294efc08e0f2",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb993a19-0cc7-4538-bd47-d6225fd07bf4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ae4c47d-3bf0-4559-9267-857567bcb556"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d9d8de5-fd5c-4caf-ac6c-0ae1fe5c1a2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eb7ed30-2104-471e-b15b-7ed7004fc70c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1be0c1a4-8857-40c6-8b9f-598c36c8af9b",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72ad757b-7008-4ab6-913a-a809b0e2f7c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5e3d1bb-69d2-42e4-9bcb-c216264d7831"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aae3aac-05eb-4bfd-8620-92ce0caf8e71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30ddae02-718f-4693-990b-51438481a423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ff90763-8baa-4cd4-aed0-66c793cc8f13",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d30d784-2cc8-4357-86a7-cd14b574fa88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48fedc15-e9d6-4869-a5aa-31e83409c307"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c42f1532-a2ed-466a-9a53-2d446d7f5937",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2336b583-86dc-483b-92f1-77aa2914c669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbf418cd-dc28-4b07-abb9-f4693081bd65",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afbc0835-7314-475e-934e-3b16a9332255",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8d95527-6a33-49f6-af96-352284f75dbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91ba535a-b1a9-421f-99ef-f3c638c30fec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1dec8fd-ba45-40e7-a1d8-d4954c6c4441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c43854c6-dcd0-4379-a1dc-41fa9eada67d",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c90a6937-3b4c-4a5f-8057-73594c759953",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c299aa0b-5c9b-4917-adeb-567826bba239"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b43ec89f-32b0-4880-b019-9d1e41201f42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70e763c4-4d6d-4065-93a8-ecf69d2c67ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af1d2d64-4682-449b-84b2-06703d674da9",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9d949a4-721d-4980-b36b-ed342969824a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "329fee3c-e075-4a62-91e4-557e51893f19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18a93331-23bf-4387-a0df-7ae3266132aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d259fc5-3ff0-4449-8744-3f58841eb95d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3232376e-7bb9-4504-bf57-9a245cc38624",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bad3376c-647e-4ef1-8f29-a70affe2b972",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f902bf4-5ce2-4498-b061-3d32c038814b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9780140-be9e-434f-a925-3b1a02f0adf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d13ae0a-fe84-462a-b087-e9d1205cf2f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7512af4-03c4-4081-85e0-964137c0ed70",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f69e7717-0f9d-4738-8ac7-6729400f468d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27b83827-59de-40f4-8b1d-8754d97be223"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9933987-5218-4695-bdda-b043c89dcdcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18209f2f-b0d6-4b8c-abfc-c9a2ed1b3333"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c878b24b-529c-4e44-805e-cee9b269e8d0",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b2435d8-cc18-4600-a517-76ea4ee124db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a089953-53f6-49ef-89ba-a89a0eff870d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "036bc6ff-2b7f-4b71-bc9b-1369b6632e24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80cb28d9-9e63-4134-8f23-ee60530e83ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f5d6a62-f060-4936-9447-09498aaedb50",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8efc72c5-9615-4f34-bfc0-b74ce1e84e04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ba8b203-d363-403b-a1b0-2eb5cebe8db0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3da9a56-852b-4e14-8fcb-a76ecc2fab59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e63e523-c63c-4bf1-8c18-86f7222abde1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68f109c7-b540-4d28-a43f-d047cdc74e1d",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7029dc65-677f-46f4-b195-6fc9c5f9eab8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b69b621-7c52-474c-b500-29fa3cfeab0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91705483-ccd5-4455-beb8-4f0b5a49f6bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a3178f3-d671-4970-bb81-1cdb1b381c48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "184223df-d576-45a2-b36f-c1f8bb655dab",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac29be98-8b20-4a75-8fa7-994a7d69e29d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77458aef-e51f-421a-a74e-4b2970867e31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6712deb-0725-455a-b744-ff967c2cae2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8427f005-5a13-4401-a00c-0322a3fb4abf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1627ceb1-9b5a-43c4-b1bc-1af891224b83",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "738c1eed-de2e-4f79-9912-f9ceed47aebc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c40ca736-e007-4e48-a5be-1b17518f2925"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ccce06d-21c4-49d6-886a-ae383605d17b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1672c3a7-a741-4ac2-a219-eae3817382e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3961d0ed-a69e-4143-9c44-95bb32ea207a",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e9699d3-6d84-4ea3-adaf-3796e511c17c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bb239e5-f1c1-433f-9d9f-35a5a31b1366"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "988df761-6978-44c9-889f-e0142b434ae1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2036b12f-d2d5-4165-8bf4-ec2c7b39180e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fc4fcdc-f261-4613-bdee-1e8e02deab7b",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec1b6593-c0a9-433d-b9be-49d7747eadd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8ae0115-1431-428d-b429-3582d6bb8364"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89448f7b-da55-4f6e-859b-c91126becffc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86178f55-e826-427d-bc5a-3293f835d215"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcaa325d-956e-4ca8-8d8b-587ae41513d3",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2340729e-74f6-400a-954c-edb98f01856f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9b1bd2d-1f61-4e87-9a9e-15cfdfd0af0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7112917c-3ef2-475e-8635-c4627c8f6cdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d469b6c1-7197-468e-b675-d12eef7a5a83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a71fb6a-55ee-4a6a-a8c4-1ac06f155e5b",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dca93c3b-3954-4a04-87c4-4cf432f9efb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b56d3a33-711f-4472-87fe-965ca3c1c910"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecd5979a-50a2-4696-a042-21b4cb508318",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f55272b2-ce4a-4c38-8131-65ed822ea326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f743b60-e335-4d81-89f9-1090261b18ce",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2550d8c7-a3cf-4868-94bd-7feb6e49dd8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c9a3273-7537-414a-b27c-ec37aed7ab1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08971765-910e-49ad-977d-27ef55f66ef5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6964dd53-54f6-4655-8f38-c471b52a3189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a4d26a0-ede1-404d-a997-17e708f648ff",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27699bfa-5cb7-4d70-a081-24573ee1a5d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0aaf1fea-8088-4ad1-9636-3fb99f664712"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bf41af7-710f-4cc7-9756-40cd44290bdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43b766dd-5d62-4877-b8e0-95c1c1c2d884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a7a9c11-ffe5-4def-ab3f-f03ed6a00835",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e55360a-e3e7-48ca-9554-275e66030f57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c625a9a-3e9f-4fb3-b4b3-c5789ce0569e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fae4299-b7f9-46ec-84e7-ac0df95b451a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3958cf0b-72e4-4929-8716-167805f1f2bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30d3cbaf-6ae1-40c9-931a-b9ee1c7b1126",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "340818d3-5d5e-4a27-9f54-a65ff1a36d1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2bba171-7d7b-4330-bbf8-83c36c924221"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40581616-7efc-4220-aa85-4991894def19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec61face-1845-49bc-80d1-7067db46be76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23d866b7-4ebe-41db-9314-8a8bcf294104",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "798edb3c-5306-4ad2-8cb2-651c285f344a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81fa65f1-3b89-4fe9-abba-485208cc9fb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96de629f-cffb-4b4b-9865-846f60a01cd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "291843ff-527b-45ac-912f-8034cf506e88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe4b3166-a602-4658-816b-92e38c448f97",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a12a876b-ab91-4326-9dec-fd59cdc42bfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ff83fc2-ccff-4ec6-904d-0ceae382378c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99498309-dbe6-4d3d-b063-7a9cc9fa5dcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07e52dbc-d93a-4778-bc30-1c922bda2213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7716dac-bc48-46a9-9506-a6ac76411192",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faf2588f-7019-4818-a80c-0412d31d285a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1f964e2-8607-4b93-9fc8-f56e4db0cf65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cda75565-bc69-4bbf-b22a-f3299706a79d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a37f00d-6079-4ff1-b4bc-e8649ef42531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0c3e8c5-0689-4ffc-a921-506c7a751af1",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d64215d-9d56-484b-a251-5ab95ced89c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dae2eb37-e412-4199-a7d6-01dbe0a26a84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eeaeee9-9039-47c9-8e76-f784119d88ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aba6ca0f-a5da-4621-9cc6-d1f7e6a5efcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2610042-7831-4985-b37d-f9106ce68f73",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3de6dd0-f504-4d6a-b59f-854b4dfebb7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1391bd4-d1a6-452c-9631-e017a610c468"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f3448cc-8a8a-450c-a3f0-e3a970142663",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9b00fed-4996-4dc2-abaf-6d34a881b432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "406fcf19-b92b-4d3a-9d5b-2098ee8a0d0a",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dadbe966-46f3-4760-86af-2883a0130e06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86a5e4e4-1725-4272-acb5-eb52605f318f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4fc6159-864b-4e56-9cc6-c5b2b1d650d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca3edbf3-320c-47a1-b1b6-9dd4abf171e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31a35bd6-1a76-45db-a30b-e8707529b224",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2464ed73-0474-47b2-b94b-1de330783841",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a4d0d8b-c620-4e11-9988-13da9f64ff7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0699f71-dc56-4759-a1f5-66af7caa6cc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdec3ed4-1afd-4a51-b2d5-40c94f0ec8f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b893e20e-202e-4184-a9a6-60bc24f55410",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ff848f7-910f-455a-8455-cb0ab190496d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e14a13c-ce69-436a-b4bf-0160f61eb51e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0498dd7f-fcf8-4125-9413-7c1323d6b379",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4024a8b8-a58e-4a31-903f-cb44c9b980ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30052782-63cc-4c3c-a6b6-bc1859cc7f20",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cde5523e-96e4-4a31-88f9-159150281ce0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "974fac0b-5b0f-45f3-862c-d68e5d77bc84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "659c75cf-a383-4d9e-a6ff-f63d5e440854",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e208ff7c-46ed-4ec8-8653-d6f95a7ce822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3c097e4-0db4-40b3-8ab0-6357e680059f",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea7bd5f-e051-434e-bcf2-dc966da050a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f7a3164-33fb-4f3c-b95d-ac30187da14f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c458e8c-9947-4391-8df8-4bf11ff582cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ba1d3b4-4be8-4348-b2c9-64e0c24a3e37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efd5221b-0994-4f2f-980c-a9c5082e46f3",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d34c5ce4-f9f6-477f-be5c-3b92c2339c3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c54b79e-9769-4bdd-a09d-b610bf7a39f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee347c68-bddf-4ab2-8abe-4aca16b4d678",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70dc7d36-5c36-45da-b6fd-1067eacf2e15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f8a6a49-94c6-42da-b1be-b43ff37aa06e",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d507860-344a-41d0-a50b-007c2a444612",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f284f45e-4a0a-4e70-a055-4be1f9426481"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b369844-9b4f-42b5-858b-283e98a00f46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1c0b46f-ec02-4975-8294-d6066778298f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d72b8031-6cb6-498b-a6bb-ca4495bd4cbf",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b54c9166-288a-4185-b450-2e157db781b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afae7d4a-d478-417d-801e-96c00e5d3945"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de2c4424-ec53-424f-819a-37f6ef4d6caa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a46252e-139e-4e47-ae8d-2e7c1c5089fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "712bde38-9e1f-4580-8c14-0a8301da0a9a",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dee93228-17cf-4b23-b20d-169ce32f6465",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f21ec6d0-d41e-4362-ac9c-d3d43ea34169"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1f21020-50fa-4e31-a0e7-ad9a612f2d2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "151725da-0c8e-4626-a534-1e9357ac431b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac390f6-1d99-476a-bb5c-f23e7e09860e",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93246e8c-c2dc-4477-978e-112f7a5dad87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bd1d27d-7cfc-4604-b2e0-ab0ede7ce712"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34242742-d0df-4248-9fc5-4526f28c7b64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34aed248-49a8-41c8-806d-600c7fab0073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc886aac-d1fe-47e6-bc9c-21f51ae7a626",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "889f24d2-3770-4623-8caf-3b04abe87201",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c15c306-69bb-474f-be63-d046bb0f9cf7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea948bed-0bf2-4cb4-88aa-7f65c064e41a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5194008b-ddec-4938-93d0-152b8ff88fef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47590864-3301-49f7-b0fb-ac968d28c3f0",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd01f299-dedd-493d-b31e-76e49c20defb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "991c51e1-80b0-4bac-8b40-51892a99cfbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68f26f1a-b0ad-4c27-b4c7-ce7c57aa8f9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ca30e6e-da07-42b3-9ff9-28e53e740b1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d1aa39a-a55c-46d1-b0e2-4a98dc4b1e5b",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e326931a-4122-42be-b37f-9388e3749cf3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f07a60a3-3c58-4671-8373-6f880609432b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "271fe687-a318-4410-8f82-2d8b6843851f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1f21c66-86cc-4a54-9811-b1b210307666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a3d5cdc-cdf0-4a80-871f-5724cd9447a0",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8207aa45-ea57-4fa5-8ba9-49b28190e29e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ab9c710-92bb-4ed0-bd38-61cbf4372bb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0916fb17-524e-4768-85b1-437236ba243a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8590975a-54ac-49ab-80cf-3019f4c6cae0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "767d8841-2d41-4f8b-bb87-1af3d97e173b",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5eef3df-77bc-4c25-99f4-fc053e1852e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e310b56-f069-46d4-b74e-40624655fe8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ece5461-86f2-4ec0-b80f-bba4ff158406",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c629108-1e4d-472c-8da3-5757b9f7f34b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2708f670-a9ef-4002-86c4-62ae99c2327c",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3486168f-30c7-4407-a9d9-97e6ac5a78c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6af405b3-1111-43cd-b7c5-a0042ac90f99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59f21f73-711f-41cf-a3da-97a95e73d782",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a74cf37-a4a0-4908-851f-7d5cee958f68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "465eb1ba-b7f9-4b37-a7e0-267128a9a29d",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20dabe1f-51ee-4a8d-adbf-a8ee2ae16444",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dfbd325-6ca4-4ad9-9222-34fed5f29f4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a996e879-b307-4e55-a1e7-eb5bf90197e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b027d6c6-227b-458d-a24a-c2a7d18f7d38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6234fb4f-056d-4301-916f-c3c5bba678ae",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9ce32cd-a452-45fb-8154-b095f214c14d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8feea91b-c2bf-4bcf-9d34-e95c2758c9b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a0838cf-538a-47d7-b947-45a01fbf6160",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d0a2396-46e0-4889-8392-df06747c8514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0c929b4-cd62-48fc-a6ae-b581f610a929",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7ab37ff-6f01-42a9-9ed1-6f205fd34e94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "455e7afd-6857-4212-a987-9ece81f73bc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "258e13ba-1928-41fb-9813-5efcb4e24247",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa92a81b-7065-42d5-82b7-19c12107fe4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7799fc0e-6b7e-43d1-950b-1f0efe1d68f8",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e2f564-9af3-4e9b-9138-28ce9463d175",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a556ea8-ecc5-4aee-8ff3-f536312f4f53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94a8226a-fa5f-48ce-846d-075e362fa7f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ca12355-fb2a-4133-af4b-5a593607acf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47ac5c47-330a-4e08-8fd8-0f2cd2abe4a1",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f0795b3-da26-469f-bd99-e097469bd863",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5a55db3-9899-4570-a5b3-5a285895144a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "966f5a33-0ea9-44b7-b077-9e3e1ac22ce0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3435763-af3f-4353-a1ed-4035a29dbbd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9aa7038-d32d-4f10-b3dc-7b7203cd51dd",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89560be9-5741-416a-8fc2-41a5dcd6d8fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d52150b3-3e15-4ad0-9280-a20a19de2b45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35a91931-d8ac-46da-bca8-ae127ce38b92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6345ac4b-afa6-4c3d-beb8-b75d2a219fd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82d92abe-1106-4a54-aab5-00533b7b13a6",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7571c7f-fbf1-45a0-8a68-dcc1a5d19ced",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "142e4e38-00b1-4890-b705-f2d4e3deed68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1d02241-c987-42b8-90f5-3b8c9388ead1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa1f12b5-c9ca-401b-ae87-fbdfa2f0fc38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d91e9c4-3f6f-45c3-ab34-8a6783548277",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c644da54-554d-430d-8c08-265c06a7873e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fb9ebac-7149-4282-981d-0bc52ab1924f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddc33e0d-725f-410f-99c9-c52fcec862a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "690c5626-f43e-4f5a-b2c1-f41d687a20aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c963c203-79a6-42f3-99b5-de8028e23a87",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98b0bd01-1f94-4197-9194-6778c93ce052",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cdc7847-118a-4656-9e46-75a8052e9806"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fff8e66-fc40-47eb-935f-0f1ea043f80b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "080da213-2695-4d8b-9854-191c2f7297d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67771b45-b9ea-4457-901a-48ffdcf069e4",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebdcebff-a764-4654-ac03-23929426f35e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98d8e29f-22a8-4e4b-adb5-6a37fa107469"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ffac056-9a72-41f7-93b5-3a9e9fa05a50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6eb3dff-90e8-4120-be78-54a7ba617df1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9bf7d03-a8b1-47d0-9a8b-b2f698c7e21c",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12764fae-5553-4cf4-8761-6a423270967a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2d451f7-0a21-43d2-bb83-79b8cf829831"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db3f624f-e74f-46f2-b8f1-0c400d8daba8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eee987b-89b0-48fe-8e27-d5c17efab32e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8be2e8e0-ed2d-40a8-a051-9fddc6e78da7",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef21b0c6-5aba-4eea-95d2-01e70cbc2f8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe14da33-78e9-4cef-9010-c9566218cd03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08b5b774-a0d7-4e49-8d2e-04d737bfc0ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a459b34-3a22-4c4e-b037-6a617200f2d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18ab96ce-4af5-4954-978e-485affcd92cd",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82717d33-cbfe-4b80-bdf8-2ddb1e5d213c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8343739b-f287-47ba-99ea-ae943009a85d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f8fc8d9-6f79-4348-a4b8-f5972ae3f5eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17b0cf53-8398-4f33-b88a-b0ae70a3b691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5f396e5-95ab-4ef4-9336-dfb109ea02fa",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4042479b-a6f6-433f-afaf-1988b3cac60f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39ec5e70-fa72-499e-a774-9ec93676a75a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5db67832-fa1d-4b0d-8247-2ad5ac4336aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2527e89e-a217-4ad1-942f-a04ce11f2684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fdac811-95bf-4dce-809c-b1d1a4f2898c",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cf0e9e7-24ef-4542-afcf-3a42cf0bc0df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7bc1c6e-846b-43c1-94b7-08da7c236f83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7882619f-77b5-414a-b0ef-5878206b171e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97ca9f85-53c9-48c6-9703-16724539987c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0219146-f091-4e3b-a318-4141fe950f46",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7901d09b-80b1-4269-ad2c-ae2f2486f283",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4968e6e5-5412-486b-b17f-19d477479dc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06e2755b-9fa5-4c30-b269-26b2e267aacf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cacbdae-84ef-4580-94f0-cefdef669755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0efcfe1-c15c-4234-ba7d-82e7e6a939aa",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7517554-cf02-4752-81b4-7bed413e9c83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1470b2ab-6c4b-4d9d-99cd-4d54b9fe92fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "052bf0d9-d5aa-4894-bc4e-e11443c66080",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e0b0d85-08f1-4a98-801c-1306018ae9dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24644ead-26f2-4e99-a79d-941bce252bf9",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52feff2f-e76f-42e6-821a-f620dfe5416c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5eb8205-5aad-4343-acba-77084286542d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93ead9aa-8619-4129-9bf8-3de42ab0c75f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c056059e-cd42-4456-b059-e259c1b55d41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7912925-1a43-4d5e-8c43-44eb69166f5e",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ce6ed65-40e7-4102-9f5e-3a3d2f7a16a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8405b5c9-2174-4c83-9198-bf4482010ce1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3bf9a03-2271-478e-852e-2affd7a6186a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a829406-8d89-4ed6-9484-2ea20ae0a537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e8aeb98-764d-425b-9997-363728620323",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bdff501-8ed1-4a30-a947-0d08bd3365d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee1b869f-741f-4ef5-9752-98b5c9a783c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90f7bbd2-a054-431e-bbbe-a71139541461",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59860bfd-9390-412a-b911-6f69b6cce157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc6bf049-797f-47e4-858b-0179160bf868",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed16ae17-6489-43e9-96a8-1cd7279c3b93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ec6c4e4-7320-419d-86eb-b4d01f93b1aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6a9449f-da48-49e2-a87b-7b0698261dfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e53562d-b428-4669-a9ca-868ba5e9f5ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5a34f08-fb8a-4f48-aaf0-1c33b5af6a44",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac2edccc-bbaa-4e2e-8a4e-24bdb096f46e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0e9e0a9-e275-4bc5-ba22-f54a9257d07e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "060ae385-5399-46a9-9b9f-fd56f4d0614c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adb53abc-9e17-460b-8ee4-97b533d05865"
                        }
                      }
                    ]
                  },
                  {
                    "id": "922db490-ee5a-4718-aeed-927f248aca7b",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d11bee7-e170-4d5e-a0e5-8b67899a30cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36cec23a-2581-488d-88ad-d92aefaf2dfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ade7b9c6-174d-4fed-bcb9-983b1a1f7f6c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0897ded-bd5f-4ecc-8e51-96c7f7cf8671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a59033e-f0b2-4560-bad5-814b98029e40",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc12c72d-b4ed-42d0-bab1-c11fd6e85b77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "661dfa81-6504-4c93-8dcd-a4f89ce145c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb460f68-d132-4faa-b5ed-f32a2fd736e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fed7e915-e1c1-434e-97f2-add0169aeae2"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "91d3cf59-68c2-499b-9293-f2b6e21ccb74",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e5b47292-6610-4497-a752-67243f485728"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c91dc5eb-0088-43b3-898a-01393627280a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a3307c7d-18a0-4159-a514-1db65a3cef73"
                    }
                  }
                ]
              },
              {
                "id": "5345a980-3455-48e6-b132-6b02b6ec2857",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c0cecd1a-9f82-40db-97a2-a9b68daed09d",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7e92051-2d1d-4a45-9d94-3428312477de",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "36374a59-1baa-40ac-9e82-66e28ff4f813"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05a9bd67-17dc-4490-8894-4a373dfb39a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0ac87df6-39fc-4981-b6bd-e860d23a5f03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18785461-ef42-4c60-9594-00bc84c03512",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59e9c205-a2a3-44d2-8e26-573bde6e8aff",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "15605a85-6dae-4e16-aefc-31596a99be5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e4088db-3d77-4e75-8578-7bc9b912eff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "24a00bcb-6d08-453a-85ad-f76222b36d28"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "01a9f55c-edd9-4415-93df-13c6d7cba87f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "63dbe452-8fc6-4f5d-bfa1-d15799d02b29"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b5ba869b-2ebb-415f-b0b1-1ef438133302",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "410a7611-7d59-45be-941a-0bc16b22dcfc"
                    }
                  }
                ]
              },
              {
                "id": "4e4c75f1-3376-4efd-b833-69a924762f33",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "8f2ac601-be9c-4046-884c-33b70666b96a",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e20d7e0e-d601-4829-8faa-4d508941ea0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "e47ef88e-a6f4-42d0-8308-49f5e99bb6ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "947e2586-8c2d-417a-9c45-7dc8e026a1e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59e7e872-22c0-4087-87fa-7907d211bc51"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ce7cf978-65d2-44bc-84ca-bb3ed673b607",
            "name": "Positive Testing",
            "item": [
              {
                "id": "58b39cae-7485-46ec-bb5d-b027105df9ed",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0609debd-2aab-424d-9cdf-6d2f870961e8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "103b730d-391e-496b-a045-3879525c12a1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0d787bd9-b54d-4ee5-932f-4b99021c318e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "085354af-1018-4768-9fd2-4d10867b7f7d"
                    }
                  }
                ]
              },
              {
                "id": "3650c06e-df5d-47f0-b0d2-e9139e7b1505",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6099087a-9b8c-4e73-9596-5602c8ae1575",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "376bb256-f033-4803-a0e8-3d8bd80e3e51"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5ce52992-da62-4c49-981b-7cd6bbb74ce7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca4489e2-6799-43bb-8a8e-90059f2ac0fe"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "20e30998-e0a4-47b5-8d80-d0613d01f5ee",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "dba41ccf-8448-4aa0-8739-bda138dbeb21"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "96a47d28-53bb-4497-b586-b5b3437de2ee",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "494755d9-757d-46fa-8167-e6a98bda1ee1"
            }
          }
        ]
      },
      {
        "id": "91252d07-f712-4c28-81a6-21b60ef3f901",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "65648fb7-2c0e-4d6b-9294-0ffc7ad076d7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b719f963-4312-4795-95c3-8b933a02dc76",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "85134f7e-3a71-4842-a6b2-f30c1250f588",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e75ec53c-a9b5-4cef-b5b9-891e51c1b034",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "68a9ec30-b381-4f65-b272-e7b3689abb23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e65fc13-953a-4e91-9bb7-ef3cf58e6165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ad11099e-112b-4882-90a5-ec0886c6ae46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e490003f-869f-46eb-ae0c-625183a68dfd",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceaaedd3-5751-414a-a385-9807c8c0303a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "932dbc37-a769-46d4-9cde-978f62f93192"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9852ab5-1cef-4025-8b85-109fad57aa5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4240c789-2af3-43c5-9465-38a3050a79f6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7a6e00f4-9307-4961-9070-65678987887c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8d20809-a700-41cb-a4a4-a20ec897d1df"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "53a4370d-6d26-46e1-8270-06678db721a3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3cb8f373-e13d-451a-a39d-1c9a0d735bb4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8c9f8c18-3400-47c7-8893-dec6876be7ab",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "51a8ef7f-5fd8-4952-a3fe-657327ba18dd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4aa00137-4a77-4a97-bbd0-fd94ce832f00",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4856a311-0cd9-48eb-b24f-457befb0de30"
            }
          }
        ]
      },
      {
        "id": "8a520927-54e0-41f5-a92d-3933b4211a49",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "76e98612-d95b-44ce-8b9f-1b509f78ed27",
            "name": "Negative Testing",
            "item": [
              {
                "id": "968ee1bb-e7ae-4d93-9d6f-7c88358c7060",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b26eacbb-b0aa-4610-b27f-abc450d83bc2",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb85cf3e-8a49-4dd0-a2cd-da17be5abf45",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "becdfda5-98b1-4917-8545-04cde01f686e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbdac7fa-9918-4b91-ae90-5379c5341892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7e630b8d-0f83-4df1-8d28-c836a1b66e6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f3321a4-091a-423d-b2fa-fcf4a91cd4d4",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fdbb413-5525-43c7-823d-892248affc44",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0f0505d6-6f71-431f-add6-9c6a06bb0e1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb6baa17-c3ce-4c80-b8f1-dc323fc0cf52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "06c5a6d8-2390-4563-94e9-6fa1e598d52b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "577d2bfa-401f-41fd-9d0a-bd5dec01c8ba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fcde2a37-f93b-466b-b115-01acd26dc58c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "188a08a8-736e-4823-bc95-1ceeba16ae53",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "356a0f0f-5c44-4381-9d2f-fe4a374fc5ec"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7a8c0a6e-a9f5-4c28-8ef9-035bd1083f14",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "59921fa2-26c1-40ec-b5ce-954707324706"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d572a5f2-32a4-404f-a844-9e51b275f548",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "18bc17a5-e445-4062-ad7b-78a037ea5780"
            }
          }
        ]
      },
      {
        "id": "1991f281-b6d7-4c7c-ab5c-6a7a03db7db4",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "f2947b9a-c889-46ce-af6a-a7f743da8b83",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ec98f907-6b6b-4122-90a6-9f8cf79d68a7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fed643f6-7c45-4997-8188-44de7dce2415",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bf0d463-ac0c-43a5-8061-e62145207d4e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "45aaf5f8-8c4c-499a-a15b-4c6a7e38fa1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3b91137-8281-4f4f-acfd-9f90d2f1f471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "03e143d8-6ccd-4226-820e-dde3a4506046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5b73cc0-264d-4ff3-90b5-df0f2d51e3f3",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "772bca6a-7e62-48d0-a776-6973d50c3c53",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "cb9da17e-4143-4c5c-888c-643a4576c8f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cc33db6-0be5-4570-b8df-e216c50b54ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6282c5ef-7dc9-4c56-a389-07619ec1b27f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f12b9045-d8a1-4580-a90d-d7f36354609d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b1ffa6a9-0b38-42d9-a9bc-4c54083d334a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7df7eae9-d6ba-48c2-b621-ea385211313e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "83557073-a7a9-49ee-b914-17768e404519"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "57d7b08e-bce6-4534-b3e2-75d7afdfbcc8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d1b78a5f-8da5-4a22-8221-48721dd70177"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9ab12524-4c9a-488c-bef8-dd1601abcd87",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1bc7c53d-b114-42da-96b6-159c5264a951"
            }
          }
        ]
      },
      {
        "id": "f7e3c8aa-3ff3-4414-b720-c07670c355cc",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a46ad8b9-88b6-4298-a932-9e938a514e12",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4a33147d-a325-462c-a47c-752b8e051b74",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "e0e80f72-d3a2-484d-b332-620aab27a1e3",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "adb359d6-5ae9-49ec-b73a-cd8b884a0fb1",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "76ee0a2c-6058-4b88-8473-b2eae9d0bea3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 147.02671755725197,
      "responseMin": 8,
      "responseMax": 1031,
      "responseSd": 162.35672266045032,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1672187841519,
      "completed": 1672187894479
    },
    "executions": [
      {
        "id": "37672715-c844-41fa-8518-e3eac63aef73",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "7de0f6e9-7c28-4c29-8a42-ac0ad33c10a6",
          "httpRequestId": "7907bf20-e2db-46e0-8251-2d2293d224ec"
        },
        "item": {
          "id": "37672715-c844-41fa-8518-e3eac63aef73",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "4be427e3-8632-4607-b332-724b5ff8fb3b",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 0
        }
      },
      {
        "id": "e4f19688-99e4-4cbe-96b0-83b8cbf5ff02",
        "cursor": {
          "ref": "b37bb3be-0596-42c0-8400-431dc1771f1c",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "3d165338-a57e-4a0f-824f-3b7fd3628c75"
        },
        "item": {
          "id": "e4f19688-99e4-4cbe-96b0-83b8cbf5ff02",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "6dcc62b0-324b-42d2-a355-2787b9cdfb5c",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "45d5a0e4-91b1-43f1-bb49-a29cee11ef1e",
        "cursor": {
          "ref": "1d52b19c-1723-449a-b572-ba037e566dde",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "bd6cd20e-b22f-4ff5-be29-7a349266768e"
        },
        "item": {
          "id": "45d5a0e4-91b1-43f1-bb49-a29cee11ef1e",
          "name": "did_json"
        },
        "response": {
          "id": "8dec3376-8a3d-4612-a1a4-7909a3e57c02",
          "status": "OK",
          "code": 200,
          "responseTime": 266,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44e17900-7156-4a3c-9901-3aa09ea5f55d",
        "cursor": {
          "ref": "39639781-029f-4aeb-99e3-ade578ca57d0",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d5f41575-bc28-4c79-9bf1-cbe4c1582033"
        },
        "item": {
          "id": "44e17900-7156-4a3c-9901-3aa09ea5f55d",
          "name": "did:invalid"
        },
        "response": {
          "id": "7fe48c0e-6cab-4e06-ac35-dc7928964a4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44e17900-7156-4a3c-9901-3aa09ea5f55d",
        "cursor": {
          "ref": "39639781-029f-4aeb-99e3-ade578ca57d0",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d5f41575-bc28-4c79-9bf1-cbe4c1582033"
        },
        "item": {
          "id": "44e17900-7156-4a3c-9901-3aa09ea5f55d",
          "name": "did:invalid"
        },
        "response": {
          "id": "7fe48c0e-6cab-4e06-ac35-dc7928964a4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48281793-2dc5-4e60-b058-92e1fdda298c",
        "cursor": {
          "ref": "2c1f1d7d-8e7f-468f-b87f-4d7bf7f5e7ed",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "56d5ca14-51d1-4236-8732-27c24723cb30"
        },
        "item": {
          "id": "48281793-2dc5-4e60-b058-92e1fdda298c",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "a302778a-3115-4c44-9226-a2d1297c916a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 121,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32fd65ce-1579-45a1-9f75-6efe3295bba6",
        "cursor": {
          "ref": "563c7340-3173-4746-bcc9-ee1385d7543e",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "38831c47-08c8-4917-aecd-ef7fcee74e15"
        },
        "item": {
          "id": "32fd65ce-1579-45a1-9f75-6efe3295bba6",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b83bc8c1-d9bb-4c5c-a92b-281d497806a4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 83,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "451220ad-cb42-4e96-9488-48480917c2ec",
        "cursor": {
          "ref": "28b84a9b-1bdc-404d-9ccc-f2b4c39ade5f",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "7c62839c-1180-4de4-a15e-5d85804beff1"
        },
        "item": {
          "id": "451220ad-cb42-4e96-9488-48480917c2ec",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ea81a0e1-8b42-4d1f-9188-5e7797fc458a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5464948-78cd-4b77-9f8f-ad6d7514eeb5",
        "cursor": {
          "ref": "389529a3-e36d-4bc6-99d2-a1abca64fc93",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "208f0690-f993-4799-b1c6-40e9a8f54c41"
        },
        "item": {
          "id": "f5464948-78cd-4b77-9f8f-ad6d7514eeb5",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "bb89a6fc-237d-469b-ba2d-0b1b056809a1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 83,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5464948-78cd-4b77-9f8f-ad6d7514eeb5",
        "cursor": {
          "ref": "389529a3-e36d-4bc6-99d2-a1abca64fc93",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "208f0690-f993-4799-b1c6-40e9a8f54c41"
        },
        "item": {
          "id": "f5464948-78cd-4b77-9f8f-ad6d7514eeb5",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "bb89a6fc-237d-469b-ba2d-0b1b056809a1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 83,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e960d2fc-6837-4517-a052-be0d475ef317",
        "cursor": {
          "ref": "106c5f25-eec5-4f13-b273-9adf31ca6cc3",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "50640873-425a-42e9-836f-bfdbe92fbb8f"
        },
        "item": {
          "id": "e960d2fc-6837-4517-a052-be0d475ef317",
          "name": "identifiers"
        },
        "response": {
          "id": "308b0cb2-0d55-4257-9532-b6b0c10a187b",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50b9d8f6-3ffa-4a4b-9a26-3f02e659c470",
        "cursor": {
          "ref": "4b287a49-74f0-47e7-ba8d-8af74922e418",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "acdbedc5-0ecb-4566-9838-eefb9b73f175"
        },
        "item": {
          "id": "50b9d8f6-3ffa-4a4b-9a26-3f02e659c470",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9941cee6-73f5-4bfb-b53e-6bf6583ec09b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50b9d8f6-3ffa-4a4b-9a26-3f02e659c470",
        "cursor": {
          "ref": "4b287a49-74f0-47e7-ba8d-8af74922e418",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "acdbedc5-0ecb-4566-9838-eefb9b73f175"
        },
        "item": {
          "id": "50b9d8f6-3ffa-4a4b-9a26-3f02e659c470",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9941cee6-73f5-4bfb-b53e-6bf6583ec09b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5d0b0e8-ab39-4b8c-922c-d9ddd326f2b6",
        "cursor": {
          "ref": "abcb11ea-f780-4774-b6ab-45f2ee9366a1",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "40e0436d-2e53-4a99-97f2-6b7e930b2e2f"
        },
        "item": {
          "id": "d5d0b0e8-ab39-4b8c-922c-d9ddd326f2b6",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "a077a6ea-0237-45fa-8440-698747934f64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "075ead5e-ec78-4363-9688-d4a24789d7f3",
        "cursor": {
          "ref": "2ab1eafe-f6d0-4294-ae38-218dab275730",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a01bb4be-f5f8-4eed-adca-1f13d7fd250f"
        },
        "item": {
          "id": "075ead5e-ec78-4363-9688-d4a24789d7f3",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "7b82007b-67b1-4db6-ad87-90e485f9a349",
          "status": "Created",
          "code": 201,
          "responseTime": 673,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "c57add56-2f3f-48e8-bfbc-316ce87e38fb",
        "cursor": {
          "ref": "aa92a6d6-2ce3-482e-925d-ecc88ae38477",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "d4a17625-5e3d-49dc-b8e7-81e9d31cb39a"
        },
        "item": {
          "id": "c57add56-2f3f-48e8-bfbc-316ce87e38fb",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "6c7df4d6-14e2-4cdb-b026-ead08a5b3ed8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe03ddb6-5840-443d-ae43-e8eb7ddf6876",
        "cursor": {
          "ref": "d48a4def-642f-40e0-ae8f-753dc61e7bb6",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "5b2bb107-6368-4529-a65f-f60131c7be96"
        },
        "item": {
          "id": "fe03ddb6-5840-443d-ae43-e8eb7ddf6876",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "c35a5522-cb25-4565-ad78-b4f3b19922fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a38932eb-a901-4338-a2a5-ac3e99382b11",
        "cursor": {
          "ref": "4b5c2539-54ea-474d-b5a8-8dd78e70aa92",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "92dcea89-b41b-42a5-a494-937540b06ace"
        },
        "item": {
          "id": "a38932eb-a901-4338-a2a5-ac3e99382b11",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "63a5203c-d0be-4328-b3b5-0351e5654c8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "890f2cd0-bead-43f9-8117-e31290fe860b",
        "cursor": {
          "ref": "5f146830-0385-4240-8a87-2e7bb293d2a4",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c3fdfe86-9ff5-4254-8f54-cf4bf52c44b7"
        },
        "item": {
          "id": "890f2cd0-bead-43f9-8117-e31290fe860b",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "c6136dd1-3428-4547-95a8-e950f1b88c0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1c4ce16-eb20-4cb2-a4f8-bfb1bf009a77",
        "cursor": {
          "ref": "fdda7496-20e9-4d98-b7ec-49645d1ed110",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "3614194c-5aa5-4a17-9123-9f90cf386761"
        },
        "item": {
          "id": "c1c4ce16-eb20-4cb2-a4f8-bfb1bf009a77",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "31b65925-dcc4-4675-83f1-5c9e018d6267",
          "status": "Created",
          "code": 201,
          "responseTime": 584,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "ce95c5b1-8590-43e8-a890-11deb582bd72",
        "cursor": {
          "ref": "aebbd660-9a99-4f94-ab57-18b3eddb487e",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c426ecc3-dc70-4dfb-89b8-3c66be7aaf7c"
        },
        "item": {
          "id": "ce95c5b1-8590-43e8-a890-11deb582bd72",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "514a439c-6654-43d5-9c10-20f2b069d85d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9128228b-3b30-4f78-b14e-aa56874d1dba",
        "cursor": {
          "ref": "17f19d39-0a59-4adc-bb7c-7ec5a3c1b3cb",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "05909b52-f6c6-41b2-b863-6ecb7d6e09bc"
        },
        "item": {
          "id": "9128228b-3b30-4f78-b14e-aa56874d1dba",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "ac45082e-d2ca-476d-abc6-0fa3621fc856",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25a9b69d-04ca-4d79-9cf0-da9c9f180e04",
        "cursor": {
          "ref": "60b7d8b2-a954-4431-9939-08e32b71b91a",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "1ff1192a-fb18-40c4-9e49-94ceba9e3df9"
        },
        "item": {
          "id": "25a9b69d-04ca-4d79-9cf0-da9c9f180e04",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "5a56e96c-3fc5-4211-bcbd-6862e46cca74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "784de336-08aa-4536-86c5-f697d0d4a3b8",
        "cursor": {
          "ref": "aae32d1b-b716-4388-8dd4-986452452026",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "2867317c-95c5-40ff-b841-bdd9a7044965"
        },
        "item": {
          "id": "784de336-08aa-4536-86c5-f697d0d4a3b8",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "a95d6a7d-1c22-4dc2-9320-591b6f91f4ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81025a79-213d-425c-a42d-50020a9b5543",
        "cursor": {
          "ref": "6cb2785c-589d-41ee-bff8-9c97d5deb9db",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d3afb56b-46cf-4d8f-b608-e3bd63377bc2"
        },
        "item": {
          "id": "81025a79-213d-425c-a42d-50020a9b5543",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "330eff40-195f-4c0a-b9a5-6e0c4108c3ed",
          "status": "Created",
          "code": 201,
          "responseTime": 582,
          "responseSize": 735
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "67a4fbe4-eb6a-4f82-9b61-772fefcfef60",
        "cursor": {
          "ref": "33ab756f-003a-495a-bbb5-e05317217e47",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "1e89c7af-6f92-43ed-88d5-9d933f0b537e"
        },
        "item": {
          "id": "67a4fbe4-eb6a-4f82-9b61-772fefcfef60",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "1fd517e0-c951-4036-b92d-5ceb17b202d6",
          "status": "Created",
          "code": 201,
          "responseTime": 1031,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "3c9a7284-c62c-4cab-95ac-c7cb718a11a5",
        "cursor": {
          "ref": "812d63cd-f2f4-42f0-80c7-863d252c63bd",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d1f6b1af-d3fe-4833-b650-05a4d58a2dcc"
        },
        "item": {
          "id": "3c9a7284-c62c-4cab-95ac-c7cb718a11a5",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "ed3119b1-802d-49b3-9e6f-ff8e7beeca48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0c0c73e-9532-47b1-8052-10ffc7b8fd8f",
        "cursor": {
          "ref": "b8318341-dc3d-4bb2-ae34-2ea760e15a31",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "368a87cc-724e-4530-8368-0e5083f56337"
        },
        "item": {
          "id": "e0c0c73e-9532-47b1-8052-10ffc7b8fd8f",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "3a08de9c-673b-4223-a8ed-9da0c2b97083",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6484871-f720-4af4-8cbc-d74869177c43",
        "cursor": {
          "ref": "0079c7e6-6efe-4bbd-a476-542e31805512",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "941e08c5-f584-4d9e-8563-0778938f690b"
        },
        "item": {
          "id": "e6484871-f720-4af4-8cbc-d74869177c43",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "9c4d068d-f7e3-4e5a-a11f-58779c908ce8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "468d35ec-cecb-4859-9c24-4d97e435e02f",
        "cursor": {
          "ref": "3d516072-eaf4-4859-bd54-f74fc015f75b",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "b98ae144-ac95-4267-8f24-1fd0ae82c527"
        },
        "item": {
          "id": "468d35ec-cecb-4859-9c24-4d97e435e02f",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "4e705da1-2d22-44ad-8752-c4d3be039e99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c695f344-4e4d-4ca6-ae12-f5d6f09aba5e",
        "cursor": {
          "ref": "b465edb6-f6a4-40bb-83c1-4598159fe8a5",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "7b0958ac-b5d0-4edc-9af7-a4b4b6e29fb0"
        },
        "item": {
          "id": "c695f344-4e4d-4ca6-ae12-f5d6f09aba5e",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "6cb9c3e3-bc3b-4f01-8497-014e306d0928",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8d8f99f-88c9-444a-b102-f8989c79c86f",
        "cursor": {
          "ref": "b77dc729-e522-4073-8ba9-4861da5e2a99",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "f9d821b0-bb14-4aa1-bd76-1e920c11a4ef"
        },
        "item": {
          "id": "f8d8f99f-88c9-444a-b102-f8989c79c86f",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "4ae35d06-aefd-45dd-a03b-191f9913ce1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b143627f-372e-4f19-81c2-3c9017adbb63",
        "cursor": {
          "ref": "1a3435c5-67cb-469a-80a8-ca70e1bd36e6",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "188aee57-139c-4fbe-922f-7b3d299ae888"
        },
        "item": {
          "id": "b143627f-372e-4f19-81c2-3c9017adbb63",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "4132b111-16ed-4205-be45-209874296f36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e58d861-9b19-463e-aa96-e7ea20daae7b",
        "cursor": {
          "ref": "4983b220-0394-4346-b4fc-fd72e6e2ea77",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f262afeb-e708-41b0-93a8-146e75baef12"
        },
        "item": {
          "id": "3e58d861-9b19-463e-aa96-e7ea20daae7b",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "7929545f-5f8f-4599-a7eb-d2b1340a18b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59910be4-f191-4991-950c-16ae06dece9a",
        "cursor": {
          "ref": "c8e63ee1-e60d-4a73-b5e9-9c98b5683938",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "d6c3aae8-d644-4f79-b65e-0ee77a78ad69"
        },
        "item": {
          "id": "59910be4-f191-4991-950c-16ae06dece9a",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "96b12d06-4bf2-425a-a5ac-773e69481fff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ced8ec2-fc40-4ca6-a612-75d26951591b",
        "cursor": {
          "ref": "639a664d-1742-4e89-b043-4db7098ac98d",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "54ca1daa-48d1-438f-bcba-68ec62f4da9e"
        },
        "item": {
          "id": "5ced8ec2-fc40-4ca6-a612-75d26951591b",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "1909c6d9-4416-4538-a8b1-84e51f42011a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ff96c62-dfa8-4102-adc3-32e3a7424b1c",
        "cursor": {
          "ref": "b3fed471-1bd8-4a56-9b06-19f632913960",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "2903ec5b-dc66-48c6-8dd9-e616ea08fd5c"
        },
        "item": {
          "id": "9ff96c62-dfa8-4102-adc3-32e3a7424b1c",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "97d27823-ca0e-41a4-a8e9-6cf307411023",
          "status": "Created",
          "code": 201,
          "responseTime": 706,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "07ccba50-42f5-4b06-99b1-4270b52df2ac",
        "cursor": {
          "ref": "2cb6e196-3054-426e-b3ae-23f4db635762",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "fe01fb4d-b772-415d-899f-4f61e93e0b02"
        },
        "item": {
          "id": "07ccba50-42f5-4b06-99b1-4270b52df2ac",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "72aefcfc-acb9-4445-9561-b8a132b25b31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1354f7c-8aa7-4967-909b-37aeabe11dc2",
        "cursor": {
          "ref": "ffddacda-dcb4-44d5-b889-5f9b7bcd4cee",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "b3d8b722-c4cf-4b72-b1a3-868a59bc42ad"
        },
        "item": {
          "id": "c1354f7c-8aa7-4967-909b-37aeabe11dc2",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "4a6c703a-2048-4d3b-b542-f0d5db436981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa2fbccd-8f20-4923-923b-da32ba940006",
        "cursor": {
          "ref": "c92dadfe-8d47-4001-b8f4-f732bea14670",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "d6af1810-5c46-44c7-95ad-1bf2de64d387"
        },
        "item": {
          "id": "fa2fbccd-8f20-4923-923b-da32ba940006",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "fa748387-9f67-461a-852a-9e71b403e5f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26657b1e-6982-4743-983e-e46e9b72fe9c",
        "cursor": {
          "ref": "a86b99c5-27ed-4a56-938a-963655faccbf",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "a003d25b-7dda-4233-9ac3-909c7b1956bc"
        },
        "item": {
          "id": "26657b1e-6982-4743-983e-e46e9b72fe9c",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "df584176-e47a-4948-a299-154e7a22c68c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe4cc516-0019-4c7e-adee-129b40108011",
        "cursor": {
          "ref": "3ce248c0-ab0d-421d-9596-20c79ef9a9b4",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "779d7c1e-9c22-4884-af14-7d1625d137fa"
        },
        "item": {
          "id": "fe4cc516-0019-4c7e-adee-129b40108011",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "097323c0-454a-4c25-93a1-c7dcbfde79bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4b708cf-718f-4d28-9125-c569eb5f1c71",
        "cursor": {
          "ref": "5aedee12-ebe0-43d3-ad19-351e86da9726",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "da710b75-5be9-4330-864b-487b31c492e7"
        },
        "item": {
          "id": "a4b708cf-718f-4d28-9125-c569eb5f1c71",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "e7e91db6-0f6c-4c96-8fa5-8cfbd8dd7382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9db5866b-410d-4c9f-a83b-9ef97bfc27d5",
        "cursor": {
          "ref": "645289ad-6854-48a6-bd02-71ce239785f0",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "828deb00-faaf-458c-8478-5e55e9a46769"
        },
        "item": {
          "id": "9db5866b-410d-4c9f-a83b-9ef97bfc27d5",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "79b12822-5094-4332-8be6-6c41756eaa3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95372e6d-6d7e-40e4-a5aa-f277a3afce66",
        "cursor": {
          "ref": "33d669cb-efee-47ef-81e0-4ccd5aac5165",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "a3d34ed1-3f01-43a2-91a1-2d6cecdab0f9"
        },
        "item": {
          "id": "95372e6d-6d7e-40e4-a5aa-f277a3afce66",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "eac242bf-6639-486e-a001-3c9b2b0f8c88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9efd89a9-d30e-4485-a940-4327d192059b",
        "cursor": {
          "ref": "3b073063-ae20-4e10-bb97-6f966d51b882",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "6e22fbe3-44e4-4b21-bfe2-326141710075"
        },
        "item": {
          "id": "9efd89a9-d30e-4485-a940-4327d192059b",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "d1e5a571-b7ed-4031-8a7d-93ea81f50089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e0501ab-4abd-4644-b5b6-224878f6a25f",
        "cursor": {
          "ref": "dd25e177-ef77-443b-aca1-e5408039584d",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "1dd26574-1c24-4afa-a117-5acb5e2497e6"
        },
        "item": {
          "id": "9e0501ab-4abd-4644-b5b6-224878f6a25f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "a636af6b-70b0-418e-a578-afe097ae2d9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cddf7bb3-e1d7-471a-abb4-fe2eaed5c48b",
        "cursor": {
          "ref": "09c7b82a-fe5c-4684-99cb-659bc907768b",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "2bb65cc1-6cea-45c5-890c-44e5db9c34fc"
        },
        "item": {
          "id": "cddf7bb3-e1d7-471a-abb4-fe2eaed5c48b",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "f9748a74-269b-4ff8-8990-9287913d6a1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56e51af7-8786-4e13-9906-58ee6ddcefc4",
        "cursor": {
          "ref": "75144038-527b-414c-b9c4-6b7fd963f501",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "70598eb7-a500-427e-ad3f-df53cfb339f2"
        },
        "item": {
          "id": "56e51af7-8786-4e13-9906-58ee6ddcefc4",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "6835890d-2770-4482-bec4-41bf97bc4f6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a533303-d5f6-4335-9b9a-2bade1969cab",
        "cursor": {
          "ref": "0128833d-3e2d-41fa-8d69-c1c1e76cffab",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "989ea970-a628-4724-8bb3-f8f69a4b6875"
        },
        "item": {
          "id": "8a533303-d5f6-4335-9b9a-2bade1969cab",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "a8522904-cc90-4e4c-9ac0-25d6d1c6d7f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 378,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "f0bdf367-c1f3-49b0-a1d4-6c88eb5a39c6",
        "cursor": {
          "ref": "c68ff2c8-8906-42ea-ac15-276fb3c2cd34",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "cade2ee5-906a-446e-a3e1-efe22e97c7e5"
        },
        "item": {
          "id": "f0bdf367-c1f3-49b0-a1d4-6c88eb5a39c6",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "08815b1c-d285-466d-b7f8-588c80f0af2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e267a687-8541-4ed4-85e0-3282f6acf195",
        "cursor": {
          "ref": "6502a4fc-b1ca-4e72-8380-733e954f7bf2",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "a3536164-f763-42ab-aa37-0c4b4f61dcb6"
        },
        "item": {
          "id": "e267a687-8541-4ed4-85e0-3282f6acf195",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "5fa49248-85c8-4943-987f-344fbec2cba4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c2a2245-f391-4bfd-b98b-7e782c04b97f",
        "cursor": {
          "ref": "ce3ca184-0f27-403b-9eca-a3e018160626",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "399c30a9-4ece-4660-a636-3579aaa8c12a"
        },
        "item": {
          "id": "1c2a2245-f391-4bfd-b98b-7e782c04b97f",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "34b1a2e3-406c-4463-99e7-afdba50d22b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efe89c31-ce39-4760-82ae-9d80ef42522e",
        "cursor": {
          "ref": "68c2030d-e29a-4fae-9865-589c22f19007",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "fe73a908-6637-4fda-a8c0-8c3de8591cfc"
        },
        "item": {
          "id": "efe89c31-ce39-4760-82ae-9d80ef42522e",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "035db02b-9ba9-42c6-8cad-b6ea6defd719",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c825e89-e814-4c00-a5af-db035fb8e28a",
        "cursor": {
          "ref": "f0b29866-19de-4920-b8a9-0d559dab7b80",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "b379170e-755b-4b1e-a89f-04c427856137"
        },
        "item": {
          "id": "7c825e89-e814-4c00-a5af-db035fb8e28a",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "76481da9-a598-4a0d-979b-931a58ada531",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3798261-edb2-4b08-9eb0-978d810c4961",
        "cursor": {
          "ref": "981df4ab-b3d4-4d61-8127-af2a76fc7566",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "1cd28d2d-2a73-468e-8854-a044aa95bd10"
        },
        "item": {
          "id": "a3798261-edb2-4b08-9eb0-978d810c4961",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "d4722dfb-4da1-41e0-b71e-a89d663085fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbeb736a-bcb1-4593-89aa-fa64b5ad0cc8",
        "cursor": {
          "ref": "53b789b0-e85b-4581-b519-4f24f743dace",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "8a87e66b-51bd-4801-99ea-abcc5c39876f"
        },
        "item": {
          "id": "bbeb736a-bcb1-4593-89aa-fa64b5ad0cc8",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "90db5bb1-78d8-48dc-95ab-bb89e1682293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 399,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "c7e5cce7-a85a-4587-921b-46cf0413d3f9",
        "cursor": {
          "ref": "53572fbd-1e82-4daa-ac55-43dc1d0ec78b",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "2c604905-a38f-4da2-b6f5-51954bf20309"
        },
        "item": {
          "id": "c7e5cce7-a85a-4587-921b-46cf0413d3f9",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "37356998-44db-43c8-91ea-a5f09e3d4044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6308c73b-e26e-4d7d-8a87-d4abb1d193b5",
        "cursor": {
          "ref": "9376edd4-ebaf-4789-b529-62d998e3a697",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "12e3dce6-ec9c-4f04-a5b5-98e8be21a951"
        },
        "item": {
          "id": "6308c73b-e26e-4d7d-8a87-d4abb1d193b5",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "761e92d7-abfe-4362-b7d0-2eb737b18c19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "848f914d-061c-48ec-86fa-b4fafddce6fd",
        "cursor": {
          "ref": "b4b5c3e4-072c-4041-9548-a905be865277",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "757d4893-5080-4ce9-8acf-9f222a25ca27"
        },
        "item": {
          "id": "848f914d-061c-48ec-86fa-b4fafddce6fd",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "1f2af96f-4ed5-4c64-ac25-4207ec268b57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "534dc899-455f-45ac-a62a-473fe780eab6",
        "cursor": {
          "ref": "2367d777-e54d-460a-8b37-0f96d7126876",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e3e7186c-613f-4cf0-a9fe-8d04faecceff"
        },
        "item": {
          "id": "534dc899-455f-45ac-a62a-473fe780eab6",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "f52c7f86-8ecb-4563-8c70-462e72830f50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "268289f0-9b43-4cac-b427-42130009e31c",
        "cursor": {
          "ref": "bcdfec2a-a1b3-4ba7-85a9-4c94b166d417",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "5447307d-348a-4787-be91-2e1c8748fd03"
        },
        "item": {
          "id": "268289f0-9b43-4cac-b427-42130009e31c",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "fb63886b-6993-422f-b1c1-198f5349d67d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e6b6866-04f4-4bc4-b9b9-a791bdf9dfdd",
        "cursor": {
          "ref": "1852c8bb-2209-47da-89bf-691054b5a4a4",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "54c07fb9-5ec9-4ce5-a567-1521893d2f6c"
        },
        "item": {
          "id": "9e6b6866-04f4-4bc4-b9b9-a791bdf9dfdd",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "d8ebe75d-7017-49ad-a453-93276b55b7eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b84f6468-106e-48b2-a378-e56d84d21989",
        "cursor": {
          "ref": "728ae188-41c6-47ac-b026-fd60b5650451",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "b2923204-45f9-45a4-a136-fdda3717fed3"
        },
        "item": {
          "id": "b84f6468-106e-48b2-a378-e56d84d21989",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "6f8ccd68-cf34-4a23-ba4b-3ec3e1bb2433",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ae96e74-85a7-4001-beff-9d53f7e6d651",
        "cursor": {
          "ref": "616fd10c-d01b-4956-b0e0-5d5411652680",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "a0726b8d-24f1-43e8-b369-575531d09d9f"
        },
        "item": {
          "id": "6ae96e74-85a7-4001-beff-9d53f7e6d651",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "7fcd761d-f4fc-414c-bf63-0f71301a9b3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19b175ee-ebe1-45f3-b378-88103a49bc3f",
        "cursor": {
          "ref": "aca5dcc3-7231-4d28-afef-1167b040aebb",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "8358da94-52eb-4c56-bde2-b7e24eac0230"
        },
        "item": {
          "id": "19b175ee-ebe1-45f3-b378-88103a49bc3f",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "d1a03a4f-4b6c-4d24-b703-77f7065a6117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3edcbbc-a3b2-4101-bff6-d631647c1533",
        "cursor": {
          "ref": "6be4c591-6ea0-4929-ba5a-c37302a4be31",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "2d625ae1-9a2e-4cc3-a3da-13a8144f2121"
        },
        "item": {
          "id": "e3edcbbc-a3b2-4101-bff6-d631647c1533",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "fcc76316-7d36-40d6-92d1-b9acff9995a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34e035c3-c43e-4414-b586-9ec5ada54188",
        "cursor": {
          "ref": "550ab805-3ffb-4058-a801-89ab60c48769",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "47034d0a-e15f-4c4b-9bc6-551e18f9a8e9"
        },
        "item": {
          "id": "34e035c3-c43e-4414-b586-9ec5ada54188",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "9f59f397-2f1a-4d0b-935d-cd571ced25e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "969626b6-d9a3-4870-b925-3ed43faec5b3",
        "cursor": {
          "ref": "59dcf672-7d2c-4815-b07f-1f057d4cdbf5",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "a2636efd-5d0a-40a5-9ae4-b90521e9a0f9"
        },
        "item": {
          "id": "969626b6-d9a3-4870-b925-3ed43faec5b3",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "14704edc-baf5-40fe-82ba-1f271f7c8023",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69c2e6d6-0371-4422-a7fb-7e4553eb6cba",
        "cursor": {
          "ref": "1dde614b-f4be-45cc-bad2-a27dcaf21645",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "ab2c8c16-e1a2-4691-b2c7-70d676dae1ce"
        },
        "item": {
          "id": "69c2e6d6-0371-4422-a7fb-7e4553eb6cba",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e6b96952-31f8-447f-b668-75ca9959127c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e15b7d86-3a30-42b2-be26-bef678808155",
        "cursor": {
          "ref": "0bf2fdc1-bc69-4cc1-ace8-3f2ef1822c39",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "fe635e2a-1e9c-4f57-b873-ef5fa7d6a27d"
        },
        "item": {
          "id": "e15b7d86-3a30-42b2-be26-bef678808155",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "dca956a2-4769-4ba5-87fe-041c577edd51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1e89a0b-7d70-443d-a031-d24cc130a77b",
        "cursor": {
          "ref": "57267d48-a73e-474c-82c5-61440fc6a1be",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "a4664565-0c0d-42d0-b89a-9cc91a2e3c48"
        },
        "item": {
          "id": "a1e89a0b-7d70-443d-a031-d24cc130a77b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "ab98d89f-89e3-4604-9937-12891d2acc2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f4d7ea9-0dd3-4ae9-831b-1571e6a66fcd",
        "cursor": {
          "ref": "fffc05c9-0538-4f38-b212-1dac772c991e",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "ba319604-4d09-49b6-8cbc-e3df6765f890"
        },
        "item": {
          "id": "7f4d7ea9-0dd3-4ae9-831b-1571e6a66fcd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "41353cd8-75b0-4640-aa82-98f017107c4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ec3e484-5819-4390-9bd2-9cdccb86b5b4",
        "cursor": {
          "ref": "988a3db3-629c-4437-ac0f-9bb0e162ecca",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "105ddc1f-44ae-485a-9417-0764c3c90609"
        },
        "item": {
          "id": "9ec3e484-5819-4390-9bd2-9cdccb86b5b4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "ac4903de-f10f-4777-ada7-38f7e12bc1a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 232,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef04714c-ea45-4c65-87ee-911fca8edaf1",
        "cursor": {
          "ref": "ebb84037-1a7d-4e16-a5dc-1e91e679230d",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "e70e9f8f-2aee-48de-a8d5-a6817be421d1"
        },
        "item": {
          "id": "ef04714c-ea45-4c65-87ee-911fca8edaf1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "d18a2b8a-9aa9-4b54-9412-bfa4f6669082",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5141d0df-eced-4cc9-9bd5-59875c0470f6",
        "cursor": {
          "ref": "111bc289-19b2-414d-8bd0-a2f33fec9b1d",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "2de3e564-12b7-4e4d-b144-dd5e9796b5e3"
        },
        "item": {
          "id": "5141d0df-eced-4cc9-9bd5-59875c0470f6",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "89467168-e4a2-43c1-a70d-7d5af034947d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aba6b91e-7498-44a7-8b44-bd1157a910d8",
        "cursor": {
          "ref": "7ada22c4-1f0b-4b18-ae47-487cfa7931cd",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "689a2af8-94cd-499e-a404-2364b4ef9560"
        },
        "item": {
          "id": "aba6b91e-7498-44a7-8b44-bd1157a910d8",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "355180c9-18fc-4f79-9d09-75770581d80f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a69a9bc-bea3-4ef3-ac53-439631416678",
        "cursor": {
          "ref": "079f8d77-e0e8-4d59-875e-28ea2fd50d31",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "c98ad36f-43e6-4bc3-be07-bfcc91eb11b6"
        },
        "item": {
          "id": "2a69a9bc-bea3-4ef3-ac53-439631416678",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "c47af330-311b-4712-82d8-79af5fb78c02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9065477e-d192-4c53-83fc-a133d7d45e13",
        "cursor": {
          "ref": "b1884dab-0a42-4c28-97e3-3e52eea29d23",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "8839ea47-59b5-4d02-89ee-923196838c8d"
        },
        "item": {
          "id": "9065477e-d192-4c53-83fc-a133d7d45e13",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "72539852-5ded-43e8-b37f-6db1407646f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92708512-923b-4d83-9b89-3e13f9193b4b",
        "cursor": {
          "ref": "e2dd0d05-d145-4ebf-816f-bf9302c70dd2",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "cc0ded10-de1d-45c2-821b-60b712432f27"
        },
        "item": {
          "id": "92708512-923b-4d83-9b89-3e13f9193b4b",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "aea50d7d-a890-43dd-a5ba-d01eb6d69cb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f905765-afef-4364-ab1e-3f1767c01415",
        "cursor": {
          "ref": "bf087389-66f9-432c-a604-eeba7d0cc760",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "bad05b6a-ee35-4edc-aab5-037791f4b663"
        },
        "item": {
          "id": "7f905765-afef-4364-ab1e-3f1767c01415",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "920986ad-46f4-4d91-92cb-337bd6059de1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eca52c74-bd30-4134-971e-7e8f3a232c54",
        "cursor": {
          "ref": "c23750b1-aa5c-4853-a85e-29215a9356a3",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "5966664e-0431-4a3e-b238-7223b58b119b"
        },
        "item": {
          "id": "eca52c74-bd30-4134-971e-7e8f3a232c54",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "cb92aacd-de14-47ae-8181-7acba0a7b0e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df0dea9c-12fe-419e-a41b-8bc1255e796d",
        "cursor": {
          "ref": "5403670c-5076-4780-84de-1de31305e621",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "488fba93-afad-4591-9abf-73fb7bac8371"
        },
        "item": {
          "id": "df0dea9c-12fe-419e-a41b-8bc1255e796d",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "5aa171ef-01a9-43a4-a4cf-44b53f2ffec7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47b625e8-37c0-4735-bb61-9c8519f8069b",
        "cursor": {
          "ref": "96a630d6-26f5-4d61-a6d7-e3d731147666",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "26c70f83-2275-4afa-96a2-7f23eb1ecbf7"
        },
        "item": {
          "id": "47b625e8-37c0-4735-bb61-9c8519f8069b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "2ae9f10e-8994-4c55-8219-4907a824f85a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bedfca48-dc02-4fcd-9862-3c736ca843b7",
        "cursor": {
          "ref": "7e702934-ee17-4038-95ba-2e6236c3e1ce",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "59824575-944c-4a33-b28d-df1440cac89c"
        },
        "item": {
          "id": "bedfca48-dc02-4fcd-9862-3c736ca843b7",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "2d31ec1b-766c-45f2-b5a4-b565377274e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75cd245b-51ef-4c94-8117-642e778914fe",
        "cursor": {
          "ref": "becd7d0f-2be6-4f9e-914f-fb375cf4a5bf",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "957ef6f8-f6d5-4e2b-a0b0-5e5b2a783e34"
        },
        "item": {
          "id": "75cd245b-51ef-4c94-8117-642e778914fe",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "70857cda-16fe-490d-bfb1-0dd690350310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fd5d883-a3e9-46cf-b7a3-1579c4690931",
        "cursor": {
          "ref": "b7d6aea3-4f01-444a-8d06-8e859d709080",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "31cda1d1-61b9-441a-8ce9-47c0a610722c"
        },
        "item": {
          "id": "8fd5d883-a3e9-46cf-b7a3-1579c4690931",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "0b0b1fb9-cf0b-4162-9c6c-b0ceff3df371",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "792625d4-febd-43a4-a326-85987935ab76",
        "cursor": {
          "ref": "07aba8a2-53f8-48a6-8664-6dea6afb732a",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "294d478c-243f-49ce-a9ca-debaccd9f43d"
        },
        "item": {
          "id": "792625d4-febd-43a4-a326-85987935ab76",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "f86d5f38-dc87-442a-805a-87b7eef5259a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 404,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56051f0c-c6ae-4141-8701-145b742e6571",
        "cursor": {
          "ref": "4d7de0d3-1a69-4297-8553-0c409b0d7efa",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "d612e517-bb0d-440f-948a-b8a6014d81da"
        },
        "item": {
          "id": "56051f0c-c6ae-4141-8701-145b742e6571",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "c4bfae22-97bb-45a2-9d48-5343b9165d7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d964722d-2c3c-400b-8d72-0091bc5677af",
        "cursor": {
          "ref": "63e1d4dd-c62e-42a8-bcf0-1931bb9f2c56",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "50d5bf9b-22bc-4b73-ba89-c6b959291140"
        },
        "item": {
          "id": "d964722d-2c3c-400b-8d72-0091bc5677af",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "182cc3bb-10fc-422f-af1c-224352d504aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ccf1c51-5a06-4b72-98bc-620b00e7354b",
        "cursor": {
          "ref": "80b7701a-bdde-497c-a56d-2bd3428070fe",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "ea92f3b2-b220-40be-967b-7aa0de357624"
        },
        "item": {
          "id": "1ccf1c51-5a06-4b72-98bc-620b00e7354b",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "92c99930-0d19-4478-b10f-feb8e07feb6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddaf0c70-0751-483e-b37b-aa310e3c56c3",
        "cursor": {
          "ref": "6cc8c699-8e2c-4e32-a3fe-35aa3c7ced8d",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "88557e66-9ea6-4c5f-a3fb-3202ccf24600"
        },
        "item": {
          "id": "ddaf0c70-0751-483e-b37b-aa310e3c56c3",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "ecd77a24-1c7c-41b5-84c8-1f4438f616c2",
          "status": "Created",
          "code": 201,
          "responseTime": 683,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "c110f03a-7d0a-4b12-b47b-07a39d57539b",
        "cursor": {
          "ref": "9844485f-bbf1-4ee5-91c7-cfd0efd2d63d",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "9c002b19-9ed7-42a0-b0f7-450f70fcf003"
        },
        "item": {
          "id": "c110f03a-7d0a-4b12-b47b-07a39d57539b",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "048ce35b-eebf-4219-9522-7ac4fd8e1906",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26e40746-c0ce-426b-b090-aaa1e13884e7",
        "cursor": {
          "ref": "2e07a74f-888e-473a-8393-aca8d60d5a9d",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "714cb018-6bb1-4f3b-a013-ef0bcfea071b"
        },
        "item": {
          "id": "26e40746-c0ce-426b-b090-aaa1e13884e7",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "ce44408e-c65f-4872-97c1-09e73eeed033",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a70d8fc6-4603-4400-a188-8a7813f78c93",
        "cursor": {
          "ref": "2e2d3c23-b851-43fa-8f52-3919799f8b11",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "3a48fdb2-fe76-4503-836b-6d903aa6fb6b"
        },
        "item": {
          "id": "a70d8fc6-4603-4400-a188-8a7813f78c93",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "64c88ed6-9bad-43a0-806a-550ce242d4ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99e97f62-c424-484f-b79f-9cfc93cd75a9",
        "cursor": {
          "ref": "89c8bf81-6622-4a36-8ebe-f7f0f580e695",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "011c34a0-8570-4eed-b0fa-9674c199dd08"
        },
        "item": {
          "id": "99e97f62-c424-484f-b79f-9cfc93cd75a9",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "4539d0a0-7106-4634-bce9-2de673772ff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cae68e2-4ed0-4734-8996-c5ffec4ad785",
        "cursor": {
          "ref": "74599926-1c4d-44d8-b202-2413d0f94cab",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "51b3d720-9f5f-4315-a392-4e9790a4a242"
        },
        "item": {
          "id": "2cae68e2-4ed0-4734-8996-c5ffec4ad785",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "75a9b76e-223c-415a-a67c-7938d2f16472",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f033f344-9310-4614-87da-a7b8715baa54",
        "cursor": {
          "ref": "47bf8b51-68c2-42f6-afae-e5088700c915",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "2e488e69-f935-4232-8f94-3578580826f9"
        },
        "item": {
          "id": "f033f344-9310-4614-87da-a7b8715baa54",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "1cd8fc2c-e56f-4c9a-b0a5-7ac0fa1dae82",
          "status": "Created",
          "code": 201,
          "responseTime": 693,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "bdce7a6b-6700-4901-a565-436a4e0cdbed",
        "cursor": {
          "ref": "9fde1060-b7b6-4986-8434-8dd5b6a252a3",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "8d553fd8-dfb4-4334-91a6-ddcac3d855a6"
        },
        "item": {
          "id": "bdce7a6b-6700-4901-a565-436a4e0cdbed",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "487d783f-ff5f-47b1-aed1-7b1bba0965cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e94c4de-7d68-4742-804e-9601d641e4dd",
        "cursor": {
          "ref": "1fdae317-9e8d-40dc-a927-8d07310afe2e",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "196954e5-ee39-4852-a75f-542ef7610cc6"
        },
        "item": {
          "id": "5e94c4de-7d68-4742-804e-9601d641e4dd",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "3db6a0fa-c141-403c-86e9-a5636808050f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7de96dcf-fbd1-4ce7-bdf5-7affe85ba59e",
        "cursor": {
          "ref": "50d482bc-01be-49e4-ba7a-27631cf36293",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "93b5f201-7a7f-4d21-8713-c0a88b31551b"
        },
        "item": {
          "id": "7de96dcf-fbd1-4ce7-bdf5-7affe85ba59e",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "742ae368-b102-4cd9-8313-39be77a378a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4577c00a-cf76-46a3-86cb-13aec90ba618",
        "cursor": {
          "ref": "c04bc70b-833d-4456-a900-46fe54c10984",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "6c4c7118-d8b1-4af0-a9c4-7a43e1cf0d5a"
        },
        "item": {
          "id": "4577c00a-cf76-46a3-86cb-13aec90ba618",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "650ada70-a120-4679-9116-e188c175a828",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30775b49-2dff-402b-9a2a-3a1cfb56884a",
        "cursor": {
          "ref": "17f2d5e5-aa2b-48c5-a2eb-7c867f509f3b",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "4674146c-2d10-4025-897f-b9945508a5fc"
        },
        "item": {
          "id": "30775b49-2dff-402b-9a2a-3a1cfb56884a",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "0fb55bd2-2485-475e-a5ff-0cc346a79677",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a50ad91e-7d71-43df-a0c5-57ce260d00a2",
        "cursor": {
          "ref": "bae8c3ad-d04a-4743-a38d-8b311f508956",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "3451b146-46de-4ca4-9780-4aea90e63264"
        },
        "item": {
          "id": "a50ad91e-7d71-43df-a0c5-57ce260d00a2",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "5598cb7e-15a0-4827-b09b-8aa32ee5be07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05dc6230-42c8-4248-bfc5-8053cc22b3a8",
        "cursor": {
          "ref": "cdd2a445-7568-4589-8ff8-5064cbc22ece",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "f22171d1-66cc-423b-81a0-6e12024fbc3f"
        },
        "item": {
          "id": "05dc6230-42c8-4248-bfc5-8053cc22b3a8",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "fae0d6fe-2344-4da4-9a9c-2d25e6cfa742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "867f9ca7-84e1-4bf1-a9e4-b76a72e530b2",
        "cursor": {
          "ref": "4bd8443b-a426-4b85-80fd-a5f1348bf22b",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "c73b05b1-cddc-4f1f-914c-79796f8d4e53"
        },
        "item": {
          "id": "867f9ca7-84e1-4bf1-a9e4-b76a72e530b2",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "b2ce6db1-6752-46f5-823b-aa9f80a8fcb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fc9d1bb-4111-4bcb-93fe-6616502b7407",
        "cursor": {
          "ref": "04bcaad2-b7ba-4715-b1b4-92c1f5c6dccb",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "f1509334-8958-45e8-be21-5ddec892aabf"
        },
        "item": {
          "id": "1fc9d1bb-4111-4bcb-93fe-6616502b7407",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d4b2be8a-666f-45d7-8133-7192558be5e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "83029450-f538-4325-a7cb-6bc3eb69f246",
        "cursor": {
          "ref": "ce3fb802-348b-4c3b-a024-a3c3dd16825c",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e25a040e-7b32-490b-ab93-305cbc388a81"
        },
        "item": {
          "id": "83029450-f538-4325-a7cb-6bc3eb69f246",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "d2fcf528-ec8a-460c-897f-53a8228494c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "7c02e434-3bbd-44e3-932a-9867e5d69dd7",
        "cursor": {
          "ref": "abcb1277-0087-4faf-89e1-d9dec57ded4d",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "a81d4213-87e9-4e8c-9045-7e5e800d1a24"
        },
        "item": {
          "id": "7c02e434-3bbd-44e3-932a-9867e5d69dd7",
          "name": "credentials_issue"
        },
        "response": {
          "id": "80b36986-2fb7-4e73-bc4e-d6cd3d7f1f2b",
          "status": "Created",
          "code": 201,
          "responseTime": 682,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a97c0aa-d545-4f4d-bd98-282e3cbd2a72",
        "cursor": {
          "ref": "633094a8-902d-4d39-8cc4-f07a1dc458ef",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "dd384a63-6010-43a5-b1a3-5fa227b474a1"
        },
        "item": {
          "id": "8a97c0aa-d545-4f4d-bd98-282e3cbd2a72",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "04a4efea-e87d-4fd2-825e-57c8c76bdb05",
          "status": "Created",
          "code": 201,
          "responseTime": 695,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b35144f-6445-4fdc-b460-3dc1c08bfdc3",
        "cursor": {
          "ref": "10b7e5e9-a612-4b88-89ae-fd46f05dba9e",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "8803f8a3-f11d-430a-98d3-c2a9f46b6366"
        },
        "item": {
          "id": "9b35144f-6445-4fdc-b460-3dc1c08bfdc3",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ebb26243-fb68-4968-912e-37627339bb59",
          "status": "Created",
          "code": 201,
          "responseTime": 715,
          "responseSize": 747
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "de711736-5afc-4bbc-a8d3-23638b0f6050",
        "cursor": {
          "ref": "11b58ad2-bf9e-41b3-8de7-61dfb6d433fe",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "82b62cdf-6b00-43f9-8bc3-ca43f8e82fa9"
        },
        "item": {
          "id": "de711736-5afc-4bbc-a8d3-23638b0f6050",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "dccf507f-6da3-4a6c-a5b4-6ce0729ba923",
          "status": "Created",
          "code": 201,
          "responseTime": 742,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "5978d751-24f3-4e1e-bf16-7e54b9fe1b6b",
        "cursor": {
          "ref": "662a2f6f-cd56-4298-acbb-9154c6fa7fb3",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "6e4aa325-70a3-46da-81a7-352a504a3a57"
        },
        "item": {
          "id": "5978d751-24f3-4e1e-bf16-7e54b9fe1b6b",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "954a2174-c34a-40aa-99bd-97bf2cf10442",
          "status": "Created",
          "code": 201,
          "responseTime": 667,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "503f5211-4510-44ef-96e2-50dc92cc7e13",
        "cursor": {
          "ref": "3c3c520e-f651-43fa-aee1-7bac2d2fbe67",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "7a87f84e-3c50-440e-a155-d953fc920e5e"
        },
        "item": {
          "id": "503f5211-4510-44ef-96e2-50dc92cc7e13",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a3bbf254-297d-4e6b-b123-d11a8833d54f",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "503f5211-4510-44ef-96e2-50dc92cc7e13",
        "cursor": {
          "ref": "3c3c520e-f651-43fa-aee1-7bac2d2fbe67",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "7a87f84e-3c50-440e-a155-d953fc920e5e"
        },
        "item": {
          "id": "503f5211-4510-44ef-96e2-50dc92cc7e13",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a3bbf254-297d-4e6b-b123-d11a8833d54f",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "c45a85d1-2a4c-4019-8c8c-981629aa12c1",
        "cursor": {
          "ref": "55a3a41f-7800-47b1-80ab-8a46c639d789",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "fb6a1959-cd29-4fd6-8887-30aab05bb736"
        },
        "item": {
          "id": "c45a85d1-2a4c-4019-8c8c-981629aa12c1",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "bd36f239-974a-444a-a45f-289b5379ccf4",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "48f10d36-1c95-4bc7-9708-5f4e7ae5fb44",
        "cursor": {
          "ref": "5f67102d-838f-48e5-887b-1039ef6d4091",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "21bdd0d6-4a3b-48bb-9fe9-b9fe9c8ae7d3"
        },
        "item": {
          "id": "48f10d36-1c95-4bc7-9708-5f4e7ae5fb44",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d6d3c33d-2d17-44ac-a20c-916f37533a57",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "1ac60b50-516d-42da-8cf9-4db47a4450b9",
        "cursor": {
          "ref": "3d8d650d-4a08-4c69-a25c-0e4109980e2e",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "2926f351-886b-44ac-afeb-de3fde500173"
        },
        "item": {
          "id": "1ac60b50-516d-42da-8cf9-4db47a4450b9",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d6cda71e-236b-4f4f-bfb1-fe5b923f4f8e",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "f2dcf385-4e79-44d9-87cf-920be196ca55",
        "cursor": {
          "ref": "59e61b62-d38b-4fac-87ed-3cc1988a1760",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "3a38d4aa-5fd7-45a8-a053-25d9c5da5e5c"
        },
        "item": {
          "id": "f2dcf385-4e79-44d9-87cf-920be196ca55",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5b7da6bd-a06e-41e9-a397-15440dec47de",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "a336415b-4410-4dad-b56a-68c615915c93",
        "cursor": {
          "ref": "00a90ba2-1c80-4dc9-9fa9-feb8daf62589",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "731e5182-8d76-4141-af12-04855be902d4"
        },
        "item": {
          "id": "a336415b-4410-4dad-b56a-68c615915c93",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "3ef2490c-85b7-4e5b-b7a0-30b82254b9e8",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "3a184f69-8a9f-44f5-b5c6-f09bd253d0bc",
        "cursor": {
          "ref": "130bcd6c-8062-4684-8834-477a7630ad0f",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "1ff6e641-a09d-4491-96a6-8c54dea1b2ce"
        },
        "item": {
          "id": "3a184f69-8a9f-44f5-b5c6-f09bd253d0bc",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3a8edbd9-ea3e-407b-9de1-810b0c80f484",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "9242f14b-8c23-475f-97d4-8b98cf31e6c2",
        "cursor": {
          "ref": "9edf950b-438f-423b-96c2-aadd68c63d35",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "76b9cce0-117f-4464-9113-4c10ab8adc7c"
        },
        "item": {
          "id": "9242f14b-8c23-475f-97d4-8b98cf31e6c2",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4f55f12a-2358-47fc-99cb-f724f5d2d3ea",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "7f664629-3afa-4c69-9b15-91f4b1884c92",
        "cursor": {
          "ref": "192d0ac8-1816-4b7d-a7a0-d5ed1ae03339",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "9eb228b9-3112-4863-973e-991a8122b279"
        },
        "item": {
          "id": "7f664629-3afa-4c69-9b15-91f4b1884c92",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d312fd74-1d1e-4019-b819-c9116e4a7d5f",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "509a203b-e674-43f2-9d08-52d04b686930",
        "cursor": {
          "ref": "f04be74b-a546-4a51-a3c1-f074c5b256fa",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "74d4c147-105e-44b6-86c2-9dae3ed78a7e"
        },
        "item": {
          "id": "509a203b-e674-43f2-9d08-52d04b686930",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "530506f0-9801-41ab-a3d6-9febc322d132",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "f4f5b28c-7d66-4089-816e-a855f86aba24",
        "cursor": {
          "ref": "4602847d-40a3-468c-9723-446a5a5ad1a9",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "b8602bf3-0f3d-4d8a-bd9b-d11fadcab6d4"
        },
        "item": {
          "id": "f4f5b28c-7d66-4089-816e-a855f86aba24",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "87455eb5-85db-4612-8c52-63a16ccc111d",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "b81a5a0d-eecd-4585-8941-1d5b70f31d17",
        "cursor": {
          "ref": "4fa98a30-26a4-4f66-9460-8ba206c4d93e",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "c42141f7-f01a-4533-b10d-9f2914aa90d6"
        },
        "item": {
          "id": "b81a5a0d-eecd-4585-8941-1d5b70f31d17",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "9c5bedd5-3cba-4b05-9891-b03f95dd71dd",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "a1004aa5-7ba0-44ea-813e-752781148121",
        "cursor": {
          "ref": "6bff2835-cdff-4441-b9c5-75a1d92c741b",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "9d45f37d-9bdc-4c0c-b9f6-456068ef2964"
        },
        "item": {
          "id": "a1004aa5-7ba0-44ea-813e-752781148121",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "98676961-cc40-4b37-9a6b-db8f7b2f8405",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "c753f974-ca83-47cf-9f5c-55f5e00d7ab7",
        "cursor": {
          "ref": "ce792e81-0233-460f-a8ec-603b35b60f7e",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "da4ad4b8-84f3-4ac6-bf25-d33760e54dde"
        },
        "item": {
          "id": "c753f974-ca83-47cf-9f5c-55f5e00d7ab7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "41f44e85-f5c6-464e-8a12-14c04fccb8a0",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "c4fa6080-8790-454d-81d2-19f882b3fe88",
        "cursor": {
          "ref": "a8cb0a6c-da95-41f4-acd1-31d68c98d491",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "27bc4e57-4f4f-46c3-90a3-a534f84584da"
        },
        "item": {
          "id": "c4fa6080-8790-454d-81d2-19f882b3fe88",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "373fa66a-ca25-4605-bb66-92b3c506b3a8",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "4da0e6f3-f372-47f2-a3c1-2eb866072ed5",
        "cursor": {
          "ref": "2a185635-609f-4135-a1af-2cb2c5a8df1d",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "d285f064-66fa-4de7-8a2c-298fa0d65fbe"
        },
        "item": {
          "id": "4da0e6f3-f372-47f2-a3c1-2eb866072ed5",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c01cda1d-682d-46de-a631-f26abcbc5e05",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "0527b833-e06e-4ae5-bf00-443d9367ea25",
        "cursor": {
          "ref": "29b4da11-42cd-4639-91cb-243198ca99c6",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "784371b2-a69c-439b-bcc4-1d1e785051d2"
        },
        "item": {
          "id": "0527b833-e06e-4ae5-bf00-443d9367ea25",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "6f10af76-db3e-4da5-81de-f324bd0a63ff",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "197cd22d-16da-451b-a134-fccf33b322a7",
        "cursor": {
          "ref": "4c03c314-8dc2-4856-a399-cdad745a78e2",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "c7b01162-4862-4345-9502-27e01f4ec3a7"
        },
        "item": {
          "id": "197cd22d-16da-451b-a134-fccf33b322a7",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "956a5324-bb51-4e5a-8b0d-4ca01051db21",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "333bf7c8-143b-4885-94f1-b1d9f1da47ed",
        "cursor": {
          "ref": "43307027-bedb-42de-b8f4-c8a46338f302",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "97108d63-4e40-48fd-8cd2-348f736e3e3f"
        },
        "item": {
          "id": "333bf7c8-143b-4885-94f1-b1d9f1da47ed",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "aeb370e3-3ad8-47d5-a555-6bc9f9c5c225",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "d9f40566-6767-4f41-84bc-ab74b62ffc0d",
        "cursor": {
          "ref": "5955ec9a-5902-4bfb-a2dc-2bee746148b2",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "90d7af84-e790-43cd-ad7d-7dea3cdfd53a"
        },
        "item": {
          "id": "d9f40566-6767-4f41-84bc-ab74b62ffc0d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "36dc313b-7ebf-48ae-9390-9a66db7da2ed",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "48db0043-c85b-492c-b118-51b5a9709034",
        "cursor": {
          "ref": "0a4fe115-3459-420d-a447-1390d9b18ad0",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "0cae2364-5450-4683-a9c1-eddc8ebb600a"
        },
        "item": {
          "id": "48db0043-c85b-492c-b118-51b5a9709034",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "16e754c4-b811-4881-b234-5c5678ad04cd",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "98599242-614b-40ca-9fc4-98063d8b071f",
        "cursor": {
          "ref": "1d2ac9af-c414-481a-ba69-da2297c43009",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "3b263dd0-6122-4990-941c-5a122bd60d0d"
        },
        "item": {
          "id": "98599242-614b-40ca-9fc4-98063d8b071f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "01fc4fbc-8f9a-400e-b11b-37050ab03996",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "69c3e761-feaa-4a50-b3f0-cd3200f3bde5",
        "cursor": {
          "ref": "0177c2bc-509f-47e2-a023-a88561dadb6f",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "bcd0c4f5-61b5-4682-9659-abfc695af472"
        },
        "item": {
          "id": "69c3e761-feaa-4a50-b3f0-cd3200f3bde5",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "2d874454-abf0-4d62-8e48-1319b15615e4",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "f6e41d21-fd64-4a16-80ea-3e062dbf3db0",
        "cursor": {
          "ref": "0e5ba576-e853-4375-a850-02df7f764846",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "d95d6063-de90-4ba0-b7b4-c7f122480e25"
        },
        "item": {
          "id": "f6e41d21-fd64-4a16-80ea-3e062dbf3db0",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "65f245cf-91f7-4270-a578-7cad7695345b",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "ff120b5e-8d58-41c2-8f5f-4641536618ae",
        "cursor": {
          "ref": "73890874-8639-44ca-b5c8-e9b2e78209f6",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "66d7ab6f-a72e-4221-ac9c-8b0d54627a92"
        },
        "item": {
          "id": "ff120b5e-8d58-41c2-8f5f-4641536618ae",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "1a0b734b-0d03-468d-afe5-86f76770114c",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "b503648e-3ad2-4e8c-a01f-a83f6f133827",
        "cursor": {
          "ref": "28e62df9-9e9c-4f0f-a99d-9f9d32858799",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "0e6dce5a-6ce3-4f7a-86c5-10f5a84f2dad"
        },
        "item": {
          "id": "b503648e-3ad2-4e8c-a01f-a83f6f133827",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "fd28a491-7770-4946-ab3e-899ed59a4e16",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "0479873d-d6a1-464b-871b-6509e0346513",
        "cursor": {
          "ref": "ccb5ffa2-07a4-45c9-bcdf-e08966d81a88",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "ad6d16b1-15fa-4f2c-9206-9cfbb5edb5e1"
        },
        "item": {
          "id": "0479873d-d6a1-464b-871b-6509e0346513",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e70d6999-0050-41ef-97de-5d9f17443bce",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "4f42ab29-1da5-4c09-8170-0404ebee0fb4",
        "cursor": {
          "ref": "fe1538af-808c-4e6b-9a86-fe547c77833a",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "ab8f4d5c-a138-45e4-aa77-ef17fd03a6c3"
        },
        "item": {
          "id": "4f42ab29-1da5-4c09-8170-0404ebee0fb4",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ffeae532-6d9e-4312-8d42-bc670385c20c",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "0f751ce6-08d8-47dd-8754-ba1846b53757",
        "cursor": {
          "ref": "2a4a0039-e02b-4864-9d68-8d7b46b68347",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "d2a3f032-64b3-4512-b8a7-fa38093d0bcf"
        },
        "item": {
          "id": "0f751ce6-08d8-47dd-8754-ba1846b53757",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "bbd1298a-1b8d-4e15-bf7c-29be37f5fb3c",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "80ad4606-2055-4a79-ae1c-9eb324093b23",
        "cursor": {
          "ref": "a7574bed-b391-4510-9825-e620d802eb9b",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "ad88f327-8ef8-4fe7-a76c-10af43005a48"
        },
        "item": {
          "id": "80ad4606-2055-4a79-ae1c-9eb324093b23",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "897ffa6f-a61a-4742-b3eb-c10b373d53ef",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "7bc26fa6-2537-4cd7-b1db-462d0a5315dd",
        "cursor": {
          "ref": "80b36b8d-e50d-4658-86d4-c5504dd505c2",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "56c7ddc6-fa68-40f2-a618-edb08122e0f5"
        },
        "item": {
          "id": "7bc26fa6-2537-4cd7-b1db-462d0a5315dd",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "790aa109-578a-4c22-a058-38af686b4588",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "d8b06df4-ca0c-499d-9398-39a01c6ff3af",
        "cursor": {
          "ref": "e1c31cb0-281d-4503-ab13-f62350f91ab3",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "bebd1042-7d04-47a3-a57b-0f47b449301a"
        },
        "item": {
          "id": "d8b06df4-ca0c-499d-9398-39a01c6ff3af",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "4afc2fb8-52f0-47b9-b14a-1125afe41b94",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "e7915495-8559-4d9f-9e32-50fec4b95307",
        "cursor": {
          "ref": "3c20a30b-28ca-45b4-a623-8fb7f7b93434",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "2bb8b3d6-2fe8-456f-92a0-604693a9664a"
        },
        "item": {
          "id": "e7915495-8559-4d9f-9e32-50fec4b95307",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f2056d4e-59f1-48bf-a301-9db6fa276fd1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d050819-d766-4375-925b-d0ab411a9f07",
        "cursor": {
          "ref": "eee5815d-6e95-4898-bf7a-7e547e4a72d0",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "40abb249-d9e9-48cb-87f8-95c4b5ec866a"
        },
        "item": {
          "id": "8d050819-d766-4375-925b-d0ab411a9f07",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "a9a5faaf-913e-4a78-991c-6cefd0797b87",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 63,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcf666cd-5146-4b20-aa9f-ad64ac87d1f0",
        "cursor": {
          "ref": "faac9368-ae42-45d4-beab-41f19bf7dcb0",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "0f187f4e-3e3f-42a5-ba44-1ac614ad0de8"
        },
        "item": {
          "id": "fcf666cd-5146-4b20-aa9f-ad64ac87d1f0",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "3a426516-27ec-4696-9b01-1814a1b9e807",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcf666cd-5146-4b20-aa9f-ad64ac87d1f0",
        "cursor": {
          "ref": "faac9368-ae42-45d4-beab-41f19bf7dcb0",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "0f187f4e-3e3f-42a5-ba44-1ac614ad0de8"
        },
        "item": {
          "id": "fcf666cd-5146-4b20-aa9f-ad64ac87d1f0",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "3a426516-27ec-4696-9b01-1814a1b9e807",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b147a5a-ed76-4e0c-9cf2-96d5347a773b",
        "cursor": {
          "ref": "0704f75c-0d63-4136-a79f-777ba0e32533",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "db3c6704-035e-43b6-8c93-d9c0dd84cc55"
        },
        "item": {
          "id": "3b147a5a-ed76-4e0c-9cf2-96d5347a773b",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "520ca1ea-176c-45c9-b5b3-cad5521e3d34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b83133d8-92c3-48c8-8273-63b56bf7b27b",
        "cursor": {
          "ref": "d2cd71ef-d623-48db-9a1d-ae2cf5597da1",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "677687d8-f25a-4421-988b-682dea381e58"
        },
        "item": {
          "id": "b83133d8-92c3-48c8-8273-63b56bf7b27b",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "d4ea0f83-312e-48c0-a37d-f678aedf6b80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9309977b-00ae-4ff9-a531-5b8b4a8c14d7",
        "cursor": {
          "ref": "218aa45c-a667-4aa2-8b0a-7ab91db2af01",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "91f6efdd-7dfd-45eb-91b9-b1cbd68ac289"
        },
        "item": {
          "id": "9309977b-00ae-4ff9-a531-5b8b4a8c14d7",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "f8e7b55c-6f98-4e6b-a438-8d79c75a0663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deaf06a5-1c52-4c21-952a-65aeeb0de71d",
        "cursor": {
          "ref": "2a9d6850-4710-4a68-9744-088afc36ba36",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "8d0f10de-80af-4d81-ba4a-e66caded9456"
        },
        "item": {
          "id": "deaf06a5-1c52-4c21-952a-65aeeb0de71d",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "a66a197c-5f3f-4936-bde1-273d4c837466",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58680365-33de-4d18-8d16-39fdb7832872",
        "cursor": {
          "ref": "042b1332-5ca9-4d7c-b852-11cf9c6c5fca",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "647b323b-8cae-4d7f-ac48-0f973822abd2"
        },
        "item": {
          "id": "58680365-33de-4d18-8d16-39fdb7832872",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "643fd2df-b297-4d11-a684-7fa4e29b4485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "143eaad3-d957-4a17-a1dc-2f9aaa6649d1",
        "cursor": {
          "ref": "a24f7af9-6615-442a-a27e-046d33608c88",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "c6cb19d5-f6d3-4cd3-a10c-89a08ec32e1d"
        },
        "item": {
          "id": "143eaad3-d957-4a17-a1dc-2f9aaa6649d1",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "6b496b58-e272-4ed4-8fae-280961febb21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 167,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec504565-c6c1-4ac9-9190-04ef47b527e1",
        "cursor": {
          "ref": "2f790b9e-ea22-457c-9fde-071661b806a3",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "4c131ef3-9608-4c4b-bb43-870805fd7eb3"
        },
        "item": {
          "id": "ec504565-c6c1-4ac9-9190-04ef47b527e1",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "5947ce6e-827a-4006-9dd3-e57b87a435b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e06b139-ba8d-4920-bcf1-b8d2f9d30d7a",
        "cursor": {
          "ref": "c0c7458e-0b1f-4b3c-8050-2d50b0479a6a",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ad4cd2f8-ad8d-4fd0-ba9c-f1b7649724dd"
        },
        "item": {
          "id": "0e06b139-ba8d-4920-bcf1-b8d2f9d30d7a",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "15e5ca85-5bb7-4781-8428-4b72f06b2b75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29e4371c-6438-4c65-848b-bf42cdaa68a1",
        "cursor": {
          "ref": "59bb3df5-4520-42fd-b54b-30c795eee15c",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "921e8618-cea4-4203-a4ab-06d9a82967df"
        },
        "item": {
          "id": "29e4371c-6438-4c65-848b-bf42cdaa68a1",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "739f1c76-b162-434f-9abe-5212d7b07db7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3d87d1e-c3e1-4386-8396-f5da8c1ad8a4",
        "cursor": {
          "ref": "82ceaa6b-c100-45c2-95a9-efcb13c20c41",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "2e701329-7911-40e3-827a-12856e26971e"
        },
        "item": {
          "id": "b3d87d1e-c3e1-4386-8396-f5da8c1ad8a4",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "9130faa8-855f-4484-8092-54daff169378",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6af700f8-1c5b-4986-bea6-92001e867191",
        "cursor": {
          "ref": "995966b7-e729-4b3e-93a7-87e422b5d59f",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "2d0f095d-279d-4b9a-bd8d-ea9fb984ff36"
        },
        "item": {
          "id": "6af700f8-1c5b-4986-bea6-92001e867191",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "829c8fba-ba3d-4d9e-94d8-61ce267afc38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f694b420-332d-463b-bf14-6a2ccab03211",
        "cursor": {
          "ref": "d60e2eca-40e7-4724-8f16-b9fd23deaaa4",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "ce2da9bc-0fda-467c-92cd-b494791f65cb"
        },
        "item": {
          "id": "f694b420-332d-463b-bf14-6a2ccab03211",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "751eff34-d70c-4fa7-a1e6-14ea61489cc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "739f5b58-c28d-4737-95f4-f6e1aa07854f",
        "cursor": {
          "ref": "3a74700a-ce1c-4fba-a389-ad52fc5b16b9",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "4608db64-9f85-4a29-b7aa-038cfcdb7aa4"
        },
        "item": {
          "id": "739f5b58-c28d-4737-95f4-f6e1aa07854f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "393dc09c-baf2-4d4b-9f8b-3611ae476bbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "584ff1af-5288-4526-b683-1b2164df4c3b",
        "cursor": {
          "ref": "5c0d1895-02ea-4894-990a-e9b6ef0d751f",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "195b98d6-02a0-4483-acfa-54eacb764a4b"
        },
        "item": {
          "id": "584ff1af-5288-4526-b683-1b2164df4c3b",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "ae960fc6-393f-4eab-99a2-5d53ac58c4d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00feedaf-f5a0-4564-94d6-d28e222813f9",
        "cursor": {
          "ref": "f308d730-43bd-4251-bec2-8163827aec0b",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "5df56926-c8c4-4c8b-ba93-3747fcc8ac8a"
        },
        "item": {
          "id": "00feedaf-f5a0-4564-94d6-d28e222813f9",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "b536aa3f-a787-455f-90ac-728894a62b3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9975f677-78e9-4d4d-8fc1-cb31fade4e02",
        "cursor": {
          "ref": "a65c9599-5416-4ba4-ad0d-c7f20a6b0f89",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "756540f8-9e99-4db3-85ad-88bdc38e16f8"
        },
        "item": {
          "id": "9975f677-78e9-4d4d-8fc1-cb31fade4e02",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "3c93119d-ca56-4147-b827-c2c5f0639af3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6123b9f9-9341-46d8-9ea6-838c720357a5",
        "cursor": {
          "ref": "d303adfb-a486-44ed-bde0-a1dc7d7e9b12",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "eff7458f-eb9a-4d16-841e-370cbf93d642"
        },
        "item": {
          "id": "6123b9f9-9341-46d8-9ea6-838c720357a5",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "3e3423ea-d70b-4c5d-95c6-bd16085c41a5",
          "status": "OK",
          "code": 200,
          "responseTime": 641,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "f8810adf-b558-457a-b02b-0101adf7d0cf",
        "cursor": {
          "ref": "df728018-5a0b-4d47-8b89-661cda84a193",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "1468251f-cfea-4e87-9f7a-f8b66347400d"
        },
        "item": {
          "id": "f8810adf-b558-457a-b02b-0101adf7d0cf",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "cdb52e9a-fced-48c4-b3e7-77639d1cb6db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 327,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54e57582-bdae-41f4-902e-2239e4bae1e2",
        "cursor": {
          "ref": "2d9af90b-b50e-4d1f-bfa9-3e1be47d8f61",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "f36e3eaf-4b5b-4def-b83a-9c228f36cc33"
        },
        "item": {
          "id": "54e57582-bdae-41f4-902e-2239e4bae1e2",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "624242e6-f07a-40b1-b244-e8c967c93f23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 313,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27ddda68-6818-4337-9334-8a6bbcc6d251",
        "cursor": {
          "ref": "9f8b8fd4-87ce-4fe8-93e8-67cc9d364597",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "1d3da5ca-98f8-470b-8f8c-8c5e1d246292"
        },
        "item": {
          "id": "27ddda68-6818-4337-9334-8a6bbcc6d251",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "3507567a-ad7b-404e-9e9a-8d694e6e47a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 308,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c82a230-eac7-4630-badd-041e96a6dd20",
        "cursor": {
          "ref": "b886180a-60dd-41ab-8078-34d957d225b2",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "2fc62a9d-6b4e-40db-ba54-b9b47a89abc3"
        },
        "item": {
          "id": "6c82a230-eac7-4630-badd-041e96a6dd20",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "518aea52-3ae4-479c-99a2-828ad5edac8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 304,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2db9321-62e0-4703-8684-34a043c8ef7d",
        "cursor": {
          "ref": "d7312294-6230-465d-bee1-28f569b50070",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "a605abf0-f1cb-473f-b82e-0f6c26e2e91d"
        },
        "item": {
          "id": "e2db9321-62e0-4703-8684-34a043c8ef7d",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "8af1bd8d-e918-411c-b6fc-114b9940e995",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 295,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f2a725a-3536-4951-b046-ed39c1dba26a",
        "cursor": {
          "ref": "6f9b0f57-100e-4761-a045-9b64a3dcc517",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "5f8c8fe8-7cef-4891-907d-a8fa92d14337"
        },
        "item": {
          "id": "0f2a725a-3536-4951-b046-ed39c1dba26a",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "4c4b980b-b19b-4c9b-b1ed-a3d170f59298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 307,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fb2150a-6821-4c27-9d42-922e88f5a986",
        "cursor": {
          "ref": "b5cd7fc1-284a-4a88-b753-68a0cdd025d3",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "e0bb7f31-fdfd-4970-9f67-33752fec6145"
        },
        "item": {
          "id": "4fb2150a-6821-4c27-9d42-922e88f5a986",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "2316751e-a42f-4a63-b5d8-0ee940dd238b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a5d6855-7a10-403b-9d5f-3b6f0365da75",
        "cursor": {
          "ref": "f4bf9ac4-8c28-492b-beff-42aa5c45a9bc",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "ca6f2964-80ac-4a76-8d89-5cf4cdc7bab9"
        },
        "item": {
          "id": "6a5d6855-7a10-403b-9d5f-3b6f0365da75",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "80194b0b-5578-45db-828a-cd3b41b885a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c177aaa8-5e59-4520-91db-84016c72bf2d",
        "cursor": {
          "ref": "411a9599-8429-4e48-ad9b-2ee1ff15ab90",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "27b14639-d6c9-4d21-bffd-90af27a8db67"
        },
        "item": {
          "id": "c177aaa8-5e59-4520-91db-84016c72bf2d",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "8dd17ba4-399f-4f7a-bdc9-2ce64f412c28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 262,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d15f6a1-bd71-422a-9823-a57024d07ced",
        "cursor": {
          "ref": "9f9d9fdf-e8b9-491b-aeed-1e6432255056",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "b03ed6b6-0b01-45ba-9664-ed7fd46b7ac0"
        },
        "item": {
          "id": "9d15f6a1-bd71-422a-9823-a57024d07ced",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "bad3121d-c913-4bf1-af2c-abef0a5ff2cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33412e66-72e0-407d-8963-b8b3aa3a30e5",
        "cursor": {
          "ref": "a8850556-dd73-4633-af45-966927d59dc1",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "d478a2ba-7dd9-4fde-a579-e4043cd3cb75"
        },
        "item": {
          "id": "33412e66-72e0-407d-8963-b8b3aa3a30e5",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "6ee89a5e-7928-4104-bc26-0db275bf3190",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2a87640-1c30-46e7-aad6-c39b7e75c184",
        "cursor": {
          "ref": "66ba9db8-1494-44f3-a6e3-ce1b98f9eeda",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "36fad718-3a94-4e73-9ee2-7f12df58d5d2"
        },
        "item": {
          "id": "f2a87640-1c30-46e7-aad6-c39b7e75c184",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "fa1eb5a0-bfb1-4e7d-988b-2b8c8d78947f",
          "status": "OK",
          "code": 200,
          "responseTime": 276,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "bc1df003-e553-4f30-bf29-925ec58eaeb3",
        "cursor": {
          "ref": "ab2f1e2c-80df-4c48-85e9-7adc3f41ab9d",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "ff8705a1-5736-467a-979b-9094e4f210b1"
        },
        "item": {
          "id": "bc1df003-e553-4f30-bf29-925ec58eaeb3",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "c0bfae17-9fce-40e9-b7aa-97917a06468c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f194017a-9b3b-42bc-ac35-2675a6187d3f",
        "cursor": {
          "ref": "939048bb-f61c-4560-9377-7b727f51d50c",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "d3ffb041-081d-42c5-8988-ee260c4415ae"
        },
        "item": {
          "id": "f194017a-9b3b-42bc-ac35-2675a6187d3f",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "56f2359a-d793-48f0-a366-c756116edeff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7254bdd-30aa-42e7-a872-294efc08e0f2",
        "cursor": {
          "ref": "75064083-2f5b-4542-bd4c-e2ddcf9cc2fe",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "6fda86ab-e2fb-4e4e-9c92-4786df629fc2"
        },
        "item": {
          "id": "d7254bdd-30aa-42e7-a872-294efc08e0f2",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "e6f81b1e-2267-4c60-8e62-fda56935f617",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1be0c1a4-8857-40c6-8b9f-598c36c8af9b",
        "cursor": {
          "ref": "a38065f2-5821-4476-9841-9576b9dcd68d",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "c513b0fd-91fe-491c-86cc-c41b6ad60892"
        },
        "item": {
          "id": "1be0c1a4-8857-40c6-8b9f-598c36c8af9b",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "1d5a0d5c-4ac5-418b-a70a-e942ecc814ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 265,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ff90763-8baa-4cd4-aed0-66c793cc8f13",
        "cursor": {
          "ref": "747175ab-1e34-4d45-a056-30f6cd8787e9",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "9af277d4-c630-411e-af1d-a5b464153013"
        },
        "item": {
          "id": "0ff90763-8baa-4cd4-aed0-66c793cc8f13",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "5e76dc3e-32ba-4680-aa91-bea653fe6547",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbf418cd-dc28-4b07-abb9-f4693081bd65",
        "cursor": {
          "ref": "c6fad219-b50e-4dc8-957b-dea2ae27377c",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "d33d06a9-24df-4771-a59c-9360b555891b"
        },
        "item": {
          "id": "bbf418cd-dc28-4b07-abb9-f4693081bd65",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "94d343cb-0afc-47a7-9372-e4c2dbfd9ad1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 317,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c43854c6-dcd0-4379-a1dc-41fa9eada67d",
        "cursor": {
          "ref": "88ad36f2-cb37-4363-bfc0-14daf1100c66",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "122d52fd-dfdc-4b20-a2ed-c0a17d1ce9a1"
        },
        "item": {
          "id": "c43854c6-dcd0-4379-a1dc-41fa9eada67d",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "91b67777-f1ac-4931-95c1-0f033093073e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 297,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af1d2d64-4682-449b-84b2-06703d674da9",
        "cursor": {
          "ref": "ae62b290-f4bc-4b75-930c-f2419ff922fc",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "402419a0-6fc3-4cdd-b359-a62680362a07"
        },
        "item": {
          "id": "af1d2d64-4682-449b-84b2-06703d674da9",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ef5b9555-4163-4610-834a-377a59d782cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 315,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3232376e-7bb9-4504-bf57-9a245cc38624",
        "cursor": {
          "ref": "3fdff865-5c87-412a-9ab6-364370347b9d",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "33f1f02c-2396-4269-8f72-5e365abd68f9"
        },
        "item": {
          "id": "3232376e-7bb9-4504-bf57-9a245cc38624",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "f3036950-7ce9-4415-b71d-f24b2dd8ac1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 302,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7512af4-03c4-4081-85e0-964137c0ed70",
        "cursor": {
          "ref": "fee32ecb-8c0b-4853-be05-ceedc898a8de",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "7972f1e2-8602-4063-a7b5-facbad1785ec"
        },
        "item": {
          "id": "e7512af4-03c4-4081-85e0-964137c0ed70",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "322957a8-47ff-4d7e-9a90-fff54275e1be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 543,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c878b24b-529c-4e44-805e-cee9b269e8d0",
        "cursor": {
          "ref": "07d6075a-8b41-4f3d-a1bc-38684f26c60b",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "9f305df7-8eae-488d-a1a0-153e176336a5"
        },
        "item": {
          "id": "c878b24b-529c-4e44-805e-cee9b269e8d0",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "21f6e2d5-c44a-4115-a078-dce213176467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 320,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f5d6a62-f060-4936-9447-09498aaedb50",
        "cursor": {
          "ref": "82c7d761-126f-4c39-96a5-eb1bb6417ab2",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "4be65dcc-5efa-4c14-8f10-c1cdbecdd0e3"
        },
        "item": {
          "id": "2f5d6a62-f060-4936-9447-09498aaedb50",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "cfa4bcb3-80a4-4c7f-aaa2-c10a6167e365",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 305,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68f109c7-b540-4d28-a43f-d047cdc74e1d",
        "cursor": {
          "ref": "a3546124-e21d-4639-a820-50e485bcfb4f",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "d5332962-0b70-4e96-8701-305052093fed"
        },
        "item": {
          "id": "68f109c7-b540-4d28-a43f-d047cdc74e1d",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ec838c67-2570-45a9-b1fb-b980b0ec8d9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 293,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "184223df-d576-45a2-b36f-c1f8bb655dab",
        "cursor": {
          "ref": "a82cbe81-2671-4c4b-a9fb-1ff7cf3a0df0",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "14a871d3-c96f-48d3-a34e-8c616dcc6161"
        },
        "item": {
          "id": "184223df-d576-45a2-b36f-c1f8bb655dab",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "8d46d709-b5f0-4e82-9aad-23447a690fe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 309,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1627ceb1-9b5a-43c4-b1bc-1af891224b83",
        "cursor": {
          "ref": "93f083fa-d8a3-4616-9c99-9108892b9965",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "f8d35672-2cbb-4782-a697-a61425c0e2c8"
        },
        "item": {
          "id": "1627ceb1-9b5a-43c4-b1bc-1af891224b83",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "306252d6-2c89-4492-8030-0b68a936bbd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 298,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3961d0ed-a69e-4143-9c44-95bb32ea207a",
        "cursor": {
          "ref": "160e1595-51d4-4505-8c3b-3ee0483c3fa5",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "8ce0fddf-91ee-415b-8c95-5a54382121e7"
        },
        "item": {
          "id": "3961d0ed-a69e-4143-9c44-95bb32ea207a",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "5e6d69e7-33e1-4e13-a393-fa2879e6892c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 316,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fc4fcdc-f261-4613-bdee-1e8e02deab7b",
        "cursor": {
          "ref": "d15dd5ab-9446-4da4-a6d8-e9784603898c",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "87a2cead-41fb-42a0-bcf9-d2d1d25e5acf"
        },
        "item": {
          "id": "0fc4fcdc-f261-4613-bdee-1e8e02deab7b",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "8277d811-cf27-497f-b129-de6aa75dc891",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 342,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcaa325d-956e-4ca8-8d8b-587ae41513d3",
        "cursor": {
          "ref": "e15a45a5-444b-443e-94ef-ee2b0e9591fe",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f68a5742-226d-45ea-aa6f-aefa5cd2985c"
        },
        "item": {
          "id": "dcaa325d-956e-4ca8-8d8b-587ae41513d3",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "30b0f931-6f7f-4d21-8e91-80e5a063a3ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 296,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a71fb6a-55ee-4a6a-a8c4-1ac06f155e5b",
        "cursor": {
          "ref": "ee1dcafc-ba88-4cc5-b35d-85cdaf91686b",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "ae6d731b-bbcc-4ac8-9f47-352f7632a01e"
        },
        "item": {
          "id": "1a71fb6a-55ee-4a6a-a8c4-1ac06f155e5b",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "a9e066bd-6d6b-4663-a291-69a7dc0fe6c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 318,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f743b60-e335-4d81-89f9-1090261b18ce",
        "cursor": {
          "ref": "86766534-8db1-4b14-aa6a-83ccdf5ded03",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "5caaa6dc-9cdc-43a6-b55f-3a26aa8aa2ec"
        },
        "item": {
          "id": "5f743b60-e335-4d81-89f9-1090261b18ce",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "29ea5157-4c9c-4c3f-a804-473a5b0d8e78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 298,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a4d26a0-ede1-404d-a997-17e708f648ff",
        "cursor": {
          "ref": "b78cf0a0-22ba-4d21-88cb-40ec684ae78e",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "2fee3544-e533-4680-8004-b683833022f5"
        },
        "item": {
          "id": "6a4d26a0-ede1-404d-a997-17e708f648ff",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "2c27f146-c004-4eed-af09-e14375fed90f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 297,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a7a9c11-ffe5-4def-ab3f-f03ed6a00835",
        "cursor": {
          "ref": "decc2b0c-0b0a-4a5a-ad99-ba8e3887a8f7",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "9c2d5c3c-198c-4f1a-af93-daa2e0ca0b9e"
        },
        "item": {
          "id": "2a7a9c11-ffe5-4def-ab3f-f03ed6a00835",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f61a83d5-a466-49ef-8f3d-4fc5e4e99972",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 308,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30d3cbaf-6ae1-40c9-931a-b9ee1c7b1126",
        "cursor": {
          "ref": "2c01b639-7d41-41c7-b4c5-2eefcc9b8050",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "0f32bb10-60f5-4c42-af6c-5b058ed89367"
        },
        "item": {
          "id": "30d3cbaf-6ae1-40c9-931a-b9ee1c7b1126",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "806dd2a2-3333-44af-9809-d0418b0e50e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 301,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23d866b7-4ebe-41db-9314-8a8bcf294104",
        "cursor": {
          "ref": "7c47dce6-b97d-459a-bfb1-0ef9086bf8ea",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "78fe8791-e731-4ca2-9469-db17f50948d6"
        },
        "item": {
          "id": "23d866b7-4ebe-41db-9314-8a8bcf294104",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "4d7363f1-51c9-4625-8ec2-9207581756d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 306,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe4b3166-a602-4658-816b-92e38c448f97",
        "cursor": {
          "ref": "04e3ddc5-a8ac-4eae-b333-1e30aebb27d5",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "f654d978-83b7-448a-997e-1c185d4c93fc"
        },
        "item": {
          "id": "fe4b3166-a602-4658-816b-92e38c448f97",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "589c37fc-5b94-4c80-9b18-712bcdcc0813",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7716dac-bc48-46a9-9506-a6ac76411192",
        "cursor": {
          "ref": "f3a402a4-79b7-4952-912f-de9712a68f84",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "a4bb9676-435e-4965-a455-a906566f4590"
        },
        "item": {
          "id": "d7716dac-bc48-46a9-9506-a6ac76411192",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "25fe217f-32b2-48c6-96b9-510b2c6a84b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0c3e8c5-0689-4ffc-a921-506c7a751af1",
        "cursor": {
          "ref": "3c785fdd-c070-4a1c-b490-c16ea8266b01",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "396b1b88-d789-4d82-8ac1-0ee814002ec3"
        },
        "item": {
          "id": "d0c3e8c5-0689-4ffc-a921-506c7a751af1",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "e98d00b5-8b6c-4023-a1c6-22798ee9af7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2610042-7831-4985-b37d-f9106ce68f73",
        "cursor": {
          "ref": "40f60c67-5b45-4f71-95b0-8f76b0a4d881",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "46544199-978b-4aaf-b4fa-a3e15f96caf5"
        },
        "item": {
          "id": "d2610042-7831-4985-b37d-f9106ce68f73",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "fdc7be8c-df61-4079-b6f6-caded2f11ff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 297,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "406fcf19-b92b-4d3a-9d5b-2098ee8a0d0a",
        "cursor": {
          "ref": "ec5fe66b-dbd5-4477-bf89-b56c58cbf89c",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "31ab9b44-0f7e-4f6b-a0b0-e7dc8f3a2cde"
        },
        "item": {
          "id": "406fcf19-b92b-4d3a-9d5b-2098ee8a0d0a",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "41ad6d74-0788-4246-964b-2eedfc39a9b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 215,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31a35bd6-1a76-45db-a30b-e8707529b224",
        "cursor": {
          "ref": "4a49ed21-d082-4c49-8033-aa54d3248e33",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "634a2a49-6c48-49c1-b5d2-1d1ad8d2c2d9"
        },
        "item": {
          "id": "31a35bd6-1a76-45db-a30b-e8707529b224",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "06c749e4-cccc-4fd0-ac24-d2b4bee61c35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b893e20e-202e-4184-a9a6-60bc24f55410",
        "cursor": {
          "ref": "0d7100fd-d7fb-4f33-9f0b-018078ecdb96",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "31273446-e9af-4168-b85e-1604a03e3532"
        },
        "item": {
          "id": "b893e20e-202e-4184-a9a6-60bc24f55410",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "80f0bf71-d483-4fdd-bf8c-64ad14fea31d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30052782-63cc-4c3c-a6b6-bc1859cc7f20",
        "cursor": {
          "ref": "f5d96bd3-f099-4ffe-b85d-0ed1f331c4c2",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "fc9d885c-d47b-43c5-aa07-5a656174a10d"
        },
        "item": {
          "id": "30052782-63cc-4c3c-a6b6-bc1859cc7f20",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "5ad5f517-1df9-459e-b810-9b4b90344bb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3c097e4-0db4-40b3-8ab0-6357e680059f",
        "cursor": {
          "ref": "e26254b7-f0c2-431c-8ce9-bc454e0fe014",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "7e1b8b51-6eb3-474b-a742-b62bc122d312"
        },
        "item": {
          "id": "c3c097e4-0db4-40b3-8ab0-6357e680059f",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "de3f6c01-582b-4e89-8e00-7f1e6187f6e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 306,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efd5221b-0994-4f2f-980c-a9c5082e46f3",
        "cursor": {
          "ref": "2608badb-3877-4cfb-9ae2-a12ce5fc9cb6",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "ceac453f-fbe8-417a-961e-dcead8c05b51"
        },
        "item": {
          "id": "efd5221b-0994-4f2f-980c-a9c5082e46f3",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "7c592bf7-fb6d-40a7-86cc-64b11582aec3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f8a6a49-94c6-42da-b1be-b43ff37aa06e",
        "cursor": {
          "ref": "f362c844-6942-4ae0-9796-564625899f23",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "53e3d101-df46-41fc-8d92-ca4d19f7fa4e"
        },
        "item": {
          "id": "7f8a6a49-94c6-42da-b1be-b43ff37aa06e",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "840a11cb-2a4a-418a-88e5-3267f252390c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d72b8031-6cb6-498b-a6bb-ca4495bd4cbf",
        "cursor": {
          "ref": "07eb4890-7152-429f-91af-b36c8c403f7e",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "6fc8f59f-29fb-46ae-8058-a48546734238"
        },
        "item": {
          "id": "d72b8031-6cb6-498b-a6bb-ca4495bd4cbf",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "d5b4a971-7e5b-4120-b66e-2d57e62d5f42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "712bde38-9e1f-4580-8c14-0a8301da0a9a",
        "cursor": {
          "ref": "662a3cc4-142a-4516-846f-54871f6dfc79",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "430e5360-5d7b-4322-b631-fb25658b1b38"
        },
        "item": {
          "id": "712bde38-9e1f-4580-8c14-0a8301da0a9a",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "baa6aac9-316d-41fc-a734-a423d0623056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac390f6-1d99-476a-bb5c-f23e7e09860e",
        "cursor": {
          "ref": "2408572a-7791-4e22-bdfc-cb132dd8aaf9",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "5f289b53-008b-4905-86f6-99294d1510fa"
        },
        "item": {
          "id": "9ac390f6-1d99-476a-bb5c-f23e7e09860e",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "08bb7f0a-6b24-4536-a1d9-80af13370fe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc886aac-d1fe-47e6-bc9c-21f51ae7a626",
        "cursor": {
          "ref": "b2b6e645-96d6-4f87-8d9b-c3da27935bb8",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "90abcd00-c75e-4cac-85b6-4aeae84b40f4"
        },
        "item": {
          "id": "bc886aac-d1fe-47e6-bc9c-21f51ae7a626",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "0d939f98-a89a-4d91-804c-3cac26eabf72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47590864-3301-49f7-b0fb-ac968d28c3f0",
        "cursor": {
          "ref": "0ffe1479-1dcf-4ec7-859e-0c3cab080b97",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "31a5f84b-c739-4e72-a894-a179dafb9126"
        },
        "item": {
          "id": "47590864-3301-49f7-b0fb-ac968d28c3f0",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "a776cd2c-2342-4d28-9b56-6cac28c4210c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d1aa39a-a55c-46d1-b0e2-4a98dc4b1e5b",
        "cursor": {
          "ref": "100b5982-0050-447e-840c-69092dcccde1",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "ce76f649-adcc-45a4-9912-dcd32495d6d2"
        },
        "item": {
          "id": "4d1aa39a-a55c-46d1-b0e2-4a98dc4b1e5b",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "3cc0a680-d677-4f4c-93b3-82d07dca1366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a3d5cdc-cdf0-4a80-871f-5724cd9447a0",
        "cursor": {
          "ref": "aed7763e-5013-42ed-82f5-2e29c55a5c68",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "82d0ef1d-3e8c-41cc-bb09-3c0ad398d1c4"
        },
        "item": {
          "id": "6a3d5cdc-cdf0-4a80-871f-5724cd9447a0",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "edc9101b-c772-44a5-9326-76a3cb7af574",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "767d8841-2d41-4f8b-bb87-1af3d97e173b",
        "cursor": {
          "ref": "fe4251ae-633a-4468-bd44-901b8dee0a65",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "b5ecc2bb-5df0-40e8-b1e9-854ab068df89"
        },
        "item": {
          "id": "767d8841-2d41-4f8b-bb87-1af3d97e173b",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "118e1fa7-54ff-4658-bae5-38af5992dce7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2708f670-a9ef-4002-86c4-62ae99c2327c",
        "cursor": {
          "ref": "a1eca444-4495-4324-9499-7593aad1365d",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "dc8f087d-ac08-448e-b622-cb8d8ca9c978"
        },
        "item": {
          "id": "2708f670-a9ef-4002-86c4-62ae99c2327c",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "64b1722e-7df9-47a5-bfaa-22238aa98135",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "465eb1ba-b7f9-4b37-a7e0-267128a9a29d",
        "cursor": {
          "ref": "e050f969-7a1f-4a05-a55a-1a36b9159e1e",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "aa5d96a2-b3d6-4ffc-9610-9441ef0a5a17"
        },
        "item": {
          "id": "465eb1ba-b7f9-4b37-a7e0-267128a9a29d",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "796f0510-8001-4430-87a7-3bb53884876c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6234fb4f-056d-4301-916f-c3c5bba678ae",
        "cursor": {
          "ref": "2c5ce4a9-235b-441d-8b42-922a70ee0ac9",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "d9226da8-3217-4482-a2f2-94c8efc1f76e"
        },
        "item": {
          "id": "6234fb4f-056d-4301-916f-c3c5bba678ae",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "9551019f-533c-4e66-bfca-6639988a58a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0c929b4-cd62-48fc-a6ae-b581f610a929",
        "cursor": {
          "ref": "b27be99c-ceea-491a-b490-8eb03e1ad8a2",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "6c656b3e-9e85-42d2-bf30-820cd12d55f4"
        },
        "item": {
          "id": "b0c929b4-cd62-48fc-a6ae-b581f610a929",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "14c31cfe-8f5d-4e18-8dfc-9bbc4fd9b8a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7799fc0e-6b7e-43d1-950b-1f0efe1d68f8",
        "cursor": {
          "ref": "b4d3d12d-92df-4668-88f8-269b847898e7",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "1a86eb91-76ca-468d-8846-477fa84f04fc"
        },
        "item": {
          "id": "7799fc0e-6b7e-43d1-950b-1f0efe1d68f8",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "ecb710d5-2b65-4387-ad6f-48d365d1d996",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47ac5c47-330a-4e08-8fd8-0f2cd2abe4a1",
        "cursor": {
          "ref": "08c0f5f8-ebc1-4573-902c-c55be4d70e78",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "170e741e-0824-4cda-8492-a10a8defede1"
        },
        "item": {
          "id": "47ac5c47-330a-4e08-8fd8-0f2cd2abe4a1",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f2add3e1-6d8c-44d0-92c0-af300686a656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9aa7038-d32d-4f10-b3dc-7b7203cd51dd",
        "cursor": {
          "ref": "9b42cd06-1c40-485c-960b-10e2d9a23f92",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "bc453cb5-f1eb-4794-a49e-e43afa3cb87c"
        },
        "item": {
          "id": "a9aa7038-d32d-4f10-b3dc-7b7203cd51dd",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "292df929-9b32-4340-8484-acb36b35ac8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82d92abe-1106-4a54-aab5-00533b7b13a6",
        "cursor": {
          "ref": "a9f7c270-6dc6-4eca-8cf7-d76b61ce5612",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "9670bcaa-e9ee-4525-a32e-ac4016373c26"
        },
        "item": {
          "id": "82d92abe-1106-4a54-aab5-00533b7b13a6",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "db4d0f5e-5302-4900-b781-1ca6bdde7606",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d91e9c4-3f6f-45c3-ab34-8a6783548277",
        "cursor": {
          "ref": "a094dbec-c1e1-4954-b87f-c59355adf167",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "905d350c-d436-4ff9-810c-67029d5bdb9c"
        },
        "item": {
          "id": "5d91e9c4-3f6f-45c3-ab34-8a6783548277",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "5aba216a-a917-44e6-8bc5-120a7cd88307",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c963c203-79a6-42f3-99b5-de8028e23a87",
        "cursor": {
          "ref": "5e5e4abd-2795-4bfe-9492-e49a48e0fffe",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "d68aa687-c9c9-4bbd-a91d-0fbe9fd30a84"
        },
        "item": {
          "id": "c963c203-79a6-42f3-99b5-de8028e23a87",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "a1439fd0-a1af-4397-a4fd-2fd11e4519a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67771b45-b9ea-4457-901a-48ffdcf069e4",
        "cursor": {
          "ref": "414a8471-5ba5-4e55-b31c-9d45fd9dee95",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "63d3171b-fdff-46aa-9e80-46caab28578e"
        },
        "item": {
          "id": "67771b45-b9ea-4457-901a-48ffdcf069e4",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "18c1cf55-3604-4641-b748-1e65c7173913",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9bf7d03-a8b1-47d0-9a8b-b2f698c7e21c",
        "cursor": {
          "ref": "1c29aac4-e216-43f7-b8b9-c4565be912c0",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "861a442e-b0db-4629-9ab3-0cc44d3eab6a"
        },
        "item": {
          "id": "e9bf7d03-a8b1-47d0-9a8b-b2f698c7e21c",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "07c7d00c-496f-488d-9830-e5a197e14190",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8be2e8e0-ed2d-40a8-a051-9fddc6e78da7",
        "cursor": {
          "ref": "0cb21902-b6a9-4356-b2c5-0130b8441210",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "44d02e57-8eda-41ae-875b-20f21889eea3"
        },
        "item": {
          "id": "8be2e8e0-ed2d-40a8-a051-9fddc6e78da7",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "baf47eb0-7f63-4401-95a4-1e2f939bef6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18ab96ce-4af5-4954-978e-485affcd92cd",
        "cursor": {
          "ref": "2d63cd51-932d-4345-8f6c-27ebf6adcc0b",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "a239ed5f-3949-4595-850a-287f2699736b"
        },
        "item": {
          "id": "18ab96ce-4af5-4954-978e-485affcd92cd",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "496f225b-b066-4673-8f4a-d3d707f6c22a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5f396e5-95ab-4ef4-9336-dfb109ea02fa",
        "cursor": {
          "ref": "0da70ca4-5837-4791-9e55-e43b536b2c2c",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "4bb15b22-ae23-4b8a-92f4-c353a2c215d4"
        },
        "item": {
          "id": "f5f396e5-95ab-4ef4-9336-dfb109ea02fa",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "c1a0f429-3952-49f8-9e8b-298d452e7c52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fdac811-95bf-4dce-809c-b1d1a4f2898c",
        "cursor": {
          "ref": "6c832145-6817-4e35-8014-a702f3c0dc17",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "8bbefeea-9c90-4489-bfa9-78898c333b50"
        },
        "item": {
          "id": "9fdac811-95bf-4dce-809c-b1d1a4f2898c",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "d10247ea-7998-41b6-b573-460ff2fc4c9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0219146-f091-4e3b-a318-4141fe950f46",
        "cursor": {
          "ref": "a2cd39b3-45fd-4a84-83dc-4c91d6884023",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "2fe2dffd-fedc-4612-bcc5-6c244d1c8573"
        },
        "item": {
          "id": "c0219146-f091-4e3b-a318-4141fe950f46",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "24fdf520-18f9-4d86-95c2-c9b096a7fe78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0efcfe1-c15c-4234-ba7d-82e7e6a939aa",
        "cursor": {
          "ref": "d952e436-353f-463d-8602-e26f55a1a42f",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "d54c1996-8b5c-4228-a19b-b20e2121e241"
        },
        "item": {
          "id": "e0efcfe1-c15c-4234-ba7d-82e7e6a939aa",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "78c301eb-3f60-461b-b11a-bfb0d92be7f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24644ead-26f2-4e99-a79d-941bce252bf9",
        "cursor": {
          "ref": "e8b34bf3-1d44-489f-87ae-e6fc19d6425f",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "0e94ec8a-46ea-46bb-b9ff-1e2612715b7f"
        },
        "item": {
          "id": "24644ead-26f2-4e99-a79d-941bce252bf9",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "81b94664-aa17-46f4-90f4-68e62ced0174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7912925-1a43-4d5e-8c43-44eb69166f5e",
        "cursor": {
          "ref": "2643c557-3ce8-4d32-8e83-21404a3198ca",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "eaaa0235-eafe-4571-9f43-fa82ffe5966d"
        },
        "item": {
          "id": "e7912925-1a43-4d5e-8c43-44eb69166f5e",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "5f6b2a94-7fe3-478e-8e37-1bdd7e24b081",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e8aeb98-764d-425b-9997-363728620323",
        "cursor": {
          "ref": "89905175-9a1d-43db-a54e-6f4c12c43c09",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "3c5e5eae-a6ae-41d3-9ad4-7d9a1fe2e30e"
        },
        "item": {
          "id": "8e8aeb98-764d-425b-9997-363728620323",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "26b9068c-10b9-436d-9165-018988cdec02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc6bf049-797f-47e4-858b-0179160bf868",
        "cursor": {
          "ref": "21ef4d4d-b904-41fe-ba11-e232860f6f59",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "a830e49d-327d-48bf-989a-4758b54ce20f"
        },
        "item": {
          "id": "cc6bf049-797f-47e4-858b-0179160bf868",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "c4fc8c9d-fc98-457a-9289-b6cf97685749",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5a34f08-fb8a-4f48-aaf0-1c33b5af6a44",
        "cursor": {
          "ref": "86353b21-8d94-4a4b-901f-c02c8e90a52f",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "f253a36e-fb4d-4a07-93b8-dc99c1c51bb5"
        },
        "item": {
          "id": "c5a34f08-fb8a-4f48-aaf0-1c33b5af6a44",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "0b099e25-63ef-493b-aee3-97436c143348",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "922db490-ee5a-4718-aeed-927f248aca7b",
        "cursor": {
          "ref": "84ab4b66-20d6-4115-b0f5-e8907c725c70",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "2e0c28d5-47b4-4ed1-a58e-5538a08d3272"
        },
        "item": {
          "id": "922db490-ee5a-4718-aeed-927f248aca7b",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "cccfa703-3f73-4ca9-b8aa-897011dccbb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a59033e-f0b2-4560-bad5-814b98029e40",
        "cursor": {
          "ref": "8cf38c89-4adb-498a-9978-e2a39f2b24cf",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "fc332bdd-d8d7-418b-b9da-7c098438de16"
        },
        "item": {
          "id": "1a59033e-f0b2-4560-bad5-814b98029e40",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "3c4383ef-ff50-4f67-8cc9-e4fe81bc0259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0cecd1a-9f82-40db-97a2-a9b68daed09d",
        "cursor": {
          "ref": "f4c74f79-dacf-4a03-b1fc-7e51aa3a27f9",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "17e73347-9561-44d8-bf33-2d7cf992bf29"
        },
        "item": {
          "id": "c0cecd1a-9f82-40db-97a2-a9b68daed09d",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "835cfc95-6a04-473d-bd0f-c8eaece1f20c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18785461-ef42-4c60-9594-00bc84c03512",
        "cursor": {
          "ref": "62345599-5e60-49fd-8fa8-5f06189c6f31",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "02c3da6e-4dc7-418b-b595-b0d4bdc2a3e3"
        },
        "item": {
          "id": "18785461-ef42-4c60-9594-00bc84c03512",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "5a354da4-1a77-4f26-9e6d-464973cd5e57",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 63,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f2ac601-be9c-4046-884c-33b70666b96a",
        "cursor": {
          "ref": "41a057ec-534a-43e5-acdf-574d5d845618",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "dd5e59e7-489e-4830-84e9-dff6db587b21"
        },
        "item": {
          "id": "8f2ac601-be9c-4046-884c-33b70666b96a",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "983e4574-ecb9-40a5-9e2d-4b6e0945dcbb",
          "status": "OK",
          "code": 200,
          "responseTime": 262,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "58b39cae-7485-46ec-bb5d-b027105df9ed",
        "cursor": {
          "ref": "0ea45484-2186-46fa-afe9-5d544f23ad1b",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "fe30b8f0-c7b8-4aa0-ab93-fd47654281d0"
        },
        "item": {
          "id": "58b39cae-7485-46ec-bb5d-b027105df9ed",
          "name": "credentials_verify"
        },
        "response": {
          "id": "374aaac0-b1af-4060-b85a-164eed49f884",
          "status": "OK",
          "code": 200,
          "responseTime": 622,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "3650c06e-df5d-47f0-b0d2-e9139e7b1505",
        "cursor": {
          "ref": "89f78688-df18-4a4b-9908-a170b045b707",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "1173a74f-60a1-4f40-89ae-b04c5228d76a"
        },
        "item": {
          "id": "3650c06e-df5d-47f0-b0d2-e9139e7b1505",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "42151c3c-732e-4c46-bb5e-e09ddbb07fe0",
          "status": "OK",
          "code": 200,
          "responseTime": 600,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "85134f7e-3a71-4842-a6b2-f30c1250f588",
        "cursor": {
          "ref": "3a25eb1e-08bf-4d50-b4d4-66306dd9dc9a",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "bc838959-b2ac-45b7-bc5a-a3cf1feacd75"
        },
        "item": {
          "id": "85134f7e-3a71-4842-a6b2-f30c1250f588",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "180be9fc-6187-41c3-b409-6516fbb4448c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85134f7e-3a71-4842-a6b2-f30c1250f588",
        "cursor": {
          "ref": "3a25eb1e-08bf-4d50-b4d4-66306dd9dc9a",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "bc838959-b2ac-45b7-bc5a-a3cf1feacd75"
        },
        "item": {
          "id": "85134f7e-3a71-4842-a6b2-f30c1250f588",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "180be9fc-6187-41c3-b409-6516fbb4448c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85134f7e-3a71-4842-a6b2-f30c1250f588",
        "cursor": {
          "ref": "3a25eb1e-08bf-4d50-b4d4-66306dd9dc9a",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "bc838959-b2ac-45b7-bc5a-a3cf1feacd75"
        },
        "item": {
          "id": "85134f7e-3a71-4842-a6b2-f30c1250f588",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "180be9fc-6187-41c3-b409-6516fbb4448c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e490003f-869f-46eb-ae0c-625183a68dfd",
        "cursor": {
          "ref": "9cffc902-ae3e-433a-a8da-f908290d76ec",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "4ccc8294-a4ee-47c3-980d-fd80161a3f83"
        },
        "item": {
          "id": "e490003f-869f-46eb-ae0c-625183a68dfd",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "19a5de2e-d670-4120-ab90-fa7a74864f8a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b26eacbb-b0aa-4610-b27f-abc450d83bc2",
        "cursor": {
          "ref": "ad3559c7-a739-4561-85a8-02d735bd9662",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "0a4c3035-cf6a-495a-8c25-08f1653c6525"
        },
        "item": {
          "id": "b26eacbb-b0aa-4610-b27f-abc450d83bc2",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "476a01af-27d2-43e2-b346-a61a3a8f78de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "b26eacbb-b0aa-4610-b27f-abc450d83bc2",
        "cursor": {
          "ref": "ad3559c7-a739-4561-85a8-02d735bd9662",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "0a4c3035-cf6a-495a-8c25-08f1653c6525"
        },
        "item": {
          "id": "b26eacbb-b0aa-4610-b27f-abc450d83bc2",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "476a01af-27d2-43e2-b346-a61a3a8f78de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "5f3321a4-091a-423d-b2fa-fcf4a91cd4d4",
        "cursor": {
          "ref": "5fdf40bd-85c2-4b48-bf8b-c9ff8f21b1c9",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "87842e00-f10c-4511-93f3-1c0c687a8044"
        },
        "item": {
          "id": "5f3321a4-091a-423d-b2fa-fcf4a91cd4d4",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "ffab3168-e8c5-46fb-85c3-d391c445757f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "fed643f6-7c45-4997-8188-44de7dce2415",
        "cursor": {
          "ref": "d56102a3-d305-4737-b959-963084ac68c8",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "60cecf38-fcbd-4441-9ff8-031106d15b57"
        },
        "item": {
          "id": "fed643f6-7c45-4997-8188-44de7dce2415",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "b343b85c-34b2-4819-9da5-96575d410a8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "fed643f6-7c45-4997-8188-44de7dce2415",
        "cursor": {
          "ref": "d56102a3-d305-4737-b959-963084ac68c8",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "60cecf38-fcbd-4441-9ff8-031106d15b57"
        },
        "item": {
          "id": "fed643f6-7c45-4997-8188-44de7dce2415",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "b343b85c-34b2-4819-9da5-96575d410a8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "f5b73cc0-264d-4ff3-90b5-df0f2d51e3f3",
        "cursor": {
          "ref": "96e87a1b-6c57-4ca5-a556-55ebd06e77fb",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "d4db5b19-bf1f-446b-af3f-8cc83c2bb472"
        },
        "item": {
          "id": "f5b73cc0-264d-4ff3-90b5-df0f2d51e3f3",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "62d2f148-ee74-46d8-bc5c-6d5e665c5e1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}