{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "03c0f62d-95f6-4eb8-b54f-36066ec02ef5",
        "name": "Clear Cache",
        "item": [
          {
            "id": "b17e356d-d501-4f06-9d08-15d0b672015f",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a2f97c75-696f-4d5a-aa32-5f1812a0f570",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d1ffdebf-c323-46e4-ac5f-10e7260602af"
                }
              }
            ]
          },
          {
            "id": "4e4e704c-8485-4443-8041-1676d25e4e34",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2e29c00a-002c-40b0-88d6-7af108e4b0f2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "da48fffe-4ce7-47a9-9b65-a268f15f29ab"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "9ec221b6-3de6-4b77-b226-6239815e6145",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "35f16999-f12b-4b38-a1f9-a9d1c2c6dce9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6adf702c-7940-489d-a22b-8be8055ae402",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b94fc80-9f67-4404-977c-b299aa2a6e1a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "655b2513-74e7-48a3-92cb-6101f92aa770"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2ed687db-88dd-4896-b1ab-aa18aba3b19b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "eda73d90-6824-429c-bbec-3c29b0891fba"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2fde44c6-e384-4621-92c1-6a52918be4b1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "72d7675c-2e9a-4135-bc58-fb6144163002"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f2ac95ea-ee94-4c00-b275-83f24759d5de",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "d45b76a5-870b-4f05-8f2a-ede5e9e1e3c7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "506dbb7b-32b6-404c-9e3e-003d305c5b30",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "52c814d0-0c39-4f04-ba9e-3f10776abb71"
            }
          }
        ]
      },
      {
        "id": "e325b7a0-9c9d-4a5a-bb37-4243b1252cee",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "4073ba5d-dbe4-45c9-a447-40a8002228a1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "485aa33f-a9a8-4424-8666-af96f3948762",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cf6b553a-fc56-4b3c-982f-24117544f787",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8391f1e4-9181-45b2-902a-b6f167589fcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f7f4276a-d1de-4c13-bde2-771bc04dcfc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "543c62d5-95d1-4fa7-ad21-5c54c937057b",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a478d448-d79d-4489-8a05-ecd692c9069a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8dce8170-1950-4b52-b5cb-f32dc274fc9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "571e45a9-c7ad-4631-9e47-1caca370e464",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98edaa56-8d87-4629-8e2e-d4cc213d0e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1c7ee9b5-7d7b-4f16-89ac-eb753e30d736"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "243031e6-891b-4708-acc7-c3e4e77604ec",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5c49a86a-4ca2-4d99-87a0-23b3d9ca90d0",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5f5f989-426e-47a1-aaa5-4da7ad16ee76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "45cd314a-7025-4c47-9ee7-7860c9c9eba6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f548a7cd-f641-4be6-ba5b-201a35a8ae08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "188c2066-ca3c-42f2-88e4-9f53dfc00b52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5ec333f-fbdc-479b-8450-8cc1c5c2c91e",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c99fedd3-541c-472f-ab15-06417241ed5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0ac4225a-337c-4f78-a8b8-4f9909e4fd6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2759ef44-9f2d-4206-851a-574b3e7e53af",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "4ce6fa6e-adc5-46b2-ac79-6579a9a39a47"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0005b410-e7ed-4450-b4cd-a12a07d62509",
            "name": "Positive Testing",
            "item": [
              {
                "id": "79770637-a051-4fb3-a2fb-1c0296eae515",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "70b4b699-bb0d-42a7-b210-0d6458223244",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "9888893a-5802-4658-a231-25606560504f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9bdf256c-a9f6-45cc-b2b5-48dabb5bdb13",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "6591c6a7-8159-461e-bcd6-bd80cf6bd6ba"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e26309ca-35d1-4449-9b20-9c89ca6d6d56",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e8c406fb-17ab-4dfc-9bd9-2e4a502a3d55"
            }
          }
        ]
      },
      {
        "id": "87780054-a465-472f-8c0b-c6a0f9979d83",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "3374d7d5-a88c-4164-801e-2d7f4f579629",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6fa1ca54-c0f7-4db5-a80e-211c120c2096",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "dfb0f1d5-be9f-4703-a51f-1fa46f4b1f21",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e1161e9-55b8-4d75-8520-8afbedb70041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "358a3b55-f0f1-4d48-bde9-6c5e0796dc1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62688fa3-8bdc-4ebf-b437-47559586623d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7ecf9b72-e1f3-48b2-8c04-e9d1a5572b39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f4fd8ba-fddb-49bc-8c32-f534bfa03f8a",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf31a58a-f813-4011-94e6-0a7931860474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a7295b0-f801-4920-94a7-7bf13defd56c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a540edd-4983-40f5-a086-19f6766e16e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c506d14b-72c5-430b-a912-a18f2cab2b9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffada573-8296-43e9-a18b-798f66807950",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2030166c-e2f9-4bc7-8b57-a63d1a309905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02dd8e8a-b16c-445d-8394-bcbdba2be39a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cdbb322-7a9d-41a6-99df-f1e37035c441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "72018569-3f2b-40f4-b680-4edaf606b0cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb415dd6-4543-46ab-a535-f700ff77eb42",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "384dbdc1-cd3f-46d8-885a-6637d0d9aa71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ce87ac2-8b05-4e2d-8d15-e57cc27520f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81d9f33c-2326-4f01-8e0b-95c2d5897b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "61f42326-3d59-4e0f-aabb-0075a9d02511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a79ebbea-e6fd-4dad-a5ed-ac0ce4265b96",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3ed037a-7524-49c5-a09d-9d0cbb9eb0c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b513ce6b-6bb3-4eee-986f-ea765c9ca99b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b9c76d6-9af2-4d59-bfe6-eacd1a33c625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6894db67-3a5f-41ae-ae73-5a60403ee7ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a0c4eb3-3cc4-4199-b86e-d1de512aed45",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e9de76f-0070-45fa-a0f9-6a1e856c956e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b93a09d4-3afe-4201-b01a-b1b6908d4e30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63f2b2b9-6920-4b30-83b7-049d8a384678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "46a7819d-7468-4d51-a742-425b8b01d8f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f4c827e-d1ce-4381-8eb9-b554138b506b",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e986a008-3856-45f5-a162-01c9180b59b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d359b93-63e4-46fb-bd44-6d2d7b7e5b56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b3d036d-f4db-4675-a17b-ed6c39dee274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "945f64d7-34f9-441a-84a7-164dd5377b5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c638d072-c41d-4a6a-8a1d-e64a32195bc7",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c6776ea-5a00-4d0d-991b-a977148e5c21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "045dc6fa-bc4d-4db6-bf2d-2def00a7b9c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "777473c9-28fd-4c60-893d-38615359c37c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e96dfe2a-7c9a-4b25-917e-d2ea08c00846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7112cf70-a6cd-47ef-96d8-968750f97a39",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c65e398-627e-4d81-acbc-70b8843d8819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d496d75-a1e0-4b96-8920-099e4d643fcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4509e5a-f774-404b-89fa-c23f05c3bdb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cdb0c672-af8b-4a26-aab9-000e86fdc5fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ee380fc-4b47-4d98-aaf1-fe03db7724d9",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b68e77d-1566-4205-8b53-2f09ac324e01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1156b15-f30a-4a2f-988f-c547f9cce528"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a072d7a-834f-4693-b260-eb65df75dd99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0b4322e4-3da9-4402-9211-7c77cc5bab09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11fbf833-353b-498d-a57d-31b58d7a195c",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26167c4d-edce-4fdd-95d3-a835b9d49fb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97c09d46-66db-421c-ad9f-c99a3155d041"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d959c53d-e7b1-4479-96a1-e0b277cef510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2de3356d-eeef-40c7-91f4-9b257d487b40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ab788cc-44c4-4c4f-9e84-c0f7d885471c",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "925998be-1cfd-4653-be32-89492b559932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a49ad7a-7d5c-4132-a55e-50ab002d18f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99ceb76f-0174-4d67-8305-fc00505a3fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd3e481c-7390-4efc-934b-ff84b88fc30e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38482b00-450d-4930-995b-66549e451c00",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72883309-cfed-46e0-a494-bf1d44d6a28b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dee77200-3c2d-47c1-b5cb-af92dced9540"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c31ac19-3902-4a34-aada-9f239e39d587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "198e0069-70d4-4b91-a644-2984ba5bd7e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a9e657d-67d1-4931-9ea8-275a264e038d",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc987e81-58e3-4085-8d39-78c6babc284b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66bbe2d5-eff6-4a5e-90ec-3b3e1fb32b7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee82e636-6b38-4470-b7d5-2a9116f1bc4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "961a1e18-2a00-4539-90a6-9ddd03afa843"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eaf9113-091f-4c1c-8ac7-291cb72ee600",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "074d73e8-d138-4008-996c-59b5408492c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e094e715-bc07-47be-98c8-cdfe0a434987"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eafefce4-c045-4f9d-8d2c-dc6e312be292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "07773bfd-0034-4c64-bb4d-ffd6f7ea4590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12d148d7-926d-4a16-a6b4-167e709859f9",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4daab3a-361d-4e0d-9073-a7dae20e3533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6edec102-9705-4b05-b075-af3b42d10fdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe7ad590-b9ef-41d8-a4f8-ef08c23a5c05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2048481f-8210-4acd-9df4-e699a9b32866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54eb3188-a339-47e4-b03e-3e7d0cb8f014",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a4a517c-edfb-43e8-8c1b-b42d19c80ff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "120f5cdd-b5db-4cdb-b65d-8bb9e588958d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "668dd967-a330-4afb-97ce-068c6d6022ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3fc63290-b0d0-49ef-8728-a94eedf1fed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efc03e2b-9371-4046-b7f0-a644ade73016",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c922e9f8-626b-4f97-9d74-09cdb89acde6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78b75332-e0f8-4cc1-b159-fc3ec1538e5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f529bf2-861b-4d6b-9c76-ad9041c34ca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "554fb4a7-93f6-4a73-8393-776c7b0b25a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f3785ac-2ff9-499d-8479-75b39dc81359",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f68eda71-3754-4c37-a475-d06962bdb46d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ae44733-a3bb-42b0-8d1f-25dbbbb1e9a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29e63a52-44cf-46e4-961a-bbad78d55f66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "74f1fba1-8b62-495d-8e18-df6f258e614c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08009e61-bd99-41fa-a761-9475bc3183be",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0622c320-7a98-412e-8eb2-1de5bc45cf22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33e0d2ec-321a-4956-9922-68e0a6fa1637"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5bccec5-09f0-41bf-bd74-bdd10c588b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d4c0636-43ca-4058-b20a-29ba3bd454f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18730e91-0ec7-4d60-81b4-a7c143f2e140",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f03fcc95-a866-4e05-8cd9-6474d8c8720b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cef50221-8a2a-4861-b7b1-394811c62076"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76d52dba-e138-4714-9359-d5680447f942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "46c19400-116d-4e3b-9907-48b4d75a293f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42f40dd7-35b1-4776-bb8b-b40ff4009563",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "becd7943-47d6-4f83-a73e-bfad84e7fedc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20bfce80-be66-4452-9052-b9cc3d1fb2b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d23a5b45-5849-40c3-bd8e-97018c2e9b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e7f425b-18f9-410f-bd07-c70006e0f46c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58915561-0401-4a82-9750-b7df387f60f5",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "588feabb-e256-435d-9753-0302ec7e601f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dd0e940-7eb0-49f5-bfa8-872f26a7c65e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b147b107-9385-4e7e-b258-3ce70254af22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8ec24e1c-b7f5-4863-a655-2f3d5b608dcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5823999b-26b6-4922-be67-4eb39f32e13b",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28c3e59a-720e-48b6-bfbe-c94999069e62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4060411a-3d97-4c91-aad6-f1f54f8096ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a118b381-aec9-434b-8864-97bfaf71b591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6282e03f-3ca3-4497-8a50-af80d7d6d373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d35fdbe5-dafd-430e-863d-44cb958ad9fb",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "645b2690-d561-45a5-8f9b-5dff3191244a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87e2f666-aaa1-436a-b926-b549aa84bdff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77b9ec98-dde0-47fa-84d6-81a780f3e86e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1adb944a-38c2-4c40-81a5-eed2f3314a68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c796c556-4c39-46eb-bc7d-25ae38af8442",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d0f7b7e-ac84-4d6d-b5b3-9d82c1b1dda7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2e30a79-456d-4360-a929-9cffe8d15e9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0596f4d7-8157-4aa0-bbc5-a40ca7476b4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "58619746-7721-474b-aad1-719f7bc3d301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3313ea54-6735-4ddc-b37c-df8c89b12848",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5051c3b2-9eb1-4834-b3a7-4e307484ed5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57d04fe0-26f3-42c6-9afa-c87a154bb2a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f40afa57-15f9-441e-99b5-5715ea9688cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d04fa3c-dc20-4f33-a378-ee174b3c3a47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7079f983-2fa3-496e-a301-50e630558923",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22520753-74c2-4da7-88d5-e9ecfbe01737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "837245c4-3e17-43f0-a81b-939095cd2ce1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6e49f76-a48e-44d0-bb89-c905b16cea1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "00e98aa6-2921-4fe7-9cae-d105d5092371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5b86880-61cd-42da-9e6c-f711a37179f5",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4369208e-a93d-4129-b6bd-6c753767c601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd1b906d-2a17-4b61-a7d3-1158edd96cbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efff08d1-0177-4ec4-8c9c-837e771f2fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e539e92-996b-4c69-a470-9bc758acd89f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9b86a13-8a05-4094-87ef-136e11a64482",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e41fe55-ee88-461f-a6a9-9c38c89904c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3977dd7c-da92-4be0-b79d-cb33d6499113"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0499373-ce0c-43c7-8ad0-24649de4cc50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae0296a8-f888-4ef1-a07a-ed89a8868bef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb57ecb0-3889-417e-86fa-ac8c9e80f7cd",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68814de6-28b1-4c96-b5e9-57246a5655d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26fc2919-343b-43a2-b443-586a8dcbfe6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3b7a977-7d74-419c-95b9-da1d1a99ef57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3653d63a-3a07-47a5-9b06-a98bf00bcb69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad5c5cb5-9640-4530-ad9d-8d3fb655bfe9",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c342cd0d-71bd-4a04-8037-1b9cf25384ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95e3b543-63ec-4824-81a0-02f318f41268"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac4ad608-7800-416d-93b7-fb366f33eb25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "99ba251c-67d7-49fe-854a-4d2d1b30d6bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfbe1e18-bdee-4587-8c52-32bfac3d4d77",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3efa5426-99ae-4ab6-a55c-43d21ae9f793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e29be89-62a1-4c59-9de2-ad29ab34c6f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "491a5eff-7694-4ca0-a003-afa461e591ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e541b598-2847-44b9-86ec-40240d08ce23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f070d7b3-5bd1-444e-9b71-cb71be6605c2",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eef14f1a-4989-4a6e-af00-6521bc8507a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edf0d750-9890-465f-be1c-4811845ce68a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1224c58-264a-478e-a428-be0f4626449f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c5f5aa9-2eb8-4f21-b924-226f511e74ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c85a58e0-f3a0-4670-94b7-570b6961e868",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "645b5cfe-e94c-4784-92c1-08c1036358f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b432002-22e0-41ef-90fe-8c80cf738231"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa363cbf-854f-4eb2-869a-35f263ef9ef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "1a38c8b3-25e4-4d22-891c-b4818832305d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "814cfbb5-8c57-48d7-8b54-f3e8ea53a372",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "424a7e7c-83a3-4bff-8e92-daa5f9a7bbee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "133b106e-b477-4024-8c92-a6ea8c4673c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d432396f-dae3-40b6-b945-4cd91b5f8c9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "94a50534-3bb0-4c48-aed2-0de7fcddbb3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18878cbf-cfdf-4d3f-b1ba-abcac342d21d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0af46ffa-57fd-4a93-9f7c-1998d4bc25de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3134dcf1-5b03-43ec-a449-1236cfc7fb78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72596f26-5fe5-4aa6-9fbc-3675765cb29b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c587eaf-2dfe-41ff-8677-10f8cbc989f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1381e272-07f8-4669-9ca4-7c73ace5a553",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa81f05d-7408-4a65-a307-520357d2e60d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e4de350-cd2f-43d2-aa7e-8dd2b7b0b4f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccea2fd9-8b41-4d9d-84e4-faef6fadd94f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1feda013-1ed0-4cc8-9534-273c82548f3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f9d3bfc-a348-45bf-b9e3-835a231075df",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e926cf54-86f2-47d1-aece-d16457ab9700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bedbdff-cf9d-45e9-8938-66130c07b1f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80100003-c826-4ef9-acdf-c7cfda02bced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5b135e1-cf50-4c5d-896b-d462c1f1622b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf42514f-dd0e-423c-91ac-664339b8c79d",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2febad57-8cc6-44d9-997c-ec930facce41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e131d5a-6530-4e28-becb-43b321c95563"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8de02ec-d725-4818-8d43-5fa8c055a1e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9e5a583-f2a9-4b4a-8c3f-98ac4764add9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca6bc06b-2abf-4614-85b1-971f6d4a8921",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5faf382a-2d91-4b5d-9f6b-a682e5c69e85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55b3d0ac-0cd4-46ae-909e-1296805ea476"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a96f9268-a670-4dbd-8e59-10ae57cf9df2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d4aa8478-592d-45ad-9a87-081053ab8f50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c7db67c-7566-45b8-a557-81e1758b9269",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2393712f-f777-4037-8115-62df49c23f17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbb99eae-a0db-433c-864f-8cd11d14f79e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94546a78-2a1e-4d86-8db0-a63d2e71328e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "de7b11bb-ea72-4638-b51f-da3a2de39e20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b5a24d5-2f7d-40dd-8e07-eb215e60d5cf",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd903d42-e225-4fb9-a0bb-254adef0eab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4e077d2-2640-4716-8ce4-7f6da9bd1c6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7348e26-58c0-423d-aade-2fb1e4fae04d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "52669bf5-4adf-4b97-8ba6-0589c68c911e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "779a7c15-7094-4c11-8b6e-89649216b4ec",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8fd46a6-46ff-4a9b-82c9-191aa21df8ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9a92072-5c46-4391-b05f-4a59aa6648ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69702d16-232f-403c-884c-4352bccb6bf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f0b6a7d-3511-469f-bcce-8aac284da1d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ec3f84b-72f1-47b3-b82a-47b7d8d78dd8",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3505263b-2250-43b6-917d-1de62671ac76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccea4ad7-7479-422f-8fff-ac9d2094b23f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fc5a85a-de2b-4c23-9697-273d95941a99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "085eb4ad-b6d1-476f-8225-4a8a052ac544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7ac89d8-1107-42c7-bd1d-2aa61b8da76f",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cdcd102-2c24-4023-ad23-ade6b31fdadb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "941e5407-fa67-4888-81a6-6968350511d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c729863a-9f44-459d-8b30-9c7bc2fd5353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c55710d-a67d-4c7d-84ac-2fb305771ade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5e85b01-ae04-4a0c-a7fe-31e4e084bacb",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6399cb6-bbc6-448c-adfa-2fda9595d16a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61d0a5e8-914f-4a11-9e0d-1cb227ded111"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d3691a8-67ae-46aa-b747-0beb7eeb1829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2cd1e295-4028-4100-938b-1a98967cd63e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01853d98-ce85-486c-a760-44350d4fb895",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0552d8d3-0697-4559-8688-16eca0e21192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8627bb9-a7a0-46f3-9a50-80cad3161d99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "653e1167-3581-4780-a2b7-a57f5476a551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ee065bb-8369-47ee-8d93-ae5e9546d763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16a1553d-07f6-4196-a1cb-ff5635fa7dba",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fbe7d47-1cbd-4ef4-9727-1b98f308a424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc25743b-c6d4-460f-9c92-26751853f2eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd03f107-6cc0-4b15-8d9c-25df3facccc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "df73cd03-613e-4c56-be89-56f750668c48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f29f91f6-a0a5-4dda-8ee2-f60438c60fc8",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29ea4e2c-4c20-448f-bd5e-d1708084ef89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cb1e674-4296-4134-b717-f8105c994e41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d13cbc4d-2a63-491f-a20b-2c85b67aea5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8a259e2a-b9f4-4204-8b04-f8c1e31a3f0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7650dea3-f6d7-427d-be7a-5a528d415bbe",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea5e6ad1-a7b4-47ce-af89-d4a7f6b767e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9bc6f17-e7ad-460d-9167-4f4fc8db19bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e40a8af-b373-4aa1-a2ba-90c4deac4d13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c17df38-c77c-4d87-b84a-c5559201cb46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f46de96-2bf9-4e16-9403-5e2cc92594cd",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bacb35f-8ca2-4cbe-b053-7ce9affbe086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b667108b-023a-48b7-889c-70b4ec9fa80f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52b1d227-7120-4f7d-8e63-a1e14dd929dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "74f94bea-ac7b-4dfa-b196-f3297794e171"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8e8d39e-5844-48c8-bf96-21116fe11ed9",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e318bba-657e-4ba9-951e-83121a1fe489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7985ab08-ebf7-458e-80d5-a249cfe4ffcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6566aa8-68aa-4527-ab4b-a0852d358056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e9b180e-99b5-45ca-83ee-ad71b7e95cc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eca5c1e-182f-4465-baa8-e39241a5c93a",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebbd892f-2a7c-48b0-a851-69c19125362f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66e6852b-8420-4cb9-bd69-aafc07f7b85b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80dbba91-5048-44cd-8d7d-89fc17c35e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d1cb49d-2fc0-4ec7-a627-d4d35872aff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79daf9dc-a8a2-4254-bbbe-f6cd589242f0",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8adcd632-fdc5-4424-9310-ad4891e1e0aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "852ecdaf-cd45-47db-86a8-0fbc9bd732ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c1bc846-57c2-47df-98fd-88c0df6770fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "509be2cc-9494-4d47-af03-6a33fc5532de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b28a9653-bbd7-4dd1-bcf8-b47cf0cb52d9",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8db6513-bef2-45fc-b286-bf678567c042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b78d297-3ba2-4101-a3ad-7f74aa2b3b6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4b187f9-1e3a-4d78-8597-05328cb951b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "29a8c848-db55-4e2b-ac1f-7df44d6cbbb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0b530ad-7b0c-443d-8b42-f08678487361",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0542912-6256-4dc2-8c7b-c09bda1508bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d25ddb3-51be-427d-84ea-572a802d703d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e837a78-464b-4458-9718-f2c19efabc44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4b1d646-7603-4d4a-9257-5d368d09b54b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53711e21-8acb-402b-8f14-981b8a036977",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8b5b9c6-7419-46b9-843a-dab38a9b992e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33537ab0-9844-4d19-bb18-58804aadd3d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83c801f3-7fc2-4c2f-a410-1b143b410376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba0048c8-16f3-44a5-a378-4be599664a2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2c53cb3-1172-41d6-b3b4-36c8d114cf72",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec7429fd-82e5-4517-9218-bb2011cd0824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86c59e68-8f92-404b-a9bb-8a822f2fedb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5332482-fa19-4c29-9aaf-92b7a44f6bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4f3cdc1-6fc9-4b66-8905-b3eba2672cb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5eb1e7b-d752-4cf6-bd05-9352b3b1cd39",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbddb849-b64e-4d5b-87b6-bc5cf126db3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13e734b7-bbd0-4425-be54-cd7deb6d1328"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4684df5-3f30-475d-97e1-f3c8ce066165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "86c83ca6-4a39-4827-b341-0bf89333c3ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44d321f1-6e09-44f5-b376-c8d986320b9e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aac4683a-f51b-44a6-b6ec-5f42de4ca62f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bc58fcc-a384-4d0d-8857-95542c48e747"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d2022e2-4848-41be-b887-c36bcf4a093b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b210b112-fea2-4f4f-84f6-d871db8d4901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47ea99c4-e529-4acb-8782-fa751f963f6b",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1f45bea-3f87-425a-acbe-93d12ab19085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edc763dd-e44f-46e6-91c9-e6ef2e4fe14e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fdc3e2a-d120-4754-9b01-c174fd535b93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2d5f169-62a5-4e65-a508-1d31cebb04db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fff748e1-b947-4015-a1e8-ce886b18cb80",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87eb9e29-103a-43fc-bded-78cadd404237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0949292c-bd1b-40ac-996a-8220e3e6884a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ae4862b-48cf-487e-b892-fff90892474c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "90d057c3-c5af-4ea4-bbf1-f8d19777d520"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab5d4b6d-a4f5-4fd3-8dd0-c23acb55188d",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d377ccd2-dcb6-4d18-9165-10de30e1980c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b16db763-a47b-477d-bb8e-83c3f9db2984"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57db0e02-46c8-4ede-b747-9c4320323cba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0aa7f47e-7094-4e7d-bca9-c81669345022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef9924c2-1a9b-4581-aefd-1577c7ad0d50",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f8fc5e2-3066-4b52-a7ab-cb871021fa17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cc658cb-e1dd-403f-9710-f80b665a681e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "340c946b-834a-4a3a-9c2e-89a36b2388d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "07328746-2242-436f-bd85-782a56ff461a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fec9e05a-9483-45ea-943c-7ec64261fb99",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef1f5c1b-9ebb-44dc-b196-a22adf20a47d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a400429a-106a-4928-b8e6-16e678709294"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82e49d6b-c20f-441c-93d9-5d953505b6f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "561a14c4-f84c-4e86-8e95-6665a7db8bcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f27f07c-6414-416f-841d-b6e5312a5652",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f7aa90c-8241-4e28-9ff7-1a317d578d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e566fd0e-1f6b-46ab-9e46-8ea5026254d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c202dc79-f651-4da1-ba5f-e0cc6840db1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c27f1f5b-68f9-4dcc-b6c7-451edff553ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ac10384-33b1-4bb5-bf76-4fee2c6237b1",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f45da85-8dd4-4ce7-86c6-39f1b3bb524e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "605cc976-c553-4362-9628-353bd7511c3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "677e0882-09f2-41b8-b18a-c197ddb1e40b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "63a524d0-b1ae-4687-a80f-63fd15ef21ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2da4a5a1-f75b-4757-9a45-162911c5214a",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1f577da-95f9-4b72-9f2e-09e5b9931ce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af164832-6124-4cbf-85de-9391a2981475"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61811602-9ab0-4ed2-aecb-b8cf16dbf6b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d7be16d-f37c-4e4a-9073-669486c5275b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6ebbe91-8986-4230-97f0-654378c61132",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b9dca6c-7c80-41b3-9f3a-7570ce0ec624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4df6930-ab02-4271-b352-f6cdd4a73132"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fcace08-be71-4fb5-8909-c058401980c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbda660b-8844-4b40-91ed-d8afb3383617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f492eb6-2e43-4d18-8662-54ab856fea65",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92263570-b545-47fb-9722-815e3fe7dc98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4046caa4-eaab-4ea4-95b4-e78c9170e453"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bf0b738-e4db-45ce-b6b7-75d46e04250d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eaed0caf-1c5a-4bea-b478-d08b2c7ebe3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b7b8856-07c9-4eb0-ae09-eeb91121392e",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "141605a2-6f7f-4d5c-a1a7-604d4d7f6dcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b346a65-82ed-40fe-a161-3106d81e9cdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2676460-b0ad-4f7d-9396-f99398bede77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a64fbb8e-295b-4675-a105-a83dadf3b0c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c0f29f8-9210-45cd-aa33-ca006c9b7ea5",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56a3e097-1d23-4d22-9829-731f99315c33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c4152e4-9f15-4911-bdcc-949a3b17a958"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47ef6c77-a712-4912-a177-41f2ca1f9d4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4068ed1-effa-49aa-ab24-db728559a6cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a274bb3-b17c-4af0-acae-fd0c437d437c",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47bd2811-094f-48d4-a8c2-ba0758460ec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd51644c-b717-4767-8f7f-de9f253fa124"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59416144-28c1-4ed0-a79d-7166a4b45828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6c0a097d-0abb-4478-a4bc-b4ac42d6dbdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d0bd803-c25e-45e0-9cc5-c9012d39993e",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7260951-6e18-4ea0-97c4-ff4eb230e2a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d8c6728-0750-4def-a2d7-cde390c6b386"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a2e7414-20c5-41c0-9b2b-885877cdd5e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2dfe6308-bf25-44c8-a1ef-ef4210b5a296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b3673d3-3022-4061-a011-d409d8e30499",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf35df57-750d-43cd-bae2-ee792cfe7571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02cd20ff-f36c-4211-8f92-e07e1918853b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23b5fd18-d7ad-489f-8008-b0ccf1cffe41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b046f80-b4f2-45d1-9d8e-a3bb44cd301c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f99ef27-6a11-45b7-9832-e2986b892934",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb962e6a-3bcf-4bf1-b876-0de65a751108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "210624ff-778a-4c0c-984a-7e02277ce4c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4683550d-653a-45da-ac56-31193f506820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1f024f9-3355-4488-bb22-b0fe106da757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26cdf25f-7188-415b-838e-f8168173bca2",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d69c5e-b1f3-4c8e-8a51-460772f6d41e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb268a12-8937-441b-b50e-5da5047a5793"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e8a81c5-e5a4-465f-8580-83920f605f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "db546ce6-6761-4b79-9f76-db6428810ba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "921c5d86-7c92-402c-ba7f-c6415f887883",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6763a9d2-f946-49b7-8c9b-2b1fae8e84e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2073f52-53fd-4a8c-9834-469bc931a8e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "909436de-b55e-44a7-a1a2-88e7f8571451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ebc197a8-3271-440b-91df-e6f6bdb34fd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ff2cd4e-96a6-4b67-b96a-88d4cc97fef4",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc733844-17ef-4de8-bff8-168b2e5f0ab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28092bee-465a-43c9-a05c-da835c346de9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d3084d9-8888-4510-a94e-c7d71d1b4c9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7ff1828b-2052-4cc6-823e-4e2df3cbbe13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eda28118-c0cd-4ebc-9833-34ac31af55a0",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1a93f21-8389-40b7-ab3f-c4489659283e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41ce8472-e9c8-491c-8ecd-ede0791c523f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abe23812-141d-4ee0-b0ef-e9f3dc180e17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5114c0d0-8c83-4559-9fd9-446cb9058595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b5bb852-c2d7-44e6-a556-afc9d59b00f5",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6233ab5-6743-4733-bce7-c80d6a4df60d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c5e461d-b641-4fb4-8604-5550a9acf79c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f3ff0c-9163-46f3-9fd0-b21ce810950d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "73bafc01-3075-4e32-a8a1-fb186bf792bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab874fb3-07b2-4e33-afc5-98b40825fa98",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f722c509-414b-47dc-b0e4-1f1ccabafb39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b006eba0-7ccb-41e4-838f-4d457abd0d3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12c5dbb9-6dfa-48cf-8243-3313b3760503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "28797de5-9a97-4a8e-948b-643a06588cfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85914116-e1c3-4702-98fb-9aa579e6fcb4",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc43f2d6-5a8c-42e4-9464-ebdaa94ea32e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c2c0a77-9322-42ad-a7bb-d05ba3e6b306"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c559bae1-3457-477a-a0b7-c65db1a151b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "41d8b8d7-656b-41c4-bba5-6123f4f116d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7345442f-a67b-4e1e-8e91-b84e16ef457a",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f3992d0-8b13-42e0-bc81-ec86263b4258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "561fdd88-acc1-43a9-8b9d-fafb275f4c6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e4496bf-5402-477d-a4ea-e1c33d56c28a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "840e07dc-578a-4c2a-928d-39a4803135ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67484aaa-e08b-4943-9250-d3171b2c6bdb",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be605e2c-b7e6-4390-85f8-57d9001d4a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "debc7168-fe69-4b4e-9939-358b6afa7f7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d804fbca-1c46-4e9e-b573-1c2fc0a9850e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2cc9137-4543-4f74-927b-e0033f8dfd23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "641e01c9-3d65-4bb2-aeba-d5e0b349d7b1",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebe1119a-652f-46e5-a493-c3701d8a4e1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0baa531-991a-447c-88af-69cdf6b08df6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bdce4a6-e9c0-4b47-81f7-be653ef50850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6080cac-22f6-4c37-86f0-9bf9796e7567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b9e74b0-f742-470d-8217-e6e431541bf6",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3409064-a0e0-44c9-8bad-d8353f3ca17a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d03da858-ac76-4773-be53-b6a889e60918"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "020e70a2-8f79-428c-887a-47965da711c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "79b9021a-5edb-47f0-8518-465d4aa2ef66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63871f88-71f2-4c7e-aecf-c4d8f7f1dbc4",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4c75616-a139-411d-8f4e-7ee7ef4f913e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bd18555-f856-4039-8328-e0f0a83aa15a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71337c8e-f722-496a-bac7-b4142055339e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "90bed6bf-c66e-4e7b-a960-70f715c10b98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bf1b39b-6389-4d26-aaa4-2ccc6b56888b",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e2956d2-1d64-4091-8bdb-e71d172941ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d74d6480-06da-458c-9940-0783d58e2476"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22776c2e-4abc-492c-91d6-dc8cf9389a36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "df32c945-4961-43d9-ad29-70c8cb86f494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a43c82a1-83bf-4f38-8465-8f9487d6867d",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0af8bdc8-0b87-47d7-a85f-65531da7f051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "665ce982-871c-4d1e-aca1-7502b2255b3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a2e2ff4-2e40-4ccf-bb63-5acda3caa411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "148c1596-41f6-41f2-8f96-28d4294a75cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c10feaf-5fdd-4de2-9a0c-e758fed285b1",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "506908dd-1376-4ebc-8341-9c7b1ebb4cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f6f3bfa6-64d9-4df8-b266-46543d6b9a61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6951222-cd50-4dae-96ac-12308e6943f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d0d6ec6e-f5f4-43b4-8482-ed17dc0b37e8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "51c2ab10-2c09-49e2-953f-2fed5076c0fc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a16e73f1-53d6-44e7-aa05-09b53e93dd66",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "784a2975-a8ef-449d-a96f-b55dd32b1c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b6318175-b0ad-4e0e-b931-6fec495ef180"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e49f408-2af4-48e2-9afb-7ad18db9f307",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "1b72fa67-f748-4b14-b7c5-48bbd6499852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "390857d0-6f45-476e-bb5b-1e7e0d323d4f",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c6ce656-1b16-4c4a-98d3-022a05d9f4ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "96946c6e-97b5-4617-8646-8edff86ad106"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61007c78-af4b-4dc6-89eb-0bf12bbab522",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "9123c55e-6016-4d93-b531-5338c56aed20"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5f16f34e-1a2f-46c2-b356-e0a3cd27c370",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "772e8066-11ef-4a16-9147-dd373854701b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e0d7c315-3088-44ba-860f-c1286d5a8c65",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b02ef583-67fb-4413-9e8c-e52c7a9e7970"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c2fbc62f-2dbd-44f9-afac-b7a2224d453c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "87dfa4f5-9a1e-4e7f-9da1-6c2560ba463c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "39c29429-b3a4-4a01-842c-3613ddd757b1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e00afcfe-d150-497e-9f75-a3e9a96d7358"
                }
              }
            ]
          },
          {
            "id": "ce18e5cc-d941-477d-acc2-80af8694e80f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c09f51f0-7697-446c-a50a-1a57f8d1a9fb",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "082e60e6-12a7-4ba6-900e-b146806144d5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c1afffc7-a380-492e-a3df-4bb92315a9a2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b02f4f29-6ae6-43b5-9eae-178e91f8e771",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "40e59ea4-e534-44be-ac99-a52c987febf0"
                    }
                  }
                ]
              },
              {
                "id": "0cc2fff8-3516-4df1-9280-d166d503bade",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1f7fbed-916f-4600-9f37-0aab1f7ac280",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4b4f99a6-58bd-4c08-8ffb-114f6f76970b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "380c2207-8411-48e6-a24a-6d3821f32def",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3db5b02b-b966-464a-9180-09b9c8460340"
                    }
                  }
                ]
              },
              {
                "id": "5ba39c16-1ae2-4fb7-9344-692eaac35313",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d7297f07-bc1a-4a8d-b5f0-a18fa97d257c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e7358620-7fc5-418e-afef-002050b0f0f4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "083f1ce5-e060-4f22-a923-ee2cc99a55f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "efa95402-63b3-45cd-8e10-aecdbc24f89f"
                    }
                  }
                ]
              },
              {
                "id": "485a3a41-552f-4887-a3ab-f6b967acc8b3",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "520d9d69-c951-417e-a5f6-d4dda67dc320",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b4f9296b-4312-4fec-bafb-4b22f9c4fb84"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "81e87c19-220e-4377-84f5-e7d1d779ade2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "ca45ef4c-da3a-4344-b5ca-50d169cc8258"
                    }
                  }
                ]
              },
              {
                "id": "bd58b8a5-c769-4b82-9e07-0f75bb2fef2c",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c27aa97a-1288-4d18-bcbd-7720904a33b8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aceca91b-4773-47b6-8193-180677b45d0c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8a874719-77c5-4423-a768-b963086494cb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "68dd7b95-7d49-4711-b1cb-701c6ddd134f"
                    }
                  }
                ]
              },
              {
                "id": "c90ef291-3d74-4935-9795-19129282d103",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fd24c0ae-e8bb-4d9e-a34b-5da0923bfb56",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "17d3ddef-8846-4ff9-9710-9db87c16fe38"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bbe490bf-78f5-427c-aa4e-6fdd6b8bc0c3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "88a8ef31-0e86-4c68-a464-676300529ea0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c4314261-26c6-4aff-a67d-c18b4cabf54f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2064b21a-b235-4334-b291-be612f73abc6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d2a4f21c-8dd7-47e7-8ade-47dbc4fdfd97",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4cd74be4-668c-439d-8974-7d060e4ac867"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0f2f849f-fe5b-4e1e-be7d-9fcf02202b92",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "c82aea46-ea37-49cd-9d13-a9fdc23aa012"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b0a3996b-89a7-43cc-aaa9-5c1df0c18666",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6efc3055-8972-4bc3-be72-b91eb9a16a9c"
            }
          }
        ]
      },
      {
        "id": "378545cc-2f20-4059-8456-e4b9adcbe228",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "42ac619c-8256-4c83-80ab-b8933f63fa14",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e294bef6-e8b2-4ca0-b43e-5692fbfc7438",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8a98b9b5-0b5c-4eb1-9384-1b3d6608a718",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "027d02a8-ab58-409f-aa7d-b6a795f4c025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a860240e-d4ba-4d77-bf2c-734a7138fd6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c300cad5-6863-4c98-8646-90433ffaa7b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b68f453-1092-41cb-80f1-5ffdcf708922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1843fc37-3525-4f7c-85a2-86243b1c63ab",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9d441d1-ac89-4194-bdd6-69f1767f7cf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2957c994-af1f-4633-aa08-3867b8c6f550"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c3afba4-7be6-43e7-985f-c8c1909671f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "31eb7fff-4332-48d3-b6f4-68022c36f825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60f10538-ef22-462b-93a4-367fda38bf08",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fda0911-0383-48f5-b8c6-630aaf355b30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "726aef86-d652-47cd-affe-ccde5a1caa05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e94b307-a27f-4111-941d-c75f08eb8dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6483ed66-d025-41c4-ac46-ecbae713a174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebe89a9f-b939-4de5-bda3-2fcc709415b8",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a98c2cd-4957-4623-9681-84e8cc5f2e82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb28e233-0654-4520-adef-7d7ba5547932"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8491b7d-6d8f-4df8-bead-c23b06252166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d25452c-e937-4053-bac2-5f4124b9c3c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f17a50e0-fca4-4fe8-8aba-aed3e222971f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb8dbfe8-6a8f-4b8d-ab35-39bfa67fce2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d92b7bc-868b-4bab-93c4-ad9fd0db94e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a1004ba-0bc7-4c28-ae0c-7db81f4fa4ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "74d34122-ca85-424c-b740-bee30b6bac3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddc30346-fb18-4a2d-aa8e-5c57644ba583",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "679448d7-36a1-4eeb-a315-331349989aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba5c4137-23b9-45cf-9e0e-a2ba4c597346"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4846efe1-43a4-458f-a15d-b2fdeee3350a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b176eed2-f832-4f16-ad8b-cc451de6c4e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c76d056-29cf-42ed-9397-3e12f102c50d",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0da14aa1-a66a-4c08-8d13-7141a643c5fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5f0cdc7-1be4-4b7f-b42e-e62ced673cce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ff0a92a-eb06-4c64-9605-dc2ac0a82c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "63e7b50e-238b-4a37-a3ef-ddaf8a67ca31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4929167e-9c2b-4478-a5a8-8b19fa3dfec7",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5264eba8-2785-48d2-a644-8341b2ed8fa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97859d4e-57b3-4046-a959-0362c0096867"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "355ce9a0-0467-4e0d-ada2-0bd43a771de6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b38b099e-4a10-40c1-a85e-015e7ddb04d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00f3446d-5f4c-4db4-a912-40a42170aee4",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f390ee22-3760-4d26-b9a5-958e0f5f504b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56ab7933-be68-40d9-b503-693696044372"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "123eb3d5-2045-48bf-b510-bf051f408701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3c0e917-8e9e-41ed-9d02-331b75038f37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dbd2654-fe92-4846-bf8c-e678d1e71ce6",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6fd566e-c929-4ae1-bea1-319e5ae849f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b78c6c88-b232-4e67-8d35-5d5530dfd9d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30d24c9b-6cc0-4ce2-b78c-cc81eb522121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bcd7ce32-fd01-4069-823d-5af176327340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55099657-b8f4-4213-b570-316b036c9dfd",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29f4c55f-cf9a-49c2-a3e4-936a450502b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "605d1e1d-f86c-4532-a848-e0889ddcbe55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b71adf40-e8df-4bee-94d2-3c596b0b88fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "791013ad-9557-4b4d-99fd-d5d8c76b94b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3b3a8c8-587a-491b-bbb7-ed1e28c6b2f4",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a988ec5e-b938-4bfb-9369-019fbb14b767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de859bc8-8545-41b7-adbf-dfee5560d0d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22fd3987-6a13-4648-be27-a2843526c424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4eaa6e0f-0fd9-4fe3-9306-99f0826c0c7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9471ebe6-20ad-474d-acc8-7c0773d7999b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07f5e224-c9c5-4928-8056-c36407029f4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b126069b-06f9-45b2-bc78-a829e335ebf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4e8eb14-1914-46a9-8a78-4cb9afcc71fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0de30263-7625-4902-b735-2610febe96b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "547bde35-1c6e-469d-9e81-351cae0a0ce1",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef2bf3bf-d759-4272-9386-1e62f05f74e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3864a8b3-de6f-4e84-8315-712354f35a78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd67177b-bc45-4e7c-a89b-33774fc9aabf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a93b6964-4a16-4bd9-b306-f81dbe9f051a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2c4a3ec-b7f7-4615-9aec-56084f2dfee8",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a0102d4-57ef-4d26-8150-c7e3a565d28a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c928801-6893-423a-99e0-3388df9220a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cc70ecb-518d-4537-a76a-82840b8de063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "19fd8d8b-2795-42c8-be07-6c3e1ff20700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd9fd8cf-9601-41c1-8eb4-a28fca5a9d83",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c40345d-ed84-4043-b443-e534eef24f33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ae4ca3a-c6f8-41fb-9c7a-940c4073a0c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3a08d08-74dc-40c6-ac7d-36cd5bf7b3d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d0cd2c2-9982-4a94-8e00-6c195874e883"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f983d63-3556-42fa-aab8-acd5952a95bf",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f98630e-07d0-4533-bc3e-2d2bfba454e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "685c7f45-959f-4160-ad02-34b5012817d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dc68d13-159a-4e79-bbcb-49a25c9116bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "d838e460-1259-461c-bd3b-362fd571feca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20bde925-9031-4ac8-8fce-9487837a4af3",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8cd3a99-9c3c-4446-8bf6-7d9d83e9985a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0388ce6b-4e2e-4640-a158-5afabc29cb20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0643e6d1-d01d-49b5-b544-6323388e2565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ab058ea-6e2c-45a0-9342-3158479e26ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6086dd52-44e4-4fa7-ba27-e2452db52506",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29eb6eed-5dda-4e4d-a98d-47229af3a278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e569e6f-fbfd-4938-b64c-6dd8a61f466c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f7d8991-36d6-468e-801e-11d297b1d36d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de5c099a-c343-4682-9f8a-e4403cc16abe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07872e0d-5367-4513-81ac-fcaae4577922",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d33589c-efc1-43c2-98d8-bf6e3671aa3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88d09a58-7fe4-494b-9f68-d7fb5306f4dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edd130ba-e488-4368-9005-f2a7e8489c48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1346122e-6ebc-4dde-b842-3d3a5122ba2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb5ad380-90c7-4bb6-920b-88dc556fab3d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0ac9fb2-a439-4034-93a8-7528e19e3240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e94203f1-b77a-4576-afda-8f053ffd304c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24e322ad-922f-43eb-9284-44ec632071be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "968fa7a6-a11b-445d-8db3-26dd7b826fbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12f5cb32-3160-4b2f-b63d-b5aa8bbf6a77",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "613ffac0-cb88-45b1-bf3c-cf1c4b3d4a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66b2b896-8619-41a9-a5bc-65c8d076649e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71295a7a-1f46-4272-939d-c65eaadfae1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36273ba7-1040-4fe9-9c5f-3dfd2dc913e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04b9621d-61fe-4681-be53-b28bf56326a6",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f25ced2-6b24-4665-9f32-0b015ce0d47b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2738fa7a-1c99-4389-9c07-43f7f3c94f8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4ec1b59-b7b8-4313-8d29-2ce27c472128",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5de37221-a794-4410-9821-acbce4392c48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9293bd29-8af3-4319-924f-fb19bb80d6fb",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba35aa67-32e0-4859-84bf-aff1f9934d53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9f61f6b-abe7-4e42-aafa-34c82500aa08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbcae669-2225-4982-bbbe-d063fa2f0d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "86b4d533-34a2-4104-919b-412b9519cd63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63ec8b5c-8d36-4903-a2e0-1b6d392f9621",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "445302e5-51e1-4e19-aefe-8315232c2388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9da3105f-7f58-4746-8172-318f6a024ab7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f33a4f0-97b7-45c4-8247-ed6e3d4122eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "600d23e9-3850-4e94-b4c9-e9b0ced4e970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5838277-56dc-4bf4-a5ba-c3ed30b0484f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3108a74-d171-4fd6-b266-3af77569aabe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "194d8fdf-0a36-4be1-adac-6a75a402eae8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eacbf3bd-cdb4-48a3-b251-40799e0c3c62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f98a6019-00c8-4312-957b-29b71f1bdaf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da0162b6-97a0-4223-93c1-e547a67dd713",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24edf67f-7ac4-4766-850e-7ce111cd068d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a323336-1473-4f3a-b861-36aece19a75f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe5afca3-4de4-49cb-8613-6edbf8782a3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1db0608f-6428-4d31-a4e6-e9785f33f0d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e972317-059f-4a0a-a6ac-0f2cd9778187",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d816360-1b08-48f4-a0ee-6581a79242e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25a86520-989f-4ee4-a8db-e246507ea769"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "136d6f7b-ec1c-428a-9627-dc6b66abb5a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba57e0b0-cfd9-41dd-b084-4f390e85b0bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea26ec6c-ce20-4f6f-962e-a4a16c7e951f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "003524f3-36f1-4f9a-9c36-0045d228c306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e83df5d3-bf16-4a58-87c4-c7b088d8f623"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "860ff423-68d3-4eca-9db8-1a0e572f6d5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40b48047-ebe3-4623-8fd9-6b602faf92a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51bdd4f2-a62c-4ded-be9c-66672060de18",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c1ea145-39c3-4a07-9b6b-e597d534ef20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cfed221-71db-48f1-acfa-84e701f45091"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d54bacc-f9da-431c-bf0d-35a87d655c9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75253ead-747e-46e2-b0ea-8e351201c4af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "215ff963-6f3d-49b5-8d3c-4515ad4f9af9",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "523a7a67-2720-4597-b2a1-6bafc833c42e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "034b771d-0b94-4fb4-b100-4f40f06a8739"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54ed7f72-ba37-4b21-9936-80649c0e1fb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fa09188-3b96-4113-ba47-711882a48c14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "095e7ea4-f05d-4a65-8efc-99498b445121",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13a40e0a-e7be-4c01-a83f-d59a18dbf541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "786e5756-aca5-44f6-a93f-006e9ee9f832"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69339f05-2494-4af4-8af4-5820b18543c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6994d0c-ab56-4276-9914-0b954d827f70"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "40172dbc-9163-4989-9299-f6fc1ec08958",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c1f293b9-dae1-4126-ae21-d0dac879c61d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaaa4783-e00a-4a8e-9c8f-ff1fb45c3a38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cea860e-433b-49a7-9702-6ad0312ca20f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83764d6b-b531-4b55-9689-650b0ceabf26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dc202e9e-0aeb-492b-991a-7cef3ca5242c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cdb6288-a8da-44a9-801c-18cb40874a44",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "244dc7aa-668c-4d74-a5f7-28a1bfdf702b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "273652e4-a85c-420f-aa35-8e64a147db60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff07f223-1fe5-458f-9c06-952fb45087e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d3c1db91-d902-491a-ba20-75f634f3bc2d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4742b73b-f0d7-44df-b510-5a969f937e76",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5189f0f7-0991-4dc4-acc5-2db1af729808"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0c8ba8ea-22dc-42ad-8cee-bc7464780431",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f5897f38-63a7-4a3d-a794-22a785d3ca29"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6fd6ca0d-5293-4983-84b4-d0f6bba7be8f",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "329706f9-15ca-4f64-b6d9-5053ffed38b3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6ac184d9-af7a-432c-b468-7cf240a909e5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "beb750ab-4be6-484d-83fd-73a158bdf40f"
            }
          }
        ]
      },
      {
        "id": "af214480-f408-4434-9eac-538f8fd210f1",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "2d7c8b8f-7a63-473b-b527-f6b5ec2b4676",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e1eddb27-0222-4539-b043-46a596a76507",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "60092519-c40a-475f-baec-543e38825d8e",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20b89ba3-70ba-4e7c-9af3-64cacc825a3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c34c35ab-ec54-43b4-956d-09f54eb8a385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17a6d53b-41a3-436b-b4bf-a5ccfbb41158",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5528ab79-0cf6-423d-948d-6af705cccd9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49adfb47-cfd0-4731-ab6f-f3b0eace1019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c0e6039-0e58-448a-b27a-5216bc9ce146",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68821ab4-05cb-4a51-a17c-7ce2d564d95d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b8c5d44-3fb8-41af-9049-75f5a8304f1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ed54cd7-3633-4004-ba7e-94a2f878d5d3",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a9a2663-4d74-4128-86b7-4dece894a8f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a90a460-8165-4d81-985b-7ffb3873213a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "784fba76-73a3-4bc7-a0b5-dbe0aea18348",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07519b0c-1c2b-4b5e-b971-ee99674e9d46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30c899c5-2a61-4881-8e4b-879a33bdb3c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fa65a40-a12c-4ccf-b2e1-5b0d91c7c077",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f520f0d-ecac-41e6-b3bd-d01e91c168cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "399c1303-80f1-4891-8c3f-a7b7ebfd0c52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19954e36-ad43-4a25-ae1d-c9bff3b954c6",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4b18646-b97e-4bbb-b43d-9a26eba1012b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b11f8bfc-9c22-48b4-98c6-64d6397c3d42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b1701c4-2dbc-44c0-a3d1-148f4c9cb4d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ac0b5f5-c101-4c85-96e3-78cd12c80e38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7510253-7465-426c-8157-50867f331c2f",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96a2981a-c9cf-4e5f-9113-5f7e9e62310d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dde9775-a10e-4af8-8e8e-bffd38ce9c26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a468644-1e5a-42eb-9cb2-4759b017ee10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bff72e65-bc73-4100-a04a-f0eb21bd347a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "232d59c5-0e71-45ae-b586-7d71b3d51435",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a07a52e4-1fdb-4661-8b7c-73645bf94c8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "519cf72e-bc3e-4483-91e2-8e88dcb0c060"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2135812-c1dd-48de-97fc-9461eeacafdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58b5b7f6-815f-44af-b90e-43f8aa0278e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c1d324b-cd10-4289-8d6e-9c8082af78de",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6649b0b5-005d-4e49-b8eb-81574844769f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d7453a2-23eb-42c8-a19f-bb1cae3630fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3e85f25-f6b0-426d-8f00-0b3487f21423",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5d39983-3a9c-4db1-9dd9-92e7cfb67888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "888c83a7-fe93-4d08-b6dc-31ecd20d7a3d",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efb79fc0-7e8a-4c27-a4cd-7b8e7542c096",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c57ed0d-65e9-4e44-a086-27d30bc690fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf9d9ea5-1753-4939-938a-e37cb8ac02ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46468292-4081-4a62-b394-212e93691c1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7c354cf-85f7-411c-b3c1-d9809f4ca3d4",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "616691d9-5200-4dc9-af08-cd5b78ed27e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c6d9a99-9898-43dc-8e7b-702d3614f5b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6485cfa9-825b-4153-b704-772b6b205a75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2421f594-0dbf-44e7-bf28-8a14807b5bf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0abbcf23-8e16-4bb0-ad2d-e7c89c478704",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8061c971-8fbb-4e5e-ac3a-096849fd9e88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1c87de3-ad31-4b88-8ac2-1dfb9a9c7e53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70876c8d-9fb6-44fe-881f-a3a30f9845e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45ea3907-e855-4234-b7fd-78348ef6ad50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a200fe7-060f-452f-9e39-e948ebb018e7",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e5dc867-eeae-4133-9768-278009f4d4aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9f0b312-fac2-4eae-89d3-a3051a90e61c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f2aeece-7166-4f00-9b13-46a589f083bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9e28ff5-a54d-4afd-ad3d-7ddf2fbefb4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1613fda-da2f-4ad1-8143-0acce572cdbb",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9b0660e-425b-47a4-a459-0e0b8f99c132",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b82bd3d-f8d5-4069-bff1-00c3b195843e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a74ef9b-3380-46e2-8afe-f78e5eada116",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c446b22-c65b-4097-8265-fe4d764bc2da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98a182e8-c557-4649-ada2-d7aa1fc6407e",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ec1b451-5e54-47a9-9b13-34aa157c5f36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c866d3b-25af-463f-bd92-b114e9bedecd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24d1e1df-647c-4d9f-aa8d-2a9e72acdf9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4471908d-4468-4d09-ab3e-a02e8d3accb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49542791-3334-4051-a3fb-b1a6fb624dd6",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13ea0b6e-0d70-4edc-a808-5fd1506f4f26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3aa94c48-2ef0-4f4e-b0a4-c7f7cc91bcfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "800cad06-6dc0-430b-92f3-30820ddf5ae5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dc64f8e-e703-4ece-bb76-16f9b1b890ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e33f5add-30f6-4e48-ad3a-9d863b8c9afd",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc5242e-9977-4b34-97a5-72c9081b68c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b054b51-0cc5-4e4a-bcf5-af047ce8738f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab64acf4-43b1-4003-a042-68d572d653de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59a9166c-e1e1-44f7-b3c6-6e452d0c4355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fedef9d-191d-4c0b-92ef-b1d0087fe43a",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16503362-49b0-475f-8a52-ad311a3e4689",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "365bb260-8de8-4c18-863f-053ed243cc2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f28e7757-add2-47f9-a480-3aeb42b7ffac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a067a50-b13b-46de-9da5-15c25467cf2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "532e67b4-34a2-4d8d-bba6-4586251dffd0",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ab9da8e-862b-4194-a262-169685f40dcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4a6a43c-9c71-4c70-a112-34798121e6f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59bdc817-6592-45c6-bff5-ce5c4307005f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37e5af30-86a5-40bf-a505-bfae8556caee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b9044ca-4dd1-45da-951d-1beac757ac17",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c8138e0-8334-4e47-9d5f-16c3ab75a3ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e40f4eb-aed6-41c7-aa8f-a0d8525300f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3748ec9-6ebc-4a50-b8bf-a8e323d27b6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79cc0d13-7488-4831-9b62-a1f6c6361286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5df304cc-4998-4a81-87ee-6ff12b05b0d8",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3ccf751-f3d0-494a-bc79-5a9e4993b0a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0fcb97e-0270-4c0e-873b-1f8d8e56436f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b6ffbe9-db15-4179-aca4-b43e84eb3f2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5ec80d9-9b36-480b-8f97-8174dc8bd1ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "163c128e-3d5b-49dc-b301-bf23eb3cfce3",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06570cb9-2a10-4edc-b65b-b157465f4c1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5ee2506-61c4-4b0e-9454-a711d33ecd2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb36962f-ff8d-4144-986d-0e60833a7356",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "829a3aa9-f977-4ab6-9304-0acfd06a002c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57191f18-4675-4755-8837-d95d88091f99",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "323a4a24-948d-4178-adeb-15278b238078",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cd98743-badc-43e3-93ed-4c95a32055ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55955b35-690e-4b1f-b462-98a31177378d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "187869f8-ab92-467c-8f3f-cba8bac5ad72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43854970-3950-4005-b7a3-3108a5bc00be",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e40238a1-fade-40c6-bfb2-313598f1ffe6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf2adfd8-b1a3-4e72-80bf-5a9f35481363"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e99f1773-c18b-49d3-ad3a-9c794470a833",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95b8eacc-ff9c-4a10-89d5-874bb87cea3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d614addb-017f-4853-8b00-e84e6a2207e4",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5be95293-bc29-4ffe-a9ca-33d5bf297a76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e421d4d7-07d4-4ff6-bdb3-b17a7df9e2e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73ff70ce-e522-49fe-8075-33e66c1e2020",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bf9a62e-c15c-47b3-baa2-3dfc283d0390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5de62f65-fa7a-4483-a139-eb3e27dd0e7c",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be97de17-6621-4e3c-97ff-bd57373c6f3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e62ca440-71e9-4087-8c23-b9ed90a24be6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1dfaf10-1573-46e1-aa98-bb72bacfae55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27f9ac16-7e53-45f0-98ac-47d15f9b3a38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acfc4788-0266-44a9-b1ad-9d2432dfed23",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67bc1dbb-9793-408a-8609-d61ff626bf04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7205c43f-3d10-49c7-85cb-fba86a816ece"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3299f6b-1b8a-40ee-84a2-eeacdd894707",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee336970-5cdb-4a92-9ccb-912c73aa718b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "612377e6-3601-467a-ba8f-1fa16aa3aa85",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "477e3fa8-795c-4671-bef3-89b837903144",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d760f00f-574e-4ce7-b780-6a41b272ae5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de637c5c-1bc8-40ac-b85b-ab0abee1163b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d25fabd0-a0db-4273-82fa-ed567f508941"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5afc7a6-f928-4b7e-96ae-93ba24e43eb5",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81214ade-6602-4047-851c-bd6fe64008be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60153698-1ac2-425e-9f6e-6eca94eea0aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb99b5a-c52b-4798-9f13-306d463dfadc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7cf25a5-e8ff-43c0-8af3-2619557a81ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6571686c-0811-4eff-801f-3d1d4c04e012",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9b93b10-d737-4450-b51a-6dc73100afe6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a4d6042-9dae-49d0-85c5-84f25448341b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "565867a8-8db1-431b-b3bd-c02f99a7a5ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58358189-42be-4764-b5df-244cdb82ed1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "716da29d-fa5a-4db4-9609-9189321ffca4",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1054fd3-bf55-49ec-8985-fde7d330273c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b4e5af5-ce5c-46bd-8a60-6674cfcf1636"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea338157-b68d-4e30-986e-8494c1721137",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "250cb361-f2e2-49bc-952b-b3107231c046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28015dd4-6885-4512-8615-58bfcae0fa6c",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02bc8e63-c65d-4bad-bd00-7fc351a943fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ae7cb73-b263-4a17-91a7-55416175deb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77fed1fd-99ab-438b-a52b-c74221763e65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55f8fd83-7c3c-42f5-bd04-4b80557ceb52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bef5df4-af21-46cf-8774-fc925f9edb23",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8e6e862-3661-4b9d-9edd-5e3ee7ffde2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8aa19da-5666-4282-ac4a-711a0ae60e56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9efe6dc1-855b-4f8a-8939-73689ecbd59b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3ec211d-d099-443f-a2a7-280e364e830b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c957333b-4564-42e8-8cd1-add9a314bcf4",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41cc346c-b350-4194-beea-e4b93c3cad80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "beaff51e-e503-4222-b765-c02ee711dd91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c424a3a2-8f51-4945-a133-1eec84ce438a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99552636-6e03-4aad-beba-d93a413e952b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb5d87f8-6813-492b-8317-7b290f45adef",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ee5f319-7a94-400a-9069-f654bc45f422",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23051375-e782-4915-bc70-33a61f1574ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56c04bc7-63b6-4417-b380-fcc8b238b19a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a274d208-3ff0-4e92-9a93-b9640d8c9eb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "315619c0-b325-449b-8dfe-075633804370",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53fe6312-d569-42b5-a348-a4cdbff783ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3000077f-26cc-4f2a-9bf4-5ac67320b6af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2fc6e26-3995-4dbd-b55c-032c0f054a26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89783ca1-3bc1-441d-a263-14a69039f9b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5f16f6e-6ec8-45df-a50e-51b4f738c02c",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70f3804c-245b-49bd-a5f1-5b98bcf7f3e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13bf2c23-3341-4468-89d6-0159e8a3c9de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad4cea0c-c50d-4fae-b956-8b8a151145a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8fabfad-c85a-41d4-825d-8cb7fa32f203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f8e6b15-b4d5-4772-8165-a677dd6b7fb9",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecfb502a-3b60-4c45-8059-f5ed5de79da3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d18597d-907a-4a70-9a0d-c24d3545c22f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "908e0edd-0c10-470c-a003-f2e76e87f4e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a981c044-fee9-4214-ab07-553f847e244b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55b66744-f5e3-4992-8cdf-aac200237aa3",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59463761-ebc9-464c-8709-9dbe4e311b60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cd85bcf-b1f8-4c23-899c-2174b17165ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75384c31-ab97-4758-8736-137527991b05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5720b137-0984-47fc-b81f-cdf82fc4af9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ee3056f-210f-44df-80b7-1ea0052933ee",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "539bafd0-165f-457a-b004-d584d043d01c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "069c53e0-25f5-4542-89d5-a68e2703228c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5377ef49-2ab3-4f8f-a278-0fd31b76ea55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba38bab8-d0dd-40fb-af38-14418b7d22f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68455446-927d-40c1-9f69-17a3ef6fecff",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bc12a25-7170-45c6-a5b8-50c9961ac7d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24619689-8f68-4df2-9fbe-c0f7ff2ad5ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64ff1469-9912-4c5f-8c93-784ad75f8b5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61f44cb0-e864-40a7-87a2-6e0eee9c0a0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "460f8209-6ead-4b24-9348-4579d281acfe",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fa6bbe6-9d06-4770-bd71-2cf932ae386d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f34236d-0d67-4a65-8f00-3953903e3ef3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eb3f6c6-e2e1-4cd9-aad9-e6a7aebe84eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d17bb4f-13a3-47e5-b931-754d6affcf40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "238bcd41-b302-459a-8cd4-145a9c267369",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e3460f2-858a-4ac5-b1bc-e50a2b25e6f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1f72388-a66d-4f25-bb4d-e48617737671"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bddc68c1-9730-4bb0-bdee-1e9258b21ca5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "992a9111-cca2-4b9d-bee3-e2c63c46c326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bc07f4f-2130-4a87-8096-a4b22954a558",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91648f6f-69c1-41bb-bcd0-1d44ed44e1e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd42e294-254f-4a64-985b-def40ce707a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08d8c902-5d76-4b39-a5bc-5183e9cbd727",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea5d6ad4-59ef-4e4c-8b03-0cebeb792b4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d8c6dca-2d80-4ac3-857a-4255671b474b",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "161a5bea-80b7-4da7-8287-85829d14fafa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ef6eeb7-df87-4cbf-b4f3-f3bbfe4c5261"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "265fadf6-78ab-4d63-a78d-4636d4ffbb42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d56c1fa0-ba9e-4bdd-a632-3fd891456d06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d54c1e79-151f-4788-a481-2e2351fe947b",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc3bf27c-1a9e-4f2f-aa2e-18d2757435d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8c85d60-7c23-48f8-9937-72c1c3fec2f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f902868-5401-4074-8320-3a2aa569017c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a467d069-fe95-406a-90aa-2a11e1c328a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "941a653f-2b54-4502-b7c2-1cb2a413f412",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b159a8a4-d779-47cb-bfb9-6701ef66980b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "142d8ea8-3dbb-4ce0-ae30-64dcb60c1976"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19fcebd0-c93f-4a7d-8742-a3312cccf5ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f22ec92-812f-431d-9beb-6e95cf7cf60d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea7a006f-9298-4859-b6af-c50e8f592bb5",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8606cca9-16ba-4740-b4f9-a1244f65ce09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c141ace1-bcca-4415-8027-731eae2dc2eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45334c26-a1d3-4da0-9b98-e1f477030385",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e733d4bf-f9dd-45bd-9a0a-caca9fa41d7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fe8a958-cf08-4482-9023-a772d8e982a4",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51148602-f2b5-4168-bd2b-dd23bc424372",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1136b405-0a96-4627-a388-e2e187f7dfef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bcf8036-f364-4153-ac55-6035fa91a472",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f945da2c-e886-4e4a-8ff4-ebcdd279b211"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d6425ab-acaa-4cc5-879c-51584cbc7084",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90bd23a3-f362-419d-82c2-42891e4bd03c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49d556a1-4226-43d2-89bd-c8f869b73269"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b37f7a5f-f24c-4131-9633-fbc1fa7c5bd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78e398f0-584f-4549-b0ac-58c1701aae3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98265614-90b1-47a9-9628-53bbe133ee1b",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1af2c599-482c-4aea-bbfc-c1728ee2d7c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13eb12e7-8d9c-48a2-a581-bdad9d37dd25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2481e93-7966-4e52-b03c-27c4f7eb29cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0fb2a22-ba1d-444f-a432-7a273a9d7c2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd955d96-d71b-4a03-b427-8aa34e4c7045",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "621c7241-8135-4e93-8e0b-5b85bdd9030f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3eee76a-aaca-4b24-8337-bff8e20308c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b0d8a08-b7e2-42e9-9daf-dadd2e39deda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84a52c51-7403-412b-89ba-a4dddec2fa0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2b434e3-f67f-4aa0-afbf-db05e80b0039",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ca4b7e9-30e3-4c1c-ab56-fc90ad6480bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8b668d0-8b8d-4fa3-9b1c-dfb60e5eb0a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0052398-62fb-48cc-9457-10dc2cca3d60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "093ec868-501d-41da-842e-f50564b70d3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8087587b-d3de-4197-b19f-b0ff54493ae0",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58fb95cd-176c-471d-924f-35e71ea6b220",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e205b554-2b7d-4598-b383-b40dd9ea0430"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bb80daf-e3bf-4829-9602-d507b9daa371",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b30dfce-d8c8-4e49-a067-3db7779e7e80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfabd07c-2071-4793-86cf-de9b5a21245b",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "752e7196-e075-449d-b202-ec8ee7851fb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cb39d7a-b432-49b5-af38-c36ab09eef24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2b3c446-839d-41b8-a791-4232e018c31a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "643f229f-358e-452d-ae19-88d3f499de51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8793ce8f-a5e2-417b-abd0-2b7c3f9eb55f",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23f9dd70-769f-4c79-b58c-c3dfc464d155",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d204c54a-e7f7-4bd3-a98b-9990c4c1c7a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35c072c9-a3de-4105-9cee-a008a1d69d7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc136b75-d0ce-49fc-9661-def08e7f9dee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e389b553-2c96-4c0b-865a-0e2d5cd4abfa",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42db799d-cecd-4abe-ba63-b23b51f75aea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2d56951-e670-4072-91b9-2bec123ec97a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8965f127-94c2-4fe7-8832-8c89fe20cead",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b5d1835-feac-495b-ba06-9191b6eb4d53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b08baa2e-b5b1-49bb-bdca-b7cbf464de01",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "462a6ca4-d2ae-46b2-8786-04f2d16cdb27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69bfb32d-abe0-4ddc-8ee0-9bee8921c9ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c8a6b68-6afe-4cad-a109-464b13c8ffc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e4e8b9e-7cf9-4786-af50-94fa9f501a49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bc82927-71ef-4641-8706-926a09561cc5",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bfa9a23-f659-4fba-aa1a-ec85eb088325",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e38390b-c17e-4ef2-a786-d3140a2e0086"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9e91804-d300-470f-80e8-fb7de30b71d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5e149c3-d630-4314-94c7-cdc7c70fa2c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37d9a5be-6187-4308-b32c-b255e0a8d2d0",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78c96395-9fd8-4084-a93a-c4a85e84c642",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6275cdec-b2a8-4d45-b607-c262a2b72b0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "210c664f-7503-418f-9d3a-25300e79adc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3da5e3a-7b46-4689-b05a-f827952d521a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7dddea8-3b5e-47d8-a54d-16b3e0e3c606",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a380e399-0068-45e9-a8c8-12e466cba14d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b53b88b8-114f-4c05-aad0-355e7ace1e60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47f418a1-71d9-4333-9a04-cffc71afef71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebaf32f4-3252-429d-8142-95fe1d57f7d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e655c968-ee05-43d6-ac41-0ffa88dd6933",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51bf2354-f525-49b8-a2c7-3ee230564bf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94336312-82bb-4744-abea-3022b484e94f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7734e88-67a0-43ed-bb3a-55d36ce0ceef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db40fa53-5dc6-4d71-860d-6d43a9671d6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b12c355-91b5-4151-a2d5-a837a775797e",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecfa6297-bec3-46df-ad79-3336b8e0f16a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a785209f-98b8-4ba7-81af-d6830711f2ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5d56d89-c583-4cae-94f4-840bb864de7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b10fb951-4921-4dee-b0f7-1c5656d96b8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90d612fb-9525-4c45-8c9f-b6ade6fdc1b4",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e2f416d-3895-4c1b-9936-771c6fa990f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c358f2e2-c0b3-41db-8b11-54ad6886965f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22f919fa-e023-4193-9739-d90437c29651",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c64f55f-7280-4f52-b180-5fcee19aad76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89a9f6b1-3233-42fc-af9a-e1d832d8d530",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b4ee453-a90c-4b14-89dd-37ce31c1ee86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "893b568f-aa0b-4816-a413-928a9cbad7b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f84eb746-ec98-4bbd-a238-feb8ea2d6026",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fb000e3-364b-4f8a-9f5d-e0199ceb4e60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "275bd277-f3f8-4cc3-95ea-c18810dc8318",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "983c0a1c-b2a1-47ac-abb3-b8c0a18728bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09ec385f-8be3-44a8-a63b-d90ab2a1f7d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "226ee1f4-0447-48c0-8f78-d368dcf6622b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63029b89-9b06-4310-99b6-6db5a5f5b2f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b58b03fe-df4c-42b2-945c-b243c28a1620",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9b2cd81-b18b-4950-9939-f9abc1d824d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d83fcc6-2679-4842-9404-bd96ecd753aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa454823-8571-4efa-9e81-ef9e9e24e9d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29582f27-6b33-406d-bf91-4a1c84b532f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7956f784-8212-4ef7-b8f7-4084488d0568",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c52d3499-c2a6-4111-a7cb-6d97586d40c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae82fc06-cc3e-4c09-bfca-406fbae83bd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f37b422-c60c-4dea-81a2-56832d71068e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b0f0e0b-f95c-4616-a48c-6ecf213f0f28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa74687c-3814-47a9-a8f4-3486244f8f3e",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e9819a6-47a8-4eb6-b81e-4e94f59b22f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "642bf28c-d8bb-4c33-aafa-e0699103afce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eabef0f-a45d-4b3b-9a27-b290d84f6c49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eccf238c-fedf-494e-b400-32fe7cd71a97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fe7a3ea-47cc-4869-a365-f4fc7b7cc462",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94c42666-d51e-4b91-a2c6-f2d8f8b2eb84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbc7cd69-8501-4bf3-a1a6-130a6b9bda67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a5b69d5-ca7e-4271-96d9-3c2a63cec39d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae75bc90-bc1b-460d-9d0a-28a1248a30f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a04d885-b211-4f0f-84e7-08de14d684aa",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c2fda8f-8262-412b-b437-5c3b3f94bf47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1905f468-d027-476d-8288-c7c2283a1cc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7706fa85-8483-43d4-bdf1-b1bdea71e462",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "560d2e9f-98e9-43e4-bc3e-cfac08b0edc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce932699-8156-4f73-bcbc-e3fbf4a1f49e",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4547dba2-3d2b-4c95-9a1c-cab160206c98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f0846da-5563-4228-9471-b4d6faf261a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a3422d5-014f-4d67-9646-3f8834fbd9bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d758bb43-d3a3-4b90-87ca-598cabc7a940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09771103-aca3-4f4b-a4f2-e16632a2b82d",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3375e077-949f-4f31-9854-209c4602f1bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19c98f5e-c890-4994-ad1c-da30f79b5e7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1501f34-1b41-429d-a289-48ac8ff16834",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d86be02e-b0b8-4c7e-8a89-0fa71e012771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35ff8876-5ece-4fa4-b15d-7223ba4742be",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "166771c4-5bc7-4ce9-9b5d-821f60472c95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a07a1df-2eca-489b-a7ff-545341cb75d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edd848c0-bbd8-4b72-8669-1c6bd3b2ac88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b6ed94e-949c-4096-9276-b7b62aeb8b53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80a4fc29-a14b-46fd-95fd-78faba28bb62",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c268322e-0906-4162-bf53-1249182d337d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad9ae4c4-1b85-448e-8a84-34a3b273e997"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0adfb8f-0bf4-4333-84f1-22b6a806140f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc60cef3-24c4-4b70-9de7-2e53c12c1a35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bcee59a-1bac-46d3-9edf-cf19057ec4f6",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d368201-1a26-4393-8836-437b625217e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d775265-d2f7-458c-b05a-0a72b5086e9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bd4f5bc-a04d-4dff-8624-2434104124bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6942183b-ce84-4d81-bcec-1aab110ec90b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59d79429-5704-41ce-80a0-79695fa64bc1",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac817565-ea4f-4eb5-886e-96b0d62081bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c66ab1e-01fc-46a0-9282-c040763b04a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63988c45-58e1-4a5b-8099-0241fc8f3844",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8080cb3-4ea5-42d2-a711-fa265e368207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d1b2dfd-f0ea-47e2-ba10-f4604b762c1a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4a8389c-bdfe-4b1b-bd04-8ef067c251e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70cfc300-cb2b-4083-a62a-a94993608056"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33b46efc-fef7-4183-b05d-743073f9ffab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "722e2120-360d-4946-b343-ec3d52ef3279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19d1422c-1cbe-4a55-82aa-f68e828b5e07",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c25ccb53-c488-4288-a3a9-e201254daf5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2eb1cc00-c440-4c78-8ebf-274564db7a9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2babb00f-1ae4-46dd-9817-c4a70375b111",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c8da7cc-36a5-4eb2-8cf1-cae1df3769a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02bffefd-58da-457e-8e61-e1e80faf4a63",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77fa6ffa-a120-4fec-a52e-cba4e7dc23ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e9ec217-2ea1-4b67-bcd9-d0491293c508"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae2780ed-0059-468f-a4b1-cba3e5729664",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b993313-f31b-4ab0-924b-57aa2018d133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "742399e5-efc7-4473-a8d2-f42419f4a642",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4650782a-db17-49d3-8db3-332da03e4185",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21355c66-da3f-4b37-8663-ac97efb3c1fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5234a4e0-3200-4d34-afb3-a0d4b1156f15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c38d560-e307-4022-80e6-d1051d9a6d16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aaea08f-dc6e-426d-be2c-9fb1541bc9bf",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "633ac402-489d-4dc4-b163-a7d58eab6fe1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37cb92cd-786f-48f4-add3-2f38de8bfb6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bd75ce2-90b5-43ad-a87e-33f7cff604f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94b38904-e940-4485-b798-a8c6c3c5c7ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58105ecb-5668-4445-9ac4-3ebdd21f2479",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e540b326-b18b-436c-8f77-7c909af3475e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71a759d2-0b9d-411c-a581-3180d18b8606"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8adef2c4-4cf7-414c-8cac-4f728856ca6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6253da91-acfd-4218-8a6d-4477d955216b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0b63b42-f2fd-48f6-891b-96f95cdabeaf",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "323e488d-c97e-47f9-89f0-473bf01fe8fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "572b951c-88ed-43bb-b1d9-c8315e0fed0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea5ab072-11b5-4c70-814f-5a0a702bec5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88cc2f6a-ef5c-43f0-93a8-6af9da522d62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "885fcb33-0900-49c6-a359-6d8db70e08a8",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c6d9c71-0305-4fcd-8b2b-32fce8265e9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "602f8824-96f0-4138-ae55-502ecd97a5e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2da3f981-9e3c-4ff7-afc0-87e703152e50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b29894d-86a1-476e-80a0-861d3fd9b361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73335c9f-18fd-41cc-acd0-f493d2af8408",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "645ca7c6-85e5-45ca-92a9-b2a40704a0b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "848a9c47-5885-437d-addf-039fd09ff248"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cf59d48-d8e8-40e3-8038-d6bb58f482c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c17be141-8da3-4950-998c-7c2f8399ea93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c06efc2f-7d77-4370-b73c-9dffc619d309",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50397af8-082a-424b-8526-829986ea36ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "167a6cfa-694e-4922-9199-fe6bdfb82efb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd70bdad-1dfd-4069-a15b-b1f1d883432c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c6e7331-fdcf-4686-a6d9-ac94b9f7427d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a4b1cdd-0a55-4cd6-81bc-cb6818fea701",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38e0666a-8abc-41fd-9202-8039999c186c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b48787b3-a361-4b38-a367-3a5452daef9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caf82a74-68b3-41af-925a-c44690e38ef1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef38a3e2-aa18-4bc2-911a-d3d23e0de6a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea2a6e4b-efac-4fac-b7bf-2659e678d63b",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64cd9563-6a26-4099-98a0-b9d653fc5593",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddc7bf4f-4d05-4adf-8bd9-852525a48095"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49de7e47-380b-46f5-aaa8-af720f8a4d7d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fac788d1-7391-4fc5-9045-a7d306a36826"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d753c757-4eea-4b28-afea-a2c37a156b6f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eceeed8-5d81-4773-b580-ddc9030df7f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed1af71f-0deb-4c6b-882d-48363e49ccf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2a1b6bb-3322-4c73-9c98-afb67e941a7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f22d8b63-2182-47e9-8c67-3e71cb319e88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c0e9cf5-6d38-4e2e-a5dc-9e174e0dc3a0",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f645380-f41d-4b7c-87e9-131defe7846e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a17bfda6-6176-468a-a567-dc912dd0cb1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18a08815-6d8b-4b11-95c4-1cc35281f28e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b151ea40-fa67-4445-89c7-240c8888790a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "515862b6-115d-490e-a66c-74a1dd734c54",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0a581bc-9ae8-4012-a7b2-5ed18c0589c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7e16465-4057-4ea3-84dc-049a2e9e9794"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e0922a9-10ae-44df-b936-794f943be0c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1e40af1-d1fd-4adc-bc39-38991177c822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0cccf02-a2ea-40f0-b0ab-7b3aeaf355c7",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6b175db-c2bc-4e6b-ac5c-72e44843b75c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63e4074c-f50f-4f92-9291-347fe30bda2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab5ef2eb-36be-4d72-907f-35fb140ca111",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76219c58-6559-402c-8c3a-a14a9eb6b2b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12580e07-23eb-4c4c-bf8f-5fe82ea255cb",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "147c6c56-b9bc-4550-801e-bddb3441ea6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39121ff6-3d06-46c2-8337-2fe9d42bd262"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdb135be-8d8d-48f3-8675-7dafb5113240",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f5554d6-2325-4792-a666-415ead3a3278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b29f94c4-76e7-46f9-b28a-a067c564b4c5",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8db827d-26ea-4948-be53-f4243f7d7aa5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9d314f6-f053-44a2-968a-6f0e5ea0a992"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31534da3-676e-462e-9b6a-410e31ab0d02",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3094122-c656-4ce6-a14e-9e5ff82bb8d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fc6dc77-c4dc-4031-bf7a-1501594199d9",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f157278-a1f3-42be-b73b-e3fa0673b114",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "593c5eef-afd1-4f25-a965-68dc78b3e32c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac1673f-955e-4fba-9ded-c0c6dec3053d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ecec1b8-e46e-4ba2-8a40-165137d73377"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e34dbf20-6e06-4d27-98c8-f593b4ffe7b6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0f909c14-95a5-4c73-8e92-08a5daf4a4aa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "83bf7b71-0a86-4815-8e60-51a4d85de3af",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "82dcb0d3-6ed1-44a5-8fba-8e4be0b1b2dc"
                    }
                  }
                ]
              },
              {
                "id": "0f64186c-a97c-4436-a145-aae39278cbc8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2ed8b4db-283e-4915-a8c4-ec727fd37224",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c1a1578-9035-43db-93c6-792cd501d7c0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "073bc1b6-5159-4579-9a75-17a602a569d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b9323e5-742c-4f21-a876-32e3668e884a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1a5da26e-783c-464e-9074-ee1ec7aa1cc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96bec9c6-44ae-4de4-a31f-a6e4bf3ef39e",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79449373-a794-4cff-9905-12917302ace4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f3e47d8e-00a0-45c5-b336-70ac4c8b6308"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b66d2f8f-9ca4-4eec-9de5-1a98ab47f47a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c19fa356-98e9-40cd-a318-a45117a1f255"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9f519da6-4feb-4b44-92b0-248723447e38",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b6fb8049-ffd7-4946-9a3b-a282d10824cd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "24fb6bd9-3c4c-4caf-b6ee-7f44abc09627",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3d4b0ccf-d1c8-4229-834f-135e992b73ca"
                    }
                  }
                ]
              },
              {
                "id": "075a327c-89ec-4696-a43a-9a6a0270e108",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "6d2be5aa-593a-473a-9ed4-8afee5b364e7",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8653565-d496-4730-94ae-9c044a6c3511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "a6b95cf2-1c23-47ae-ab57-e1bd438a2f94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f7930a2-163d-42dc-882b-fb1777ddc061",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "547ed1ed-ffbf-4575-b272-5d3a4c4836a7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d737824f-cc18-4de9-aa5d-f2026ef42f59",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5af8f487-91d0-43e2-8f73-0f7c66e90f6c",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c25244c7-e1e7-48cf-939f-172e88d8bbcf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f2a62c28-bdcf-4167-963e-92c2bbab6168"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9513e110-7d29-42d3-b8dc-c14f39b2f3db",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "82df9540-e3ea-4941-a80b-4a96ae1f54a8"
                    }
                  }
                ]
              },
              {
                "id": "fa67b6dd-f97a-4b97-96d5-2fbf2e4a74bb",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "832baec4-d7d5-4bd8-aae2-c2c17fc87fef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ebe4028b-1013-4689-ab94-c5b1d92dc768"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "44070a23-7192-4640-a1f8-25e85b26e835",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "efd57163-8f8d-473a-98fa-4cd336df27e9"
                    }
                  }
                ]
              },
              {
                "id": "2a0db41c-0078-4f26-bd21-7b0ca1e05dee",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "28c09769-3db6-49e3-a4b0-faa85fd5ca28",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "46201190-ef09-4116-a296-edb57db1d02b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "706f477b-e9d5-4dc0-956c-c1c1d3781f4f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "017adc68-17a3-4b6c-a02f-381f543dae0a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2172b111-dec1-40d5-b8f5-22b1462a4c1c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "30b3d5e8-83c3-45f9-a9f8-0d62b762d7b9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a734faf7-375d-4dc2-97ac-6bdd95a51a11",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "88e82bee-abfc-4b29-9bf7-4ee7ecfa6d8f"
            }
          }
        ]
      },
      {
        "id": "961d607a-c84e-441d-8039-efe2e57f69f2",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "19f57e64-d7b0-49fa-b5e6-595152d71b2a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "46e23127-36c1-4018-a3f7-0bded1424466",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f051b1d1-f006-4b50-bca0-a89060d91cd5",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ee5cf07-4994-4eda-a925-eb9aeec51117",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "39c5ce39-b91e-47fd-ba34-bed281156597"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1e2e99f-d6ed-46f9-98dd-daabffb92f1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c6254c0b-89a8-4594-a59f-1f11b67fb424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18108908-9f50-414c-9c18-683f103dbcb3",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d6a7670-6cd3-4411-b30a-e67289c859db",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3319753d-a2a5-4c11-ac3d-bc63a35408ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1805e312-f1ad-4801-9acc-2db2a5cc0cfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4e2b8909-e4f3-4dea-945e-719c24c7ab0e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ea8997bb-4536-42c6-bf0b-17b2f91b2425",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "31cd1463-7f37-4f64-a4f6-b08ba8d8cdb3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d41a4a18-820c-4f2f-8cea-32d5f31dc8a5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "336f225b-cd4d-4e6e-85d9-c3ad605de013"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "07909521-f7c1-4338-971d-92af1d914900",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "14ed8687-2878-4e1d-b92c-ab88f6be4820"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "53ead1f4-07c8-458b-9519-a3e1aa5d0c01",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9008a05c-c289-4ca5-bb39-7a112ab5c08f"
            }
          }
        ]
      },
      {
        "id": "c3f5f4c7-318d-4713-a2cf-5f4d9e5ca2e1",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "57a20ed7-a595-4299-81c2-b0d55fef7503",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2ba44716-6f0e-4e63-95ab-c50e473f668d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b5fb03d5-fef9-4138-9447-1efb99ebe866",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e08017f3-3ba7-40a6-8ef0-1965f82a35d7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1530e5bf-0a11-46ad-a66c-52bef8aa9111"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "337f4247-6b72-4a9e-bbee-4fed321160db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b16683ee-2040-4769-9c0e-35d6302b3600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94ac8614-cd44-40b5-8eba-487961131072",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "901aa27b-c7d7-4211-8f2c-fc1f64a3c867",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ef25af55-b162-4b21-b6f9-21cb90bc5771"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b382074-8d26-4216-b821-45f7e74e81d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "674524bd-9564-4590-b233-f3b6da82d47f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3acf8f07-6476-4d26-89c8-32a11449a778",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "02e88e38-37db-4db2-93a1-a2fb116b8640"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "51ee6774-8322-4883-98f1-c2d476e78aff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bc33c539-2feb-4fd3-95c2-1260b9526d4c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "83874301-d18b-4286-a133-dad5663ff77e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "fdf779b4-63ba-4755-bfde-a83d5c86cc98"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4e42dc5a-d571-496e-8244-1b8e9dd465ae",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "101f72d7-0f9a-423a-b70c-b60e25aa982a"
            }
          }
        ]
      },
      {
        "id": "914773ab-1f1b-4ad5-9213-5fdfcccc85a4",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "b77e53d0-72aa-46ce-8aec-2128bd783108",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8d222988-6651-45d4-a18f-a8fc682af66a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6704549a-dc35-484d-9428-2db89664f2b2",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f7b1679-2560-4b03-b6bc-f98b2a58901b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6781bcae-61ae-4c28-bbe6-cc21bcc8849e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abc6494b-897f-4cb5-8c46-52928399ae0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c4404033-8d5a-4c79-b83e-4b4c7a37e69a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e16d53d8-f77a-4e4b-a8dc-67c14a9f5362",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e45c474-a7cd-4b32-8f84-10f1c707bfe3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c61caff5-acb0-487e-9ff3-516ddfa14514"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef7a04a7-9014-453b-a152-ae8968d24fa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2bcec80e-5928-4cd5-85a4-382f4819106e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b1529073-58b0-42d7-ab91-98f8a948b2c8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f391e001-f66d-4b76-aa2a-817b428e800a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e1bd9715-16e4-426d-9b9e-199be2d926a6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4dad507b-6d8a-4ff6-81f8-63c54605d15d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0fff4a8b-0291-454f-af47-61b5dab4067a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c8d05ca1-ae3d-4517-a701-f6dc9ed692e2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bd3530f6-7d9e-4afa-b529-36f985cac8fc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d11213cf-4da4-4a6d-8f83-a740091dd5a1"
            }
          }
        ]
      },
      {
        "id": "c5c247c1-1d4b-4e95-9221-0c096adcb5b2",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d522f7ca-816d-48b7-b987-7a4f5c25462c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "35d2bf23-686d-4614-aa9f-81856c389308",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "b43620f1-5719-4d6a-97e5-d8a211354f5e",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "157d442e-fa39-4f10-8afb-93f1ee06b8c1",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0bba773c-a75c-4728-afea-a3c2e325b5e9",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1915,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 92
      },
      "testScripts": {
        "total": 962,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 953,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 105.78927203065136,
      "responseMin": 21,
      "responseMax": 624,
      "responseSd": 104.24638163574022,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1670027788776,
      "completed": 1670027827180
    },
    "executions": [
      {
        "id": "b17e356d-d501-4f06-9d08-15d0b672015f",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "28669552-c391-4d0d-b7b8-39693688ef60",
          "httpRequestId": "b596a5ff-ad69-439f-a507-5f2eaa17cb30"
        },
        "item": {
          "id": "b17e356d-d501-4f06-9d08-15d0b672015f",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "0af4cfb5-e2ce-4e13-a87d-5f4b201e085b",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 0
        }
      },
      {
        "id": "4e4e704c-8485-4443-8041-1676d25e4e34",
        "cursor": {
          "ref": "6a7b2075-7465-4381-815f-34e23ff7fd4d",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "7608b4f5-2126-4ca6-bdb1-929992249db9"
        },
        "item": {
          "id": "4e4e704c-8485-4443-8041-1676d25e4e34",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "87d7449a-27be-4bca-a06f-bea0d031b3df",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "6adf702c-7940-489d-a22b-8be8055ae402",
        "cursor": {
          "ref": "36964ceb-6683-4e4f-b7c1-359ee142b08d",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "57a55010-72bc-4d76-9b81-e0d07c4c9eb1"
        },
        "item": {
          "id": "6adf702c-7940-489d-a22b-8be8055ae402",
          "name": "did_json"
        },
        "response": {
          "id": "75a575db-3e0b-4341-82a1-588cecb01f5a",
          "status": "OK",
          "code": 200,
          "responseTime": 201,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf6b553a-fc56-4b3c-982f-24117544f787",
        "cursor": {
          "ref": "c069e916-4b6d-4c7b-a85c-052e1ed59ef0",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8fdd172a-98ba-4fa7-ada7-15ad24c24d3a"
        },
        "item": {
          "id": "cf6b553a-fc56-4b3c-982f-24117544f787",
          "name": "did:invalid"
        },
        "response": {
          "id": "f41d16f6-11ca-4c49-811f-6252b8f96b62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf6b553a-fc56-4b3c-982f-24117544f787",
        "cursor": {
          "ref": "c069e916-4b6d-4c7b-a85c-052e1ed59ef0",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8fdd172a-98ba-4fa7-ada7-15ad24c24d3a"
        },
        "item": {
          "id": "cf6b553a-fc56-4b3c-982f-24117544f787",
          "name": "did:invalid"
        },
        "response": {
          "id": "f41d16f6-11ca-4c49-811f-6252b8f96b62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "543c62d5-95d1-4fa7-ad21-5c54c937057b",
        "cursor": {
          "ref": "d91d65ab-5622-4988-910b-78f74bf9aef3",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "686f5e4c-de46-44da-91ec-f28c56e01c36"
        },
        "item": {
          "id": "543c62d5-95d1-4fa7-ad21-5c54c937057b",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "0151f340-be50-48d1-a8be-6309e15fa189",
          "status": "Not Found",
          "code": 404,
          "responseTime": 199,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "571e45a9-c7ad-4631-9e47-1caca370e464",
        "cursor": {
          "ref": "80600344-b969-4304-82fa-b73d3d32c546",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "00b93637-b28c-4081-82b5-467095815f70"
        },
        "item": {
          "id": "571e45a9-c7ad-4631-9e47-1caca370e464",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a13f8839-656a-4a2c-8d2e-ba8342b10241",
          "status": "Not Found",
          "code": 404,
          "responseTime": 49,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c49a86a-4ca2-4d99-87a0-23b3d9ca90d0",
        "cursor": {
          "ref": "08eb582f-e7a9-4c33-90b0-7898af7cef3b",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "af2f1fe8-dcb9-4682-942b-c5a218467066"
        },
        "item": {
          "id": "5c49a86a-4ca2-4d99-87a0-23b3d9ca90d0",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "f50d4a2c-c3c4-40fb-9586-838cf3ed9227",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5ec333f-fbdc-479b-8450-8cc1c5c2c91e",
        "cursor": {
          "ref": "7613c994-dc77-4769-ab29-e935d9fee255",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b911cbb4-8a43-423f-be97-5e3ac0000167"
        },
        "item": {
          "id": "e5ec333f-fbdc-479b-8450-8cc1c5c2c91e",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "1614f023-c4c3-45d3-a958-9bdb369c1bdb",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 50,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5ec333f-fbdc-479b-8450-8cc1c5c2c91e",
        "cursor": {
          "ref": "7613c994-dc77-4769-ab29-e935d9fee255",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b911cbb4-8a43-423f-be97-5e3ac0000167"
        },
        "item": {
          "id": "e5ec333f-fbdc-479b-8450-8cc1c5c2c91e",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "1614f023-c4c3-45d3-a958-9bdb369c1bdb",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 50,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79770637-a051-4fb3-a2fb-1c0296eae515",
        "cursor": {
          "ref": "e564d141-75bc-47c7-b8a6-5d5883bb877b",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "d2733a4c-da48-429b-bde0-139cd9819f4f"
        },
        "item": {
          "id": "79770637-a051-4fb3-a2fb-1c0296eae515",
          "name": "identifiers"
        },
        "response": {
          "id": "fd7c8c22-7e1c-4580-9ae5-68adfa78b590",
          "status": "OK",
          "code": 200,
          "responseTime": 185,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfb0f1d5-be9f-4703-a51f-1fa46f4b1f21",
        "cursor": {
          "ref": "1d92099a-463d-4732-b024-617f58149809",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8b22ba65-09a4-46eb-beb8-786e675a5964"
        },
        "item": {
          "id": "dfb0f1d5-be9f-4703-a51f-1fa46f4b1f21",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "c45b16ba-ba30-438f-aafd-a00eaf0637b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfb0f1d5-be9f-4703-a51f-1fa46f4b1f21",
        "cursor": {
          "ref": "1d92099a-463d-4732-b024-617f58149809",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8b22ba65-09a4-46eb-beb8-786e675a5964"
        },
        "item": {
          "id": "dfb0f1d5-be9f-4703-a51f-1fa46f4b1f21",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "c45b16ba-ba30-438f-aafd-a00eaf0637b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f4fd8ba-fddb-49bc-8c32-f534bfa03f8a",
        "cursor": {
          "ref": "757e97a8-1e98-4ebc-a13f-ef034e77f0f2",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a04f4b98-fe1b-453b-868b-4f05fab54fb7"
        },
        "item": {
          "id": "9f4fd8ba-fddb-49bc-8c32-f534bfa03f8a",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "b140780e-31cb-4eb5-a8fe-9c0afae7481b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffada573-8296-43e9-a18b-798f66807950",
        "cursor": {
          "ref": "a100185c-7a97-4308-a8da-ce4fc8fde2bf",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "b17b1c29-2379-4ed7-993c-46c208445be5"
        },
        "item": {
          "id": "ffada573-8296-43e9-a18b-798f66807950",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "0c9dfdb3-9434-4703-a8fd-edf9a4e1a93c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb415dd6-4543-46ab-a535-f700ff77eb42",
        "cursor": {
          "ref": "c208d526-4c91-47d9-8ac0-90ebff617691",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "8409a55e-3e63-493f-aef6-b5c662b401cd"
        },
        "item": {
          "id": "fb415dd6-4543-46ab-a535-f700ff77eb42",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "f20ca93a-40f0-4234-9971-05dfbb7ada23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a79ebbea-e6fd-4dad-a5ed-ac0ce4265b96",
        "cursor": {
          "ref": "0bf27ade-ced5-4353-8bb6-8a105ba5f886",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "419171bf-3f42-40f4-a503-510633d08e22"
        },
        "item": {
          "id": "a79ebbea-e6fd-4dad-a5ed-ac0ce4265b96",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "9b4bcc28-cab7-4487-bd8e-1134135f450f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a0c4eb3-3cc4-4199-b86e-d1de512aed45",
        "cursor": {
          "ref": "61710bf9-c972-42c5-8bd1-ce784f24881e",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "56b59fb5-f8c1-452b-8b76-d5e4f11f4dd3"
        },
        "item": {
          "id": "2a0c4eb3-3cc4-4199-b86e-d1de512aed45",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "d8c6cb07-0a15-4a11-8510-7acd3a7fca5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f4c827e-d1ce-4381-8eb9-b554138b506b",
        "cursor": {
          "ref": "7b82f3fc-0020-40ef-9d2e-8da6dd7c9105",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6eed01f5-66de-4853-9c56-dcd1500bee54"
        },
        "item": {
          "id": "6f4c827e-d1ce-4381-8eb9-b554138b506b",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "c01a7751-62f0-4273-b720-1930c148ec1d",
          "status": "Created",
          "code": 201,
          "responseTime": 624,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "c638d072-c41d-4a6a-8a1d-e64a32195bc7",
        "cursor": {
          "ref": "ee66520e-300a-4dfc-9455-f8e87e0788fe",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "d640de45-e878-460a-952a-7c9da94dbb3c"
        },
        "item": {
          "id": "c638d072-c41d-4a6a-8a1d-e64a32195bc7",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "c6c2defb-0e82-4f7a-8ec8-10457eb912a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7112cf70-a6cd-47ef-96d8-968750f97a39",
        "cursor": {
          "ref": "7b85fb43-554e-4064-aad1-98d89ce558e1",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "cab0dc50-45cb-4487-92a2-673993ed03e9"
        },
        "item": {
          "id": "7112cf70-a6cd-47ef-96d8-968750f97a39",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "1e250b64-2334-4330-9c1c-c408e34be2a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ee380fc-4b47-4d98-aaf1-fe03db7724d9",
        "cursor": {
          "ref": "8095617f-7feb-44a3-aac0-014b140aefe8",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "b2224ab8-25ab-4c65-9a04-5559c9164056"
        },
        "item": {
          "id": "7ee380fc-4b47-4d98-aaf1-fe03db7724d9",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "ebf776f4-9510-482d-826d-89ba51f24360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11fbf833-353b-498d-a57d-31b58d7a195c",
        "cursor": {
          "ref": "aa0a8711-02a7-446e-b233-b0bbfd9921bf",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f96f5e95-45ec-4cf8-ad97-e7e93127d139"
        },
        "item": {
          "id": "11fbf833-353b-498d-a57d-31b58d7a195c",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "4aaf715a-3c38-4832-b225-7c3972489d51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ab788cc-44c4-4c4f-9e84-c0f7d885471c",
        "cursor": {
          "ref": "18463f5d-9d91-40a9-a64b-0688df345980",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ee8ee45f-8155-4061-986e-73f8b848b04a"
        },
        "item": {
          "id": "1ab788cc-44c4-4c4f-9e84-c0f7d885471c",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "e480695c-a37b-49de-9bed-a202c24beb58",
          "status": "Created",
          "code": 201,
          "responseTime": 332,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "38482b00-450d-4930-995b-66549e451c00",
        "cursor": {
          "ref": "d9916448-4ec8-4371-afca-c70488a3ed0a",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "04f941fc-7901-4dbb-98d9-499480b24014"
        },
        "item": {
          "id": "38482b00-450d-4930-995b-66549e451c00",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "50341b11-f44c-42e5-9c0a-f8131ede2628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a9e657d-67d1-4931-9ea8-275a264e038d",
        "cursor": {
          "ref": "22e83763-b25e-48f9-b097-42b7f579b1cf",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e467cb22-d06e-4b67-bea1-7a309319c754"
        },
        "item": {
          "id": "7a9e657d-67d1-4931-9ea8-275a264e038d",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "08d30c8d-ad4d-447d-952c-ac6c3097a7d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eaf9113-091f-4c1c-8ac7-291cb72ee600",
        "cursor": {
          "ref": "4eb63345-8a0e-425e-bf6d-b259676c7011",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "48e7d670-082b-4f66-ba16-ad265ddc3bc0"
        },
        "item": {
          "id": "9eaf9113-091f-4c1c-8ac7-291cb72ee600",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "c70bb005-b021-47b7-aa66-8906b2e677d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12d148d7-926d-4a16-a6b4-167e709859f9",
        "cursor": {
          "ref": "b6c181c3-76dc-48f3-8962-13b3b624e8cc",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "aff2ffe2-5d5e-4a7c-a765-d865ff5f5784"
        },
        "item": {
          "id": "12d148d7-926d-4a16-a6b4-167e709859f9",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "dfacf4d8-05a5-44bc-9d21-055f48824d27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54eb3188-a339-47e4-b03e-3e7d0cb8f014",
        "cursor": {
          "ref": "044f7a80-7233-4cff-89fe-f310ba4e26ed",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "198a64cf-a799-40fc-b601-0a93ff35540a"
        },
        "item": {
          "id": "54eb3188-a339-47e4-b03e-3e7d0cb8f014",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "cbfd9863-a74a-4553-9bde-cc142793c34f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efc03e2b-9371-4046-b7f0-a644ade73016",
        "cursor": {
          "ref": "578d838a-45ce-4e7b-aca8-62a23d56efb8",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "2da58166-9bbb-4eaa-906d-36d512157b02"
        },
        "item": {
          "id": "efc03e2b-9371-4046-b7f0-a644ade73016",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "eacd3490-24ad-41d2-976d-d3648c35d8c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f3785ac-2ff9-499d-8479-75b39dc81359",
        "cursor": {
          "ref": "f959b05e-baf0-4dfe-8408-e7ce9de2734f",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "d8795046-6771-4694-afba-1ba03b785953"
        },
        "item": {
          "id": "2f3785ac-2ff9-499d-8479-75b39dc81359",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "f0b1f7ee-d536-4622-b486-8eb811e5b3b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08009e61-bd99-41fa-a761-9475bc3183be",
        "cursor": {
          "ref": "770e1da6-4228-4a19-af40-042644934983",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "777580e4-5151-482c-b374-32ceff616bfb"
        },
        "item": {
          "id": "08009e61-bd99-41fa-a761-9475bc3183be",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "3e7099a8-4bd4-467a-b76e-c9451449a371",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18730e91-0ec7-4d60-81b4-a7c143f2e140",
        "cursor": {
          "ref": "f433648c-f422-4501-8424-18740bb5211f",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "2f144b29-349c-49de-a7c5-daa4b892e220"
        },
        "item": {
          "id": "18730e91-0ec7-4d60-81b4-a7c143f2e140",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "03c2da30-378a-4c5c-a04f-8563764e0860",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42f40dd7-35b1-4776-bb8b-b40ff4009563",
        "cursor": {
          "ref": "45ebc54c-17de-4f83-a7da-652a757ec3be",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "e035a38b-1e3f-4377-8e25-12870e7ec435"
        },
        "item": {
          "id": "42f40dd7-35b1-4776-bb8b-b40ff4009563",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ba973337-d033-41e1-8afe-6a2fd5d3d7ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58915561-0401-4a82-9750-b7df387f60f5",
        "cursor": {
          "ref": "7bc14977-06b2-4f28-84a6-46bf93c49a66",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b79b41a5-77c1-4fe3-884d-fd85fd5792da"
        },
        "item": {
          "id": "58915561-0401-4a82-9750-b7df387f60f5",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "8de998f3-8de5-4597-a3f2-bb9b35d1d021",
          "status": "Created",
          "code": 201,
          "responseTime": 438,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "5823999b-26b6-4922-be67-4eb39f32e13b",
        "cursor": {
          "ref": "1a4cc26b-6141-4e5a-bf26-fe77515c3a33",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "8a8536b1-8025-48ca-9a24-e3ae0accd12a"
        },
        "item": {
          "id": "5823999b-26b6-4922-be67-4eb39f32e13b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "6211a239-e410-4b5f-abb3-90320140a720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d35fdbe5-dafd-430e-863d-44cb958ad9fb",
        "cursor": {
          "ref": "40f4a841-3947-4bc2-891e-12a9abcb0534",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "08cddc4e-c984-410a-a132-0db1cd4361a4"
        },
        "item": {
          "id": "d35fdbe5-dafd-430e-863d-44cb958ad9fb",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "5b530513-0c33-43e5-bfef-39536ba7c88a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c796c556-4c39-46eb-bc7d-25ae38af8442",
        "cursor": {
          "ref": "e58d8095-2989-4f52-b769-bf3c3e4092dc",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "40f21677-5fa3-4cdd-a529-e2f9945b7601"
        },
        "item": {
          "id": "c796c556-4c39-46eb-bc7d-25ae38af8442",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "0a2e8ebf-7ef5-4055-9bcc-e4b90c3f343e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3313ea54-6735-4ddc-b37c-df8c89b12848",
        "cursor": {
          "ref": "24dab6a7-f595-4750-86cd-008665604120",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "6ddc262a-92c8-41a4-9779-a85ebbff5761"
        },
        "item": {
          "id": "3313ea54-6735-4ddc-b37c-df8c89b12848",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "086698c4-9467-419f-b60e-2dce9cb1ec29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7079f983-2fa3-496e-a301-50e630558923",
        "cursor": {
          "ref": "7f285423-02ce-44bb-8624-be72defce90c",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "204dac76-1acd-4eca-8e5f-2986cc829cbf"
        },
        "item": {
          "id": "7079f983-2fa3-496e-a301-50e630558923",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "dfc2eb3e-a944-4f84-b390-a38e3885d5a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5b86880-61cd-42da-9e6c-f711a37179f5",
        "cursor": {
          "ref": "117809d6-3ac8-497c-b930-b428d8a8453d",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "60335c4a-6b59-4581-bb70-33ba7f8ef548"
        },
        "item": {
          "id": "e5b86880-61cd-42da-9e6c-f711a37179f5",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "7352f2a3-1eb0-49d0-a3f9-138a70f348ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9b86a13-8a05-4094-87ef-136e11a64482",
        "cursor": {
          "ref": "769272cd-4541-454b-9629-ef76f0997daf",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "a6c02317-a22e-4ea4-9136-ca20249020d0"
        },
        "item": {
          "id": "e9b86a13-8a05-4094-87ef-136e11a64482",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "4dd308cf-bb59-4d7f-962c-ac72695bc7a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb57ecb0-3889-417e-86fa-ac8c9e80f7cd",
        "cursor": {
          "ref": "5a2490f1-156b-4436-b416-7d71ec1c4782",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "9da867c7-2616-4787-afdd-d3cc63cba464"
        },
        "item": {
          "id": "fb57ecb0-3889-417e-86fa-ac8c9e80f7cd",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "871dc0db-2c66-4a83-9015-04fea8300324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad5c5cb5-9640-4530-ad9d-8d3fb655bfe9",
        "cursor": {
          "ref": "2330ec9b-5b8c-4c8e-865e-c6ef75417d25",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "370184f2-3899-4215-a620-9bba8976845d"
        },
        "item": {
          "id": "ad5c5cb5-9640-4530-ad9d-8d3fb655bfe9",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "af389435-429b-429e-9083-41c78d56a5cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfbe1e18-bdee-4587-8c52-32bfac3d4d77",
        "cursor": {
          "ref": "1d8fb9b9-aa23-45db-b651-fbaea36a8f37",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "63f8379b-686a-4a55-8328-0e68c9a157e1"
        },
        "item": {
          "id": "bfbe1e18-bdee-4587-8c52-32bfac3d4d77",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "19cf0562-abc7-44ab-93e1-626e21fce383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f070d7b3-5bd1-444e-9b71-cb71be6605c2",
        "cursor": {
          "ref": "29c7e4f6-58cc-41fc-8752-756e052e0403",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "50f3416f-bf40-4e66-8341-6125b989c97d"
        },
        "item": {
          "id": "f070d7b3-5bd1-444e-9b71-cb71be6605c2",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "41998ae6-42bd-47db-b03d-eccf4991a1e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c85a58e0-f3a0-4670-94b7-570b6961e868",
        "cursor": {
          "ref": "59a4290f-b993-4a23-b4a1-2fa86704fb3d",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "eb780143-7b5f-44fa-bce0-3ddc3a8f536e"
        },
        "item": {
          "id": "c85a58e0-f3a0-4670-94b7-570b6961e868",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "46bb1c94-1fb5-4e5e-ad72-884c276db18a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "814cfbb5-8c57-48d7-8b54-f3e8ea53a372",
        "cursor": {
          "ref": "336cc135-9248-4df7-811e-2bf0f7db3c9e",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "9113b9de-1329-4b7c-a1c3-32fd86e2c163"
        },
        "item": {
          "id": "814cfbb5-8c57-48d7-8b54-f3e8ea53a372",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "170ca13d-9595-4477-8575-84225e8f2b12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 396,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "18878cbf-cfdf-4d3f-b1ba-abcac342d21d",
        "cursor": {
          "ref": "4d083ae9-93a0-4da9-8491-d4a084a5dbab",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "be06e3e3-a2b7-4a74-97ce-cb27891f85b3"
        },
        "item": {
          "id": "18878cbf-cfdf-4d3f-b1ba-abcac342d21d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a78350db-2055-49ff-b2dc-d56cd7d20b05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1381e272-07f8-4669-9ca4-7c73ace5a553",
        "cursor": {
          "ref": "b78af145-033d-4185-a8f0-f83d0065e2f7",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "80e34eda-919b-45f7-b0fc-744efc9d569d"
        },
        "item": {
          "id": "1381e272-07f8-4669-9ca4-7c73ace5a553",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "54c08b77-c450-4844-9df1-ae75a04bd06e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f9d3bfc-a348-45bf-b9e3-835a231075df",
        "cursor": {
          "ref": "48ffe41a-e1c4-4205-a3d9-c894890ced67",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "ae4db0d6-867c-43c9-a79c-3329f1e6b771"
        },
        "item": {
          "id": "0f9d3bfc-a348-45bf-b9e3-835a231075df",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "77e7ac4c-ed75-43f2-9966-d4c505947e1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf42514f-dd0e-423c-91ac-664339b8c79d",
        "cursor": {
          "ref": "4d046ee9-bff7-47c5-9954-02d38ab1d906",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "df89dde0-a89b-49fb-9aeb-64d585635ee9"
        },
        "item": {
          "id": "cf42514f-dd0e-423c-91ac-664339b8c79d",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "0c77fcff-d3a6-4c4c-aa16-a4d5db725f2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca6bc06b-2abf-4614-85b1-971f6d4a8921",
        "cursor": {
          "ref": "0235896f-c3de-4ac9-bd51-cc000bbb947d",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "3d2d7616-1cc1-4800-9fea-b1eda3d6c32b"
        },
        "item": {
          "id": "ca6bc06b-2abf-4614-85b1-971f6d4a8921",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "8921d0f5-6fe6-481f-ade2-3acb9369b551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c7db67c-7566-45b8-a557-81e1758b9269",
        "cursor": {
          "ref": "bb9de2e1-65d8-44be-95ce-d4d5f1739530",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "a0027b27-f877-4220-a412-02080f66afb2"
        },
        "item": {
          "id": "3c7db67c-7566-45b8-a557-81e1758b9269",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "d2c9d8bd-0d89-4983-a02d-7e8bd5163520",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b5a24d5-2f7d-40dd-8e07-eb215e60d5cf",
        "cursor": {
          "ref": "50ea5cef-653f-4fa1-926b-e618d5864e69",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "95484511-52af-4e72-9acc-8f8ea1b74d8f"
        },
        "item": {
          "id": "5b5a24d5-2f7d-40dd-8e07-eb215e60d5cf",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "acff8015-5e3b-4968-a5bf-8665b88858ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 176,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "779a7c15-7094-4c11-8b6e-89649216b4ec",
        "cursor": {
          "ref": "ffa343c2-fab9-47ee-b2b0-0e74b76fd76c",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "7464748c-47b7-4f83-a3ee-1e52fb73f7f4"
        },
        "item": {
          "id": "779a7c15-7094-4c11-8b6e-89649216b4ec",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "fbe26f11-09b6-4355-9a4e-613b2ea0c87f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ec3f84b-72f1-47b3-b82a-47b7d8d78dd8",
        "cursor": {
          "ref": "6f6bed10-634c-4248-b2ef-4ca6f778aa94",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "fb14c33f-a51d-4493-9309-567856819108"
        },
        "item": {
          "id": "1ec3f84b-72f1-47b3-b82a-47b7d8d78dd8",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "dac28856-4f3c-4718-9a4c-d24e40e401f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7ac89d8-1107-42c7-bd1d-2aa61b8da76f",
        "cursor": {
          "ref": "666c85fe-b5f7-4782-8533-e9b58be6be4a",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "b99b2520-0a6b-4192-9cc6-c306460fc9c2"
        },
        "item": {
          "id": "e7ac89d8-1107-42c7-bd1d-2aa61b8da76f",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "a497757f-1867-4edf-93ee-abc7a257aa47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5e85b01-ae04-4a0c-a7fe-31e4e084bacb",
        "cursor": {
          "ref": "148690f5-9331-4b3c-8708-a65156da9002",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "cafcb495-ccc1-4417-9550-7dad1c884d15"
        },
        "item": {
          "id": "a5e85b01-ae04-4a0c-a7fe-31e4e084bacb",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "bb78854d-7330-41d2-a54a-32ef161f1b02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01853d98-ce85-486c-a760-44350d4fb895",
        "cursor": {
          "ref": "259f3450-9ff0-45df-bee9-e3eacac4fcb8",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "19896979-794b-4ad9-bc9f-29307509a73d"
        },
        "item": {
          "id": "01853d98-ce85-486c-a760-44350d4fb895",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "c99b76c7-45d2-42de-831a-332a8d447f54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16a1553d-07f6-4196-a1cb-ff5635fa7dba",
        "cursor": {
          "ref": "4e3c6065-3a1b-44a6-9627-a0d87159277a",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "65c92e74-8e2c-4452-a520-855e1fc472a6"
        },
        "item": {
          "id": "16a1553d-07f6-4196-a1cb-ff5635fa7dba",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "37c23916-5b49-4e28-be81-e8cde64bb6c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f29f91f6-a0a5-4dda-8ee2-f60438c60fc8",
        "cursor": {
          "ref": "31a91199-7f88-4909-84b9-e151f34b02a9",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "d6022823-673e-467d-a78f-1355785db73a"
        },
        "item": {
          "id": "f29f91f6-a0a5-4dda-8ee2-f60438c60fc8",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "4269fad8-d123-4278-91cd-598903f03ed0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7650dea3-f6d7-427d-be7a-5a528d415bbe",
        "cursor": {
          "ref": "4909cddb-8abe-4109-967c-38f6d43084a8",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "58186e2a-3b50-4068-9f99-e9cc8cd43875"
        },
        "item": {
          "id": "7650dea3-f6d7-427d-be7a-5a528d415bbe",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "14c1dc53-30c5-4a07-8f16-682685a5e324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f46de96-2bf9-4e16-9403-5e2cc92594cd",
        "cursor": {
          "ref": "e1f27d3f-d969-4ead-b29d-a764d7edac37",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "2d43acb9-3847-4522-b068-8cb8a1d7612f"
        },
        "item": {
          "id": "6f46de96-2bf9-4e16-9403-5e2cc92594cd",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "9b8366b1-e0df-4728-8e23-170cf5abefe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8e8d39e-5844-48c8-bf96-21116fe11ed9",
        "cursor": {
          "ref": "3409c2f2-5e55-4877-b71e-c845a22aed18",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "dcd7726d-074c-4aec-bb11-04236927bc0a"
        },
        "item": {
          "id": "f8e8d39e-5844-48c8-bf96-21116fe11ed9",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "abaacc10-37f6-4741-b460-04a2d737c850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eca5c1e-182f-4465-baa8-e39241a5c93a",
        "cursor": {
          "ref": "42e6934d-4d99-45ca-a9a4-12a7586f8558",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "38a81e24-1753-4aec-9c0a-e089e75ef71c"
        },
        "item": {
          "id": "5eca5c1e-182f-4465-baa8-e39241a5c93a",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "e91c6518-7a61-4488-a1b6-2d25b9ab1075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79daf9dc-a8a2-4254-bbbe-f6cd589242f0",
        "cursor": {
          "ref": "7cb1548f-e049-4c2f-b2a5-4b272542602b",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "0092d69f-a342-4e43-bb23-3edc3d146507"
        },
        "item": {
          "id": "79daf9dc-a8a2-4254-bbbe-f6cd589242f0",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "4dd5bf6d-4a26-4049-a73a-8e0434b2b572",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b28a9653-bbd7-4dd1-bcf8-b47cf0cb52d9",
        "cursor": {
          "ref": "3180f942-06b9-4313-9dc2-1f6fbabd87a7",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "c3a8496d-2c6a-4271-8ce3-f7f289a5214d"
        },
        "item": {
          "id": "b28a9653-bbd7-4dd1-bcf8-b47cf0cb52d9",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "ab34fb09-c577-49f2-94d8-115dc4de8022",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0b530ad-7b0c-443d-8b42-f08678487361",
        "cursor": {
          "ref": "8f73445f-ea17-47ca-a458-1504f7e2fedc",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "832dab1e-6642-48f9-ae15-56158837b0ec"
        },
        "item": {
          "id": "e0b530ad-7b0c-443d-8b42-f08678487361",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "a03f5840-77ee-4285-9a2f-0338102c23cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53711e21-8acb-402b-8f14-981b8a036977",
        "cursor": {
          "ref": "2db96dfa-0cb2-47fb-86a3-1fda42d0b110",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "7c287f0e-70ef-4e4b-b01b-8b490a0420fb"
        },
        "item": {
          "id": "53711e21-8acb-402b-8f14-981b8a036977",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "b7aee62f-0663-48bf-9bec-75853b098312",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2c53cb3-1172-41d6-b3b4-36c8d114cf72",
        "cursor": {
          "ref": "3d64df81-8489-4052-ab47-eac9710a4d35",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "82dbd7e3-9a5c-4d3f-85ac-34ae22065287"
        },
        "item": {
          "id": "b2c53cb3-1172-41d6-b3b4-36c8d114cf72",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "5e5d11f8-8121-4d75-9a61-5b62c19cc8e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5eb1e7b-d752-4cf6-bd05-9352b3b1cd39",
        "cursor": {
          "ref": "42c8567d-fd20-4ed6-bff4-3e6c4c7c4f54",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "7742f213-094b-4913-bd8e-62618472ae8f"
        },
        "item": {
          "id": "d5eb1e7b-d752-4cf6-bd05-9352b3b1cd39",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "8da4d1a0-226f-4d43-ae1b-9bfcd0ca6a2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 195,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44d321f1-6e09-44f5-b376-c8d986320b9e",
        "cursor": {
          "ref": "4b88153c-0499-4615-a541-d44411a38573",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "8af2b0e6-fdf4-4915-9110-541dde2c77ae"
        },
        "item": {
          "id": "44d321f1-6e09-44f5-b376-c8d986320b9e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "36407d5f-afff-439a-a0c2-1f69787e18bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47ea99c4-e529-4acb-8782-fa751f963f6b",
        "cursor": {
          "ref": "3960eaf7-0d03-4b98-b364-6912988ba214",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "bf926f45-8b77-4ae1-a7f1-284c91586d79"
        },
        "item": {
          "id": "47ea99c4-e529-4acb-8782-fa751f963f6b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "6a1c46df-e40e-4f3d-8f52-c978d0ce26c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fff748e1-b947-4015-a1e8-ce886b18cb80",
        "cursor": {
          "ref": "659c3448-44c8-41c2-8b8e-defff26d6fe8",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "1da65388-55e2-4a90-b73f-df34874e1d6d"
        },
        "item": {
          "id": "fff748e1-b947-4015-a1e8-ce886b18cb80",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "6e3bf656-d2cc-4b98-8edb-f36edadd0575",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab5d4b6d-a4f5-4fd3-8dd0-c23acb55188d",
        "cursor": {
          "ref": "34a77f55-aa39-4e4a-925f-30015d658138",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "f28f72f7-c340-4c4d-b854-9405793ad379"
        },
        "item": {
          "id": "ab5d4b6d-a4f5-4fd3-8dd0-c23acb55188d",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "3f4468cc-9b26-4ef0-b504-45f358d978f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef9924c2-1a9b-4581-aefd-1577c7ad0d50",
        "cursor": {
          "ref": "d4a11ae6-028a-47a2-a67d-99cee1c8c10b",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "a2912e5e-308d-4db6-9e44-a4897e67b086"
        },
        "item": {
          "id": "ef9924c2-1a9b-4581-aefd-1577c7ad0d50",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "e2dbd452-84a4-4734-b74c-68b21f07f173",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fec9e05a-9483-45ea-943c-7ec64261fb99",
        "cursor": {
          "ref": "85999591-7f2b-4718-af9a-f34a79cf0326",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "217a418f-6a5e-441e-975f-5ac6c3d4e73e"
        },
        "item": {
          "id": "fec9e05a-9483-45ea-943c-7ec64261fb99",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "5187de28-7c63-48d5-915d-ef09513c6646",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f27f07c-6414-416f-841d-b6e5312a5652",
        "cursor": {
          "ref": "b5df3ffe-6b41-445a-b9d7-a6e7a92bd2ed",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "809dc442-2dc0-4b94-a041-eb2babd60571"
        },
        "item": {
          "id": "6f27f07c-6414-416f-841d-b6e5312a5652",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "1b520b5d-ef2e-4f5e-a154-9141e8235690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ac10384-33b1-4bb5-bf76-4fee2c6237b1",
        "cursor": {
          "ref": "5e2544af-23b8-44f4-8eee-1f9f10c04308",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "2a426de5-36db-4d6a-988e-0d0798c5967a"
        },
        "item": {
          "id": "6ac10384-33b1-4bb5-bf76-4fee2c6237b1",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "be8047da-11d4-4836-af1a-465bcac42a00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2da4a5a1-f75b-4757-9a45-162911c5214a",
        "cursor": {
          "ref": "aeb1d7d6-196a-4885-9fd0-1aa32b404941",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "83214a96-65e9-4609-94e8-d3b7ea3fd5b1"
        },
        "item": {
          "id": "2da4a5a1-f75b-4757-9a45-162911c5214a",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "fc8f9639-7803-44e8-9547-0c899c61ccb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6ebbe91-8986-4230-97f0-654378c61132",
        "cursor": {
          "ref": "0d29143b-b943-4390-a279-bb1e9d74257f",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "076db13f-741b-431a-a93d-7f0e038c7e37"
        },
        "item": {
          "id": "b6ebbe91-8986-4230-97f0-654378c61132",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "e747af51-430c-4369-80d7-b50015db1925",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f492eb6-2e43-4d18-8662-54ab856fea65",
        "cursor": {
          "ref": "4d8aae79-448d-456f-b20f-3c5200506ea3",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "0f9992ff-2a87-4e4e-8926-09b8dcea9ddc"
        },
        "item": {
          "id": "5f492eb6-2e43-4d18-8662-54ab856fea65",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "9ea8aa08-9d54-40e4-a789-35c5e42757c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b7b8856-07c9-4eb0-ae09-eeb91121392e",
        "cursor": {
          "ref": "c77dbf1b-b1c6-40cc-ada6-69acf1c02e96",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "83afe45a-feed-404c-b7db-03dcb5333b30"
        },
        "item": {
          "id": "2b7b8856-07c9-4eb0-ae09-eeb91121392e",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "16cba900-f890-4bf7-bb0d-748168778d34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c0f29f8-9210-45cd-aa33-ca006c9b7ea5",
        "cursor": {
          "ref": "503edc9b-34b1-4b9d-8296-9da77a73fb79",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "ab44fe40-34e1-46db-909f-792bccafff1b"
        },
        "item": {
          "id": "5c0f29f8-9210-45cd-aa33-ca006c9b7ea5",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "a0090660-6bf6-4e65-b5a0-21d865bf09fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a274bb3-b17c-4af0-acae-fd0c437d437c",
        "cursor": {
          "ref": "f980eb5c-1c38-4982-8320-86f7277e3cb9",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "814ec4b7-730e-4c20-b0fc-23b77bccab98"
        },
        "item": {
          "id": "5a274bb3-b17c-4af0-acae-fd0c437d437c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "695934a7-d8f5-46a7-9c53-562c84636770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 288,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d0bd803-c25e-45e0-9cc5-c9012d39993e",
        "cursor": {
          "ref": "95f529dd-4d7c-44da-b136-b76e3d71e5b6",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "c06ab136-4d30-4a7b-a342-d82eee2cd6eb"
        },
        "item": {
          "id": "5d0bd803-c25e-45e0-9cc5-c9012d39993e",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "8ceca80c-cf4c-428b-ae18-f76497c6cab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b3673d3-3022-4061-a011-d409d8e30499",
        "cursor": {
          "ref": "bc586203-f0ee-4eb1-ae6e-b57989c9ba7a",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "58f52571-0df0-456f-8548-38ab345c73d2"
        },
        "item": {
          "id": "8b3673d3-3022-4061-a011-d409d8e30499",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "d2e62ebe-e599-4a71-a9bc-ec4966eaf76a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f99ef27-6a11-45b7-9832-e2986b892934",
        "cursor": {
          "ref": "8803d8a5-85d9-4997-9cd9-d0830a3662d8",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "8b8e9b9d-a778-43c7-a76b-d887aadc6a22"
        },
        "item": {
          "id": "3f99ef27-6a11-45b7-9832-e2986b892934",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "57bc022b-d0f4-4716-8ae4-4e3bd653c84b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26cdf25f-7188-415b-838e-f8168173bca2",
        "cursor": {
          "ref": "f4db2094-1f0f-4404-8a56-ef7011b1fb4a",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "ce059b70-f69c-42bc-9102-22cec4ad1116"
        },
        "item": {
          "id": "26cdf25f-7188-415b-838e-f8168173bca2",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "90359a25-2898-4a51-a748-834efb3a2337",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "921c5d86-7c92-402c-ba7f-c6415f887883",
        "cursor": {
          "ref": "4a1ed4ce-0338-4759-8a4e-b9eab2cea696",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "1fba4179-d35a-4d59-9139-16fb5926048d"
        },
        "item": {
          "id": "921c5d86-7c92-402c-ba7f-c6415f887883",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "0639e4b7-b179-4fd7-bf63-79ad9c71a9cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ff2cd4e-96a6-4b67-b96a-88d4cc97fef4",
        "cursor": {
          "ref": "2f731f4e-a046-47ec-b5e0-24a019363f27",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "01213f70-b2ff-495e-87d8-e1f611112751"
        },
        "item": {
          "id": "5ff2cd4e-96a6-4b67-b96a-88d4cc97fef4",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "aa549557-03c5-4883-988a-70d5649a742b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eda28118-c0cd-4ebc-9833-34ac31af55a0",
        "cursor": {
          "ref": "f0a37234-13aa-44ec-9771-faa15e7626c3",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "fe23a191-12e8-4a3c-8e9d-0666b0220665"
        },
        "item": {
          "id": "eda28118-c0cd-4ebc-9833-34ac31af55a0",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "5c457291-308a-44e2-85ce-36c5466ffcd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b5bb852-c2d7-44e6-a556-afc9d59b00f5",
        "cursor": {
          "ref": "c4e640f4-3e9f-45a3-adec-8dacfc339f8b",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "5b0523bc-4011-4a56-a437-9c84a7899cc4"
        },
        "item": {
          "id": "3b5bb852-c2d7-44e6-a556-afc9d59b00f5",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "4b677694-189b-4bf7-9f11-c929be0b3c5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab874fb3-07b2-4e33-afc5-98b40825fa98",
        "cursor": {
          "ref": "783223aa-2dbb-4a17-9643-711422917f60",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "27d94a59-fa17-4061-9383-99647307d539"
        },
        "item": {
          "id": "ab874fb3-07b2-4e33-afc5-98b40825fa98",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "3e927a2b-dd74-427e-a460-c862e27c6257",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85914116-e1c3-4702-98fb-9aa579e6fcb4",
        "cursor": {
          "ref": "56a36e32-f797-4cf9-aa8f-09d27ce4c78e",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "60e9cb3f-2744-4b56-af86-e4a2977fceef"
        },
        "item": {
          "id": "85914116-e1c3-4702-98fb-9aa579e6fcb4",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "858e6c0c-183b-4315-9c2a-08757ebc5f6d",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "7345442f-a67b-4e1e-8e91-b84e16ef457a",
        "cursor": {
          "ref": "004e029c-e94e-484f-8b95-f5ad03b2c083",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "b75e9ee1-a1ae-4c91-943b-f97e5acf170b"
        },
        "item": {
          "id": "7345442f-a67b-4e1e-8e91-b84e16ef457a",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "4f74092d-9fa1-497e-b69f-32ec20e3ca3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67484aaa-e08b-4943-9250-d3171b2c6bdb",
        "cursor": {
          "ref": "0bc35f09-af0c-4f03-bf91-f6f42e75a23e",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "04061004-c7cd-4a47-971d-386f62108a9f"
        },
        "item": {
          "id": "67484aaa-e08b-4943-9250-d3171b2c6bdb",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "4e550085-84a4-4131-af53-ac97f7218d30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "641e01c9-3d65-4bb2-aeba-d5e0b349d7b1",
        "cursor": {
          "ref": "d1a5a25b-5740-46a9-baa9-9af3e6ef8a76",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "e56d6db0-9766-4db5-8d28-ec9ac582842f"
        },
        "item": {
          "id": "641e01c9-3d65-4bb2-aeba-d5e0b349d7b1",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "d0c4b3cc-969c-4c61-a6bf-478332b5427f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b9e74b0-f742-470d-8217-e6e431541bf6",
        "cursor": {
          "ref": "50241a64-cd8d-411f-a557-ed9cef6da858",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "2fb9d2fd-1292-41c8-a36e-6e3e5b2ca422"
        },
        "item": {
          "id": "6b9e74b0-f742-470d-8217-e6e431541bf6",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "8eeb64ca-59b7-420d-8b6b-be61d23284d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63871f88-71f2-4c7e-aecf-c4d8f7f1dbc4",
        "cursor": {
          "ref": "9279f5c1-15c9-4c04-9aa9-8426986bd50b",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "212812de-4e86-41a3-b082-6e801b090fad"
        },
        "item": {
          "id": "63871f88-71f2-4c7e-aecf-c4d8f7f1dbc4",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "4029008c-bce5-4087-a39a-5bafc05cef45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bf1b39b-6389-4d26-aaa4-2ccc6b56888b",
        "cursor": {
          "ref": "b047da82-6567-4ae5-8167-11740e36f4d7",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "8d7f7d68-bed2-4602-b52b-fea955081c52"
        },
        "item": {
          "id": "9bf1b39b-6389-4d26-aaa4-2ccc6b56888b",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "d706ee87-37d4-4234-9b7b-986869d9f80c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a43c82a1-83bf-4f38-8465-8f9487d6867d",
        "cursor": {
          "ref": "61cb4957-f2cc-4f31-9dfd-7446a716c60f",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "efb3cf51-2d1a-4889-885e-e4c6aaa51ea1"
        },
        "item": {
          "id": "a43c82a1-83bf-4f38-8465-8f9487d6867d",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "1fde05af-4093-40b8-bf0e-f4ddbed9efae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c10feaf-5fdd-4de2-9a0c-e758fed285b1",
        "cursor": {
          "ref": "c7460fcc-f322-4f89-a62b-0a1fb838b473",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "8eafe69c-b1d9-4fca-8836-776f5e1d9c35"
        },
        "item": {
          "id": "6c10feaf-5fdd-4de2-9a0c-e758fed285b1",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "5d96202a-f887-4276-b4ae-4c47b624ea21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a16e73f1-53d6-44e7-aa05-09b53e93dd66",
        "cursor": {
          "ref": "b24b5013-4c39-4732-9739-e0e093786ed0",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "e07c8349-127c-4150-858b-64edd8e0e153"
        },
        "item": {
          "id": "a16e73f1-53d6-44e7-aa05-09b53e93dd66",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "26262e8c-c924-47a2-af06-2c0b0e3f4699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "390857d0-6f45-476e-bb5b-1e7e0d323d4f",
        "cursor": {
          "ref": "b5933553-23cb-4fc1-a196-01cfcefcaec4",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "4c6567b4-c337-4b4a-9fba-57c01c739fe1"
        },
        "item": {
          "id": "390857d0-6f45-476e-bb5b-1e7e0d323d4f",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "bbbc260c-e096-4ffe-9ce5-0e09d392b2ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 242,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "c09f51f0-7697-446c-a50a-1a57f8d1a9fb",
        "cursor": {
          "ref": "e9634cc4-6766-4e5d-b02d-03f5f3a0849b",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "bf98a796-65a2-4267-88cb-858088278272"
        },
        "item": {
          "id": "c09f51f0-7697-446c-a50a-1a57f8d1a9fb",
          "name": "credentials_issue"
        },
        "response": {
          "id": "6c540a91-0fe2-44f6-be2c-460aec917f77",
          "status": "Created",
          "code": 201,
          "responseTime": 462,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cc2fff8-3516-4df1-9280-d166d503bade",
        "cursor": {
          "ref": "b1e68451-acb8-4eea-a1e1-6f965770553a",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f487cbc2-4cd4-4cca-b9fe-fbdeecda4f48"
        },
        "item": {
          "id": "0cc2fff8-3516-4df1-9280-d166d503bade",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "8f2c87b9-429c-4c38-80bb-02cbedab73b1",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ba39c16-1ae2-4fb7-9344-692eaac35313",
        "cursor": {
          "ref": "47cf5e56-2c81-4fc0-ae83-2cae622250d4",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "b85a72e7-0d24-495a-b6f1-8bc998706787"
        },
        "item": {
          "id": "5ba39c16-1ae2-4fb7-9344-692eaac35313",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "989fa234-58b3-456f-85db-64a0d81052ef",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "485a3a41-552f-4887-a3ab-f6b967acc8b3",
        "cursor": {
          "ref": "75a73ef4-d5ac-4b2f-9acc-267071ade9bb",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "c84e2f84-0dac-4871-a778-541b61d7ef24"
        },
        "item": {
          "id": "485a3a41-552f-4887-a3ab-f6b967acc8b3",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "5c93beb9-2ba4-4f8d-9ec4-d30c57f73b2d",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 659
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd58b8a5-c769-4b82-9e07-0f75bb2fef2c",
        "cursor": {
          "ref": "ee96a0b6-0e04-4d1e-a343-7dec612d5ee6",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "a290fe8d-86b1-4ce7-ba57-aed8dab68c9c"
        },
        "item": {
          "id": "bd58b8a5-c769-4b82-9e07-0f75bb2fef2c",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "5f5b6452-f1fb-42f2-af48-e25843112b66",
          "status": "Created",
          "code": 201,
          "responseTime": 336,
          "responseSize": 627
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "c90ef291-3d74-4935-9795-19129282d103",
        "cursor": {
          "ref": "3389ea6f-3fb8-4f1d-91c4-fc47066d88e2",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "f250bfa5-229e-4d9f-95f9-a65c1036a1f6"
        },
        "item": {
          "id": "c90ef291-3d74-4935-9795-19129282d103",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "5b5e4cfd-dbce-4f89-826a-99552556afed",
          "status": "Created",
          "code": 201,
          "responseTime": 324,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a98b9b5-0b5c-4eb1-9384-1b3d6608a718",
        "cursor": {
          "ref": "3a1612f5-4411-4f97-acdc-b78d17bb3b12",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "4528ac26-08c6-4aac-92d2-f92ee587079e"
        },
        "item": {
          "id": "8a98b9b5-0b5c-4eb1-9384-1b3d6608a718",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "cf9bcd61-b3d4-4f58-ac94-1209f37359fe",
          "status": "OK",
          "code": 200,
          "responseTime": 59,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "8a98b9b5-0b5c-4eb1-9384-1b3d6608a718",
        "cursor": {
          "ref": "3a1612f5-4411-4f97-acdc-b78d17bb3b12",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "4528ac26-08c6-4aac-92d2-f92ee587079e"
        },
        "item": {
          "id": "8a98b9b5-0b5c-4eb1-9384-1b3d6608a718",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "cf9bcd61-b3d4-4f58-ac94-1209f37359fe",
          "status": "OK",
          "code": 200,
          "responseTime": 59,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "1843fc37-3525-4f7c-85a2-86243b1c63ab",
        "cursor": {
          "ref": "8027c153-68e4-4a17-b71a-6d5ab70d0fc4",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "3be35fae-9cb0-4fef-a3db-4c771a6e16c5"
        },
        "item": {
          "id": "1843fc37-3525-4f7c-85a2-86243b1c63ab",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "49bd5a96-b580-4393-b32a-aa733827ee2e",
          "status": "OK",
          "code": 200,
          "responseTime": 59,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "60f10538-ef22-462b-93a4-367fda38bf08",
        "cursor": {
          "ref": "4febc70c-6096-4635-8c3d-a21e404351f9",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "5f3cd396-a771-4bf9-89b5-9eeddb2d4d80"
        },
        "item": {
          "id": "60f10538-ef22-462b-93a4-367fda38bf08",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "7ebb43da-07f6-4f74-acca-15a01740a2c9",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "ebe89a9f-b939-4de5-bda3-2fcc709415b8",
        "cursor": {
          "ref": "68a28747-40b9-474e-b9a9-c09bf0e85df1",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "a6f5d574-c367-4b20-849f-e2d244b2589c"
        },
        "item": {
          "id": "ebe89a9f-b939-4de5-bda3-2fcc709415b8",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ff5e7c0d-1a77-405c-90a5-bba1ac0f835f",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "f17a50e0-fca4-4fe8-8aba-aed3e222971f",
        "cursor": {
          "ref": "f3c56fea-37dd-45e4-ab88-dd5a632a8276",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "791d9d8f-db22-4236-abd9-4a2798bc9c33"
        },
        "item": {
          "id": "f17a50e0-fca4-4fe8-8aba-aed3e222971f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "017b775c-fb6b-414a-896e-9dff3b7e11c7",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "ddc30346-fb18-4a2d-aa8e-5c57644ba583",
        "cursor": {
          "ref": "d637c59f-3a1a-4674-a5ff-c306ccec3084",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "ed84730f-1e34-4ac4-bdf1-9b761f491d4d"
        },
        "item": {
          "id": "ddc30346-fb18-4a2d-aa8e-5c57644ba583",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "6c0e07dd-b010-420c-b717-fba426c710ed",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "1c76d056-29cf-42ed-9397-3e12f102c50d",
        "cursor": {
          "ref": "e17bc6a8-5909-495e-9182-e841a54444da",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "e5c9f425-22f6-478d-b2fb-0ccbcf76cdda"
        },
        "item": {
          "id": "1c76d056-29cf-42ed-9397-3e12f102c50d",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "fa5fa54f-ee80-46be-bffd-2a97d0ba1860",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "4929167e-9c2b-4478-a5a8-8b19fa3dfec7",
        "cursor": {
          "ref": "705f08ec-a94d-4a5c-88e7-17687ec48597",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "b1289293-a3ad-484a-90a8-e32d01105090"
        },
        "item": {
          "id": "4929167e-9c2b-4478-a5a8-8b19fa3dfec7",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "049ef495-7e5b-454f-9510-a99a76d12317",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "00f3446d-5f4c-4db4-a912-40a42170aee4",
        "cursor": {
          "ref": "42298576-7e53-450e-b951-09dbe33e578e",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "f8462d60-88cf-4e50-9dc7-01f9eadd41ec"
        },
        "item": {
          "id": "00f3446d-5f4c-4db4-a912-40a42170aee4",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "87f5a4cd-e65a-494c-b84d-be808669f0fb",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "2dbd2654-fe92-4846-bf8c-e678d1e71ce6",
        "cursor": {
          "ref": "e5d4e0fd-daad-4123-9ea1-64c0192958b3",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "d57e174c-be15-4ab0-a540-3937fb52a4e7"
        },
        "item": {
          "id": "2dbd2654-fe92-4846-bf8c-e678d1e71ce6",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "67050dc7-2017-41a8-9db0-a690b25ea2e7",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "55099657-b8f4-4213-b570-316b036c9dfd",
        "cursor": {
          "ref": "a7e0f993-fe60-4c05-8d71-d2b9f6e344b1",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "cccf345d-5caf-4355-b25d-308992f3de1b"
        },
        "item": {
          "id": "55099657-b8f4-4213-b570-316b036c9dfd",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "70360aa3-27be-4e75-a0aa-eb724522ae81",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "d3b3a8c8-587a-491b-bbb7-ed1e28c6b2f4",
        "cursor": {
          "ref": "90981206-98ef-437a-8fab-243c2e5a7994",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "5e61ccd3-63b1-4b3b-a148-bfeb1a63e3e9"
        },
        "item": {
          "id": "d3b3a8c8-587a-491b-bbb7-ed1e28c6b2f4",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3f973ccb-16fb-4903-97b1-cc909c008568",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "9471ebe6-20ad-474d-acc8-7c0773d7999b",
        "cursor": {
          "ref": "d4dd717c-9a89-4b23-be2c-ca0d1e282c46",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "fc393a41-c5c3-4c6f-94c7-726c98e3d53b"
        },
        "item": {
          "id": "9471ebe6-20ad-474d-acc8-7c0773d7999b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d53fc384-f662-4660-b8c2-fc8928950c23",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "547bde35-1c6e-469d-9e81-351cae0a0ce1",
        "cursor": {
          "ref": "b101ff34-962c-4f42-9b98-871773d84f3e",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "e8d5c670-7570-4492-8e3c-74cf589e7243"
        },
        "item": {
          "id": "547bde35-1c6e-469d-9e81-351cae0a0ce1",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a9ed7587-1a84-4922-8ddc-b73f2f8688a9",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "a2c4a3ec-b7f7-4615-9aec-56084f2dfee8",
        "cursor": {
          "ref": "81879c44-63c8-4306-8f6a-a44a9099becf",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "85016d2c-4418-4619-ad82-dbf3034cb875"
        },
        "item": {
          "id": "a2c4a3ec-b7f7-4615-9aec-56084f2dfee8",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "e26be35a-63ec-488b-8a4b-e6bff8bdfbbe",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "fd9fd8cf-9601-41c1-8eb4-a28fca5a9d83",
        "cursor": {
          "ref": "b75a5d7c-4a41-4560-b90f-1246117f98a0",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "b6e309c7-787d-4bbd-a7cb-ece7e27fb6cd"
        },
        "item": {
          "id": "fd9fd8cf-9601-41c1-8eb4-a28fca5a9d83",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "aaeef5fb-d1fe-4e52-b93d-4b6133974bea",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "1f983d63-3556-42fa-aab8-acd5952a95bf",
        "cursor": {
          "ref": "ad25d043-4af6-4a0e-a56b-5684a84e2a10",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "64c2900e-e97e-4449-922a-ff4566affb97"
        },
        "item": {
          "id": "1f983d63-3556-42fa-aab8-acd5952a95bf",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "51a88ae1-92c8-43b9-8385-acac8f960b8c",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "20bde925-9031-4ac8-8fce-9487837a4af3",
        "cursor": {
          "ref": "c89ac507-f6ff-4cd7-822e-ac3d682ec565",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "7b24494c-cece-4e80-b919-8ae84f233a7b"
        },
        "item": {
          "id": "20bde925-9031-4ac8-8fce-9487837a4af3",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c561bd0e-7a34-4ea3-9211-91d9789bc388",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "6086dd52-44e4-4fa7-ba27-e2452db52506",
        "cursor": {
          "ref": "209a54a6-077c-41d0-b4f3-13bfb465546f",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "c5b0ffdd-b657-40b9-b8a0-782139955530"
        },
        "item": {
          "id": "6086dd52-44e4-4fa7-ba27-e2452db52506",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "76b55088-a50c-4cd8-aa4a-e98200d108f0",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "07872e0d-5367-4513-81ac-fcaae4577922",
        "cursor": {
          "ref": "1ae5f972-58fa-4c9d-ad46-f4868063baf5",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "e5ba39ed-d60a-4803-a0da-e453f8dd56c3"
        },
        "item": {
          "id": "07872e0d-5367-4513-81ac-fcaae4577922",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "a2e46028-b672-49f6-874a-a40b6175fd64",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "bb5ad380-90c7-4bb6-920b-88dc556fab3d",
        "cursor": {
          "ref": "46b51936-0fd6-4f43-9ad5-a5b89149173a",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "76a162a5-8238-4ff0-a378-709aeceb8965"
        },
        "item": {
          "id": "bb5ad380-90c7-4bb6-920b-88dc556fab3d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a73c4055-c385-4a69-a286-f3499eb18b83",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "12f5cb32-3160-4b2f-b63d-b5aa8bbf6a77",
        "cursor": {
          "ref": "b4e71fba-a9b0-481e-9796-8208c00a9b92",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "995f04e9-24a3-4f9f-bdce-b20bbed140f5"
        },
        "item": {
          "id": "12f5cb32-3160-4b2f-b63d-b5aa8bbf6a77",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "d6ecf4f4-d994-4cd2-8f21-284ddde892df",
          "status": "OK",
          "code": 200,
          "responseTime": 57,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "04b9621d-61fe-4681-be53-b28bf56326a6",
        "cursor": {
          "ref": "87ef2748-b65e-4f16-bafc-c92f76beb6b0",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "a987e667-703e-4392-aca7-2cba610841a0"
        },
        "item": {
          "id": "04b9621d-61fe-4681-be53-b28bf56326a6",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a45f6b54-665f-46e6-9b3c-eed791baf3ec",
          "status": "OK",
          "code": 200,
          "responseTime": 59,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "9293bd29-8af3-4319-924f-fb19bb80d6fb",
        "cursor": {
          "ref": "1da2897e-fd08-4a46-8255-bff1a8b5bfe8",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "61f613ee-a964-41d6-baa7-a92c98138bc4"
        },
        "item": {
          "id": "9293bd29-8af3-4319-924f-fb19bb80d6fb",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "55657468-9be0-4786-9596-1cd28b04527e",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "63ec8b5c-8d36-4903-a2e0-1b6d392f9621",
        "cursor": {
          "ref": "3b160d29-10cc-4d85-94cb-8c335e2dabd7",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "9d9cbf3b-9039-4e3c-b6d9-35cea8e63660"
        },
        "item": {
          "id": "63ec8b5c-8d36-4903-a2e0-1b6d392f9621",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e298b2fc-9bf2-4b55-a076-3614e34a6fda",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "d5838277-56dc-4bf4-a5ba-c3ed30b0484f",
        "cursor": {
          "ref": "3aa0828e-790e-4838-b7ea-aec9403932cd",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c67801ee-2650-4e04-99e5-cc03c467f286"
        },
        "item": {
          "id": "d5838277-56dc-4bf4-a5ba-c3ed30b0484f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "576b445d-dc44-415e-92cc-1b9db304bf05",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "da0162b6-97a0-4223-93c1-e547a67dd713",
        "cursor": {
          "ref": "af34e6e6-23f2-4339-a807-72fcab69b965",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "10bb03dd-a586-4ac4-917b-5d4159f14681"
        },
        "item": {
          "id": "da0162b6-97a0-4223-93c1-e547a67dd713",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "aa48aca0-0824-46cd-a980-6e1d5e3caa09",
          "status": "OK",
          "code": 200,
          "responseTime": 59,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "6e972317-059f-4a0a-a6ac-0f2cd9778187",
        "cursor": {
          "ref": "7943ea9d-a43d-4f5b-a6df-29bf026e8893",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "905d1851-29f5-4a76-92de-6fc4832c2607"
        },
        "item": {
          "id": "6e972317-059f-4a0a-a6ac-0f2cd9778187",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "aa18681c-d889-4364-8f11-1c845e81a52f",
          "status": "OK",
          "code": 200,
          "responseTime": 58,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "ea26ec6c-ce20-4f6f-962e-a4a16c7e951f",
        "cursor": {
          "ref": "54722883-7dfd-43eb-a075-f3057fa9bd9d",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "fbb085fd-595e-4620-9f76-c00bb037d077"
        },
        "item": {
          "id": "ea26ec6c-ce20-4f6f-962e-a4a16c7e951f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "982dea28-fbf1-4c2d-af9f-5f963b44d6ab",
          "status": "OK",
          "code": 200,
          "responseTime": 58,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "51bdd4f2-a62c-4ded-be9c-66672060de18",
        "cursor": {
          "ref": "7dbce7c7-73b8-408c-bd26-cc0cf1505754",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "caf38b79-c3ac-46cc-ae53-573dcd7c4f21"
        },
        "item": {
          "id": "51bdd4f2-a62c-4ded-be9c-66672060de18",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f6232c83-9431-41df-8741-48fa3836679e",
          "status": "OK",
          "code": 200,
          "responseTime": 59,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "215ff963-6f3d-49b5-8d3c-4515ad4f9af9",
        "cursor": {
          "ref": "b8786e0f-ccad-42f1-b6d6-53092b9f6b46",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "8c45875e-c1ed-4a76-91d8-b60bcf1546e4"
        },
        "item": {
          "id": "215ff963-6f3d-49b5-8d3c-4515ad4f9af9",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2022c0c1-a884-4995-a11f-6fe155f7f0e9",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "095e7ea4-f05d-4a65-8efc-99498b445121",
        "cursor": {
          "ref": "17f4d9d2-215a-44e1-83fc-1e023aa167eb",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "208b051c-ef9d-4a5c-b39c-2ddb998ca0d0"
        },
        "item": {
          "id": "095e7ea4-f05d-4a65-8efc-99498b445121",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "a0c35810-a17d-4ad4-b5fa-5f17ebf93a89",
          "status": "OK",
          "code": 200,
          "responseTime": 58,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "c1f293b9-dae1-4126-ae21-d0dac879c61d",
        "cursor": {
          "ref": "93ec6527-1d1e-488d-8047-2559fc2cd6f1",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "33a1b564-a02e-49d9-bea2-d9f8a2140c67"
        },
        "item": {
          "id": "c1f293b9-dae1-4126-ae21-d0dac879c61d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d257bf7d-f084-48c4-9d8b-a23d8ad8b249",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cdb6288-a8da-44a9-801c-18cb40874a44",
        "cursor": {
          "ref": "8c531b38-c579-4c3b-86a4-3631a665c934",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "21421d21-b411-465a-9eca-72bfee0b464c"
        },
        "item": {
          "id": "6cdb6288-a8da-44a9-801c-18cb40874a44",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "79ed9470-9352-4cd8-a615-38f2fb9ff17a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 59,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60092519-c40a-475f-baec-543e38825d8e",
        "cursor": {
          "ref": "e8b54590-80f0-4954-a4e4-959a7e0f9f39",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "5bcfd841-3ab2-45ad-9eff-36a408bc32dd"
        },
        "item": {
          "id": "60092519-c40a-475f-baec-543e38825d8e",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "18cb5351-16fa-437e-9cc9-8f19c131040b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60092519-c40a-475f-baec-543e38825d8e",
        "cursor": {
          "ref": "e8b54590-80f0-4954-a4e4-959a7e0f9f39",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "5bcfd841-3ab2-45ad-9eff-36a408bc32dd"
        },
        "item": {
          "id": "60092519-c40a-475f-baec-543e38825d8e",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "18cb5351-16fa-437e-9cc9-8f19c131040b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17a6d53b-41a3-436b-b4bf-a5ccfbb41158",
        "cursor": {
          "ref": "535783b3-0446-41c4-910d-43a8f019301d",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "d691fb8a-4748-40c5-ad08-c3c963ae6881"
        },
        "item": {
          "id": "17a6d53b-41a3-436b-b4bf-a5ccfbb41158",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "34a0448a-bae8-4c94-be8a-f35f4e8ef8aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c0e6039-0e58-448a-b27a-5216bc9ce146",
        "cursor": {
          "ref": "63b4de3b-a563-416e-b940-54522bd6a8d9",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "919ff8db-2a99-4493-aacd-123dcb148535"
        },
        "item": {
          "id": "1c0e6039-0e58-448a-b27a-5216bc9ce146",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "f10465a1-3c29-41bf-97c2-b23f5854326e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ed54cd7-3633-4004-ba7e-94a2f878d5d3",
        "cursor": {
          "ref": "a9590c5c-6873-48eb-90ba-88fbfbf09e3d",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "bbe1687e-6fec-44bc-be1d-7c6b11949b41"
        },
        "item": {
          "id": "4ed54cd7-3633-4004-ba7e-94a2f878d5d3",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "cd827789-c782-4a38-90c1-baf55fcccb49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "784fba76-73a3-4bc7-a0b5-dbe0aea18348",
        "cursor": {
          "ref": "4c856e70-7dc4-4910-a444-00de43eded7f",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "aa1d47cd-0cff-45e4-a0c2-bf33c70cbb12"
        },
        "item": {
          "id": "784fba76-73a3-4bc7-a0b5-dbe0aea18348",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "031b0a6a-12ad-45f3-b82e-b23df0d0ed37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fa65a40-a12c-4ccf-b2e1-5b0d91c7c077",
        "cursor": {
          "ref": "6c295aec-40f9-4afe-8270-b8afcba9b693",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "7f47612b-d897-4f78-85a9-05bd82f434a5"
        },
        "item": {
          "id": "1fa65a40-a12c-4ccf-b2e1-5b0d91c7c077",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "f36d8498-4dbc-4097-84e4-b1f3a7c76b85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19954e36-ad43-4a25-ae1d-c9bff3b954c6",
        "cursor": {
          "ref": "ed598157-5747-4b6c-9b53-3f68f184aca1",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "44050013-f36c-44b3-b4cf-63bce4b90e7a"
        },
        "item": {
          "id": "19954e36-ad43-4a25-ae1d-c9bff3b954c6",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a386b6d4-c02b-4ce1-89f1-04f01587b8e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 463,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7510253-7465-426c-8157-50867f331c2f",
        "cursor": {
          "ref": "9c15e6bd-7fce-4dab-b62e-98d2bab65861",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "cb670861-7ae5-4e80-922d-765cb6a49269"
        },
        "item": {
          "id": "a7510253-7465-426c-8157-50867f331c2f",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "6cacd209-5e9a-40fb-ac24-68b91dca16d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "232d59c5-0e71-45ae-b586-7d71b3d51435",
        "cursor": {
          "ref": "3d1a9fbe-757d-4ac2-842a-347971f9b433",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "bcc72a83-2c48-4c64-9061-0bdfad65b7c4"
        },
        "item": {
          "id": "232d59c5-0e71-45ae-b586-7d71b3d51435",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "04dcd185-658f-4171-b86f-7308707f8fbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c1d324b-cd10-4289-8d6e-9c8082af78de",
        "cursor": {
          "ref": "8a43e9a6-c892-4118-9fe2-f27804616b58",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "a80757ec-ae75-4650-9994-fc896af9991a"
        },
        "item": {
          "id": "4c1d324b-cd10-4289-8d6e-9c8082af78de",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "30159cb1-a36d-46d2-bb2d-5492df478f13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "888c83a7-fe93-4d08-b6dc-31ecd20d7a3d",
        "cursor": {
          "ref": "57ee67f3-f20d-4997-8df3-42435b74b747",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "e84f6a57-d862-4217-ba05-be4289c1e7fc"
        },
        "item": {
          "id": "888c83a7-fe93-4d08-b6dc-31ecd20d7a3d",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "2c69e1f6-b9fe-49f8-abf5-faac7e6e76c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7c354cf-85f7-411c-b3c1-d9809f4ca3d4",
        "cursor": {
          "ref": "327f08de-4e86-406a-9372-acfb82282078",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "baf829cf-6d2f-4f39-b471-ef7ccd6227be"
        },
        "item": {
          "id": "d7c354cf-85f7-411c-b3c1-d9809f4ca3d4",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "2d7028a1-595f-4455-b517-0a47789739f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0abbcf23-8e16-4bb0-ad2d-e7c89c478704",
        "cursor": {
          "ref": "4a49ba0f-72ff-4733-809e-b2f6e25e1284",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "16416c73-8986-4ad2-9230-be06a40f8808"
        },
        "item": {
          "id": "0abbcf23-8e16-4bb0-ad2d-e7c89c478704",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "1da008ae-70bf-49e5-95b5-b5a4efa22091",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a200fe7-060f-452f-9e39-e948ebb018e7",
        "cursor": {
          "ref": "ee87ba28-0f51-4c89-9ea9-aabde7c6aacd",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "b6f6c1d8-7252-43fb-84ac-fc697eb3c056"
        },
        "item": {
          "id": "5a200fe7-060f-452f-9e39-e948ebb018e7",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "da6a773a-22d5-4659-8261-51bae795243b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1613fda-da2f-4ad1-8143-0acce572cdbb",
        "cursor": {
          "ref": "bfa2f8f2-d51a-461b-afaf-13d376b96806",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "7f557f68-d128-4a26-accc-75e1de4ae93f"
        },
        "item": {
          "id": "a1613fda-da2f-4ad1-8143-0acce572cdbb",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "652783c1-c497-453f-af1f-b64c706513b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98a182e8-c557-4649-ada2-d7aa1fc6407e",
        "cursor": {
          "ref": "bbab10c1-0909-4801-b8b3-cb5005d1c3e0",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "0e44934d-66cc-415e-b8bc-460610f18548"
        },
        "item": {
          "id": "98a182e8-c557-4649-ada2-d7aa1fc6407e",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "30219cff-6361-47f0-bc54-2fc5a13431cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49542791-3334-4051-a3fb-b1a6fb624dd6",
        "cursor": {
          "ref": "7e551833-4058-4cea-8707-0abebb250390",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "9a8f233d-9777-4ddf-8343-f2951243d9a0"
        },
        "item": {
          "id": "49542791-3334-4051-a3fb-b1a6fb624dd6",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "cf2f4c7f-762a-4385-bb19-d6c22e1c48e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e33f5add-30f6-4e48-ad3a-9d863b8c9afd",
        "cursor": {
          "ref": "1ec19473-6207-44b6-b866-b6586d93f741",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "1b341f19-235f-4e55-94fb-39f9b330dab6"
        },
        "item": {
          "id": "e33f5add-30f6-4e48-ad3a-9d863b8c9afd",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "0d96162e-39b8-4b40-b5b5-2e9bf5cd1068",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 328,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fedef9d-191d-4c0b-92ef-b1d0087fe43a",
        "cursor": {
          "ref": "af0cde14-a49d-4354-b5b4-62696fa30de2",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "ac45a837-8064-4656-986d-be31f2fd24ef"
        },
        "item": {
          "id": "5fedef9d-191d-4c0b-92ef-b1d0087fe43a",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "616e56a7-23e1-4da6-94c0-a5ce982f8c29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 216,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "532e67b4-34a2-4d8d-bba6-4586251dffd0",
        "cursor": {
          "ref": "4abb2a11-b274-46ad-bdd5-1c34e1f9cb38",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "419713ad-0ae9-4780-94bb-b2d07f45968e"
        },
        "item": {
          "id": "532e67b4-34a2-4d8d-bba6-4586251dffd0",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "8ec73b24-2224-4b7e-9d55-0741d6aa8d54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 224,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b9044ca-4dd1-45da-951d-1beac757ac17",
        "cursor": {
          "ref": "d78c1f52-f2dd-4e15-9571-67f8f2bd4cf6",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "e506982e-885e-4e90-9dbd-82947e2e9e0c"
        },
        "item": {
          "id": "3b9044ca-4dd1-45da-951d-1beac757ac17",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "d2f5f83a-1c04-4720-a8c7-79c43f00605c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 244,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5df304cc-4998-4a81-87ee-6ff12b05b0d8",
        "cursor": {
          "ref": "a514a20f-912e-4401-96d9-1b50d98801eb",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "fab5596b-b33e-4ff5-bf71-981691c8feb8"
        },
        "item": {
          "id": "5df304cc-4998-4a81-87ee-6ff12b05b0d8",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "66081e37-66d7-412c-b846-027bc3170b71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 225,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "163c128e-3d5b-49dc-b301-bf23eb3cfce3",
        "cursor": {
          "ref": "75e56702-911b-4aea-ae0a-114696df4557",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "9d7991f9-fa59-4b3b-8a06-31b02d6e80bf"
        },
        "item": {
          "id": "163c128e-3d5b-49dc-b301-bf23eb3cfce3",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "9e90f7fe-ff75-444f-b427-07d5eb1f09fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 219,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57191f18-4675-4755-8837-d95d88091f99",
        "cursor": {
          "ref": "2fbcf183-f145-4a61-8e76-e5072de79322",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "d5d7d397-53b0-4958-90d0-3fb237af3425"
        },
        "item": {
          "id": "57191f18-4675-4755-8837-d95d88091f99",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "023eeca1-665e-48ce-a771-63aa242fd527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43854970-3950-4005-b7a3-3108a5bc00be",
        "cursor": {
          "ref": "fcca3d8d-a576-4078-b480-10d0f4347252",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "70e6d67a-da93-402e-b9cb-d4591a027468"
        },
        "item": {
          "id": "43854970-3950-4005-b7a3-3108a5bc00be",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "e266d8c1-afb3-4738-85b2-4ed836dafd71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d614addb-017f-4853-8b00-e84e6a2207e4",
        "cursor": {
          "ref": "f1de3012-e130-4c5e-a2b0-03a105cd144b",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "43b7eb5c-fb00-4aff-a8d9-101dcb124a5d"
        },
        "item": {
          "id": "d614addb-017f-4853-8b00-e84e6a2207e4",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "7b09d5e6-3772-462d-9b45-65b2f6acc63f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 227,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5de62f65-fa7a-4483-a139-eb3e27dd0e7c",
        "cursor": {
          "ref": "c32c76a7-7e73-4339-b846-5ac196d19cff",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "8cc19f62-fa08-490a-a4c6-918e6457a4e8"
        },
        "item": {
          "id": "5de62f65-fa7a-4483-a139-eb3e27dd0e7c",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "11096f3e-c318-4cd0-a8bc-62b2685c0bfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acfc4788-0266-44a9-b1ad-9d2432dfed23",
        "cursor": {
          "ref": "4794087f-2e4e-4722-9964-f26a4070f58a",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "a1ea02ca-4548-4fbd-9798-022c15bc3ff1"
        },
        "item": {
          "id": "acfc4788-0266-44a9-b1ad-9d2432dfed23",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "00fb1d3e-c293-49f5-818a-ad03436a273e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "612377e6-3601-467a-ba8f-1fa16aa3aa85",
        "cursor": {
          "ref": "ba27e180-6402-45f2-a835-3386e7d513b7",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "7425e46a-ca39-42d2-8b28-6c39c2588cdd"
        },
        "item": {
          "id": "612377e6-3601-467a-ba8f-1fa16aa3aa85",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "4a05d8e9-1da3-4665-81ec-4cb2d696aa01",
          "status": "OK",
          "code": 200,
          "responseTime": 219,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "e5afc7a6-f928-4b7e-96ae-93ba24e43eb5",
        "cursor": {
          "ref": "f124b99b-27f3-4efb-8bee-9b9236b1c03c",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "07ba9f6e-5a57-4b08-aba5-1cb37d989e74"
        },
        "item": {
          "id": "e5afc7a6-f928-4b7e-96ae-93ba24e43eb5",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ae2b4dd1-3d64-4986-b32d-19c2438726b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6571686c-0811-4eff-801f-3d1d4c04e012",
        "cursor": {
          "ref": "ea1a8fca-28ae-46cc-90c9-8458083b3516",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "34de8330-b0e6-4426-b18f-718170cfcfab"
        },
        "item": {
          "id": "6571686c-0811-4eff-801f-3d1d4c04e012",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "3624d7ca-352c-4a15-ba6d-3366987e6b04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "716da29d-fa5a-4db4-9609-9189321ffca4",
        "cursor": {
          "ref": "d3cb1942-c8e3-4304-8864-416810cd2031",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "8a2b8f30-3601-4642-aa6f-018e9b5be058"
        },
        "item": {
          "id": "716da29d-fa5a-4db4-9609-9189321ffca4",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "38b675c6-ae77-4233-ac1d-b9aec92ce76e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28015dd4-6885-4512-8615-58bfcae0fa6c",
        "cursor": {
          "ref": "924abc69-7e8e-44c4-b88a-eb441ecceb2b",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "fe38ec30-95b4-4550-b19e-748a0d9113ff"
        },
        "item": {
          "id": "28015dd4-6885-4512-8615-58bfcae0fa6c",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "98f86dfd-bef4-466f-bf49-bb5a5f6c2fe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 223,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bef5df4-af21-46cf-8774-fc925f9edb23",
        "cursor": {
          "ref": "f75bbb73-88fc-417c-950a-c8afe2b09a74",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "18b020fb-837c-4e38-98a3-3de945f14437"
        },
        "item": {
          "id": "7bef5df4-af21-46cf-8774-fc925f9edb23",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "704b5acd-19a1-4d5b-b7f1-9ba0d85740b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c957333b-4564-42e8-8cd1-add9a314bcf4",
        "cursor": {
          "ref": "c4d631cc-c454-4cdb-bf5c-0360d79688aa",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "831d98b2-35fb-4d03-b47b-70d58543af99"
        },
        "item": {
          "id": "c957333b-4564-42e8-8cd1-add9a314bcf4",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "af8a1b8c-7540-49bf-aebd-8c2f16bc8127",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb5d87f8-6813-492b-8317-7b290f45adef",
        "cursor": {
          "ref": "3a9806d9-d338-48ed-8dac-831ac7872575",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "43f31612-ef2c-476f-9d54-4c55d3f7979d"
        },
        "item": {
          "id": "fb5d87f8-6813-492b-8317-7b290f45adef",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "c3807eb1-19b2-421b-9a32-fd0c1e5ce2a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 208,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "315619c0-b325-449b-8dfe-075633804370",
        "cursor": {
          "ref": "8458bee4-1ffb-4327-b0c4-75b734aa44af",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "507f679d-bdd0-46c9-81ec-047fb95b02e5"
        },
        "item": {
          "id": "315619c0-b325-449b-8dfe-075633804370",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "7f0b696d-daad-4727-97da-bbd28d8b70c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 222,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5f16f6e-6ec8-45df-a50e-51b4f738c02c",
        "cursor": {
          "ref": "fa0c00f4-951d-4e39-b9e7-d0a3ed37c0f2",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "71ccf5b3-eebe-4326-8ff8-0dd48bcfe957"
        },
        "item": {
          "id": "d5f16f6e-6ec8-45df-a50e-51b4f738c02c",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "65bc45e8-2316-4362-b152-58a900d526c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f8e6b15-b4d5-4772-8165-a677dd6b7fb9",
        "cursor": {
          "ref": "f5ae06eb-a070-49cc-a148-45612aa365e6",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "d53f3250-a857-4063-aaa3-354ed3a5cb97"
        },
        "item": {
          "id": "0f8e6b15-b4d5-4772-8165-a677dd6b7fb9",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "0bf9d5ed-bd68-4d2b-99ba-d375dfe08241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 242,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55b66744-f5e3-4992-8cdf-aac200237aa3",
        "cursor": {
          "ref": "f5313dba-cd38-4ac6-8fa1-70a2c3659a03",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "fab662da-754b-4421-a475-3da5370cba01"
        },
        "item": {
          "id": "55b66744-f5e3-4992-8cdf-aac200237aa3",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "9caef17f-f5d6-4dde-8891-76fe66630baf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 241,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ee3056f-210f-44df-80b7-1ea0052933ee",
        "cursor": {
          "ref": "34f1c7a0-ff76-49bd-978a-c80fa8cda878",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "6ae95ad5-ad2a-49ed-9e93-a76165b97abe"
        },
        "item": {
          "id": "1ee3056f-210f-44df-80b7-1ea0052933ee",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "cf4c6e50-e91c-43bf-b684-1e9acd0cd519",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 241,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68455446-927d-40c1-9f69-17a3ef6fecff",
        "cursor": {
          "ref": "2926a03e-3adb-43a7-ad25-1f4fb04e1403",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "1c0a255b-af10-4a03-a872-d7072c6e7cb3"
        },
        "item": {
          "id": "68455446-927d-40c1-9f69-17a3ef6fecff",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "49d0f372-3563-470f-8546-abe0bbd284e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 222,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "460f8209-6ead-4b24-9348-4579d281acfe",
        "cursor": {
          "ref": "44e8d608-392a-4e0d-9abc-76989290a26e",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "f92c61f4-4262-4328-b424-4037061de3e2"
        },
        "item": {
          "id": "460f8209-6ead-4b24-9348-4579d281acfe",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "0c8dfb01-3eca-423c-b41a-75aac5a32eb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 221,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "238bcd41-b302-459a-8cd4-145a9c267369",
        "cursor": {
          "ref": "da84ec59-166f-4598-b7b2-fed91369dbc3",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "f6eecfaf-c59d-4ddd-ade0-9e256d765a4b"
        },
        "item": {
          "id": "238bcd41-b302-459a-8cd4-145a9c267369",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "838592d4-0ecb-4d79-a451-d21b347760b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bc07f4f-2130-4a87-8096-a4b22954a558",
        "cursor": {
          "ref": "48792e6b-a9a7-4411-8577-c3169d8d036e",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "6f224683-d65b-4ee8-b4da-d6530b66546f"
        },
        "item": {
          "id": "4bc07f4f-2130-4a87-8096-a4b22954a558",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "be8f623d-e7e8-4d7f-8a30-b312554ad613",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 241,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d8c6dca-2d80-4ac3-857a-4255671b474b",
        "cursor": {
          "ref": "5e45e522-dc82-481c-a14f-40d4517c47d7",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "1448daeb-7e21-40d2-a61e-e0932784cd7b"
        },
        "item": {
          "id": "5d8c6dca-2d80-4ac3-857a-4255671b474b",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "4d3009b0-886e-4ccb-8e20-95be5f9b803d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 232,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d54c1e79-151f-4788-a481-2e2351fe947b",
        "cursor": {
          "ref": "addb91d5-7fd2-4b7e-9399-bd720446f192",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "6a84dd8a-d26b-4411-a879-b07e280e90cc"
        },
        "item": {
          "id": "d54c1e79-151f-4788-a481-2e2351fe947b",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "30f7db9b-ce81-4fe0-9e10-101d80ac279a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 230,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "941a653f-2b54-4502-b7c2-1cb2a413f412",
        "cursor": {
          "ref": "fe6d23b7-f83a-446a-b363-15df5e1d97d6",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "69ed2062-8715-4419-a9d8-ed2cf558bae3"
        },
        "item": {
          "id": "941a653f-2b54-4502-b7c2-1cb2a413f412",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "9b8994d0-c1c2-4d4c-bd85-3af2b29d29fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 221,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea7a006f-9298-4859-b6af-c50e8f592bb5",
        "cursor": {
          "ref": "3ac146f0-1658-40df-a0df-78eabcef3e87",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "4158a28d-20c8-4fa6-9c63-1a93f0f1807e"
        },
        "item": {
          "id": "ea7a006f-9298-4859-b6af-c50e8f592bb5",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c9b66270-2545-420d-bb92-6b0ff68a4c15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 229,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fe8a958-cf08-4482-9023-a772d8e982a4",
        "cursor": {
          "ref": "ccc3c1a0-2ede-4498-bb50-09440b330ad6",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "00b0dd31-88e0-47d2-94f1-497b688f23ba"
        },
        "item": {
          "id": "9fe8a958-cf08-4482-9023-a772d8e982a4",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "1fa8c79c-1065-45b5-ae46-1371e589a2ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 219,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d6425ab-acaa-4cc5-879c-51584cbc7084",
        "cursor": {
          "ref": "e422c12d-3695-4fd7-a995-b208f3ac6587",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "bf3fe78f-c30e-477a-a7d7-f00d4ab3bca9"
        },
        "item": {
          "id": "3d6425ab-acaa-4cc5-879c-51584cbc7084",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "29851ba2-bf69-4a3d-b931-9c42cb6daf24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 220,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98265614-90b1-47a9-9628-53bbe133ee1b",
        "cursor": {
          "ref": "ea728eab-2c04-4314-b2a6-b451212b0eb2",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "3226f618-a8bf-4b48-b4ce-bf29f98e34cd"
        },
        "item": {
          "id": "98265614-90b1-47a9-9628-53bbe133ee1b",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "6e46ca73-7e38-46e5-aa8b-262eda1ad446",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 224,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd955d96-d71b-4a03-b427-8aa34e4c7045",
        "cursor": {
          "ref": "057288bb-7e2a-4846-95e2-c84dce50124d",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "55ac779e-2186-4b71-880e-92300c319d65"
        },
        "item": {
          "id": "dd955d96-d71b-4a03-b427-8aa34e4c7045",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "29c04be5-e916-4332-894e-0450c01d50cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 219,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2b434e3-f67f-4aa0-afbf-db05e80b0039",
        "cursor": {
          "ref": "5a0d2de1-3d55-4ed4-abf7-9b685a3b81da",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "335edd4f-f779-4393-ab62-9fbcfd6b6967"
        },
        "item": {
          "id": "a2b434e3-f67f-4aa0-afbf-db05e80b0039",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "ae61c467-c7d4-4a63-b0bf-c1bf8e14131b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8087587b-d3de-4197-b19f-b0ff54493ae0",
        "cursor": {
          "ref": "9f8ad117-7799-4a99-a3cd-3f4136062d59",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "4adc905d-e30d-4ffa-98f6-e399ed04c829"
        },
        "item": {
          "id": "8087587b-d3de-4197-b19f-b0ff54493ae0",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "9974b5d8-3f65-46c2-8963-72160463e822",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfabd07c-2071-4793-86cf-de9b5a21245b",
        "cursor": {
          "ref": "3637de1a-d9b9-4811-9f66-3409d74d0f23",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "beefb78b-ebba-4bc4-90ff-01c74b5a5474"
        },
        "item": {
          "id": "cfabd07c-2071-4793-86cf-de9b5a21245b",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "6280b9c7-68ba-4614-bfa1-663513b2f1f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8793ce8f-a5e2-417b-abd0-2b7c3f9eb55f",
        "cursor": {
          "ref": "1daf23b2-fe07-42cc-af79-fa1341e7b163",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "8eb31b6e-f9bd-41ed-abed-b0cd85a0266d"
        },
        "item": {
          "id": "8793ce8f-a5e2-417b-abd0-2b7c3f9eb55f",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "9fd591e0-2e0a-40b5-ab09-7e70c2070cc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 228,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e389b553-2c96-4c0b-865a-0e2d5cd4abfa",
        "cursor": {
          "ref": "f9dc7a22-3463-419e-be82-7207e32e4931",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "9dc3290f-2410-496a-bbfd-886aa9aca9ff"
        },
        "item": {
          "id": "e389b553-2c96-4c0b-865a-0e2d5cd4abfa",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "117d1753-25f7-4fd4-9397-cb6c216c8ee7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b08baa2e-b5b1-49bb-bdca-b7cbf464de01",
        "cursor": {
          "ref": "8debba31-04ca-4d89-88d1-bc5ae564d913",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "c79ffcae-8665-44c4-99f6-db742557811b"
        },
        "item": {
          "id": "b08baa2e-b5b1-49bb-bdca-b7cbf464de01",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "ed9fd514-8c8e-477c-a68e-78a356cf37fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bc82927-71ef-4641-8706-926a09561cc5",
        "cursor": {
          "ref": "af4bda20-f96c-4c54-a770-50572a59dd91",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "7abea3ba-9e98-4a69-8fae-e0d8ab0157a2"
        },
        "item": {
          "id": "8bc82927-71ef-4641-8706-926a09561cc5",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "aa4e25df-2f11-4a8f-ac5f-2ddb6e7cc535",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 204,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37d9a5be-6187-4308-b32c-b255e0a8d2d0",
        "cursor": {
          "ref": "6b0ef43a-207b-4876-b180-41fa1de87536",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "c61dc62f-f28e-492d-aa79-e980d0f885da"
        },
        "item": {
          "id": "37d9a5be-6187-4308-b32c-b255e0a8d2d0",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "d5704a9d-089d-417c-bdf4-0c192a3c43ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7dddea8-3b5e-47d8-a54d-16b3e0e3c606",
        "cursor": {
          "ref": "8b74395a-933a-46ca-98d5-6dd23f561ac9",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "b679e827-3211-42be-af16-d90b657b77d2"
        },
        "item": {
          "id": "c7dddea8-3b5e-47d8-a54d-16b3e0e3c606",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "64f6cfeb-0e82-4e6b-9a09-6c93df2bccc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 210,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e655c968-ee05-43d6-ac41-0ffa88dd6933",
        "cursor": {
          "ref": "044aacef-5bb5-49d8-af8b-4f2dcc28c324",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "76a6dca7-7f41-48f2-abe6-e61203374b27"
        },
        "item": {
          "id": "e655c968-ee05-43d6-ac41-0ffa88dd6933",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "d14b7ee1-59dd-4174-97fe-c0bda5c99757",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b12c355-91b5-4151-a2d5-a837a775797e",
        "cursor": {
          "ref": "57d65b9f-7321-4d47-9cec-66a64626e240",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "0822b66c-ecb9-4684-b0d4-189a797baf2a"
        },
        "item": {
          "id": "2b12c355-91b5-4151-a2d5-a837a775797e",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "acef6dd2-96a9-42eb-a867-7ceb63434a07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90d612fb-9525-4c45-8c9f-b6ade6fdc1b4",
        "cursor": {
          "ref": "e3980e86-b09d-4fcb-b838-30436b44b698",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "2b527892-9aff-4d5e-b28c-a8fec052240e"
        },
        "item": {
          "id": "90d612fb-9525-4c45-8c9f-b6ade6fdc1b4",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "8e003858-b775-44eb-b310-e2c6b251b970",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89a9f6b1-3233-42fc-af9a-e1d832d8d530",
        "cursor": {
          "ref": "2312aa9c-8510-449e-97e3-d08a6f81ae83",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "62fc3bc5-bb2f-4b00-b4ad-622a23452993"
        },
        "item": {
          "id": "89a9f6b1-3233-42fc-af9a-e1d832d8d530",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "a406818e-f0df-46c6-a9b8-e0492226b66b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "275bd277-f3f8-4cc3-95ea-c18810dc8318",
        "cursor": {
          "ref": "0d974fbd-bbd1-439c-a897-0a1a67173e58",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "e8a06841-3c4e-43d3-b2cc-34b34818101b"
        },
        "item": {
          "id": "275bd277-f3f8-4cc3-95ea-c18810dc8318",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "9d4b66bb-7d16-427e-b9c5-be7333e6721d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b58b03fe-df4c-42b2-945c-b243c28a1620",
        "cursor": {
          "ref": "e1e3b087-c0a0-4e41-8db9-1cb3ba28e71f",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "a3f70227-9ac8-4ac7-a3b0-eda3e3452efd"
        },
        "item": {
          "id": "b58b03fe-df4c-42b2-945c-b243c28a1620",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "8257ccda-6cdc-41a7-b1b6-fab4042ce13a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7956f784-8212-4ef7-b8f7-4084488d0568",
        "cursor": {
          "ref": "cac5fb71-6b7b-47a8-8100-ebe203939927",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "0009f58b-a0d6-42b8-b073-ac9f40263de5"
        },
        "item": {
          "id": "7956f784-8212-4ef7-b8f7-4084488d0568",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "156649b1-de89-44ec-a7b9-a194c3abbf3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa74687c-3814-47a9-a8f4-3486244f8f3e",
        "cursor": {
          "ref": "e7825485-75b1-492d-81db-fe0c6a65b444",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "45e47d98-a387-4e0d-9d73-9bce20b22701"
        },
        "item": {
          "id": "aa74687c-3814-47a9-a8f4-3486244f8f3e",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "110d54d6-818c-4917-b0c2-fdf3d03abe95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fe7a3ea-47cc-4869-a365-f4fc7b7cc462",
        "cursor": {
          "ref": "6288969d-e7fe-4f06-9f3b-b37d1069a97f",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "5370117c-d084-4ced-8b82-d882d7b4b134"
        },
        "item": {
          "id": "9fe7a3ea-47cc-4869-a365-f4fc7b7cc462",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "12d7032c-f394-49d3-ac69-effd78f6c63b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a04d885-b211-4f0f-84e7-08de14d684aa",
        "cursor": {
          "ref": "f1db1f5a-9ede-4d8c-8208-a2b92b855cb7",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "c4c3c6a7-9997-4f0d-a4a2-69a1aaa63790"
        },
        "item": {
          "id": "5a04d885-b211-4f0f-84e7-08de14d684aa",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "bd222ccf-b59f-4a75-ad80-a0c012186024",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce932699-8156-4f73-bcbc-e3fbf4a1f49e",
        "cursor": {
          "ref": "27cbac7e-604a-4b2d-9ea0-28a0ce422afa",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "e9d61aaa-470c-4f81-8c4a-21873cc92b1f"
        },
        "item": {
          "id": "ce932699-8156-4f73-bcbc-e3fbf4a1f49e",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "527b99d0-3d87-4ea0-a75d-2769c5df365f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09771103-aca3-4f4b-a4f2-e16632a2b82d",
        "cursor": {
          "ref": "b025aaae-253f-4582-9534-409540cc79e4",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "4f0501c4-6568-4848-928b-b7ad09e870dd"
        },
        "item": {
          "id": "09771103-aca3-4f4b-a4f2-e16632a2b82d",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "d0809e7b-7443-4499-bc9e-cea78e6e169a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35ff8876-5ece-4fa4-b15d-7223ba4742be",
        "cursor": {
          "ref": "e37506c6-b628-4d97-be28-75ef275078a2",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "7b553cbd-4431-411a-856b-801f0b0474a8"
        },
        "item": {
          "id": "35ff8876-5ece-4fa4-b15d-7223ba4742be",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "76bbf69a-1c8e-492f-98a4-2209a43380c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80a4fc29-a14b-46fd-95fd-78faba28bb62",
        "cursor": {
          "ref": "1aa0692f-ae86-406c-9f2b-749db628dabe",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "8d410b6d-2a99-4d26-8ddf-eb2a9d0d6148"
        },
        "item": {
          "id": "80a4fc29-a14b-46fd-95fd-78faba28bb62",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "516161b3-84bc-41fa-bd0d-0aaf3710bdcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bcee59a-1bac-46d3-9edf-cf19057ec4f6",
        "cursor": {
          "ref": "70c33daa-fdea-4bc4-8630-8e7f681237e1",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "4bffbdc7-b264-41f4-a5a9-f545635e033d"
        },
        "item": {
          "id": "7bcee59a-1bac-46d3-9edf-cf19057ec4f6",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "20a8e105-2cb0-44d1-89a5-9657642486a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59d79429-5704-41ce-80a0-79695fa64bc1",
        "cursor": {
          "ref": "d680f0ac-720b-4382-84d9-034742c6ccb2",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "c127ed30-5158-44a1-bbaf-042c933df4c5"
        },
        "item": {
          "id": "59d79429-5704-41ce-80a0-79695fa64bc1",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "59e57263-d9ad-4278-b89e-82ae9d3f473d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d1b2dfd-f0ea-47e2-ba10-f4604b762c1a",
        "cursor": {
          "ref": "3234123f-4a2c-424d-8aee-604b2324b04c",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "f77a2292-b21d-4b1c-8d21-f7c9bde3683a"
        },
        "item": {
          "id": "0d1b2dfd-f0ea-47e2-ba10-f4604b762c1a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a152fe4e-8ed6-4145-8a9b-9165888eeff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19d1422c-1cbe-4a55-82aa-f68e828b5e07",
        "cursor": {
          "ref": "81692ffe-0108-4f93-a62f-405b29990f00",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "9b2ee2a5-afb2-4336-be8d-816555ad86d8"
        },
        "item": {
          "id": "19d1422c-1cbe-4a55-82aa-f68e828b5e07",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "07884ba7-e1ff-47de-b181-558823373f52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02bffefd-58da-457e-8e61-e1e80faf4a63",
        "cursor": {
          "ref": "27cc2aa6-2136-416e-9f37-33487fe44bf9",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "af0c9aa8-ba30-4137-9762-529e1d5a3e8d"
        },
        "item": {
          "id": "02bffefd-58da-457e-8e61-e1e80faf4a63",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "1f0eae95-aaff-47ec-ac5f-2265b1e04813",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "742399e5-efc7-4473-a8d2-f42419f4a642",
        "cursor": {
          "ref": "b927762d-217b-408d-b0e6-8835670f1ebe",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "7125a5a0-14ed-464a-a787-f6b28fff1a4a"
        },
        "item": {
          "id": "742399e5-efc7-4473-a8d2-f42419f4a642",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "10b8f4de-41a2-49f5-b087-0184e453c754",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aaea08f-dc6e-426d-be2c-9fb1541bc9bf",
        "cursor": {
          "ref": "b42814c5-6b40-42ff-93a5-911a1bc60936",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "4e33506b-1454-4088-b68a-57d20ca8ae25"
        },
        "item": {
          "id": "7aaea08f-dc6e-426d-be2c-9fb1541bc9bf",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "b8e81536-7878-466b-b7de-9fd3fadae16d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58105ecb-5668-4445-9ac4-3ebdd21f2479",
        "cursor": {
          "ref": "5aedd399-b01b-4e49-99cb-e04e7086aeb0",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "d3a9e5fd-a6bf-488c-b919-74597a8ed29f"
        },
        "item": {
          "id": "58105ecb-5668-4445-9ac4-3ebdd21f2479",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "a515436b-5d36-493e-9e40-792ce51e6ad7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0b63b42-f2fd-48f6-891b-96f95cdabeaf",
        "cursor": {
          "ref": "a3ba614c-d1ed-421b-aa05-3ce54b87a3fc",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "ed1e38a0-931c-4601-908d-cf1bca0abc47"
        },
        "item": {
          "id": "d0b63b42-f2fd-48f6-891b-96f95cdabeaf",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "f4a337ed-3e94-4ce6-a926-16fe4cf4e1d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "885fcb33-0900-49c6-a359-6d8db70e08a8",
        "cursor": {
          "ref": "f6db0f76-2c6f-45f6-a738-b2293fa05167",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "7264e729-2cdf-4887-a9c0-083361c8f410"
        },
        "item": {
          "id": "885fcb33-0900-49c6-a359-6d8db70e08a8",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "3cf4aef9-ee91-4574-b4c8-f1bfa6716791",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73335c9f-18fd-41cc-acd0-f493d2af8408",
        "cursor": {
          "ref": "46d29f3d-761d-45a8-bb06-623e821f3a74",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "01c3e816-8cec-4b53-91fb-9d3fbe95520f"
        },
        "item": {
          "id": "73335c9f-18fd-41cc-acd0-f493d2af8408",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "461715de-ff2e-4ee0-88f3-c37d8337d29a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c06efc2f-7d77-4370-b73c-9dffc619d309",
        "cursor": {
          "ref": "c831849a-5fe8-4e64-b640-b1bd80f0189e",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "158128a2-1c7a-4f8d-a7c3-3713e9e327f9"
        },
        "item": {
          "id": "c06efc2f-7d77-4370-b73c-9dffc619d309",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "dd96510b-9aec-4159-829d-28c0a811a4b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a4b1cdd-0a55-4cd6-81bc-cb6818fea701",
        "cursor": {
          "ref": "4e48a160-1306-4c5b-bbf4-d18681fa3555",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "5d946ca9-3f37-4db7-85c0-14aa1c10c2ac"
        },
        "item": {
          "id": "6a4b1cdd-0a55-4cd6-81bc-cb6818fea701",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "13424242-9473-4bc7-bb02-5108ffdfe632",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea2a6e4b-efac-4fac-b7bf-2659e678d63b",
        "cursor": {
          "ref": "66b66da8-f115-47ad-b3c4-73bb219d8990",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "589d2020-53de-4f65-84b6-5cfe2130ae79"
        },
        "item": {
          "id": "ea2a6e4b-efac-4fac-b7bf-2659e678d63b",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "243c43b4-3e05-4263-8626-3941e537f856",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d753c757-4eea-4b28-afea-a2c37a156b6f",
        "cursor": {
          "ref": "b3a3aaa6-1a86-4970-8ccf-b48265d100c2",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "21127a9b-a191-402c-931b-bb9108e94f9d"
        },
        "item": {
          "id": "d753c757-4eea-4b28-afea-a2c37a156b6f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "6d07ba0d-65c1-411c-bc02-4da6b1be8cb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c0e9cf5-6d38-4e2e-a5dc-9e174e0dc3a0",
        "cursor": {
          "ref": "82694864-36fd-493a-b199-e6daa640c1df",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "a4d98cb7-76e6-4944-ab93-125235c94aff"
        },
        "item": {
          "id": "9c0e9cf5-6d38-4e2e-a5dc-9e174e0dc3a0",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "6dd791f8-d238-431b-9d38-35715fe698c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "515862b6-115d-490e-a66c-74a1dd734c54",
        "cursor": {
          "ref": "9d43b5f3-16d9-4260-9d16-99cb1e45d5a0",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "54af8433-047b-4f3b-a82b-41612a1f28c3"
        },
        "item": {
          "id": "515862b6-115d-490e-a66c-74a1dd734c54",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "08b3a1bc-7b10-4bf9-a279-cd2b0030589f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0cccf02-a2ea-40f0-b0ab-7b3aeaf355c7",
        "cursor": {
          "ref": "547b5e61-e835-427e-a8db-fa497fd45771",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "13614b2e-2ebf-408b-ab04-df0ff1cb97bd"
        },
        "item": {
          "id": "f0cccf02-a2ea-40f0-b0ab-7b3aeaf355c7",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "629f962e-9d13-4b71-bcb1-75697dd444d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12580e07-23eb-4c4c-bf8f-5fe82ea255cb",
        "cursor": {
          "ref": "d86724c0-cab0-4982-829b-ee9979e074d9",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "e6e84318-8f41-45b9-8b08-145920580a59"
        },
        "item": {
          "id": "12580e07-23eb-4c4c-bf8f-5fe82ea255cb",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "4264694d-2a91-4f95-8c5e-d34e04c166b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b29f94c4-76e7-46f9-b28a-a067c564b4c5",
        "cursor": {
          "ref": "d3a82313-532c-459f-aeda-9ad7e4e427df",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "41b9cc47-96db-44e1-a7b5-db6763ae6145"
        },
        "item": {
          "id": "b29f94c4-76e7-46f9-b28a-a067c564b4c5",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "b45140e9-ce1b-46a6-9a0c-6c405a9d093d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fc6dc77-c4dc-4031-bf7a-1501594199d9",
        "cursor": {
          "ref": "ffeea7a4-5a08-43a5-820c-8419e0ede21d",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "2e264fe1-618c-46bb-ab2c-3bdbc589aaf1"
        },
        "item": {
          "id": "9fc6dc77-c4dc-4031-bf7a-1501594199d9",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "7b1b61c5-8c3d-4ef1-a29f-95d663e6f684",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ed8b4db-283e-4915-a8c4-ec727fd37224",
        "cursor": {
          "ref": "c91b1eb0-e1f7-43d8-80db-17f78d247c72",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "0cd3957e-e583-4d50-94aa-9aaee272d30d"
        },
        "item": {
          "id": "2ed8b4db-283e-4915-a8c4-ec727fd37224",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "b00e371f-de82-4907-918b-7d13ac7d65d6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96bec9c6-44ae-4de4-a31f-a6e4bf3ef39e",
        "cursor": {
          "ref": "1058fbc3-906b-4bb2-a8cf-587c80adb0e8",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "a4ffcb9d-127d-436c-8227-d801db0cabea"
        },
        "item": {
          "id": "96bec9c6-44ae-4de4-a31f-a6e4bf3ef39e",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "644e690e-df94-4f8b-a0bd-08c66b6391ee",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 48,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d2be5aa-593a-473a-9ed4-8afee5b364e7",
        "cursor": {
          "ref": "913ad19e-8037-4b1e-aba5-7c1c57ed8550",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "58e3dcae-5c79-4d5c-a522-f5fb4bf22baa"
        },
        "item": {
          "id": "6d2be5aa-593a-473a-9ed4-8afee5b364e7",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "8c95ed95-1f44-4090-a22a-de550ee3ef2f",
          "status": "OK",
          "code": 200,
          "responseTime": 573,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "5af8f487-91d0-43e2-8f73-0f7c66e90f6c",
        "cursor": {
          "ref": "569b9718-1b9f-4486-8089-87bed5464f26",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "20079811-50d2-410a-915e-38cf54b9af65"
        },
        "item": {
          "id": "5af8f487-91d0-43e2-8f73-0f7c66e90f6c",
          "name": "credentials_verify"
        },
        "response": {
          "id": "e895a6a8-f7df-4047-8198-dd0111b0ee0e",
          "status": "OK",
          "code": 200,
          "responseTime": 410,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa67b6dd-f97a-4b97-96d5-2fbf2e4a74bb",
        "cursor": {
          "ref": "5f64ed48-1e5a-491f-8553-197dde62d590",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "cbf132c3-c050-4695-b190-728a2dccafcd"
        },
        "item": {
          "id": "fa67b6dd-f97a-4b97-96d5-2fbf2e4a74bb",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "ce6a903f-0d66-4990-8ab8-278befca6e59",
          "status": "OK",
          "code": 200,
          "responseTime": 474,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a0db41c-0078-4f26-bd21-7b0ca1e05dee",
        "cursor": {
          "ref": "ffda8f0d-cc28-4b9e-aac8-348a080ed720",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f8a7f41d-e69e-4f62-8eb3-8e5e00943237"
        },
        "item": {
          "id": "2a0db41c-0078-4f26-bd21-7b0ca1e05dee",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "f6d4e5f1-2ad6-46a2-af7d-28dbeb887607",
          "status": "OK",
          "code": 200,
          "responseTime": 347,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f051b1d1-f006-4b50-bca0-a89060d91cd5",
        "cursor": {
          "ref": "db5107b2-0420-42e0-adb5-8c2ca6b6ce67",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "7d500b81-4ca1-4f1c-9836-9e055dddfc7f"
        },
        "item": {
          "id": "f051b1d1-f006-4b50-bca0-a89060d91cd5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "dabce04f-f351-413c-a6b9-e43b0cf95fbd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f051b1d1-f006-4b50-bca0-a89060d91cd5",
        "cursor": {
          "ref": "db5107b2-0420-42e0-adb5-8c2ca6b6ce67",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "7d500b81-4ca1-4f1c-9836-9e055dddfc7f"
        },
        "item": {
          "id": "f051b1d1-f006-4b50-bca0-a89060d91cd5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "dabce04f-f351-413c-a6b9-e43b0cf95fbd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f051b1d1-f006-4b50-bca0-a89060d91cd5",
        "cursor": {
          "ref": "db5107b2-0420-42e0-adb5-8c2ca6b6ce67",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "7d500b81-4ca1-4f1c-9836-9e055dddfc7f"
        },
        "item": {
          "id": "f051b1d1-f006-4b50-bca0-a89060d91cd5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "dabce04f-f351-413c-a6b9-e43b0cf95fbd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18108908-9f50-414c-9c18-683f103dbcb3",
        "cursor": {
          "ref": "4755fd18-cc2e-4549-8eb9-886d9311ba62",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "2994a21e-7f0b-4437-8ce5-a3425448e72e"
        },
        "item": {
          "id": "18108908-9f50-414c-9c18-683f103dbcb3",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "49e5912b-b4e7-4ad7-9f28-7646372c1b4b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 48,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5fb03d5-fef9-4138-9447-1efb99ebe866",
        "cursor": {
          "ref": "988ff20c-df4c-4e7b-b3f2-98d1b240057b",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "caa6800a-e991-4a3c-8ede-3b15004f57d4"
        },
        "item": {
          "id": "b5fb03d5-fef9-4138-9447-1efb99ebe866",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "33008d0d-7078-4c78-a87a-85b654474328",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "b5fb03d5-fef9-4138-9447-1efb99ebe866",
        "cursor": {
          "ref": "988ff20c-df4c-4e7b-b3f2-98d1b240057b",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "caa6800a-e991-4a3c-8ede-3b15004f57d4"
        },
        "item": {
          "id": "b5fb03d5-fef9-4138-9447-1efb99ebe866",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "33008d0d-7078-4c78-a87a-85b654474328",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "94ac8614-cd44-40b5-8eba-487961131072",
        "cursor": {
          "ref": "ffd826c8-ee67-4de7-902b-5a78b4ce63f6",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "b655a22d-b27d-4f9d-b0ac-d840d5e18a44"
        },
        "item": {
          "id": "94ac8614-cd44-40b5-8eba-487961131072",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "cce31fa0-4c51-4f80-9fbd-eaaf83d358c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "6704549a-dc35-484d-9428-2db89664f2b2",
        "cursor": {
          "ref": "a102ebf6-e481-4473-b956-05badeb724bd",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "2d543945-0efa-4e15-a9dc-41682d94e30f"
        },
        "item": {
          "id": "6704549a-dc35-484d-9428-2db89664f2b2",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "28626aa1-f93e-4e3b-ac55-78435cd28f4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "6704549a-dc35-484d-9428-2db89664f2b2",
        "cursor": {
          "ref": "a102ebf6-e481-4473-b956-05badeb724bd",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "2d543945-0efa-4e15-a9dc-41682d94e30f"
        },
        "item": {
          "id": "6704549a-dc35-484d-9428-2db89664f2b2",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "28626aa1-f93e-4e3b-ac55-78435cd28f4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "e16d53d8-f77a-4e4b-a8dc-67c14a9f5362",
        "cursor": {
          "ref": "0e3280d9-1d21-4acb-a735-50da56f473a3",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "435309e8-025c-49a4-a699-ba49e4ab1427"
        },
        "item": {
          "id": "e16d53d8-f77a-4e4b-a8dc-67c14a9f5362",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "f2f37c7a-2d51-4a43-9ef0-3f4beb614f3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}