{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "0cac2a3a-5bf1-45dc-ae98-8ced53466b9f",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "a7b2aa84-444c-476f-9b0a-b75f11adccaa",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ceefd15b-ba38-49f1-b237-3c3c31a8a8b3",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "85b3d827-e47e-4435-b23b-236a390c0e2c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "02d1cac6-2df1-4e6b-a230-5826f1a45ed9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "03f25980-db7f-4227-95d0-261668c101d1",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "90e843af-8956-451b-b475-81d40a73bcfd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0a28d18d-fbf8-45bf-a595-dddef85993c2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7b9be9f4-61ab-4201-9226-a1e9931bf8ff",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4ec237d-2b92-44dc-8415-93bd8dd02fcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ed2ca583-1244-446c-aed7-b4d7fe35981f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9398c512-5516-4e41-bde6-2cfc1d14a1f1",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e61cafb-c64e-443d-938d-9a0ca25e7e86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1866d9b1-c8da-4af3-9dc1-6caff56f87b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35e09543-252b-430f-b4c9-a59c98dc2f99",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ed593b2-680f-4139-8b94-8728a6b7e9ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a6ae0ae1-477b-43d8-aa9b-f6086bf74b31"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2350076a-b468-4e53-a4d1-13974953425b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "526ece42-f41a-473a-995a-eb7a64e7ff60",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcc04d3e-e20a-47d2-b70e-332b999ae268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7f115b1-b3ed-4f6b-ae16-a6771ab98935"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df2614ce-44e2-4235-8ac2-b042c58e9691",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "383065a9-e9e2-4ddd-b786-d1ae86181ce9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "849dd132-1886-4e2d-8842-227cb06e9f7c",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83f9b95e-a728-4bb3-963f-5badf3b7d2c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7233d767-7ba2-4dab-ab63-5c1f0aca1131"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2271f48a-5de4-41ec-afd1-ebb850606858",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "4b6a663a-d3a9-4caf-883e-a374f888c024"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b79d1a4f-449c-46db-9a85-8651c565eb1e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ef720824-1aa0-494a-b991-929bd0cf71c7",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ceeee90-b298-4089-b82a-a6fcc8a9ea61",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "af23f872-56d6-4b71-96e8-987f8163b4fe"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "510755d7-59c1-4983-b32d-fae853513ff8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "81d3ae93-905b-4b3a-8701-2f76eaff3d73"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eda6c04e-b7ca-4adf-bf64-bca9571946ed",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ec73e7cd-ef30-4d5c-811b-a59afff4f7b8"
            }
          }
        ]
      },
      {
        "id": "6c16c7a8-de7f-4361-b626-b82cd513f4de",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "4721c235-47f9-4cd5-b236-3b2c2bbb97b5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a3058b0e-5e68-4cce-82a5-8ae2bbeb2faf",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "ac644b82-cf88-45c5-9c1d-3485892dbb70",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dda01463-b82d-406f-bf34-5d47c8efb590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32d698c7-24b3-442f-8a32-55c858394988"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccfdcb0c-990d-403a-8289-b6f4ad165942",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1e7642c-9ba9-49ef-beb3-a9edb49a3668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ffaf735-8c0f-4153-b079-b9688d270e86",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36cf70dd-ac35-42d8-a00f-6e73af5beaa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0aa3e93-e59d-4d5b-bdc3-ae7915b757db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc0795c-e761-4021-bced-a261caa221ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d21d047e-f75e-4ec7-a040-02949fb65e7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "918c0822-830f-472d-ae88-7118f7628975",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97988a2f-6a56-4ab6-8426-3a37a3982add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17831ada-3e77-477a-acc9-3264bbb95c70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b67f561-65be-4d40-95a8-a3c57972dbfd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c38942c8-ab30-401c-8e39-669550c9e0af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1471c99-c9bb-4c78-8262-d909b6fd8bf1",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3acdb8c-a514-40df-bc32-450223b09090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eea106da-8616-4a73-a9c8-be2caf15412a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "552c65f8-6250-4a39-925b-a24b5a56e50d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62229974-6202-4a27-8f84-2190e95fc6d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfc803e6-57ba-4180-95f2-4543f0cffa62",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab8e4866-4ede-409a-b11f-140529c9162b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d98934a-d043-47a2-b01b-0d6c33df84af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "820800e9-dbcf-48f3-8a9a-a6e5bdb0bd5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cdc3e51-e599-431b-a596-2c5002c6ab0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aa44efa-084d-4d9f-8d61-a6c51cf269bb",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d28d0b6-bb6f-4ebc-8550-7ca9998ddc71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9996cead-7bff-449b-8385-f9f6ad2e3159"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c12a9c6-21b4-47b9-881f-f231a5136059",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8af85d11-3383-4aab-9154-7dbab71f4cfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "238d72e0-5c07-4c5d-9369-b1eb207656a8",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4639fd6-9727-430a-bbd0-729758c6d139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dc66354-5e94-43d6-bfa5-7947803f7dbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c02ec65-a877-4776-b1bb-0b7bca726c11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88fc64c9-97ea-467e-9a1a-24cde23df224"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0604deb6-e369-4025-a1cb-62ad9da73805",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7930463d-e425-4eec-9ac3-117003582b58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1fa6923-8d72-477a-9bfb-32133cceefea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6bf6a2b-8dac-4d3a-a0dc-607e89424453",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0b70a2b-f1b9-4ee1-8866-ec555144d1f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "512d98c5-5b5f-4144-a2aa-24a98ae02fa2",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ff9e026-8266-4f4b-b0ad-ef7f251af054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1e7683f-cf57-4708-b776-c1ab1f0f5c4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08161820-c2dd-40d4-96aa-7d3e0e15b0e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "711b9fd3-98fb-4160-97c7-f496104d3ff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2afa1ce6-5715-4b3d-b9ac-cf26f7b522bd",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1063156e-68bd-46e0-b002-f536230f4b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08caf9c2-a1c4-4cc2-96f9-2b7936224667"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc677254-7e0e-4efd-9de5-6eae8575e850",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "259e052a-0873-416f-9bf9-66c915b6a503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad15addb-07d7-425c-a2b8-27457b382190",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20a33179-1d4d-4ea7-a801-444ec4922e87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fa9d592-de58-4284-a123-ce6fc5bc594c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e045ae01-774c-4249-b907-59cdb2ebaffb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "d6871ade-5768-4527-af60-c3a5a9165025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e834a60-0ca6-404f-b640-ee4cd11b3da1",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "182d4cb0-7dba-4891-8b03-129c1bc3f24a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15d4dd0c-ba81-4501-9309-03da959e80f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "324d0e1f-cc6d-477c-88e3-cc24ea088115",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "3c508ffd-1dc6-44ec-b573-75b8b70885f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7afe1d6d-2bd1-4cb0-95ce-b940fcd1341d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38e63046-e435-487e-8d7b-4f565dca5cc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ba06e23-9ad1-404f-8a48-de0901b38329"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "844ae5b6-a1be-4654-9ebd-ec82d3e50546",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25bbeedc-4ffa-4378-8df8-088b7a0b7e3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69b49bbc-b758-4c63-9fc5-03c9a01d340d",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab9af326-6635-4a51-baf6-1c5cf395bdcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "407c984e-aecb-4e08-a107-b700bf2d0b50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ba9b664-164a-446f-b99e-080da8a9b048",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2821bcfa-4eec-471c-8e4e-b92d4b84ed18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a87d9121-1c7f-4c95-bfa4-88fb4dfa5eb2",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dd17468-43fa-4005-bdec-1dffba3a23bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9935f45-40b2-4bf6-9011-bb1a025492ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eee60e5d-f971-486f-a182-526d621b8a93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "65f74ca6-8755-4631-86df-c5f647444e7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec771013-aacc-4a73-b6cc-24804b0afcf6",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db03f702-8f25-49b3-9bb3-c6dd2dd73dbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af2f526e-34fb-405a-aac6-3d68c6711d8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f062390-2682-4124-9df8-170d7047e403",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "ba4788c7-4eac-48fb-9341-909b0d2681bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82928bbd-aee7-4a5a-8092-c304058bdf15",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3976404-5766-48fd-af84-a1bebc1e2024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12f8c968-2a75-47ea-8cd8-405688688d87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3350a0cc-a303-4c3a-b389-0625f15bfa9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bdf213e-565a-455e-b86a-f92ebc8f9d43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "426d7974-de41-40aa-8665-0a55060b343a",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06e1c6e1-eb79-4720-8d06-f8e86e8d4b87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8779bfe5-9c2d-4ae6-b6ad-6a94edab850e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d2795af-9cf8-428d-aa2e-db0198bfdb32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e915f76f-9ddf-4ada-b534-a63292fdc8c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "412c4806-a070-41d0-8eaa-2b9bb9aced3f",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a84a3a1-9fa1-481e-a4ba-b9cb566a3f25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "110d7477-7298-4019-89be-838d7334027e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c25c51ac-b0e9-49f8-9ba1-f596f64ebdd7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33ab7d9d-6ae8-41ea-8a41-d488d3577809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abad1d31-d0dc-4187-8031-2e8d66d7c655",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2879e4b2-0c9f-42d5-a2d9-40ebede8e3fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0db6db09-fd36-4265-a769-61151f35e6b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b8e272d-24f3-4058-8a6b-02338a0ee0bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9846c21-4553-4984-8848-26d99616479b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbf80cab-3281-468a-a6b8-dffda038d73a",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce2fe80f-d103-4cc8-a034-68a107081271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edb4f881-7d1a-48ae-8f8e-2041dcc74508"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd4d2f5f-a18f-4d9d-bf85-3b47536050e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be an object",
                            "rawBody.credential.credentialSubject = \"did:example:1234\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c1cd814-e915-4e2a-afaa-2eff7a301887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "891a97c0-a502-4d67-b4ce-946beb489321",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ad47da4-a958-4fd8-84e8-3dea6084753e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a727d4df-6052-4406-b1c9-9e06c26e6482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57bfe5ca-21a3-4e25-ba8c-fc6423106982",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"did:example:1234\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80fe94f9-d3a0-4f6b-960b-7e817ae5da0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "692f1ec4-4daf-4b72-819e-c4aa674df2b4",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd2e95d2-b820-4e9e-a7e3-7eedfb26b431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8308e198-df25-4b45-aaa1-ca607e814e8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dff0b2f-225c-4021-9ad4-74d1d4a8b363",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b91429ee-9b8a-4156-aeea-d73e56813fa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb1371c6-8225-46b9-95ad-bcc9cae4692b",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7dbed64-6bb3-4551-8112-81766b32ad8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaf1c7a4-17ff-485f-986d-0740deda8c55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53c11e40-7b5c-4222-b3cc-ff4f2c368be2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00ffb06e-b529-48ea-8d18-0f84863f2368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc769ea4-2029-4738-99a2-fc934381ac9a",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77f71257-a4e6-4ad3-87aa-e427bbea43d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e592d75-081d-4eb3-9fec-68f9b9e52296"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eed8db9-0868-4836-9fbf-074909eed6b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc933a4b-a5a1-4bd1-a4db-bc5908db2685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bbd03b3-85c3-45a2-af80-306e9edc17d5",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38f0b746-0a25-4305-8895-b08d4c98a2a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5227af2-6a4a-4623-ba05-9934afed156e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d38dfefa-9646-407d-9834-9697bebdf4c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7af172a-9333-46ed-8675-dd8b4b7273d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9dad108-732d-466e-a2a2-27d7e2376456",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e02e22ea-def4-436b-9fb4-904719da52cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df9dea17-460a-4b9d-b50b-809b366e41e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a99484bb-c428-47be-9272-83b02dc69f54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23407ca3-3fd1-4797-85d5-e5f8f9ad95a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb78adf5-3a64-4d56-8f44-1c3ba62f737e",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90c251e8-f623-416d-8165-a6c6e5ee50c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a97b3a6-a2c6-4932-8c5e-3a9c78e2bf5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b728bd47-6591-40b3-8759-52f3f0763436",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32297299-9275-4e5e-8cab-3de92bb4ba92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc027348-2d9a-4041-84dd-d4f2ae5eabdf",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5761cd8-c28b-4b76-a4ab-dafd6f7cc133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66a5dc37-defc-4455-981b-fcc30ac4faab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "120ac7da-0cb2-4736-bb04-37dbbf51340b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81ec07f5-d841-4deb-a3f2-4f294f23486d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82c5f710-c72b-4fca-b85c-fb39e0fec58e",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a596f30-5efd-4ba6-b963-8abf569e9af8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e10106a3-b600-4dcd-a6d4-d7669d2c042c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fbef974-898b-4310-a538-187427538981",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5adf7d0f-8d75-4cba-9c8c-bc134e26ade7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e09cd1e-64fb-4b3d-bc1b-7b95fed362cf",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12a12ac8-613b-482a-927a-b8ba0ddbdf35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "dc4cd64f-1df8-4e6c-8c14-890c1f337504"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7409699f-075b-4739-b497-2896ef4d6b19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec9cde7c-6f58-4bca-aa91-17f7460b6992"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "70ab3a04-63ea-4368-9139-459dd9022f89",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e0e5f149-1a46-4053-831b-08c393296793",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f145616-5877-4955-9134-e9b5a4a38ba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0e8d4d22-064e-444f-806b-53923413eedf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfaac8a2-51b6-4054-9ee4-33da636c1707",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "e0d1e7ce-3f30-4f77-8b68-ffdfa5d88f65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee53f94a-e263-42b6-929a-b8c9549f7d92",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "789420a0-f809-4d0f-8d2c-dfec5cb5a242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c811eec0-c06c-4774-a7a0-eeb7c251b01f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f885ca7-50f1-419a-ab5d-41bac46db5c7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "840cb1ec-15fc-4f28-9bee-8789ecea8490"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7ac200c5-152e-42ca-839b-3d58d6beb23d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aca429a2-af14-4fdb-a8c0-471edb894178"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec7e96d8-334e-4107-ada5-88512906492f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a85e8453-3840-4c74-889a-e3836f2fa845"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6569a186-6160-4c1d-9413-66cdfb5864d9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "456da709-7c0f-4bd3-9573-7c478f1c2c55"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3534575b-9466-48c5-8924-772f837ef564",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a085bfe5-c7c8-40d1-b235-ceeb80426aaf"
                }
              }
            ]
          },
          {
            "id": "cf5542bf-35af-44d8-b221-1608f5acbb35",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3b858aa1-8521-4f0f-a389-8a88a750744b",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "252a460a-62d0-4a20-9785-b478a6a57b6a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7ff516d4-7922-4645-86b6-d156a7374637"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "245548a0-30c8-41a1-bc7d-6f7696e93962",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "4957a2dd-7746-4223-b1ef-d40254f318d1"
                    }
                  }
                ]
              },
              {
                "id": "b4c9e640-d227-4446-9a9e-a6fa17092caf",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c69968f1-6c85-46c0-85ba-e3ba69fc7949",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d1e4422d-7ab2-4ff7-954f-0bf267a3fd75"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1e4c657f-35c7-4616-a387-c6fa59c6a058",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "0e398424-fd7e-40f7-a857-c4df47f9005a"
                    }
                  }
                ]
              },
              {
                "id": "8d830754-52ec-4422-a16b-a7bf6a85a63e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b487f9ca-b904-4e47-bfea-028243d66e15",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b459635f-4f3b-405f-9a1c-94f5bd2b1fbf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ecedb59f-6c16-4078-a118-b6ad0c08545a",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "e5b03f9e-bc18-48f3-b7f4-51ccb77f8827"
                    }
                  }
                ]
              },
              {
                "id": "5f6a573f-50d4-4271-8a8b-14261092e1e7",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "06b81a57-b0da-46f6-9513-3d72fd7e796d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "94cc18f5-9e02-4509-985f-8f22052e01bc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "867aae6f-72f6-4848-b34e-1f5065f20c54",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "62f479d2-9d5f-4f91-80fe-fe5f178f63c1"
                    }
                  }
                ]
              },
              {
                "id": "b1c44fa7-08cb-479f-a624-23b80e91a52a",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b295046a-3901-4279-af40-d7521daa3110",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c2dfd53a-66c8-4418-92fd-0ec81b4d40a1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "093fbb29-b939-4efb-8596-859c72897d50",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "cee3e9cf-8deb-4a48-99f1-d7b31824607d"
                    }
                  }
                ]
              },
              {
                "id": "961bda2f-9663-49a6-804b-f6c7078b52f7",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f98701d5-4c2a-4097-848d-68941d207fa6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "eab85470-9b5d-4366-8f02-a4c6cee959fa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a89d5ba1-e537-46c8-b092-eace9413165b",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "57024d43-8214-412e-9b0a-d5c1bf8de5f9"
                    }
                  }
                ]
              },
              {
                "id": "ddf0967f-5d0e-4008-b697-e0b5aa526fa7",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab5531b0-4726-41f8-996b-0c6c036eb819",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bf550226-9988-4ef1-89f9-8e74c8b96412"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9de48515-c8a6-4006-83c3-a676a7cd85be",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "20ce1eba-c6e6-4b53-b0c8-3e639335b2ec"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d64db7e2-68a3-45c1-97b3-ee3cf3a8ebeb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "aa0f7ce7-a3d3-439c-b39c-2d462ad9e2ce"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2c07445e-cde6-4f85-bdad-e4033359e83a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "675a2695-2100-4ac1-b0fb-719fb5b42ce2"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "562c0a79-766f-4b3a-aaf8-1af22b84de36",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "3e9f543c-bd06-418e-8aa6-e2c4a5c16912"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f9e2a497-052a-4728-8bbe-2893475b089d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c85bba75-f7a7-4b1a-938f-3742cb7983e8"
            }
          }
        ]
      },
      {
        "id": "0bfcf654-62f9-478a-89b5-9e68d7689751",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "c49041f2-cc38-4ab1-9eff-f010d6a7fc96",
            "name": "Negative Testing",
            "item": [
              {
                "id": "369c569b-7ab2-4bfb-a46c-6370cb2cb776",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a9ef703f-744f-4c90-af95-9a21fabdd364",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "345aa146-08c7-43d4-8b20-e7eac375957e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62e2c573-2aff-4050-ad4b-b9478ce95c94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b681a797-8e18-4003-bc44-b05a32a056b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "da84dd32-555a-4971-a3b5-db168c33f752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a131ceb-169c-4eb3-846e-db7edaeb3339",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d56bd23b-74a0-4652-89c8-c66c4afa3ab0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "d48ad6ea-796d-4ab4-bdb2-54c12b4566ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "180e780a-d01a-410f-be40-5345f1940af1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7157d511-b01d-4ab5-a01d-3ffdb5b62852"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3ced1c4b-b097-4bb0-89c0-3c7c35108a74",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a2525337-99e3-4ab8-8d12-3eaf9f32a0f7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8fd2879a-6d0f-40e5-90a9-fce336c93098",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ed602d5e-3e85-4258-97c7-f905cba6795a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "97bd4188-86fb-45b5-be38-3300017408fb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "c1eec92f-539c-4f71-b252-f57342121b9c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c5240f8b-9c64-42b1-9fcc-844e4b93942b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "aa6aefdb-a586-478a-8160-f9c5fc346375"
            }
          }
        ]
      },
      {
        "id": "cb2bc6d6-d6a0-452c-8111-c5ad743867e7",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "40128b65-e5ce-4da0-9e40-7f5b30e5286c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0fe42524-4e2d-4660-8576-d696e4d9ce1d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "afb2f470-528c-4f85-8fcd-82dcc9a83936",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15800f4b-f4b0-4f05-9c38-4197f5a2d7f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c180b6b-1e08-4e3c-af41-679e001b6123"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e44ff71-f6b2-49f5-a1a6-9235103f9350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9d14d7a4-4e49-42b8-99c4-f28f6b414cfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67fd5f93-ec9e-41d5-8bb7-81f171b4faf1",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f24ac4d-1378-4f6c-924c-1c0afb9aa93f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "048f0bfb-7bb4-4582-9607-ae37df2e66a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4014c7c-61ba-49be-9740-c2bbf1b6ebeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "03226b48-5e89-4d4d-9454-9bdfd76e201f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b8b978d-9b26-43e8-af46-791046218f42",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f424125a-4345-4d72-82c1-fdae807cf261",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b992de5f-a6e8-4f8f-8d7a-8152a66631f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c19ee988-d57e-46f6-b859-80703560b6f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "53936a07-937c-44d8-b06f-f5728674be54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2804c404-57f1-4128-9243-915a8b6d68dd",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29b90699-faaa-43b0-9efe-5019f363a287",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "369bedf8-4ac1-48fd-98ad-311313563a98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d7d3a36-822f-4542-9101-281fce87572b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "67754d57-a925-4ca3-8b66-0bd7f1d819f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f23058d-5bfe-480d-be5e-daa5fa7e7a3a",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb799914-4606-41ee-a70e-65e0c17c5842",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b6f6b35-47e4-41a3-aea0-e00b1124171e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d713cc2-bff5-4ba8-b6e1-2e0b7680edec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f66a675f-1220-424a-acb5-035f459f44d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37078158-a64d-4e9c-a006-e9f5510c34c0",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1df52b49-3247-42dd-b2c7-4fa00c1671f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bf3cfc8-d023-4ef5-ad4a-069ca91c641c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c232256-3dce-472e-a485-ea0ef0bfb807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8e07dd3b-d521-429d-9e52-b0444369a9a0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "772a4834-f3ed-4ad1-8e95-680c1356741b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "de1f02f0-b81b-4f4d-9be0-b491203bb23e",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dcf874a-fa21-4e98-af88-c4597a573055",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "6225c663-3804-453f-94bc-bae56514e6f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be9840d5-c5e7-42a8-87e5-945fdffc2e2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "497da84f-f3ab-469b-94fd-6d63ad8ff352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8785992-aaf2-4233-9a88-128be22d573a",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80bd1502-34c9-4782-a4e8-e724590f7036",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "f0f0cc75-2078-4c39-95ad-30f417ea8ac0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eb72238-ad19-4b7d-be8a-f257f7a71696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "12033f1c-9048-4981-a4de-fa3e58e1096c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ce2cc76b-a5ee-4a5d-b336-d463b1ee9798",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ccafcc31-2b01-471d-bd69-531868fcdc43"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "87c7b28e-9910-4348-931b-3f52f2991848",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2772f09b-5b49-47a3-9efa-baab31a03f84"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e6abcfe1-b902-470f-b237-a2a9748704c7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "88e2185c-ed9a-496b-b350-6fd6e92d0d25"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "93fcd93a-bafe-4298-a30a-7babaf79a9f8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ef6f94f1-b5de-4adc-8f33-6871a259d70c"
            }
          }
        ]
      },
      {
        "id": "1e1ef14d-ee2e-4e4a-9028-23fc822ef146",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "bb0d406d-be62-45e3-bfd3-d361d883a8fc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a28d3d1e-395c-4a15-b7cd-cb8ed7f865d2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5f8956c7-468e-4f1d-b630-1d8de66bc8d4",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ed53335-48f8-410c-8cbf-76bd4426539f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13f15aa7-f518-477e-a256-5cd388496cf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e670aa5-cc07-404b-9c41-eef8bd4c47cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4a759c2c-328c-43f4-9a34-5b5fab6f3200"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d542299b-8a3b-4897-b6e0-cf6f8da93efe",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f27eeb4b-99d4-4d23-b1c2-5b6ddc2b3365",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "5f7d4867-0c23-41e4-8ec9-21e77a8da865"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dd451e7-4e1b-49aa-b932-e78e69df1ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "82f5cbcc-e606-4253-b8c0-1c4b6d4af41e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "989efd51-0ac6-4721-9ef2-46160dafe592",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0ff46c62-34fe-4180-9edc-fbf3c391879b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "465758d9-0c0f-45b5-843f-92725c5c105e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "590f90d2-1d25-44b0-b09f-2addf1016c6a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2cfc3b49-3c6a-460c-b8d7-df9b6c225c7c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "619a0ba1-8710-4ceb-ab18-d04dd4c01da2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "20eff914-7c16-431a-abcd-3ee1df4fc412",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c61730c1-8613-453f-8695-49b59732a4da"
            }
          }
        ]
      },
      {
        "id": "a4f6cfb8-d8cd-49c4-b3c2-3b892fccf8c5",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "aaca20ac-6ff6-4952-b7c2-65089310f9c2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5e963721-5d70-4359-ae04-2c3fdc96390d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "85f94922-d62f-439c-93f2-fdc805b6e7b3",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "221250f9-c39f-46a0-989f-707b70230f69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26db9096-fce7-49f2-b93b-00ad0496328a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17aa5606-be42-4f53-9537-eb2562a09dad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "260b03ea-e9df-411c-9745-d6f0a73da11d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ff72f42-d28e-424c-9983-3106880e952b",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b15d5a5-98fc-4c29-94f4-f8c0cc2a31f8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "7cd0739d-1c37-4782-9542-2e924e53c68f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39f67358-306b-4d46-898e-ab1e2502fda7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e2fc9d9e-5256-4235-a256-6e8752c006e4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "041d5832-18e7-4a37-aa9c-b9ddd472f042",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ac5ad9dc-cd76-4ce3-9787-094b0b18d7ba"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0163de41-9891-4a8f-954b-4877e93fe5ce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4e8474e9-c453-4f8c-ae6c-333158c85718"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f0b788bd-e442-483b-93c9-97ad9656c942",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "c69d7228-e7a9-40ea-927a-357dc75cd929"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "60e792d1-cae8-47db-b203-2583a8b3e062",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2b234450-c218-4c45-aa63-4e551c6f13d6"
            }
          }
        ]
      },
      {
        "id": "009b1461-098f-437b-8d92-8e6915c77f59",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "657c535a-a28c-4f16-9aeb-1fabb577fa7f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9207c817-55f6-4a25-818f-492f4a9fd471",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6b424c8f-4fb4-457b-8333-5b70f86bbe74",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d934cd77-490a-40e6-9bff-c0f3274c7a5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86c4d63c-973c-4f94-a920-9040dd191689"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f004d6fa-5f39-4567-b0a3-f1d00b590c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "96f80352-1b7b-4540-9709-69e5e6ff05f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95e9dbc2-1d49-4669-afa1-c7f6b388d9c3",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7166bd7-9ce5-465d-862a-030bb6bd7776",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "2192967c-39e5-4d2a-8612-170d51092fbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29651f7c-a479-4913-a64b-7c55d960e09f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "226690b2-fc06-4611-8834-6114f4dd3cd9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a93a58d8-2ebc-4389-8dec-8dccc58bc45f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "081f0752-b483-456d-b539-f6710619b897"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "129953c3-d024-4b34-b109-27ef20a43d6d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a39ed2d4-8a12-4e46-afc7-81b3b1deec58"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b545890b-cf1d-40cc-9f42-9919bed26fa4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "7015ad28-29b0-49e1-8b69-5839f2db68c0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "92acc703-cbcc-4b1e-b818-c99c83cfca0d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ff2c1efc-c32e-48b9-91f9-e6654f32221e"
            }
          }
        ]
      },
      {
        "id": "afd85d73-78fc-466a-84e7-869ae18d5bd6",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "da7b349c-0499-418b-9fbe-c8e00bdf9997",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 475,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 111,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 131,
        "pending": 0,
        "failed": 9
      },
      "testScripts": {
        "total": 240,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 235,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 52.873873873873876,
      "responseMin": 10,
      "responseMax": 737,
      "responseSd": 104.11576345735746,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1663375689189,
      "completed": 1663375698435
    },
    "executions": [
      {
        "id": "ceefd15b-ba38-49f1-b237-3c3c31a8a8b3",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 63,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "2daf1c02-925c-4379-9134-8cac1979b66a",
          "httpRequestId": "bb4dd1d3-ed7e-4ce8-ae0e-6444ed3d6ca5"
        },
        "item": {
          "id": "ceefd15b-ba38-49f1-b237-3c3c31a8a8b3",
          "name": "did_json"
        },
        "response": {
          "id": "cc3fa83f-c56f-4f2a-887e-e399519964c9",
          "status": "OK",
          "code": 200,
          "responseTime": 329,
          "responseSize": 1289
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.service[0].type should be array",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.service[0].type should be array\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "id": "7b9be9f4-61ab-4201-9226-a1e9931bf8ff",
        "cursor": {
          "ref": "f2835587-12ee-4911-9bb0-99a084d0e3d5",
          "length": 63,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "11f794a3-a3a0-4ce3-8781-4495bf507878"
        },
        "item": {
          "id": "7b9be9f4-61ab-4201-9226-a1e9931bf8ff",
          "name": "did:invalid"
        },
        "response": {
          "id": "913aac8f-3bf1-4ede-908d-2bbfea211d5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b9be9f4-61ab-4201-9226-a1e9931bf8ff",
        "cursor": {
          "ref": "f2835587-12ee-4911-9bb0-99a084d0e3d5",
          "length": 63,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "11f794a3-a3a0-4ce3-8781-4495bf507878"
        },
        "item": {
          "id": "7b9be9f4-61ab-4201-9226-a1e9931bf8ff",
          "name": "did:invalid"
        },
        "response": {
          "id": "913aac8f-3bf1-4ede-908d-2bbfea211d5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9398c512-5516-4e41-bde6-2cfc1d14a1f1",
        "cursor": {
          "ref": "fe2190a5-ef73-4331-b35f-4f02f60a970f",
          "length": 63,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "c36b5119-e9e6-4487-80b8-134694435170"
        },
        "item": {
          "id": "9398c512-5516-4e41-bde6-2cfc1d14a1f1",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "3aef6fcd-b31c-4432-ab9a-bdc6c5d7f362",
          "status": "Not Found",
          "code": 404,
          "responseTime": 64,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35e09543-252b-430f-b4c9-a59c98dc2f99",
        "cursor": {
          "ref": "52738b50-caa3-40f5-b78e-62a224e571cc",
          "length": 63,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "777eb7f1-2f6a-4e26-a8c7-0bbe973bc95a"
        },
        "item": {
          "id": "35e09543-252b-430f-b4c9-a59c98dc2f99",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "fed7872d-c438-4f55-a458-da5e71a77dab",
          "status": "Not Found",
          "code": 404,
          "responseTime": 13,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "526ece42-f41a-473a-995a-eb7a64e7ff60",
        "cursor": {
          "ref": "f2798237-7212-473b-9dcd-017d165f8b48",
          "length": 63,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "138ce257-8714-4857-be42-efe0d28bbac5"
        },
        "item": {
          "id": "526ece42-f41a-473a-995a-eb7a64e7ff60",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "3d098fbc-8b23-4836-9984-2340e5d21d2b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "849dd132-1886-4e2d-8842-227cb06e9f7c",
        "cursor": {
          "ref": "ca69e340-8932-465a-8053-3aeed211230a",
          "length": 63,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "4dd5115e-7c8b-4bd2-bff9-3edf88f9b603"
        },
        "item": {
          "id": "849dd132-1886-4e2d-8842-227cb06e9f7c",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "d9800baa-b541-401b-8435-ebf64120e7b0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 13,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "849dd132-1886-4e2d-8842-227cb06e9f7c",
        "cursor": {
          "ref": "ca69e340-8932-465a-8053-3aeed211230a",
          "length": 63,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "4dd5115e-7c8b-4bd2-bff9-3edf88f9b603"
        },
        "item": {
          "id": "849dd132-1886-4e2d-8842-227cb06e9f7c",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "d9800baa-b541-401b-8435-ebf64120e7b0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 13,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef720824-1aa0-494a-b991-929bd0cf71c7",
        "cursor": {
          "ref": "5204e28d-9988-4b3d-ad63-a1daf08411d3",
          "length": 63,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4e7a5c46-eaa7-4b5a-b016-f7f26c3b4543"
        },
        "item": {
          "id": "ef720824-1aa0-494a-b991-929bd0cf71c7",
          "name": "identifiers"
        },
        "response": {
          "id": "415c2ca1-b013-4261-87c4-7383a213a4ff",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 1318
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac644b82-cf88-45c5-9c1d-3485892dbb70",
        "cursor": {
          "ref": "ebdd5e79-20e1-42b0-a74c-fca757fd7303",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0b4fdaf6-69b2-469f-a2d0-0fb00a5b9f0b"
        },
        "item": {
          "id": "ac644b82-cf88-45c5-9c1d-3485892dbb70",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "788190cd-a175-46d6-9011-e4c40b4617a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac644b82-cf88-45c5-9c1d-3485892dbb70",
        "cursor": {
          "ref": "ebdd5e79-20e1-42b0-a74c-fca757fd7303",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0b4fdaf6-69b2-469f-a2d0-0fb00a5b9f0b"
        },
        "item": {
          "id": "ac644b82-cf88-45c5-9c1d-3485892dbb70",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "788190cd-a175-46d6-9011-e4c40b4617a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac644b82-cf88-45c5-9c1d-3485892dbb70",
        "cursor": {
          "ref": "ebdd5e79-20e1-42b0-a74c-fca757fd7303",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0b4fdaf6-69b2-469f-a2d0-0fb00a5b9f0b"
        },
        "item": {
          "id": "ac644b82-cf88-45c5-9c1d-3485892dbb70",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "788190cd-a175-46d6-9011-e4c40b4617a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ffaf735-8c0f-4153-b079-b9688d270e86",
        "cursor": {
          "ref": "b3b20f7b-c49f-4456-9ada-9f7252d87197",
          "length": 63,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "1a5927e2-3d32-45f1-9baa-83193d6c9b66"
        },
        "item": {
          "id": "9ffaf735-8c0f-4153-b079-b9688d270e86",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "2e87c2d9-eaf2-4994-a5c3-06ae3700fa8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ffaf735-8c0f-4153-b079-b9688d270e86",
        "cursor": {
          "ref": "b3b20f7b-c49f-4456-9ada-9f7252d87197",
          "length": 63,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "1a5927e2-3d32-45f1-9baa-83193d6c9b66"
        },
        "item": {
          "id": "9ffaf735-8c0f-4153-b079-b9688d270e86",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "2e87c2d9-eaf2-4994-a5c3-06ae3700fa8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "918c0822-830f-472d-ae88-7118f7628975",
        "cursor": {
          "ref": "f529d560-e410-48b0-b466-11de8013a4b3",
          "length": 63,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e2b90fe2-2000-4cac-8001-e827ba342c50"
        },
        "item": {
          "id": "918c0822-830f-472d-ae88-7118f7628975",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "a88c4379-4c02-4094-a0e5-d43a1631a6d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "918c0822-830f-472d-ae88-7118f7628975",
        "cursor": {
          "ref": "f529d560-e410-48b0-b466-11de8013a4b3",
          "length": 63,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e2b90fe2-2000-4cac-8001-e827ba342c50"
        },
        "item": {
          "id": "918c0822-830f-472d-ae88-7118f7628975",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "a88c4379-4c02-4094-a0e5-d43a1631a6d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1471c99-c9bb-4c78-8262-d909b6fd8bf1",
        "cursor": {
          "ref": "d6a03106-f96a-4ce3-b98b-4e72948ac438",
          "length": 63,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "9c381283-1ea5-4f06-a999-a999783f0ee0"
        },
        "item": {
          "id": "f1471c99-c9bb-4c78-8262-d909b6fd8bf1",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "81fb6b60-1a81-4652-92ec-35c858ed1536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1471c99-c9bb-4c78-8262-d909b6fd8bf1",
        "cursor": {
          "ref": "d6a03106-f96a-4ce3-b98b-4e72948ac438",
          "length": 63,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "9c381283-1ea5-4f06-a999-a999783f0ee0"
        },
        "item": {
          "id": "f1471c99-c9bb-4c78-8262-d909b6fd8bf1",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "81fb6b60-1a81-4652-92ec-35c858ed1536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfc803e6-57ba-4180-95f2-4543f0cffa62",
        "cursor": {
          "ref": "69edc1c6-7b70-41aa-9eb4-cf5159626936",
          "length": 63,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "1eececd0-fb48-4565-849f-c29c8da39f40"
        },
        "item": {
          "id": "dfc803e6-57ba-4180-95f2-4543f0cffa62",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "5a8f8ac5-b525-42f6-9ea2-39bf25448095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfc803e6-57ba-4180-95f2-4543f0cffa62",
        "cursor": {
          "ref": "69edc1c6-7b70-41aa-9eb4-cf5159626936",
          "length": 63,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "1eececd0-fb48-4565-849f-c29c8da39f40"
        },
        "item": {
          "id": "dfc803e6-57ba-4180-95f2-4543f0cffa62",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "5a8f8ac5-b525-42f6-9ea2-39bf25448095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aa44efa-084d-4d9f-8d61-a6c51cf269bb",
        "cursor": {
          "ref": "f55e65ec-cb19-41b9-a1a4-49ff407e3e68",
          "length": 63,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "dde30e56-dbe4-44a8-b932-41501b13bd60"
        },
        "item": {
          "id": "7aa44efa-084d-4d9f-8d61-a6c51cf269bb",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6282079f-7dfd-430f-bb85-90412b4c72f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aa44efa-084d-4d9f-8d61-a6c51cf269bb",
        "cursor": {
          "ref": "f55e65ec-cb19-41b9-a1a4-49ff407e3e68",
          "length": 63,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "dde30e56-dbe4-44a8-b932-41501b13bd60"
        },
        "item": {
          "id": "7aa44efa-084d-4d9f-8d61-a6c51cf269bb",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6282079f-7dfd-430f-bb85-90412b4c72f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "238d72e0-5c07-4c5d-9369-b1eb207656a8",
        "cursor": {
          "ref": "148cfb27-3835-40aa-9505-b6465fd03c3b",
          "length": 63,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "1fef40c3-ad8a-4666-9760-81890d3d0051"
        },
        "item": {
          "id": "238d72e0-5c07-4c5d-9369-b1eb207656a8",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "5bf0383d-9047-409b-b29c-f540148b4f8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "238d72e0-5c07-4c5d-9369-b1eb207656a8",
        "cursor": {
          "ref": "148cfb27-3835-40aa-9505-b6465fd03c3b",
          "length": 63,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "1fef40c3-ad8a-4666-9760-81890d3d0051"
        },
        "item": {
          "id": "238d72e0-5c07-4c5d-9369-b1eb207656a8",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "5bf0383d-9047-409b-b29c-f540148b4f8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0604deb6-e369-4025-a1cb-62ad9da73805",
        "cursor": {
          "ref": "7661bdfa-ecdf-4a0c-b3e9-ca2d442dafb6",
          "length": 63,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f4e938c5-f590-4914-a4f8-3c2ed6f0f9a9"
        },
        "item": {
          "id": "0604deb6-e369-4025-a1cb-62ad9da73805",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "557a82ce-7b2c-4a85-8d3c-bb33cc3a8483",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0604deb6-e369-4025-a1cb-62ad9da73805",
        "cursor": {
          "ref": "7661bdfa-ecdf-4a0c-b3e9-ca2d442dafb6",
          "length": 63,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f4e938c5-f590-4914-a4f8-3c2ed6f0f9a9"
        },
        "item": {
          "id": "0604deb6-e369-4025-a1cb-62ad9da73805",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "557a82ce-7b2c-4a85-8d3c-bb33cc3a8483",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "512d98c5-5b5f-4144-a2aa-24a98ae02fa2",
        "cursor": {
          "ref": "4143b1cd-8b04-4067-82bc-ec6ab3c162a8",
          "length": 63,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "72e21d3c-c2f6-4b3d-a3bc-4741fbe648a9"
        },
        "item": {
          "id": "512d98c5-5b5f-4144-a2aa-24a98ae02fa2",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "c6a171b0-5beb-41bf-b78e-e19d05cd84da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "512d98c5-5b5f-4144-a2aa-24a98ae02fa2",
        "cursor": {
          "ref": "4143b1cd-8b04-4067-82bc-ec6ab3c162a8",
          "length": 63,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "72e21d3c-c2f6-4b3d-a3bc-4741fbe648a9"
        },
        "item": {
          "id": "512d98c5-5b5f-4144-a2aa-24a98ae02fa2",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "c6a171b0-5beb-41bf-b78e-e19d05cd84da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2afa1ce6-5715-4b3d-b9ac-cf26f7b522bd",
        "cursor": {
          "ref": "bf0426de-42b0-4a31-ac16-f9b63567eb3e",
          "length": 63,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "48225296-8349-4a5d-aba8-ffc28d729b5a"
        },
        "item": {
          "id": "2afa1ce6-5715-4b3d-b9ac-cf26f7b522bd",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "086618cb-d097-49bd-bbc6-775ec341d9b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2afa1ce6-5715-4b3d-b9ac-cf26f7b522bd",
        "cursor": {
          "ref": "bf0426de-42b0-4a31-ac16-f9b63567eb3e",
          "length": 63,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "48225296-8349-4a5d-aba8-ffc28d729b5a"
        },
        "item": {
          "id": "2afa1ce6-5715-4b3d-b9ac-cf26f7b522bd",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "086618cb-d097-49bd-bbc6-775ec341d9b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad15addb-07d7-425c-a2b8-27457b382190",
        "cursor": {
          "ref": "118c0461-845e-4fe0-b4dc-7bba6a03f162",
          "length": 63,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "8980decf-c766-4923-ab37-28041a06221f"
        },
        "item": {
          "id": "ad15addb-07d7-425c-a2b8-27457b382190",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "a89edf48-5b8f-4363-85e1-686479445ae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad15addb-07d7-425c-a2b8-27457b382190",
        "cursor": {
          "ref": "118c0461-845e-4fe0-b4dc-7bba6a03f162",
          "length": 63,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "8980decf-c766-4923-ab37-28041a06221f"
        },
        "item": {
          "id": "ad15addb-07d7-425c-a2b8-27457b382190",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "a89edf48-5b8f-4363-85e1-686479445ae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e834a60-0ca6-404f-b640-ee4cd11b3da1",
        "cursor": {
          "ref": "347dec3a-9ed2-4013-9a45-e945b1df89be",
          "length": 63,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "332348eb-1edc-4c7c-9e6e-8dcf5e2dba10"
        },
        "item": {
          "id": "6e834a60-0ca6-404f-b640-ee4cd11b3da1",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "edb62957-f153-4617-bd87-d5a0cf692c9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 737,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e834a60-0ca6-404f-b640-ee4cd11b3da1",
        "cursor": {
          "ref": "347dec3a-9ed2-4013-9a45-e945b1df89be",
          "length": 63,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "332348eb-1edc-4c7c-9e6e-8dcf5e2dba10"
        },
        "item": {
          "id": "6e834a60-0ca6-404f-b640-ee4cd11b3da1",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "edb62957-f153-4617-bd87-d5a0cf692c9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 737,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7afe1d6d-2bd1-4cb0-95ce-b940fcd1341d",
        "cursor": {
          "ref": "e0398d9a-c996-4bec-b75e-b52f6caf8492",
          "length": 63,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4b0b1785-87d1-4da4-b426-c1d1b1dac81e"
        },
        "item": {
          "id": "7afe1d6d-2bd1-4cb0-95ce-b940fcd1341d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "6eee8329-155a-4b60-bb8d-782ddbad80ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7afe1d6d-2bd1-4cb0-95ce-b940fcd1341d",
        "cursor": {
          "ref": "e0398d9a-c996-4bec-b75e-b52f6caf8492",
          "length": 63,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4b0b1785-87d1-4da4-b426-c1d1b1dac81e"
        },
        "item": {
          "id": "7afe1d6d-2bd1-4cb0-95ce-b940fcd1341d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "6eee8329-155a-4b60-bb8d-782ddbad80ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69b49bbc-b758-4c63-9fc5-03c9a01d340d",
        "cursor": {
          "ref": "7a928ffc-3c0b-4634-a121-90cb8a80f749",
          "length": 63,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "e278b09e-45f4-436c-90f5-352670fabf0a"
        },
        "item": {
          "id": "69b49bbc-b758-4c63-9fc5-03c9a01d340d",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "8cc96ebc-e8c7-4a67-b293-438d1eebd0e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69b49bbc-b758-4c63-9fc5-03c9a01d340d",
        "cursor": {
          "ref": "7a928ffc-3c0b-4634-a121-90cb8a80f749",
          "length": 63,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "e278b09e-45f4-436c-90f5-352670fabf0a"
        },
        "item": {
          "id": "69b49bbc-b758-4c63-9fc5-03c9a01d340d",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "8cc96ebc-e8c7-4a67-b293-438d1eebd0e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a87d9121-1c7f-4c95-bfa4-88fb4dfa5eb2",
        "cursor": {
          "ref": "1fd3ee5e-2af1-4a1d-a7eb-8723ecab6469",
          "length": 63,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "99e20eb3-aa84-4654-8fb6-44edf3544a8e"
        },
        "item": {
          "id": "a87d9121-1c7f-4c95-bfa4-88fb4dfa5eb2",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "187db256-bdbc-4883-8e24-451fb916fb28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a87d9121-1c7f-4c95-bfa4-88fb4dfa5eb2",
        "cursor": {
          "ref": "1fd3ee5e-2af1-4a1d-a7eb-8723ecab6469",
          "length": 63,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "99e20eb3-aa84-4654-8fb6-44edf3544a8e"
        },
        "item": {
          "id": "a87d9121-1c7f-4c95-bfa4-88fb4dfa5eb2",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "187db256-bdbc-4883-8e24-451fb916fb28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec771013-aacc-4a73-b6cc-24804b0afcf6",
        "cursor": {
          "ref": "0d321778-943e-4393-83c0-46e426b674bd",
          "length": 63,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b55aafbd-60d1-4eed-b02e-22f071298c73"
        },
        "item": {
          "id": "ec771013-aacc-4a73-b6cc-24804b0afcf6",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "e135dcd6-2588-4781-8ff5-b8ba8184b0d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 163,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec771013-aacc-4a73-b6cc-24804b0afcf6",
        "cursor": {
          "ref": "0d321778-943e-4393-83c0-46e426b674bd",
          "length": 63,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b55aafbd-60d1-4eed-b02e-22f071298c73"
        },
        "item": {
          "id": "ec771013-aacc-4a73-b6cc-24804b0afcf6",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "e135dcd6-2588-4781-8ff5-b8ba8184b0d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 163,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82928bbd-aee7-4a5a-8092-c304058bdf15",
        "cursor": {
          "ref": "9354eefb-fbfc-4188-a154-35d2f7b28083",
          "length": 63,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "047f2304-2ad6-4704-be18-7def201190be"
        },
        "item": {
          "id": "82928bbd-aee7-4a5a-8092-c304058bdf15",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "22a75b0f-f618-420d-9562-b07e0bd4aaed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82928bbd-aee7-4a5a-8092-c304058bdf15",
        "cursor": {
          "ref": "9354eefb-fbfc-4188-a154-35d2f7b28083",
          "length": 63,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "047f2304-2ad6-4704-be18-7def201190be"
        },
        "item": {
          "id": "82928bbd-aee7-4a5a-8092-c304058bdf15",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "22a75b0f-f618-420d-9562-b07e0bd4aaed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "426d7974-de41-40aa-8665-0a55060b343a",
        "cursor": {
          "ref": "3656a1d3-6ccb-41f1-b802-43fe3edfa243",
          "length": 63,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "0a4a1d8b-0704-45a3-96f0-a78f9f134d9a"
        },
        "item": {
          "id": "426d7974-de41-40aa-8665-0a55060b343a",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "6aa8661e-5d19-4289-ab3a-431b1938367a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "426d7974-de41-40aa-8665-0a55060b343a",
        "cursor": {
          "ref": "3656a1d3-6ccb-41f1-b802-43fe3edfa243",
          "length": 63,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "0a4a1d8b-0704-45a3-96f0-a78f9f134d9a"
        },
        "item": {
          "id": "426d7974-de41-40aa-8665-0a55060b343a",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "6aa8661e-5d19-4289-ab3a-431b1938367a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "412c4806-a070-41d0-8eaa-2b9bb9aced3f",
        "cursor": {
          "ref": "581de485-9645-42d8-9c3a-e8377879e994",
          "length": 63,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "dc0fee59-c8a6-4ccc-8acf-e36496f75cc3"
        },
        "item": {
          "id": "412c4806-a070-41d0-8eaa-2b9bb9aced3f",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "ed0e28b8-3132-4a56-a36f-2578df00e280",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "412c4806-a070-41d0-8eaa-2b9bb9aced3f",
        "cursor": {
          "ref": "581de485-9645-42d8-9c3a-e8377879e994",
          "length": 63,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "dc0fee59-c8a6-4ccc-8acf-e36496f75cc3"
        },
        "item": {
          "id": "412c4806-a070-41d0-8eaa-2b9bb9aced3f",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "ed0e28b8-3132-4a56-a36f-2578df00e280",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abad1d31-d0dc-4187-8031-2e8d66d7c655",
        "cursor": {
          "ref": "eeeb28bd-937b-45b6-85f4-621201434db0",
          "length": 63,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6bb126c7-be62-45e5-947d-0d99ee62fe31"
        },
        "item": {
          "id": "abad1d31-d0dc-4187-8031-2e8d66d7c655",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "947b72bd-1eb9-4a75-971c-e19771ac75ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abad1d31-d0dc-4187-8031-2e8d66d7c655",
        "cursor": {
          "ref": "eeeb28bd-937b-45b6-85f4-621201434db0",
          "length": 63,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6bb126c7-be62-45e5-947d-0d99ee62fe31"
        },
        "item": {
          "id": "abad1d31-d0dc-4187-8031-2e8d66d7c655",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "947b72bd-1eb9-4a75-971c-e19771ac75ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbf80cab-3281-468a-a6b8-dffda038d73a",
        "cursor": {
          "ref": "4dbea2f8-6555-47aa-9091-d65c551b6d96",
          "length": 63,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "025016bd-10e6-4562-8d93-cd95eded023a"
        },
        "item": {
          "id": "bbf80cab-3281-468a-a6b8-dffda038d73a",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "0c1c9a42-6be7-4b89-b683-e7da13dd5848",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbf80cab-3281-468a-a6b8-dffda038d73a",
        "cursor": {
          "ref": "4dbea2f8-6555-47aa-9091-d65c551b6d96",
          "length": 63,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "025016bd-10e6-4562-8d93-cd95eded023a"
        },
        "item": {
          "id": "bbf80cab-3281-468a-a6b8-dffda038d73a",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "0c1c9a42-6be7-4b89-b683-e7da13dd5848",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "891a97c0-a502-4d67-b4ce-946beb489321",
        "cursor": {
          "ref": "bb07de02-491f-4ddb-9ab3-62de676837cf",
          "length": 63,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "5e06f65f-de7a-4f6c-af95-a4cf4a01962b"
        },
        "item": {
          "id": "891a97c0-a502-4d67-b4ce-946beb489321",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "ac535c2d-70e4-4179-a78c-ea413f24fc10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "891a97c0-a502-4d67-b4ce-946beb489321",
        "cursor": {
          "ref": "bb07de02-491f-4ddb-9ab3-62de676837cf",
          "length": 63,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "5e06f65f-de7a-4f6c-af95-a4cf4a01962b"
        },
        "item": {
          "id": "891a97c0-a502-4d67-b4ce-946beb489321",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "ac535c2d-70e4-4179-a78c-ea413f24fc10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "692f1ec4-4daf-4b72-819e-c4aa674df2b4",
        "cursor": {
          "ref": "57f77757-d042-48f9-9a3f-b5388dd6a1e8",
          "length": 63,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "a198c9a9-39a4-404b-beb7-852fe4970195"
        },
        "item": {
          "id": "692f1ec4-4daf-4b72-819e-c4aa674df2b4",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "8b8d1a01-8bc6-4344-8b42-05e9c24f6e8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "692f1ec4-4daf-4b72-819e-c4aa674df2b4",
        "cursor": {
          "ref": "57f77757-d042-48f9-9a3f-b5388dd6a1e8",
          "length": 63,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "a198c9a9-39a4-404b-beb7-852fe4970195"
        },
        "item": {
          "id": "692f1ec4-4daf-4b72-819e-c4aa674df2b4",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "8b8d1a01-8bc6-4344-8b42-05e9c24f6e8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb1371c6-8225-46b9-95ad-bcc9cae4692b",
        "cursor": {
          "ref": "600e9b11-c6b3-46c8-ba55-ac8aacf3ec68",
          "length": 63,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "bad0deb4-cc64-4c78-b939-c00038144e44"
        },
        "item": {
          "id": "eb1371c6-8225-46b9-95ad-bcc9cae4692b",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "c4eab5a2-406f-4d13-8da9-41da799ace7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb1371c6-8225-46b9-95ad-bcc9cae4692b",
        "cursor": {
          "ref": "600e9b11-c6b3-46c8-ba55-ac8aacf3ec68",
          "length": 63,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "bad0deb4-cc64-4c78-b939-c00038144e44"
        },
        "item": {
          "id": "eb1371c6-8225-46b9-95ad-bcc9cae4692b",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "c4eab5a2-406f-4d13-8da9-41da799ace7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc769ea4-2029-4738-99a2-fc934381ac9a",
        "cursor": {
          "ref": "0565a14b-dca0-42bf-b592-87d5c1337372",
          "length": 63,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "32648f33-1bd8-4530-995f-f9d12a90773b"
        },
        "item": {
          "id": "cc769ea4-2029-4738-99a2-fc934381ac9a",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "14667f1d-c03f-4d9a-91b8-cacd65486475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc769ea4-2029-4738-99a2-fc934381ac9a",
        "cursor": {
          "ref": "0565a14b-dca0-42bf-b592-87d5c1337372",
          "length": 63,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "32648f33-1bd8-4530-995f-f9d12a90773b"
        },
        "item": {
          "id": "cc769ea4-2029-4738-99a2-fc934381ac9a",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "14667f1d-c03f-4d9a-91b8-cacd65486475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bbd03b3-85c3-45a2-af80-306e9edc17d5",
        "cursor": {
          "ref": "02a7c159-024d-4340-ab84-c0f79d7902f2",
          "length": 63,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ea5cd86d-1506-4331-80b8-b7dff0a6ed45"
        },
        "item": {
          "id": "5bbd03b3-85c3-45a2-af80-306e9edc17d5",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "d8634ce2-40f1-4b46-9b58-9f39f192b91a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bbd03b3-85c3-45a2-af80-306e9edc17d5",
        "cursor": {
          "ref": "02a7c159-024d-4340-ab84-c0f79d7902f2",
          "length": 63,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ea5cd86d-1506-4331-80b8-b7dff0a6ed45"
        },
        "item": {
          "id": "5bbd03b3-85c3-45a2-af80-306e9edc17d5",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "d8634ce2-40f1-4b46-9b58-9f39f192b91a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9dad108-732d-466e-a2a2-27d7e2376456",
        "cursor": {
          "ref": "79165b5a-95f7-4dbb-afae-0088c8b6becf",
          "length": 63,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5e56898c-bb4e-4d8c-a4c6-5cfc9ede87a7"
        },
        "item": {
          "id": "a9dad108-732d-466e-a2a2-27d7e2376456",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "66b732ef-fd99-4a31-a114-550230650ec9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9dad108-732d-466e-a2a2-27d7e2376456",
        "cursor": {
          "ref": "79165b5a-95f7-4dbb-afae-0088c8b6becf",
          "length": 63,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5e56898c-bb4e-4d8c-a4c6-5cfc9ede87a7"
        },
        "item": {
          "id": "a9dad108-732d-466e-a2a2-27d7e2376456",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "66b732ef-fd99-4a31-a114-550230650ec9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb78adf5-3a64-4d56-8f44-1c3ba62f737e",
        "cursor": {
          "ref": "fd9352d1-d528-4a5d-acd4-c881d8cfe22f",
          "length": 63,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "1a22bc57-6fa2-4a62-95c9-23907303b18c"
        },
        "item": {
          "id": "cb78adf5-3a64-4d56-8f44-1c3ba62f737e",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "c162bb41-36fb-4783-91b6-f60a74e1e431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb78adf5-3a64-4d56-8f44-1c3ba62f737e",
        "cursor": {
          "ref": "fd9352d1-d528-4a5d-acd4-c881d8cfe22f",
          "length": 63,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "1a22bc57-6fa2-4a62-95c9-23907303b18c"
        },
        "item": {
          "id": "cb78adf5-3a64-4d56-8f44-1c3ba62f737e",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "c162bb41-36fb-4783-91b6-f60a74e1e431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc027348-2d9a-4041-84dd-d4f2ae5eabdf",
        "cursor": {
          "ref": "4fdd0e93-74c9-4e3b-942d-0f173bd07b32",
          "length": 63,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "7a8eef74-e511-4df5-a148-bb4424d279ee"
        },
        "item": {
          "id": "cc027348-2d9a-4041-84dd-d4f2ae5eabdf",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "f533941e-0b58-4238-bcdb-2faa1d6fe689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc027348-2d9a-4041-84dd-d4f2ae5eabdf",
        "cursor": {
          "ref": "4fdd0e93-74c9-4e3b-942d-0f173bd07b32",
          "length": 63,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "7a8eef74-e511-4df5-a148-bb4424d279ee"
        },
        "item": {
          "id": "cc027348-2d9a-4041-84dd-d4f2ae5eabdf",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "f533941e-0b58-4238-bcdb-2faa1d6fe689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82c5f710-c72b-4fca-b85c-fb39e0fec58e",
        "cursor": {
          "ref": "37e83cf0-21cb-44d9-88a4-a1e08651e014",
          "length": 63,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "135159ab-a79a-432d-b43e-4e85391cb3be"
        },
        "item": {
          "id": "82c5f710-c72b-4fca-b85c-fb39e0fec58e",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "2b71cc5a-7f9d-4367-a4f7-28bbe19cbc7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82c5f710-c72b-4fca-b85c-fb39e0fec58e",
        "cursor": {
          "ref": "37e83cf0-21cb-44d9-88a4-a1e08651e014",
          "length": 63,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "135159ab-a79a-432d-b43e-4e85391cb3be"
        },
        "item": {
          "id": "82c5f710-c72b-4fca-b85c-fb39e0fec58e",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "2b71cc5a-7f9d-4367-a4f7-28bbe19cbc7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e09cd1e-64fb-4b3d-bc1b-7b95fed362cf",
        "cursor": {
          "ref": "1e6f207a-9fe6-4f70-af43-c513426aee7d",
          "length": 63,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "f8d782a4-2a7e-4661-bbfb-73fb8402ddb1"
        },
        "item": {
          "id": "1e09cd1e-64fb-4b3d-bc1b-7b95fed362cf",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "60459094-5b7a-4b75-9f2c-15ecb7f67e40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e09cd1e-64fb-4b3d-bc1b-7b95fed362cf",
        "cursor": {
          "ref": "1e6f207a-9fe6-4f70-af43-c513426aee7d",
          "length": 63,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "f8d782a4-2a7e-4661-bbfb-73fb8402ddb1"
        },
        "item": {
          "id": "1e09cd1e-64fb-4b3d-bc1b-7b95fed362cf",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "60459094-5b7a-4b75-9f2c-15ecb7f67e40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0e5f149-1a46-4053-831b-08c393296793",
        "cursor": {
          "ref": "884e096c-09af-4dd2-8554-1b2938eab7b8",
          "length": 63,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "27413309-28a0-4eb6-bb5b-935b8a1a53e1"
        },
        "item": {
          "id": "e0e5f149-1a46-4053-831b-08c393296793",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "87215831-c9c0-44f2-aa47-b72ed12d35fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0e5f149-1a46-4053-831b-08c393296793",
        "cursor": {
          "ref": "884e096c-09af-4dd2-8554-1b2938eab7b8",
          "length": 63,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "27413309-28a0-4eb6-bb5b-935b8a1a53e1"
        },
        "item": {
          "id": "e0e5f149-1a46-4053-831b-08c393296793",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "87215831-c9c0-44f2-aa47-b72ed12d35fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee53f94a-e263-42b6-929a-b8c9549f7d92",
        "cursor": {
          "ref": "5ab04b1b-fc08-4f99-9522-70dee492996e",
          "length": 63,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ddc844c1-e779-4122-9cae-d6527d73489a"
        },
        "item": {
          "id": "ee53f94a-e263-42b6-929a-b8c9549f7d92",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "fee4ed27-6927-4f63-b20e-8d8193b50a79",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee53f94a-e263-42b6-929a-b8c9549f7d92",
        "cursor": {
          "ref": "5ab04b1b-fc08-4f99-9522-70dee492996e",
          "length": 63,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ddc844c1-e779-4122-9cae-d6527d73489a"
        },
        "item": {
          "id": "ee53f94a-e263-42b6-929a-b8c9549f7d92",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "fee4ed27-6927-4f63-b20e-8d8193b50a79",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b858aa1-8521-4f0f-a389-8a88a750744b",
        "cursor": {
          "ref": "08fd957d-ea81-4b96-9674-8f2c130c0365",
          "length": 63,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "854e5825-21aa-479b-b6f0-b256eed83b26"
        },
        "item": {
          "id": "3b858aa1-8521-4f0f-a389-8a88a750744b",
          "name": "credentials_issue"
        },
        "response": {
          "id": "bc04b9d8-0f7d-49db-8a4e-f0e25b58bda1",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b858aa1-8521-4f0f-a389-8a88a750744b",
        "cursor": {
          "ref": "08fd957d-ea81-4b96-9674-8f2c130c0365",
          "length": 63,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "854e5825-21aa-479b-b6f0-b256eed83b26"
        },
        "item": {
          "id": "3b858aa1-8521-4f0f-a389-8a88a750744b",
          "name": "credentials_issue"
        },
        "response": {
          "id": "bc04b9d8-0f7d-49db-8a4e-f0e25b58bda1",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c9e640-d227-4446-9a9e-a6fa17092caf",
        "cursor": {
          "ref": "c7e22686-fdcb-47ce-9423-594158498c8e",
          "length": 63,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c94d1dbf-1a10-4d7d-9925-50a800a98d81"
        },
        "item": {
          "id": "b4c9e640-d227-4446-9a9e-a6fa17092caf",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "c6fdb3f2-78d1-4ae2-8c1d-7aa0a7d204e3",
          "status": "Created",
          "code": 201,
          "responseTime": 303,
          "responseSize": 607
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c9e640-d227-4446-9a9e-a6fa17092caf",
        "cursor": {
          "ref": "c7e22686-fdcb-47ce-9423-594158498c8e",
          "length": 63,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c94d1dbf-1a10-4d7d-9925-50a800a98d81"
        },
        "item": {
          "id": "b4c9e640-d227-4446-9a9e-a6fa17092caf",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "c6fdb3f2-78d1-4ae2-8c1d-7aa0a7d204e3",
          "status": "Created",
          "code": 201,
          "responseTime": 303,
          "responseSize": 607
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d830754-52ec-4422-a16b-a7bf6a85a63e",
        "cursor": {
          "ref": "be9bb4f7-6345-4f38-a8bd-c76c70bf680a",
          "length": 63,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "de04fc46-e428-4b4d-aceb-1c9cd1f5ae87"
        },
        "item": {
          "id": "8d830754-52ec-4422-a16b-a7bf6a85a63e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "3ea6c8a2-b682-482f-9c66-a658049fe4e0",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d830754-52ec-4422-a16b-a7bf6a85a63e",
        "cursor": {
          "ref": "be9bb4f7-6345-4f38-a8bd-c76c70bf680a",
          "length": 63,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "de04fc46-e428-4b4d-aceb-1c9cd1f5ae87"
        },
        "item": {
          "id": "8d830754-52ec-4422-a16b-a7bf6a85a63e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "3ea6c8a2-b682-482f-9c66-a658049fe4e0",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f6a573f-50d4-4271-8a8b-14261092e1e7",
        "cursor": {
          "ref": "a042833a-b25b-4201-bfbb-666446a2a526",
          "length": 63,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "07811240-515d-4df3-aaf5-fd584348d3ea"
        },
        "item": {
          "id": "5f6a573f-50d4-4271-8a8b-14261092e1e7",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ad855ec6-6cff-454b-917d-e7f827f65ac1",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 576
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f6a573f-50d4-4271-8a8b-14261092e1e7",
        "cursor": {
          "ref": "a042833a-b25b-4201-bfbb-666446a2a526",
          "length": 63,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "07811240-515d-4df3-aaf5-fd584348d3ea"
        },
        "item": {
          "id": "5f6a573f-50d4-4271-8a8b-14261092e1e7",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ad855ec6-6cff-454b-917d-e7f827f65ac1",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 576
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1c44fa7-08cb-479f-a624-23b80e91a52a",
        "cursor": {
          "ref": "3a3f2344-30e5-4fd0-b23c-043dd60e8729",
          "length": 63,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "aa816ca8-73fc-4d8f-acbb-3b990960262f"
        },
        "item": {
          "id": "b1c44fa7-08cb-479f-a624-23b80e91a52a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "83cc006a-67b4-44e2-8269-46e9fdec4cc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "b1c44fa7-08cb-479f-a624-23b80e91a52a",
        "cursor": {
          "ref": "3a3f2344-30e5-4fd0-b23c-043dd60e8729",
          "length": 63,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "aa816ca8-73fc-4d8f-acbb-3b990960262f"
        },
        "item": {
          "id": "b1c44fa7-08cb-479f-a624-23b80e91a52a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "83cc006a-67b4-44e2-8269-46e9fdec4cc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "961bda2f-9663-49a6-804b-f6c7078b52f7",
        "cursor": {
          "ref": "eadf2793-f564-45ef-9000-2164fa437af3",
          "length": 63,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "3dd44e1a-679c-4cfd-b310-b0d6c903f503"
        },
        "item": {
          "id": "961bda2f-9663-49a6-804b-f6c7078b52f7",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f417936b-89a0-4ba1-92ff-a24dba9d82ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "961bda2f-9663-49a6-804b-f6c7078b52f7",
        "cursor": {
          "ref": "eadf2793-f564-45ef-9000-2164fa437af3",
          "length": 63,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "3dd44e1a-679c-4cfd-b310-b0d6c903f503"
        },
        "item": {
          "id": "961bda2f-9663-49a6-804b-f6c7078b52f7",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f417936b-89a0-4ba1-92ff-a24dba9d82ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "ddf0967f-5d0e-4008-b697-e0b5aa526fa7",
        "cursor": {
          "ref": "56203e3b-22a3-4029-9804-df30d1f17566",
          "length": 63,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "f0c9363e-2d3e-45ae-9354-16c5f2c997de"
        },
        "item": {
          "id": "ddf0967f-5d0e-4008-b697-e0b5aa526fa7",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "fb67b3ac-1e5a-4035-9abc-33b18973e56b",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddf0967f-5d0e-4008-b697-e0b5aa526fa7",
        "cursor": {
          "ref": "56203e3b-22a3-4029-9804-df30d1f17566",
          "length": 63,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "f0c9363e-2d3e-45ae-9354-16c5f2c997de"
        },
        "item": {
          "id": "ddf0967f-5d0e-4008-b697-e0b5aa526fa7",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "fb67b3ac-1e5a-4035-9abc-33b18973e56b",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9ef703f-744f-4c90-af95-9a21fabdd364",
        "cursor": {
          "ref": "22e5017c-4537-43cd-a924-68405267bfae",
          "length": 63,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "1307c5e4-b7db-4e88-b653-a46b17ce0303"
        },
        "item": {
          "id": "a9ef703f-744f-4c90-af95-9a21fabdd364",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "27634949-6ce9-45df-85a7-09818027b512",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9ef703f-744f-4c90-af95-9a21fabdd364",
        "cursor": {
          "ref": "22e5017c-4537-43cd-a924-68405267bfae",
          "length": 63,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "1307c5e4-b7db-4e88-b653-a46b17ce0303"
        },
        "item": {
          "id": "a9ef703f-744f-4c90-af95-9a21fabdd364",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "27634949-6ce9-45df-85a7-09818027b512",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a131ceb-169c-4eb3-846e-db7edaeb3339",
        "cursor": {
          "ref": "9359ae60-e191-479b-93ed-b6f3cdd54127",
          "length": 63,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "43a87703-e6af-4221-ad04-f689229ad9f1"
        },
        "item": {
          "id": "5a131ceb-169c-4eb3-846e-db7edaeb3339",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "b5823bf4-3523-41f5-b835-2144f63aa1cc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afb2f470-528c-4f85-8fcd-82dcc9a83936",
        "cursor": {
          "ref": "2cc7bd18-2774-4572-bad6-9dbc6f69338a",
          "length": 63,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "08e61173-2169-4690-b476-9da0c0577303"
        },
        "item": {
          "id": "afb2f470-528c-4f85-8fcd-82dcc9a83936",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e3c66e92-9f03-4891-948e-84b8b6842044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 147,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afb2f470-528c-4f85-8fcd-82dcc9a83936",
        "cursor": {
          "ref": "2cc7bd18-2774-4572-bad6-9dbc6f69338a",
          "length": 63,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "08e61173-2169-4690-b476-9da0c0577303"
        },
        "item": {
          "id": "afb2f470-528c-4f85-8fcd-82dcc9a83936",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e3c66e92-9f03-4891-948e-84b8b6842044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 147,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67fd5f93-ec9e-41d5-8bb7-81f171b4faf1",
        "cursor": {
          "ref": "09341aa7-fa58-42e4-bb0e-295fed8ebc26",
          "length": 63,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "4c319c0d-d4d9-4c45-933d-ef3758079b0e"
        },
        "item": {
          "id": "67fd5f93-ec9e-41d5-8bb7-81f171b4faf1",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "d50cea05-e13a-47bc-8a12-bd84a03dc132",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 135
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b8b978d-9b26-43e8-af46-791046218f42",
        "cursor": {
          "ref": "3268333b-5991-42a4-b01d-380a0a9a091b",
          "length": 63,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "7912dfd1-13ff-4d92-a4c5-915528c2c099"
        },
        "item": {
          "id": "5b8b978d-9b26-43e8-af46-791046218f42",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "0be2a65e-cd0d-4cc8-a25b-b0074f9c9578",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 149,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2804c404-57f1-4128-9243-915a8b6d68dd",
        "cursor": {
          "ref": "33aa9eeb-31fa-43fb-abc0-d66a38ceeb1b",
          "length": 63,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "b0a17b52-9219-4328-b762-cc47915ede93"
        },
        "item": {
          "id": "2804c404-57f1-4128-9243-915a8b6d68dd",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "5d064a78-b92f-4ded-893c-a7976b222bd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 135
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f23058d-5bfe-480d-be5e-daa5fa7e7a3a",
        "cursor": {
          "ref": "028bb399-0337-4fcf-8b8a-8516ea3f0ea0",
          "length": 63,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "2c2e5dcc-499f-4694-964f-999ca20489bc"
        },
        "item": {
          "id": "4f23058d-5bfe-480d-be5e-daa5fa7e7a3a",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "ef3db217-76c2-4609-acde-46ce9d5b1259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 135
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37078158-a64d-4e9c-a006-e9f5510c34c0",
        "cursor": {
          "ref": "a8942ff4-c2d7-4adb-8fed-f83d4c37ae18",
          "length": 63,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "7e559b01-00ea-4559-9d40-8951be778193"
        },
        "item": {
          "id": "37078158-a64d-4e9c-a006-e9f5510c34c0",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "3477f9e1-c769-4e52-8e7c-20a8cf2ff440",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 135
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de1f02f0-b81b-4f4d-9be0-b491203bb23e",
        "cursor": {
          "ref": "a72567cb-f8da-4826-bbf8-4ad0ae7b7c0c",
          "length": 63,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "4482eec5-0761-4c11-91b2-52d44a83f1e3"
        },
        "item": {
          "id": "de1f02f0-b81b-4f4d-9be0-b491203bb23e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "309ac4c9-c39d-4fa2-9959-b05f91035fbf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8785992-aaf2-4233-9a88-128be22d573a",
        "cursor": {
          "ref": "b7eb2c02-8089-4c06-962d-6d207874f382",
          "length": 63,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "b27a4d25-b4a4-4e83-9b5c-8045b967897f"
        },
        "item": {
          "id": "c8785992-aaf2-4233-9a88-128be22d573a",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "d9948dc0-24bc-4c9d-a39b-0e421447d469",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 13,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f8956c7-468e-4f1d-b630-1d8de66bc8d4",
        "cursor": {
          "ref": "0dcd893c-f9d9-4cb9-b683-b5672a960a0c",
          "length": 63,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "7718a63b-37f7-4dd5-af93-778b5c0953be"
        },
        "item": {
          "id": "5f8956c7-468e-4f1d-b630-1d8de66bc8d4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "510fcb38-f23e-4b01-86f9-7398b7f16c6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f8956c7-468e-4f1d-b630-1d8de66bc8d4",
        "cursor": {
          "ref": "0dcd893c-f9d9-4cb9-b683-b5672a960a0c",
          "length": 63,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "7718a63b-37f7-4dd5-af93-778b5c0953be"
        },
        "item": {
          "id": "5f8956c7-468e-4f1d-b630-1d8de66bc8d4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "510fcb38-f23e-4b01-86f9-7398b7f16c6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d542299b-8a3b-4897-b6e0-cf6f8da93efe",
        "cursor": {
          "ref": "9191261a-0ee0-40a9-aa52-b9156d61a0be",
          "length": 63,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "2cd45133-33e1-4543-9c9a-df2e7e96c928"
        },
        "item": {
          "id": "d542299b-8a3b-4897-b6e0-cf6f8da93efe",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "10440f5a-c222-436f-b23f-6124c8511d13",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85f94922-d62f-439c-93f2-fdc805b6e7b3",
        "cursor": {
          "ref": "eafe6d43-2f76-4129-82ad-8bd7c4159f11",
          "length": 63,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "fe687b76-f4af-45c1-9b9e-5578afc22d3c"
        },
        "item": {
          "id": "85f94922-d62f-439c-93f2-fdc805b6e7b3",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "9fab3f33-ea26-416e-bb56-a2bce8fab830",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "85f94922-d62f-439c-93f2-fdc805b6e7b3",
        "cursor": {
          "ref": "eafe6d43-2f76-4129-82ad-8bd7c4159f11",
          "length": 63,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "fe687b76-f4af-45c1-9b9e-5578afc22d3c"
        },
        "item": {
          "id": "85f94922-d62f-439c-93f2-fdc805b6e7b3",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "9fab3f33-ea26-416e-bb56-a2bce8fab830",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "6ff72f42-d28e-424c-9983-3106880e952b",
        "cursor": {
          "ref": "a7bab805-48d0-4964-90a3-981819cba28f",
          "length": 63,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "47b85a2a-06a8-4793-b0b4-5a0de988d204"
        },
        "item": {
          "id": "6ff72f42-d28e-424c-9983-3106880e952b",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "b0f8c98c-de94-4366-8f07-d524691b61ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "6b424c8f-4fb4-457b-8333-5b70f86bbe74",
        "cursor": {
          "ref": "6f21e0b0-9680-4fc2-a608-4d3a0b7f3a35",
          "length": 63,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "fc3b28de-7a45-4c2b-b0ff-815c0d5dd90e"
        },
        "item": {
          "id": "6b424c8f-4fb4-457b-8333-5b70f86bbe74",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f0fa6db1-27ce-41ce-8e2a-2039787f09b2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b424c8f-4fb4-457b-8333-5b70f86bbe74",
        "cursor": {
          "ref": "6f21e0b0-9680-4fc2-a608-4d3a0b7f3a35",
          "length": 63,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "fc3b28de-7a45-4c2b-b0ff-815c0d5dd90e"
        },
        "item": {
          "id": "6b424c8f-4fb4-457b-8333-5b70f86bbe74",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f0fa6db1-27ce-41ce-8e2a-2039787f09b2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95e9dbc2-1d49-4669-afa1-c7f6b388d9c3",
        "cursor": {
          "ref": "1c4d7223-3d79-44bb-afa7-04440a4ec14f",
          "length": 63,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "54adb0d7-6d0e-4405-a148-9289067a2e89"
        },
        "item": {
          "id": "95e9dbc2-1d49-4669-afa1-c7f6b388d9c3",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "14f3f7ad-4cf6-45dc-8a9d-043cb01732e1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 13,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}