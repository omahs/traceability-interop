{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "9577c3d3-0961-4fd5-9c69-ba543182cff6",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "5799bcca-2ad2-4246-bb42-7325e3a6d8a0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "00092737-52e5-49e1-8e2c-599f830a9c66",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d8ab8188-750e-45cd-b3f8-3f6f701e61ac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3814a898-dc0f-4c71-a6ab-f9f0aceeb697"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "315e79cc-01aa-462a-87de-7b44c84f6e0e",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "49341dd4-415c-4863-b1e9-f803d7e3b505",
            "name": "Negative Testing",
            "item": [
              {
                "id": "17633eda-5b81-45bf-8ba5-a4d25dab9b7b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "66dafae1-78d2-457e-9b8f-f3f007d8bf67",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f068094e-b192-4ed3-8673-8e6cc40e9c64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1a757b7e-0900-4a3f-842e-84ae1cdf3589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5827b2c-291a-4567-9509-0a05372b66fb",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c25a856-a4c9-4ce6-ad4a-f4bb2684b7f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "586815e6-3aab-4f43-b61e-621ea84bbec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "214b917d-ccc8-4c97-82f0-32c0ea99f622",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2268491c-4e47-4db4-92ce-c75f86829581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4092e3b4-83d7-4a2c-a0c0-79e1b49a1e15"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b72262f3-1e79-4d5a-a9ba-231e2b01a611",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "000b885f-1b64-480a-9d59-d7eebbbf5ff7",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b27f5d18-5e05-47f5-b942-44ed3af1e0c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "560d4ddc-9f54-4f14-ba50-1b1c4efcf8a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11c37e6f-a44c-4e66-a304-e8d7a4ea22e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a13c878-3fb8-47ea-928b-c8aa91a57684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37ed1981-8efb-4585-bd2f-31b4bbb6080e",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df771cca-4318-4148-befe-b69da2ddbdcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dc77a297-8001-4bc0-9c08-4d34e23e3e53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "759a0685-9793-413f-b07e-23dc61171769",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "bdc9b866-512d-46c1-a3fe-5b98a5f78649"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e05643aa-3f41-4463-901a-9e9d13617cc0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c1820145-be31-40ce-873c-26bcba2e746e",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e5a229a-d621-4aef-9403-5f862cb969bb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "72ee6bd2-bd4a-4aa5-b088-d356db0c1b7f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ee621214-ab33-48af-88fc-e4ff93322ff0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "d5e8b4af-776a-4239-8de9-61e5d1b5e571"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "533d6161-bf6f-46c2-a4f2-89b1755bc2be",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3e8c2658-8d8d-4305-be28-bc4e2637c40d"
            }
          }
        ]
      },
      {
        "id": "41871a15-0d87-4b22-a530-2be52b1a076c",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "f16497c3-2967-479a-b15a-c24b6d7ff790",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1169083e-c302-497a-9893-4c4a44a3cea1",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "4d4f665a-e42c-4eb1-a4bb-7a85a7400575",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdc07346-a593-4e9d-b523-8cb0547343f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18e06c2b-8d7d-4b19-9fba-1788867b9558"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4c7d6c1-5597-438a-9749-09df83aa3438",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd720fb9-cedb-4eec-84cb-d507b21bff29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d862af7b-3d40-478e-88a8-b0cbc3e6367e",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f3214a1-6631-40a8-bb70-9f7dd959df84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2401518-03bb-492a-95a2-ebdc5beba6ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96bc5bba-b86c-4f1e-8228-a1793cd7ff73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "947918d0-112b-4e22-96f0-5defa4ab39ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f46451c-1962-45e3-a170-b8c22c7a5355",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eafaaba-d240-4919-a8f1-5aa9ef8695b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08016d4b-bfba-478f-b10d-b2b45554345d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee3ac91a-1f7d-4f58-bd3f-7f48f45478cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6af57d54-cf04-49d9-9697-c960af84c899"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2ec9776-7190-4c22-95d9-3394076757b1",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65dd5055-e635-4c46-8fda-4e328d015254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b88ed6f-7876-4a92-8041-6add5e1f7468"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27b33afa-2750-4d43-afcb-c2cd92d7ed05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74dcb366-349e-4f34-be6f-d06d3a83b985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa52445b-a145-48a5-b632-bedc1702e6b5",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ac67872-9a29-4c2a-979e-8f6ecce04acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3899e5b-1dc1-432b-bc69-5afaa1a7811a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f794c400-5c80-4482-a65e-a9485e55326d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69455dd8-1a42-4f1e-8f52-9973162300c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4182181-e28f-48ed-befc-4f8d27d12168",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d209722-cb85-48dc-971f-6d91c711b72b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a29a9b4d-31af-45e7-bf7b-2fc5f19d44b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a8f4dc0-81bc-4440-86a0-a97bd7a71f45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7fb4bb7-f360-4c3a-b1e5-877a67ef71c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13a643af-ffc2-4c7f-a1ed-d1d4c0d3fd2f",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "196edb20-5c12-4c64-ab51-4695d0961607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94709f37-244b-4db4-b727-60c6ef7fb1f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd5818b9-c6c9-4327-b9ea-326f28502b9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28b2eea0-3ee3-47e7-9947-7c8feafd5706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6324bede-2b5e-4360-9a83-21ebc3da5a00",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ce74ee-2426-4197-83ec-035647e53a78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8d66cb2-3479-426f-84cc-fb1ccc9bd3df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50039f3c-95f6-4f4e-b274-d95db0062843",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9514a4df-c023-4e34-add1-95131512ec5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f124b21-fc07-42f4-a6d1-2927e44837d4",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71c99c4a-07f7-41b8-ae0b-31fcbb8efaf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a970d2f-7a6e-4b93-820b-31ef5b54d6a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44de75ca-f5b0-4b90-8870-f0792d26dead",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba938473-519d-4995-b3ab-d34cf5ec698f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7cb6a4f-c5ba-430c-8552-fd129c91c881",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "142e7514-07e6-4f12-9446-d10ea7f9660f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "becfb719-01b8-4f37-90b3-fd338edaf265"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20833e84-5cee-444d-99d1-0333f181c5fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94232704-d61b-4ddc-8999-e63458a32fb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbc98fc2-80c6-4b16-b1d4-1f2a98e13a47",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "039a4a35-fe2e-45c9-8329-81862d97c6c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a52fbc9d-81a1-4907-b634-1be55dfcfda2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f256560c-998b-45ce-87bb-02294764317e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "52dfdb70-4b65-4991-916b-76e0c2bbc440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "363b2037-c58c-463f-b85e-220fe0edc608",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8441f9a2-c3a1-482c-a6bd-4fc62f5c4638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ad8a0f4-af61-4bc0-a5e8-ca03199cb546"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d203713-2909-4c3f-a436-d8bfc052b773",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "b59b2895-38c3-48f1-95de-ebcbe8382b16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65aff252-8890-47e0-85c5-0ba38b9caf55",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15e26d59-ee29-4ad2-94f9-64a97d9acab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e1b794a-9fff-4dfc-9282-ed092b81866f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a648ad4-6546-4d02-b8c9-8286918ce953",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d2e8597-7029-40f7-8358-0854e52cc48c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c9661da-e137-4c62-90d8-3797641cd6d6",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4df93d13-37ea-4703-8873-79ba0ef20431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1200cc7-6225-41a6-b47c-b1d20cf87848"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1f2d567-84b8-4e83-a6f2-79e6742479a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "384dea59-3628-4fbf-9e44-f9c69a458bd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d889f0d-0e49-4d6d-b63c-a5297fa2363f",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af883bfe-2c2a-48aa-90a1-fd34314a657c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf8bb51a-8a71-4492-a7aa-13236a852c88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1e5bc76-8ea9-4b0b-8d7b-409fe06c482c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "f8e45c75-b158-4cc3-a387-c7666dcee4df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e70711d-7f42-4ef5-9192-0df8bcfa61d2",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08d99e85-63e1-4706-af51-bac0a8b4018a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3695ae8-6342-4ce4-b479-297e84d89788"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e338acf-5939-4eef-98e9-3922dff9169f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "5ead5dff-094e-4591-a302-b4015d4d80ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95b4755f-cb63-486d-9566-67c7f1c024db",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8615eaaf-7b38-4643-b253-a2b29829f820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4accb663-8f53-41bf-9895-eeca46218077"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "071a20a6-2238-4f94-92d9-10567c385d80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fed0cd2c-f2fe-428b-b437-9cef7ed2a222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89bce259-d05d-49af-8d06-6feda198192e",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48685577-a638-4f1a-ade1-f232e1f7a613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a03b045a-10de-4761-ae31-907c31433d3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2ee1821-6f0b-42f5-b2d7-8532a9ddd362",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74843080-6f70-4be4-8d31-a114ec1c2d9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0faf417-b2bc-4f11-8a51-b28d68746d10",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db203529-5609-4252-ae7f-ecc6405fb9dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67f66799-e833-40ad-8fc5-95ed7c27e279"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a52dfbdb-fbd3-4024-b3ab-64734368af1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5edc455c-eee2-480e-b750-186e41400d2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4426941f-57d9-4e05-af03-cbf4b47a2ded",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b66f9ed-7fa4-4187-b46d-ea55e4131f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8392f240-52e3-4148-b5dc-ed654d647d50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c1a5223-37c2-420f-acfd-b56a70254da0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86fceef5-985d-45cd-aff9-1d864a4577a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d435adec-10af-4d0a-b761-ef43fcb9d68b",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6080d479-159e-45b8-8487-4650d73d8353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a7eebfa-a8af-4e39-9aed-54fc09636fb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f618e80e-e223-4ba1-8c38-266b93e9fd04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3559725b-0b7f-4bfe-a511-1e9aef027781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a42ae14-b4ed-4ee9-8022-8a6543eb853a",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3221b05-6eef-4406-8321-3c8063096acd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6a8ae5a-57ea-4fc0-8ee5-e7dfaecdecf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9c2cb18-ce22-497f-b7e2-c2ded342abb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1541017f-1c11-46ef-8779-5d4bbfa1107f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b882b9f3-b6f8-42a3-823a-22d1bb4d41aa",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11f088e8-0a08-4db1-bce9-8a2d62268cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18660e57-f906-4047-ba41-075052a1bac9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "290f4785-04d8-4603-946a-bf66b31d35df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05e17959-5d26-4753-bc9c-320456647f99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ca97047-644a-4cb9-950a-d31d89531e54",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b353441c-d8fd-48a8-82ed-a599199987a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79e24a20-35f4-490a-9489-84b8b46a1a84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7c51776-2194-47f2-b786-a99fea711b2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e393dd1d-e820-4a57-b57f-f060a0554fbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33ad6aed-c856-4c70-baca-9463c76f1296",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e987dbe4-0507-420d-b512-9f48006107dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8f0c74e-636b-42c8-b3c5-afa2bd189268"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6edf8275-f0a6-47e6-b203-bd343cd41555",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9bf3dce-472e-4267-a93d-0582895d9b94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3569980a-b1dc-4dd6-8619-80d062c78cc0",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6cce83a-8007-4ff1-b196-e141afd1fae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e2e04f8-a96b-4030-8b42-a21f226b61de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5216c5e-e840-464e-9666-d13260bfe175",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50251dde-d12a-4c42-8b3e-f28d9bec76e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e392138-028b-4b41-8a41-5b9d5c94f2eb",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04a41f8a-0118-4081-90d0-8b96676aa19f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd6975d3-298b-46fd-b772-d1e55e4730be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b95f7d0-7f99-4922-9878-74905b06c958",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2994ce00-cd0d-498c-a39e-79f86490de93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aeda032-fea9-4515-bca2-42dedb3a4f5a",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e127742c-46fa-46f7-bba3-64209b732ace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f874e331-4a98-4a07-9d08-27cda43afb2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a583005-2c32-4fbd-bd90-3538524a4b4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6ddbfde-eb51-4464-9ad1-a69ddd91cd39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2fa2370-f52e-432a-a54c-30d6a53d6df4",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23301c9c-cfc4-4b02-9645-ed4df69239a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bc8ce78-b96c-4de7-90e8-4eaf88bc1563"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3fe573c-c93c-47ca-9309-785190f77452",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68751b70-6454-4e72-ab70-5941aec52c3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0d17c30-32a3-45d4-84af-9e4bc8b75c7a",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f291ce0-1c91-4754-a8e6-88578a2abd28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8769885-b468-415c-812c-b7a6bb33b9cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3902952a-57be-4360-a1b3-904e9bc8fe9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d178b09f-979f-49ea-8dfb-0fe2ad842061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15e22a94-3c88-4a80-bfa0-97bf6b7d6bfc",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70a09805-521d-466b-9c9e-e7277a9be886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "adab1eb6-1af3-4a71-9554-9303ecc09a4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7db4aad1-2cad-4b6f-a3ab-51cfaab1a9aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1136418-cb61-495a-9048-f74eb4c33147"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d294c911-14dc-4812-be4e-aaa781a3fc83",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b39aa9ed-6df8-4661-84a6-ed69cabb8462",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c19e567a-60a4-4a09-83f6-de95a0de8b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c2cc3099-7b28-4658-b5cf-072c4e86eb2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf184e5a-acac-45e7-bd22-74b517913ccb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "20a088f7-5f5e-4db5-8d2a-fcd9a3f68216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9618e3c8-af57-4f38-a568-f482b62d7cf4",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98f062de-c68d-453e-957b-c72ec1220d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1c2ad4d0-9ef9-4e2d-80c9-6cbb69570e4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c6df4ff-3725-4389-aa6c-93f1764c244f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "254ff2cb-e591-4fba-9faa-94d288ed5b3e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c2107159-f751-40c4-8036-5c52b112ab3a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b1be240d-b4bc-4241-b220-c95d3428d74a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "25fa938a-eeeb-4e77-9234-afd57013d2ca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4f70d970-aa31-4ea6-ae93-db520017e10c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d905d24e-a246-4202-a3ac-7c7a38d51ec2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1e20c3b3-f65b-4aa7-ab5e-6f538327b38d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e506e426-8685-4edc-af41-be526efc913e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c37060f3-e002-4f64-8c0f-76de4c6542fd"
                }
              }
            ]
          },
          {
            "id": "ff2b38c3-5d1c-4272-a8a2-aa2ebd48ffdf",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b1b91b80-705b-4b3a-ba72-17b6a1e5cf4b",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1f9c1581-2a9e-456a-9644-ff863b566b11",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8cf3cfb2-3152-4d57-8562-bd19ed7e0912"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f14d395d-3b86-4ba0-8aa3-0f9f40f21ada",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "71179d85-5c78-4145-a8bc-641ff5a03e38"
                    }
                  }
                ]
              },
              {
                "id": "6daea085-2312-44ec-949b-906eadee7c7e",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa844989-f6fc-47c8-b7e6-883c86a935bb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "43165ba3-79e8-4b34-a2c2-94c0b4ef7c95"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bed45b46-6377-4af1-9482-f5642132cbdc",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "d9aa13ce-a83a-477f-bce2-cf74d3e64a4b"
                    }
                  }
                ]
              },
              {
                "id": "b12f5fa5-52f9-420d-a7c6-f662e8cf424d",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "17dcc306-cc30-4e51-9c81-88239d4ecf95",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5e76789f-4021-4fc2-bb40-54f0d94c7e93"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e43e97ba-960c-411f-90b5-41b85756163e",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "743f31da-d71c-4614-8454-15ae8c9fbbe1"
                    }
                  }
                ]
              },
              {
                "id": "e04cc63a-476d-4b1f-b700-3dec344584fc",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "88962102-e178-48fa-8e25-54d6f8966ed3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e58d0be1-2bd5-4b5c-b06e-19871880b316"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c2bc71bd-5331-4a63-a1bc-64d7c18b9265",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "c129b6be-65b8-4515-99a8-4eb92795bcf5"
                    }
                  }
                ]
              },
              {
                "id": "e640d7ad-e563-4548-9668-0570dc9f7b5e",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7732f4bd-b854-4e15-bfbb-5d4d47b60945",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof credentialSubject === 'string') {",
                        "  pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        " } else {",
                        "  pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        " }",
                        "});"
                      ],
                      "_lastExecutionId": "b357c909-3532-446f-8f69-93010d3a5aaf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c8687ee7-1400-4ccb-ab09-530e15a5240e",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "042ef220-69bf-4960-b1ff-04688db73744"
                    }
                  }
                ]
              },
              {
                "id": "4c1c18d2-05aa-49e2-a0e0-cba3cb3986fb",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "974185d5-2566-43db-a8ae-bad15cfaec37",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "90c865e5-60cc-489e-afa0-f92563a6addc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "536a9b67-3b1c-43a2-9e78-4cb6833f31f6",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "dd11d2fa-4a57-404a-8a6d-176e1422db80"
                    }
                  }
                ]
              },
              {
                "id": "71884d38-cd6b-434e-a7f3-20e3cc1bbfe0",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "16f99f02-7ec5-42d2-9f59-bc7d60a4f1c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4b5437ed-a89e-4f2c-a99c-77e48350c25b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bbb099aa-d941-4828-b96d-a1cbbdbd8db3",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "74c2c6a0-2270-473e-a53a-6743b7c7f973"
                    }
                  }
                ]
              },
              {
                "id": "1c6b1366-ea46-4bed-9b63-991e0730b2fb",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa5205a0-9161-424b-bfcf-8e647a7d8b7b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c63f644e-21b7-48fc-835c-ce05f804ae53"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "38216086-a03d-4370-912f-e32c6ef44de8",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "c0d6ddde-1331-4f32-9cf4-bac23ee8ad25"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "163ac62d-1675-4e8d-afa9-e02474eebbb4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cf632d7e-4349-4b17-8255-c975f605ba66"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "975dfde4-fb6f-4a3f-b4be-dd0178793c2e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "451870d2-8cba-4e7b-8672-ef0ef68b60e8"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dc5fceca-e930-468f-82aa-be4e37716efb",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "849ad61a-5556-4208-9cad-985c1ed5653e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bd8a6803-1882-4981-88e7-72968bddcc75",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4ecf4c66-8d05-46dd-b6b2-e971ffc01553"
            }
          }
        ]
      },
      {
        "id": "daa40b4e-2d72-45b7-96ae-494b265de466",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "158d034d-6d40-428f-8fc8-0d4de30c93d0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e7043eea-6390-478f-ae3a-d2099603a9a6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6d60734a-bf2f-4081-a1fe-8b943c63e270",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba205e4d-05ef-4e08-8c27-1461e4aeab56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "914c5110-8663-411f-a180-63a7d98c243e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5abca1a8-5a8d-4fd3-90ac-4ce37c7481de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "84790c4c-bd85-459d-b994-6031a2869a8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e95a955-10b8-4d4b-b026-051eb4585526",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c8988ac-372c-4a2c-b20d-98ed360a4e92",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "7ca37847-e1bb-47d4-b4ab-29d004f5c8cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6aabfab-8e64-4ecd-a460-5bdd32ec0c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "504465ea-b295-4831-b8e5-eaeb81be7b93"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1f61306c-800d-423a-b497-e47039488c99",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "df9aeb28-81ae-4e8e-ad83-08bef7fefdc9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1149a9cb-273c-4634-9bfb-821e7c80ff45",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9966dcb6-b74c-4a2d-86ff-927637c7f04a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d6ac2e45-25d0-4d91-8608-a2913d8baaa1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "61a8794c-3f25-4f00-84e0-9303d9eb8358"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d9276b24-dfa7-4892-8f80-99e588abda1f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a514153c-15b5-4991-97e3-39ad32841c28"
            }
          }
        ]
      },
      {
        "id": "2fe925fb-4e77-42bb-b8e0-d76e04a80f4c",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "47bbf25c-9973-454c-b0ea-98fadb3ffe4b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0cd418d5-3458-4a07-8962-1fbc6051eb34",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1dbf01b9-aee8-4f43-ae81-cb662b5845b9",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50f300f7-e6ae-4444-99b2-4ba7cae5928d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "230526fc-3eb5-4d73-90b2-908cce1c2a66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "293c607f-4caf-42f6-8433-fbe081e7d8aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d711ef8b-b689-4d35-8ce8-10967e927d10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7602bf57-fd52-4cbf-9a06-0a9514fb867d",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e666b458-72bf-4477-b59f-c08c2873697e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "8c0724e0-b47a-424e-a2e0-d51d20d2cb70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68f83d8d-3b82-49a9-aa2c-5e2736257908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "245bbba9-e060-41cb-b648-75aee24a0991"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "293dd9fa-683c-4686-be7e-6dca8e61e696",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ce218f5e-acfc-40c3-85be-2504c6aa3d03"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "27fc87f8-61cc-4788-a8e1-18a02381f8b0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9fbcbe97-c4a2-42b5-ac36-e90f1e85838f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b1fdebae-0076-4d31-91a1-86d9b8de2739",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "c134e905-6fdc-4428-9ae3-1d780160b83d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8761cf06-bab7-4163-8e66-8a8302fbc532",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8ea09da0-a8c7-426b-a3b5-648ab0a420a6"
            }
          }
        ]
      },
      {
        "id": "fb5f368a-9cda-407c-8663-816203bca821",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "9ac487d6-596e-4640-80e6-edf071edad5e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0e2f4bf4-aecd-41ed-a10e-cf42a6ce6489",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b31dcff6-69e2-48e4-84e7-81a763fc4550",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "432c7ee6-932c-460f-b79c-06aca3c4af5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c883135-3904-438c-be63-dc5b2c8b000b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "821ed0b5-de8c-44dc-a036-5625b309e33e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "47ba6949-0b11-4fe3-8c3a-b936d89433bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e415bff-529d-41e3-8949-75cd16111340",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9501baf-a0af-489b-b752-aa36d8b60651",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "8a9542f5-10b1-4877-9ecf-3bb8befc825b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb775743-8c0b-4f0e-8739-225993092a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5a080f1d-df3c-49b4-9270-3b05e1993420"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e09e7b74-3f10-44cc-9719-25eee5925692",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b40705fb-2a09-4227-88ee-661a80c671c3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "07b1e388-6223-42ac-a64c-11b535de7362",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "716e23f0-eada-421f-be2c-55064b041eca"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2179555f-ddcb-4c2a-9df7-3dd66a8f21a2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "bde289e1-feb9-4e52-975d-990afe4327eb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2165c2b4-c841-42eb-afad-e4d6a01daf10",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3ad17750-4b31-4f9e-9b90-b3d9c8cc93bd"
            }
          }
        ]
      },
      {
        "id": "57f5bad8-dfc8-4e66-90d1-a9b9e1f207ee",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "a4db2c36-321e-404c-8f9b-deaf312a0047",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c2188365-2b5d-4b1f-b8dd-6d93d155031c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "75f2da0b-936e-4b73-9f7f-1ea58abeb508",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8837f188-12d2-46d8-9f99-bffc547b9cd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "913be4ff-76b1-4049-a05a-8c18095edbc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "304ff288-c2b6-43cd-91d4-dba3100d0a0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "34cc1c3a-d39a-40e2-a1fe-7639266a3ba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b9baf3f-b0a7-4ab6-a4dd-b0fe04f01874",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8792d1e1-306a-4156-9720-641897c08b0d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "a5af8db4-b920-4f18-93dd-e20f86ac8ffe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f3394e9-7598-4c1b-8077-22b7f006eb1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0151cac2-ab1b-420f-aa26-109255b6924f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "32b180ab-3c9a-452c-8047-cea34fe677f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1f18b28d-8dc5-4a6d-b0b8-c2afcc9e4460"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0bb08f81-3191-4fdc-b8f8-1ff070716c69",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cb0b2b25-5eb2-4f18-b821-1a83f351aa7d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "652b3bea-8098-4b4c-930e-05cf0383cb2e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "f132c07f-2786-4ef4-86da-f89617197b56"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b2f0894d-464b-48b7-9bd7-99ea32229361",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "685366ec-a37b-4b3a-9e35-ed51566754a9"
            }
          }
        ]
      },
      {
        "id": "85b18256-779a-4e7a-b395-4e6f48cf334b",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "aaa1d877-8433-4c40-95a8-22b7cd0cb18e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6a056b33-a20e-4d85-9ad7-fd4fe79431f2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b425fefc-a4a1-40ed-90af-cab4f070034e",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a95812b0-a92a-49e8-a4de-b8b0da5fc188",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fd57ea6-01b2-429e-af0e-79f25219ba77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27dfb745-3e8e-43a1-a643-eefb0a8f325a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "34ae8cab-3fb8-4845-86a8-e5030a84f723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f11cd0d-d581-49fc-9f98-12ac8c7d1693",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcd42b31-7186-41c4-a31c-20f7b535e41a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "3527b509-93af-4243-aba1-a2a525e95047"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae791ddb-fa86-4522-9d9f-373b4580c945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0f7c3df5-bd02-43c9-b6f9-70c50935e280"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f3b0e91a-785d-4755-9929-3bc020dc5124",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "606ec64a-12f0-4014-98e1-377d4b2a8f8f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b6688c03-7e22-48b4-9c11-e0c39969cb60",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f1e26ee6-5d75-4b0d-8ad2-4668a308e2ad"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d569def0-0200-48d8-a767-032ab3bceb6e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "87ac4911-af7c-4c86-98ae-9502d3d5fc08"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "058f5f1c-2c80-4c8e-b9b3-3eb697c34015",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4705283e-cf83-4007-986b-d5de463d234b"
            }
          }
        ]
      },
      {
        "id": "c905cfaa-3f98-4945-9f55-1067aaa6a63e",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "41d3f118-ab96-4568-a8f9-7468c7484bfc",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 447,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 107,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 121,
        "pending": 0,
        "failed": 19
      },
      "testScripts": {
        "total": 226,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 221,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 118.3644859813084,
      "responseMin": 64,
      "responseMax": 798,
      "responseSd": 118.05569670202793,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1661647876217,
      "completed": 1661647892532
    },
    "executions": [
      {
        "id": "00092737-52e5-49e1-8e2c-599f830a9c66",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 58,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "80ad108c-3dea-4396-be7c-5a6d7115adeb",
          "httpRequestId": "36937c58-af6b-4473-a660-e303b1e71ddc"
        },
        "item": {
          "id": "00092737-52e5-49e1-8e2c-599f830a9c66",
          "name": "did_json"
        },
        "response": {
          "id": "cac49663-a310-4e89-8893-1117490b2332",
          "status": "OK",
          "code": 200,
          "responseTime": 314,
          "responseSize": 1002
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66dafae1-78d2-457e-9b8f-f3f007d8bf67",
        "cursor": {
          "ref": "ba098a69-5730-4c8a-864f-88d8bc8e2bfd",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5d37743e-a6c9-4b1d-9fb4-3ec87f66881d"
        },
        "item": {
          "id": "66dafae1-78d2-457e-9b8f-f3f007d8bf67",
          "name": "did:invalid"
        },
        "response": {
          "id": "9a8b1478-f460-4db8-aaee-a51b3a93e042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66dafae1-78d2-457e-9b8f-f3f007d8bf67",
        "cursor": {
          "ref": "ba098a69-5730-4c8a-864f-88d8bc8e2bfd",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5d37743e-a6c9-4b1d-9fb4-3ec87f66881d"
        },
        "item": {
          "id": "66dafae1-78d2-457e-9b8f-f3f007d8bf67",
          "name": "did:invalid"
        },
        "response": {
          "id": "9a8b1478-f460-4db8-aaee-a51b3a93e042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5827b2c-291a-4567-9509-0a05372b66fb",
        "cursor": {
          "ref": "a77970cd-9fa9-4d9d-b31b-b02215eb9e9c",
          "length": 58,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6ed3e247-4611-4635-a261-d24957287eb8"
        },
        "item": {
          "id": "b5827b2c-291a-4567-9509-0a05372b66fb",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "c99149c4-26a3-45b5-8590-af4dd6c1e85a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 132,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "214b917d-ccc8-4c97-82f0-32c0ea99f622",
        "cursor": {
          "ref": "a67ec53e-87fb-4bb4-9c82-e6f345b8c4c2",
          "length": 58,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "007660a5-9808-4ae9-87d4-67ffe1d2f71e"
        },
        "item": {
          "id": "214b917d-ccc8-4c97-82f0-32c0ea99f622",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "63993d54-d5f4-406c-ac07-4eaed0cc17d7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 67,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "000b885f-1b64-480a-9d59-d7eebbbf5ff7",
        "cursor": {
          "ref": "9c3fd672-a958-4d8d-8d33-a9938a82b395",
          "length": 58,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "beb4b1d1-0025-427b-aaff-8456eb2c1deb"
        },
        "item": {
          "id": "000b885f-1b64-480a-9d59-d7eebbbf5ff7",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "5e66b8ab-ec25-4f47-b674-7b31b1c9e46d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37ed1981-8efb-4585-bd2f-31b4bbb6080e",
        "cursor": {
          "ref": "120068c7-cd37-4a1f-ab1f-a74a10aa9c97",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "d21c6668-b174-4610-8e64-9fb4b5012123"
        },
        "item": {
          "id": "37ed1981-8efb-4585-bd2f-31b4bbb6080e",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "0a8719d4-7829-448f-8e72-156a3a90a778",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37ed1981-8efb-4585-bd2f-31b4bbb6080e",
        "cursor": {
          "ref": "120068c7-cd37-4a1f-ab1f-a74a10aa9c97",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "d21c6668-b174-4610-8e64-9fb4b5012123"
        },
        "item": {
          "id": "37ed1981-8efb-4585-bd2f-31b4bbb6080e",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "0a8719d4-7829-448f-8e72-156a3a90a778",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1820145-be31-40ce-873c-26bcba2e746e",
        "cursor": {
          "ref": "dec680c2-587a-46dc-8740-267aa57127bc",
          "length": 58,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8cad1528-5ec9-45d0-aa39-7f0e900dcc59"
        },
        "item": {
          "id": "c1820145-be31-40ce-873c-26bcba2e746e",
          "name": "identifiers"
        },
        "response": {
          "id": "d6c105e5-eeb6-4d64-9e58-3e4796053ab8",
          "status": "OK",
          "code": 200,
          "responseTime": 378,
          "responseSize": 1018
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d4f665a-e42c-4eb1-a4bb-7a85a7400575",
        "cursor": {
          "ref": "0b81adff-a6ff-43b7-b72f-67ea35616f7b",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "64303f27-770a-4dff-aa3f-cfa40b3ae3b8"
        },
        "item": {
          "id": "4d4f665a-e42c-4eb1-a4bb-7a85a7400575",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1eaaf1c7-737a-484b-80b9-8034b8927acf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d4f665a-e42c-4eb1-a4bb-7a85a7400575",
        "cursor": {
          "ref": "0b81adff-a6ff-43b7-b72f-67ea35616f7b",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "64303f27-770a-4dff-aa3f-cfa40b3ae3b8"
        },
        "item": {
          "id": "4d4f665a-e42c-4eb1-a4bb-7a85a7400575",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1eaaf1c7-737a-484b-80b9-8034b8927acf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d4f665a-e42c-4eb1-a4bb-7a85a7400575",
        "cursor": {
          "ref": "0b81adff-a6ff-43b7-b72f-67ea35616f7b",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "64303f27-770a-4dff-aa3f-cfa40b3ae3b8"
        },
        "item": {
          "id": "4d4f665a-e42c-4eb1-a4bb-7a85a7400575",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1eaaf1c7-737a-484b-80b9-8034b8927acf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d862af7b-3d40-478e-88a8-b0cbc3e6367e",
        "cursor": {
          "ref": "b5ff5a7e-8028-4fc7-bd2f-291e330ba4cc",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "094b9515-2564-444d-88d8-9ca4fc2cd1e0"
        },
        "item": {
          "id": "d862af7b-3d40-478e-88a8-b0cbc3e6367e",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "88ac2677-c52f-4af0-87c0-2a40c0f117f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d862af7b-3d40-478e-88a8-b0cbc3e6367e",
        "cursor": {
          "ref": "b5ff5a7e-8028-4fc7-bd2f-291e330ba4cc",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "094b9515-2564-444d-88d8-9ca4fc2cd1e0"
        },
        "item": {
          "id": "d862af7b-3d40-478e-88a8-b0cbc3e6367e",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "88ac2677-c52f-4af0-87c0-2a40c0f117f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f46451c-1962-45e3-a170-b8c22c7a5355",
        "cursor": {
          "ref": "64377c9a-16c1-4d94-8af8-bde2d866c755",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "bdeec9d6-1017-44c3-b928-426ff2701e00"
        },
        "item": {
          "id": "9f46451c-1962-45e3-a170-b8c22c7a5355",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "dc57baa1-5f5d-4365-a5bb-5d3eb7a64f5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f46451c-1962-45e3-a170-b8c22c7a5355",
        "cursor": {
          "ref": "64377c9a-16c1-4d94-8af8-bde2d866c755",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "bdeec9d6-1017-44c3-b928-426ff2701e00"
        },
        "item": {
          "id": "9f46451c-1962-45e3-a170-b8c22c7a5355",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "dc57baa1-5f5d-4365-a5bb-5d3eb7a64f5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2ec9776-7190-4c22-95d9-3394076757b1",
        "cursor": {
          "ref": "cb49d812-21ba-4349-873a-7f9e7126e9b0",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "298e64f5-cb5c-4aee-a9d0-bcf06755d255"
        },
        "item": {
          "id": "b2ec9776-7190-4c22-95d9-3394076757b1",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "bd18925e-690b-4ab6-b8b5-bfbbb41b9823",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2ec9776-7190-4c22-95d9-3394076757b1",
        "cursor": {
          "ref": "cb49d812-21ba-4349-873a-7f9e7126e9b0",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "298e64f5-cb5c-4aee-a9d0-bcf06755d255"
        },
        "item": {
          "id": "b2ec9776-7190-4c22-95d9-3394076757b1",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "bd18925e-690b-4ab6-b8b5-bfbbb41b9823",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa52445b-a145-48a5-b632-bedc1702e6b5",
        "cursor": {
          "ref": "81cd985c-3567-4f41-b853-737a33a3fbc8",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "1df0bb38-cc73-4517-b98c-a9723be3b69d"
        },
        "item": {
          "id": "aa52445b-a145-48a5-b632-bedc1702e6b5",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "8d0ee0c2-d64c-4679-b67c-97774d7d2cf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa52445b-a145-48a5-b632-bedc1702e6b5",
        "cursor": {
          "ref": "81cd985c-3567-4f41-b853-737a33a3fbc8",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "1df0bb38-cc73-4517-b98c-a9723be3b69d"
        },
        "item": {
          "id": "aa52445b-a145-48a5-b632-bedc1702e6b5",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "8d0ee0c2-d64c-4679-b67c-97774d7d2cf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4182181-e28f-48ed-befc-4f8d27d12168",
        "cursor": {
          "ref": "6313ce95-e974-4279-ac50-49d8c8d774ee",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "68f690c9-1d00-4dc4-9086-055a598aa939"
        },
        "item": {
          "id": "e4182181-e28f-48ed-befc-4f8d27d12168",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "3fa07b41-d187-4cd7-8fce-773bc46cbc90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4182181-e28f-48ed-befc-4f8d27d12168",
        "cursor": {
          "ref": "6313ce95-e974-4279-ac50-49d8c8d774ee",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "68f690c9-1d00-4dc4-9086-055a598aa939"
        },
        "item": {
          "id": "e4182181-e28f-48ed-befc-4f8d27d12168",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "3fa07b41-d187-4cd7-8fce-773bc46cbc90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13a643af-ffc2-4c7f-a1ed-d1d4c0d3fd2f",
        "cursor": {
          "ref": "30f63e4d-8bfa-4173-acc3-51f1b4b39a0a",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "318bd206-87b8-49d1-a331-c54f349af456"
        },
        "item": {
          "id": "13a643af-ffc2-4c7f-a1ed-d1d4c0d3fd2f",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "1452093b-6439-4a7b-a8d0-f4da0642bd29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13a643af-ffc2-4c7f-a1ed-d1d4c0d3fd2f",
        "cursor": {
          "ref": "30f63e4d-8bfa-4173-acc3-51f1b4b39a0a",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "318bd206-87b8-49d1-a331-c54f349af456"
        },
        "item": {
          "id": "13a643af-ffc2-4c7f-a1ed-d1d4c0d3fd2f",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "1452093b-6439-4a7b-a8d0-f4da0642bd29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6324bede-2b5e-4360-9a83-21ebc3da5a00",
        "cursor": {
          "ref": "4ff5a1c6-9d29-4229-bc0b-f16004d7e3c0",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "4d7f1c21-3c1b-4bed-8ce0-a921305c217f"
        },
        "item": {
          "id": "6324bede-2b5e-4360-9a83-21ebc3da5a00",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "34ae0c13-9271-4274-af67-2289e6d3fd6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6324bede-2b5e-4360-9a83-21ebc3da5a00",
        "cursor": {
          "ref": "4ff5a1c6-9d29-4229-bc0b-f16004d7e3c0",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "4d7f1c21-3c1b-4bed-8ce0-a921305c217f"
        },
        "item": {
          "id": "6324bede-2b5e-4360-9a83-21ebc3da5a00",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "34ae0c13-9271-4274-af67-2289e6d3fd6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f124b21-fc07-42f4-a6d1-2927e44837d4",
        "cursor": {
          "ref": "9978e5b9-e2b2-4ac0-813e-703841a76b7e",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "b566b194-1e8c-46e5-8381-5ed0bdb1ce51"
        },
        "item": {
          "id": "4f124b21-fc07-42f4-a6d1-2927e44837d4",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "cf9e9669-2e26-4635-b605-b66cf43ff1ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f124b21-fc07-42f4-a6d1-2927e44837d4",
        "cursor": {
          "ref": "9978e5b9-e2b2-4ac0-813e-703841a76b7e",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "b566b194-1e8c-46e5-8381-5ed0bdb1ce51"
        },
        "item": {
          "id": "4f124b21-fc07-42f4-a6d1-2927e44837d4",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "cf9e9669-2e26-4635-b605-b66cf43ff1ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7cb6a4f-c5ba-430c-8552-fd129c91c881",
        "cursor": {
          "ref": "b9ed31ce-5d30-4794-a68b-22a27db36917",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "ed1111db-d0ed-41fe-8673-fb9db14e4424"
        },
        "item": {
          "id": "e7cb6a4f-c5ba-430c-8552-fd129c91c881",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "aadc0629-43a8-4965-8db4-8b5b0d5d7b24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7cb6a4f-c5ba-430c-8552-fd129c91c881",
        "cursor": {
          "ref": "b9ed31ce-5d30-4794-a68b-22a27db36917",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "ed1111db-d0ed-41fe-8673-fb9db14e4424"
        },
        "item": {
          "id": "e7cb6a4f-c5ba-430c-8552-fd129c91c881",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "aadc0629-43a8-4965-8db4-8b5b0d5d7b24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbc98fc2-80c6-4b16-b1d4-1f2a98e13a47",
        "cursor": {
          "ref": "3550bd2c-03f5-4355-bc89-227c6cda2dd6",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "28e6016b-faa1-47e7-8a88-7e31cf173dab"
        },
        "item": {
          "id": "fbc98fc2-80c6-4b16-b1d4-1f2a98e13a47",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "f542cdee-f342-4d26-982a-da163e278476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbc98fc2-80c6-4b16-b1d4-1f2a98e13a47",
        "cursor": {
          "ref": "3550bd2c-03f5-4355-bc89-227c6cda2dd6",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "28e6016b-faa1-47e7-8a88-7e31cf173dab"
        },
        "item": {
          "id": "fbc98fc2-80c6-4b16-b1d4-1f2a98e13a47",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "f542cdee-f342-4d26-982a-da163e278476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "363b2037-c58c-463f-b85e-220fe0edc608",
        "cursor": {
          "ref": "466a1e7f-288a-4b00-9cc4-a4831b15e7a2",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "26e89531-ff37-46ce-9d51-4a831c040049"
        },
        "item": {
          "id": "363b2037-c58c-463f-b85e-220fe0edc608",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "c352c4ac-8c8f-457a-90d6-34697d28aa02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "363b2037-c58c-463f-b85e-220fe0edc608",
        "cursor": {
          "ref": "466a1e7f-288a-4b00-9cc4-a4831b15e7a2",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "26e89531-ff37-46ce-9d51-4a831c040049"
        },
        "item": {
          "id": "363b2037-c58c-463f-b85e-220fe0edc608",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "c352c4ac-8c8f-457a-90d6-34697d28aa02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65aff252-8890-47e0-85c5-0ba38b9caf55",
        "cursor": {
          "ref": "c89e53e7-c93e-4411-b87b-a029fe3db3c9",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "078119bf-4fce-41da-a010-ab70d3f26516"
        },
        "item": {
          "id": "65aff252-8890-47e0-85c5-0ba38b9caf55",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "e289f2f6-abb2-4f18-89bf-ced93bc576f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65aff252-8890-47e0-85c5-0ba38b9caf55",
        "cursor": {
          "ref": "c89e53e7-c93e-4411-b87b-a029fe3db3c9",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "078119bf-4fce-41da-a010-ab70d3f26516"
        },
        "item": {
          "id": "65aff252-8890-47e0-85c5-0ba38b9caf55",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "e289f2f6-abb2-4f18-89bf-ced93bc576f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c9661da-e137-4c62-90d8-3797641cd6d6",
        "cursor": {
          "ref": "bcf71d94-b5f7-4054-8b5b-6d90e18c6697",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "4faa2f70-6855-4044-bce5-f775fa1a8afe"
        },
        "item": {
          "id": "0c9661da-e137-4c62-90d8-3797641cd6d6",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "cc8ee474-c2bc-47b4-92a0-e2318b87b070",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c9661da-e137-4c62-90d8-3797641cd6d6",
        "cursor": {
          "ref": "bcf71d94-b5f7-4054-8b5b-6d90e18c6697",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "4faa2f70-6855-4044-bce5-f775fa1a8afe"
        },
        "item": {
          "id": "0c9661da-e137-4c62-90d8-3797641cd6d6",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "cc8ee474-c2bc-47b4-92a0-e2318b87b070",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d889f0d-0e49-4d6d-b63c-a5297fa2363f",
        "cursor": {
          "ref": "0b9099ac-e73f-4d26-83d9-9d78b9360f03",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "c5a41fcf-fa01-424a-a89a-ee4223df658e"
        },
        "item": {
          "id": "4d889f0d-0e49-4d6d-b63c-a5297fa2363f",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "3c690c79-8b2a-421d-89bf-6e209ecb1181",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d889f0d-0e49-4d6d-b63c-a5297fa2363f",
        "cursor": {
          "ref": "0b9099ac-e73f-4d26-83d9-9d78b9360f03",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "c5a41fcf-fa01-424a-a89a-ee4223df658e"
        },
        "item": {
          "id": "4d889f0d-0e49-4d6d-b63c-a5297fa2363f",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "3c690c79-8b2a-421d-89bf-6e209ecb1181",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e70711d-7f42-4ef5-9192-0df8bcfa61d2",
        "cursor": {
          "ref": "2aa26d01-6dbf-4717-96b2-2f8449e19c3a",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "083269fe-06a0-4e18-9214-14cc7ded2837"
        },
        "item": {
          "id": "4e70711d-7f42-4ef5-9192-0df8bcfa61d2",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "0b563bee-5311-46b9-9c87-4fa8af380797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e70711d-7f42-4ef5-9192-0df8bcfa61d2",
        "cursor": {
          "ref": "2aa26d01-6dbf-4717-96b2-2f8449e19c3a",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "083269fe-06a0-4e18-9214-14cc7ded2837"
        },
        "item": {
          "id": "4e70711d-7f42-4ef5-9192-0df8bcfa61d2",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "0b563bee-5311-46b9-9c87-4fa8af380797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95b4755f-cb63-486d-9566-67c7f1c024db",
        "cursor": {
          "ref": "4012b2aa-428a-409a-9e21-38aa54b93a92",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "77361d51-cc55-4239-9e08-73f7d3e12bc6"
        },
        "item": {
          "id": "95b4755f-cb63-486d-9566-67c7f1c024db",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "1549ed2f-dbcf-4f37-951e-413b640540c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95b4755f-cb63-486d-9566-67c7f1c024db",
        "cursor": {
          "ref": "4012b2aa-428a-409a-9e21-38aa54b93a92",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "77361d51-cc55-4239-9e08-73f7d3e12bc6"
        },
        "item": {
          "id": "95b4755f-cb63-486d-9566-67c7f1c024db",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "1549ed2f-dbcf-4f37-951e-413b640540c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89bce259-d05d-49af-8d06-6feda198192e",
        "cursor": {
          "ref": "8a8c1435-a833-4978-a74c-214d170d001e",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "3c87872a-db9b-420a-b90a-3552630148d1"
        },
        "item": {
          "id": "89bce259-d05d-49af-8d06-6feda198192e",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "fd07d59d-a04e-4ef0-ab76-fd5838c966df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89bce259-d05d-49af-8d06-6feda198192e",
        "cursor": {
          "ref": "8a8c1435-a833-4978-a74c-214d170d001e",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "3c87872a-db9b-420a-b90a-3552630148d1"
        },
        "item": {
          "id": "89bce259-d05d-49af-8d06-6feda198192e",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "fd07d59d-a04e-4ef0-ab76-fd5838c966df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0faf417-b2bc-4f11-8a51-b28d68746d10",
        "cursor": {
          "ref": "cf0afaee-4dbb-4ddc-a95f-84b5cf37c9a7",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "265048dc-e021-4a45-94ae-0c5a378bfc2a"
        },
        "item": {
          "id": "b0faf417-b2bc-4f11-8a51-b28d68746d10",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c985aa68-6980-49d2-b6d3-834cdd97e934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0faf417-b2bc-4f11-8a51-b28d68746d10",
        "cursor": {
          "ref": "cf0afaee-4dbb-4ddc-a95f-84b5cf37c9a7",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "265048dc-e021-4a45-94ae-0c5a378bfc2a"
        },
        "item": {
          "id": "b0faf417-b2bc-4f11-8a51-b28d68746d10",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c985aa68-6980-49d2-b6d3-834cdd97e934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4426941f-57d9-4e05-af03-cbf4b47a2ded",
        "cursor": {
          "ref": "8badfa88-094e-4f17-8e82-de1b480a5c1f",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "d3798374-338e-4590-bb36-48a92926ebe6"
        },
        "item": {
          "id": "4426941f-57d9-4e05-af03-cbf4b47a2ded",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "e697ec20-567e-4f9a-ab0e-d676c5fa6bd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4426941f-57d9-4e05-af03-cbf4b47a2ded",
        "cursor": {
          "ref": "8badfa88-094e-4f17-8e82-de1b480a5c1f",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "d3798374-338e-4590-bb36-48a92926ebe6"
        },
        "item": {
          "id": "4426941f-57d9-4e05-af03-cbf4b47a2ded",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "e697ec20-567e-4f9a-ab0e-d676c5fa6bd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d435adec-10af-4d0a-b761-ef43fcb9d68b",
        "cursor": {
          "ref": "e40531c5-84b9-463e-a4d1-31479877d8d6",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "6be53c33-4361-4d88-b28d-b76afe3ffb9c"
        },
        "item": {
          "id": "d435adec-10af-4d0a-b761-ef43fcb9d68b",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "e7d08889-74fb-4594-b09e-8a696557df1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d435adec-10af-4d0a-b761-ef43fcb9d68b",
        "cursor": {
          "ref": "e40531c5-84b9-463e-a4d1-31479877d8d6",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "6be53c33-4361-4d88-b28d-b76afe3ffb9c"
        },
        "item": {
          "id": "d435adec-10af-4d0a-b761-ef43fcb9d68b",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "e7d08889-74fb-4594-b09e-8a696557df1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a42ae14-b4ed-4ee9-8022-8a6543eb853a",
        "cursor": {
          "ref": "5963a060-f913-4154-8d53-7779d7ffa1e7",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "729bab2a-edc2-4463-99e7-7189899ff920"
        },
        "item": {
          "id": "3a42ae14-b4ed-4ee9-8022-8a6543eb853a",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "0b546be5-e7bb-47b5-a481-fbc82cd3ab1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a42ae14-b4ed-4ee9-8022-8a6543eb853a",
        "cursor": {
          "ref": "5963a060-f913-4154-8d53-7779d7ffa1e7",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "729bab2a-edc2-4463-99e7-7189899ff920"
        },
        "item": {
          "id": "3a42ae14-b4ed-4ee9-8022-8a6543eb853a",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "0b546be5-e7bb-47b5-a481-fbc82cd3ab1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b882b9f3-b6f8-42a3-823a-22d1bb4d41aa",
        "cursor": {
          "ref": "df243917-d2ce-4426-9fcb-73ef5becf84a",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c27fee04-96f8-4aab-b9a2-73cdf33df5a0"
        },
        "item": {
          "id": "b882b9f3-b6f8-42a3-823a-22d1bb4d41aa",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "f3eecec3-317a-42f4-8d54-89e101a32241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b882b9f3-b6f8-42a3-823a-22d1bb4d41aa",
        "cursor": {
          "ref": "df243917-d2ce-4426-9fcb-73ef5becf84a",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c27fee04-96f8-4aab-b9a2-73cdf33df5a0"
        },
        "item": {
          "id": "b882b9f3-b6f8-42a3-823a-22d1bb4d41aa",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "f3eecec3-317a-42f4-8d54-89e101a32241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ca97047-644a-4cb9-950a-d31d89531e54",
        "cursor": {
          "ref": "320a86e6-969b-40db-b4b1-4ec55c2bdd8b",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "aea926d4-4e44-4a59-99c5-c94a69af9e46"
        },
        "item": {
          "id": "3ca97047-644a-4cb9-950a-d31d89531e54",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "d73f36fc-d514-48a8-b2c4-a0d5e2b7d3b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 395
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ca97047-644a-4cb9-950a-d31d89531e54",
        "cursor": {
          "ref": "320a86e6-969b-40db-b4b1-4ec55c2bdd8b",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "aea926d4-4e44-4a59-99c5-c94a69af9e46"
        },
        "item": {
          "id": "3ca97047-644a-4cb9-950a-d31d89531e54",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "d73f36fc-d514-48a8-b2c4-a0d5e2b7d3b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 395
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33ad6aed-c856-4c70-baca-9463c76f1296",
        "cursor": {
          "ref": "340daad0-1947-46da-9a68-e75d29ed4e67",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "1328b7c5-bdd1-47e0-99fe-8af902235ce0"
        },
        "item": {
          "id": "33ad6aed-c856-4c70-baca-9463c76f1296",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "1430568e-b990-4a75-9094-958e50b01a1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33ad6aed-c856-4c70-baca-9463c76f1296",
        "cursor": {
          "ref": "340daad0-1947-46da-9a68-e75d29ed4e67",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "1328b7c5-bdd1-47e0-99fe-8af902235ce0"
        },
        "item": {
          "id": "33ad6aed-c856-4c70-baca-9463c76f1296",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "1430568e-b990-4a75-9094-958e50b01a1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3569980a-b1dc-4dd6-8619-80d062c78cc0",
        "cursor": {
          "ref": "4a64e0e8-4574-4ebf-8081-c1f641becf33",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "18ce6263-6d4e-46e6-b8a1-41e54e30526d"
        },
        "item": {
          "id": "3569980a-b1dc-4dd6-8619-80d062c78cc0",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "217e2f17-0f47-4a38-95cb-123da8090790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3569980a-b1dc-4dd6-8619-80d062c78cc0",
        "cursor": {
          "ref": "4a64e0e8-4574-4ebf-8081-c1f641becf33",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "18ce6263-6d4e-46e6-b8a1-41e54e30526d"
        },
        "item": {
          "id": "3569980a-b1dc-4dd6-8619-80d062c78cc0",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "217e2f17-0f47-4a38-95cb-123da8090790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e392138-028b-4b41-8a41-5b9d5c94f2eb",
        "cursor": {
          "ref": "d6eccbeb-8d90-43f7-b93e-46d7e83bf375",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d9b511e7-e96a-4c99-b9b1-6795692e7ebe"
        },
        "item": {
          "id": "5e392138-028b-4b41-8a41-5b9d5c94f2eb",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "11ceb9ee-681c-4f22-b930-77577d1a1c1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 372,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e392138-028b-4b41-8a41-5b9d5c94f2eb",
        "cursor": {
          "ref": "d6eccbeb-8d90-43f7-b93e-46d7e83bf375",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d9b511e7-e96a-4c99-b9b1-6795692e7ebe"
        },
        "item": {
          "id": "5e392138-028b-4b41-8a41-5b9d5c94f2eb",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "11ceb9ee-681c-4f22-b930-77577d1a1c1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 372,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aeda032-fea9-4515-bca2-42dedb3a4f5a",
        "cursor": {
          "ref": "fdeeb7c3-4b9c-4c25-a8fa-54bdfae82802",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "79aaf955-f8be-4ca1-8a54-d2b50d06f730"
        },
        "item": {
          "id": "9aeda032-fea9-4515-bca2-42dedb3a4f5a",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "85d23ff7-b8a3-437e-945f-6ede122540d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aeda032-fea9-4515-bca2-42dedb3a4f5a",
        "cursor": {
          "ref": "fdeeb7c3-4b9c-4c25-a8fa-54bdfae82802",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "79aaf955-f8be-4ca1-8a54-d2b50d06f730"
        },
        "item": {
          "id": "9aeda032-fea9-4515-bca2-42dedb3a4f5a",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "85d23ff7-b8a3-437e-945f-6ede122540d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2fa2370-f52e-432a-a54c-30d6a53d6df4",
        "cursor": {
          "ref": "eaf69de4-9369-4889-b63b-9ccd9f2f2ad9",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "8d22661b-4b1f-4c7e-a407-5e706ff06073"
        },
        "item": {
          "id": "f2fa2370-f52e-432a-a54c-30d6a53d6df4",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "c5174176-39af-4e8a-a004-4598aeef084d",
          "status": "Created",
          "code": 201,
          "responseTime": 798,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "f2fa2370-f52e-432a-a54c-30d6a53d6df4",
        "cursor": {
          "ref": "eaf69de4-9369-4889-b63b-9ccd9f2f2ad9",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "8d22661b-4b1f-4c7e-a407-5e706ff06073"
        },
        "item": {
          "id": "f2fa2370-f52e-432a-a54c-30d6a53d6df4",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "c5174176-39af-4e8a-a004-4598aeef084d",
          "status": "Created",
          "code": 201,
          "responseTime": 798,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "e0d17c30-32a3-45d4-84af-9e4bc8b75c7a",
        "cursor": {
          "ref": "19ff6068-3bee-4f46-b7d4-8d5c62fa4565",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "df75d7b5-c5b7-4a0c-b07c-c0e8fc830eb8"
        },
        "item": {
          "id": "e0d17c30-32a3-45d4-84af-9e4bc8b75c7a",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "68fb9b90-7f45-4846-9304-285c39cad13d",
          "status": "Created",
          "code": 201,
          "responseTime": 371,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "e0d17c30-32a3-45d4-84af-9e4bc8b75c7a",
        "cursor": {
          "ref": "19ff6068-3bee-4f46-b7d4-8d5c62fa4565",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "df75d7b5-c5b7-4a0c-b07c-c0e8fc830eb8"
        },
        "item": {
          "id": "e0d17c30-32a3-45d4-84af-9e4bc8b75c7a",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "68fb9b90-7f45-4846-9304-285c39cad13d",
          "status": "Created",
          "code": 201,
          "responseTime": 371,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "15e22a94-3c88-4a80-bfa0-97bf6b7d6bfc",
        "cursor": {
          "ref": "bdbd01b9-a78e-41c5-b079-8e50352568d6",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "3ac49740-657f-4a17-a0da-fad762c000a9"
        },
        "item": {
          "id": "15e22a94-3c88-4a80-bfa0-97bf6b7d6bfc",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "090b7a52-87b0-4213-8f8c-7d9b922e7ddb",
          "status": "Created",
          "code": 201,
          "responseTime": 342,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "15e22a94-3c88-4a80-bfa0-97bf6b7d6bfc",
        "cursor": {
          "ref": "bdbd01b9-a78e-41c5-b079-8e50352568d6",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "3ac49740-657f-4a17-a0da-fad762c000a9"
        },
        "item": {
          "id": "15e22a94-3c88-4a80-bfa0-97bf6b7d6bfc",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "090b7a52-87b0-4213-8f8c-7d9b922e7ddb",
          "status": "Created",
          "code": 201,
          "responseTime": 342,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "b39aa9ed-6df8-4661-84a6-ed69cabb8462",
        "cursor": {
          "ref": "5e7171e7-9132-4414-9290-92419e35528f",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "c8307d4d-6c9b-4c12-b62c-21b16dbe6feb"
        },
        "item": {
          "id": "b39aa9ed-6df8-4661-84a6-ed69cabb8462",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "249dd56c-c4ba-43fc-ba41-5dcd9751d0f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b39aa9ed-6df8-4661-84a6-ed69cabb8462",
        "cursor": {
          "ref": "5e7171e7-9132-4414-9290-92419e35528f",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "c8307d4d-6c9b-4c12-b62c-21b16dbe6feb"
        },
        "item": {
          "id": "b39aa9ed-6df8-4661-84a6-ed69cabb8462",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "249dd56c-c4ba-43fc-ba41-5dcd9751d0f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9618e3c8-af57-4f38-a568-f482b62d7cf4",
        "cursor": {
          "ref": "fcd9fa2f-1fe2-42a6-9231-a3103686f45a",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "f9f17537-e597-474b-b3b5-18758a26f975"
        },
        "item": {
          "id": "9618e3c8-af57-4f38-a568-f482b62d7cf4",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "0076e3eb-5edf-4801-8571-d5c56a8e7964",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9618e3c8-af57-4f38-a568-f482b62d7cf4",
        "cursor": {
          "ref": "fcd9fa2f-1fe2-42a6-9231-a3103686f45a",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "f9f17537-e597-474b-b3b5-18758a26f975"
        },
        "item": {
          "id": "9618e3c8-af57-4f38-a568-f482b62d7cf4",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "0076e3eb-5edf-4801-8571-d5c56a8e7964",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1b91b80-705b-4b3a-ba72-17b6a1e5cf4b",
        "cursor": {
          "ref": "34cc96fc-d096-4997-87dd-5179ea4fcdfa",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "be9e096a-1d57-4e5d-b92b-9d9838486c43"
        },
        "item": {
          "id": "b1b91b80-705b-4b3a-ba72-17b6a1e5cf4b",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d4d0ebe7-0079-486a-97c8-698bac2f13df",
          "status": "Created",
          "code": 201,
          "responseTime": 361,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1b91b80-705b-4b3a-ba72-17b6a1e5cf4b",
        "cursor": {
          "ref": "34cc96fc-d096-4997-87dd-5179ea4fcdfa",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "be9e096a-1d57-4e5d-b92b-9d9838486c43"
        },
        "item": {
          "id": "b1b91b80-705b-4b3a-ba72-17b6a1e5cf4b",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d4d0ebe7-0079-486a-97c8-698bac2f13df",
          "status": "Created",
          "code": 201,
          "responseTime": 361,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "6daea085-2312-44ec-949b-906eadee7c7e",
        "cursor": {
          "ref": "723edcf7-0c40-4eaa-80e1-aee0900847bd",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "eabc7f80-3f31-472f-99d6-a339bbe2a51d"
        },
        "item": {
          "id": "6daea085-2312-44ec-949b-906eadee7c7e",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "e185de9c-2ca1-4872-9d72-1c68656cf1af",
          "status": "Created",
          "code": 201,
          "responseTime": 388,
          "responseSize": 671
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "6daea085-2312-44ec-949b-906eadee7c7e",
        "cursor": {
          "ref": "723edcf7-0c40-4eaa-80e1-aee0900847bd",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "eabc7f80-3f31-472f-99d6-a339bbe2a51d"
        },
        "item": {
          "id": "6daea085-2312-44ec-949b-906eadee7c7e",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "e185de9c-2ca1-4872-9d72-1c68656cf1af",
          "status": "Created",
          "code": 201,
          "responseTime": 388,
          "responseSize": 671
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "b12f5fa5-52f9-420d-a7c6-f662e8cf424d",
        "cursor": {
          "ref": "205c1ccc-f5fe-40d9-9e66-8d4ac3cd656b",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b9a24b39-2763-40a5-bc04-9e8ed1a5afb6"
        },
        "item": {
          "id": "b12f5fa5-52f9-420d-a7c6-f662e8cf424d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d517956f-f3a0-48f0-b11e-d1872f9f097d",
          "status": "Created",
          "code": 201,
          "responseTime": 344,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b12f5fa5-52f9-420d-a7c6-f662e8cf424d",
        "cursor": {
          "ref": "205c1ccc-f5fe-40d9-9e66-8d4ac3cd656b",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b9a24b39-2763-40a5-bc04-9e8ed1a5afb6"
        },
        "item": {
          "id": "b12f5fa5-52f9-420d-a7c6-f662e8cf424d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d517956f-f3a0-48f0-b11e-d1872f9f097d",
          "status": "Created",
          "code": 201,
          "responseTime": 344,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e04cc63a-476d-4b1f-b700-3dec344584fc",
        "cursor": {
          "ref": "1d3c2a6e-217b-481b-b6a9-e842e5064ace",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "1c493e55-9361-445b-9739-69a0819003a8"
        },
        "item": {
          "id": "e04cc63a-476d-4b1f-b700-3dec344584fc",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "8bd26518-815d-4b9c-9b9d-8bb64ccf83b2",
          "status": "Created",
          "code": 201,
          "responseTime": 382,
          "responseSize": 603
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "e04cc63a-476d-4b1f-b700-3dec344584fc",
        "cursor": {
          "ref": "1d3c2a6e-217b-481b-b6a9-e842e5064ace",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "1c493e55-9361-445b-9739-69a0819003a8"
        },
        "item": {
          "id": "e04cc63a-476d-4b1f-b700-3dec344584fc",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "8bd26518-815d-4b9c-9b9d-8bb64ccf83b2",
          "status": "Created",
          "code": 201,
          "responseTime": 382,
          "responseSize": 603
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "e640d7ad-e563-4548-9668-0570dc9f7b5e",
        "cursor": {
          "ref": "bb22c02a-104c-4b24-bb2d-dcc5eeeeed58",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "4061421d-384c-4509-8f81-c84c8247cacf"
        },
        "item": {
          "id": "e640d7ad-e563-4548-9668-0570dc9f7b5e",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "8b312bd8-ea1f-499f-903c-566305d801f5",
          "status": "Created",
          "code": 201,
          "responseTime": 359,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e640d7ad-e563-4548-9668-0570dc9f7b5e",
        "cursor": {
          "ref": "bb22c02a-104c-4b24-bb2d-dcc5eeeeed58",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "4061421d-384c-4509-8f81-c84c8247cacf"
        },
        "item": {
          "id": "e640d7ad-e563-4548-9668-0570dc9f7b5e",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "8b312bd8-ea1f-499f-903c-566305d801f5",
          "status": "Created",
          "code": 201,
          "responseTime": 359,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c1c18d2-05aa-49e2-a0e0-cba3cb3986fb",
        "cursor": {
          "ref": "57c7f29b-62ab-49e5-bad6-24a847e34638",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "61b64514-588a-42b4-9d1d-12bfe58e1f86"
        },
        "item": {
          "id": "4c1c18d2-05aa-49e2-a0e0-cba3cb3986fb",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "7781cd40-bcbd-4164-96fb-b2cde1717f26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "4c1c18d2-05aa-49e2-a0e0-cba3cb3986fb",
        "cursor": {
          "ref": "57c7f29b-62ab-49e5-bad6-24a847e34638",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "61b64514-588a-42b4-9d1d-12bfe58e1f86"
        },
        "item": {
          "id": "4c1c18d2-05aa-49e2-a0e0-cba3cb3986fb",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "7781cd40-bcbd-4164-96fb-b2cde1717f26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "71884d38-cd6b-434e-a7f3-20e3cc1bbfe0",
        "cursor": {
          "ref": "cf58ebe6-5171-46b1-adc3-d17fabb1dbf5",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "1c04ea03-7481-4173-9f9b-5049673a4251"
        },
        "item": {
          "id": "71884d38-cd6b-434e-a7f3-20e3cc1bbfe0",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "caebe6fc-1fd0-426b-b68a-48b4d7ab0e25",
          "status": "Created",
          "code": 201,
          "responseTime": 355,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "71884d38-cd6b-434e-a7f3-20e3cc1bbfe0",
        "cursor": {
          "ref": "cf58ebe6-5171-46b1-adc3-d17fabb1dbf5",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "1c04ea03-7481-4173-9f9b-5049673a4251"
        },
        "item": {
          "id": "71884d38-cd6b-434e-a7f3-20e3cc1bbfe0",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "caebe6fc-1fd0-426b-b68a-48b4d7ab0e25",
          "status": "Created",
          "code": 201,
          "responseTime": 355,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "1c6b1366-ea46-4bed-9b63-991e0730b2fb",
        "cursor": {
          "ref": "31b5c8c5-9c26-4de5-b88c-31cead068ee1",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "4cdcf9a2-1b9a-4bb9-9e70-1a98e48fbce1"
        },
        "item": {
          "id": "1c6b1366-ea46-4bed-9b63-991e0730b2fb",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "517341f9-02e4-4eb5-b772-eea18447f52c",
          "status": "Created",
          "code": 201,
          "responseTime": 344,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "1c6b1366-ea46-4bed-9b63-991e0730b2fb",
        "cursor": {
          "ref": "31b5c8c5-9c26-4de5-b88c-31cead068ee1",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "4cdcf9a2-1b9a-4bb9-9e70-1a98e48fbce1"
        },
        "item": {
          "id": "1c6b1366-ea46-4bed-9b63-991e0730b2fb",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "517341f9-02e4-4eb5-b772-eea18447f52c",
          "status": "Created",
          "code": 201,
          "responseTime": 344,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "6d60734a-bf2f-4081-a1fe-8b943c63e270",
        "cursor": {
          "ref": "45743b7c-05fb-4bc2-b673-c2f62ebf6b3e",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "63b64185-152b-4fbb-8e9a-0aa6f785258d"
        },
        "item": {
          "id": "6d60734a-bf2f-4081-a1fe-8b943c63e270",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1dda2ced-de2e-4f5c-bed3-10bdbfed4423",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 69,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d60734a-bf2f-4081-a1fe-8b943c63e270",
        "cursor": {
          "ref": "45743b7c-05fb-4bc2-b673-c2f62ebf6b3e",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "63b64185-152b-4fbb-8e9a-0aa6f785258d"
        },
        "item": {
          "id": "6d60734a-bf2f-4081-a1fe-8b943c63e270",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1dda2ced-de2e-4f5c-bed3-10bdbfed4423",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 69,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e95a955-10b8-4d4b-b026-051eb4585526",
        "cursor": {
          "ref": "d50b3b18-4195-49dd-afdb-bfad32d72200",
          "length": 58,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "c0a76eab-4b56-41a2-9f1c-19515f26a1fc"
        },
        "item": {
          "id": "1e95a955-10b8-4d4b-b026-051eb4585526",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "d7b68fa5-1719-404d-8e14-bf70aa54d213",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dbf01b9-aee8-4f43-ae81-cb662b5845b9",
        "cursor": {
          "ref": "482fc45c-43af-4883-8d39-4028cb3f9116",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "409cf14f-9567-422b-9da0-8de45039f5ce"
        },
        "item": {
          "id": "1dbf01b9-aee8-4f43-ae81-cb662b5845b9",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "c7fa2308-a0fa-4b99-aa2a-bda5f5495c63",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dbf01b9-aee8-4f43-ae81-cb662b5845b9",
        "cursor": {
          "ref": "482fc45c-43af-4883-8d39-4028cb3f9116",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "409cf14f-9567-422b-9da0-8de45039f5ce"
        },
        "item": {
          "id": "1dbf01b9-aee8-4f43-ae81-cb662b5845b9",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "c7fa2308-a0fa-4b99-aa2a-bda5f5495c63",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7602bf57-fd52-4cbf-9a06-0a9514fb867d",
        "cursor": {
          "ref": "834c95ed-9b8a-49a5-863e-818e69068aef",
          "length": 58,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "61c08f50-fb32-4fb6-bd20-1e9d08ac8990"
        },
        "item": {
          "id": "7602bf57-fd52-4cbf-9a06-0a9514fb867d",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "6ee464d5-e170-4f66-b465-daa76834d46d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b31dcff6-69e2-48e4-84e7-81a763fc4550",
        "cursor": {
          "ref": "676447cf-1ccd-469c-b3cb-b7f28be029bf",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "5eb96f00-8614-4ce7-b7cf-d73bbd425a31"
        },
        "item": {
          "id": "b31dcff6-69e2-48e4-84e7-81a763fc4550",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1c8deae4-778a-4d44-9b55-d9b95ef77a3c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b31dcff6-69e2-48e4-84e7-81a763fc4550",
        "cursor": {
          "ref": "676447cf-1ccd-469c-b3cb-b7f28be029bf",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "5eb96f00-8614-4ce7-b7cf-d73bbd425a31"
        },
        "item": {
          "id": "b31dcff6-69e2-48e4-84e7-81a763fc4550",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1c8deae4-778a-4d44-9b55-d9b95ef77a3c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e415bff-529d-41e3-8949-75cd16111340",
        "cursor": {
          "ref": "0ae81bbd-533e-48ba-b774-73ef2d0efb84",
          "length": 58,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "bb4bec84-0250-403d-8e6a-1ef59eda2294"
        },
        "item": {
          "id": "2e415bff-529d-41e3-8949-75cd16111340",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "b94ad482-4016-4dad-9d73-5523d42d3dc2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75f2da0b-936e-4b73-9f7f-1ea58abeb508",
        "cursor": {
          "ref": "e9229528-31a1-4256-a5df-c71affbdfd63",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "2e61457d-2fda-43e1-89b4-c5c3cf2184b3"
        },
        "item": {
          "id": "75f2da0b-936e-4b73-9f7f-1ea58abeb508",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d7dcd21b-499f-4a00-a33d-0af475c60a44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "75f2da0b-936e-4b73-9f7f-1ea58abeb508",
        "cursor": {
          "ref": "e9229528-31a1-4256-a5df-c71affbdfd63",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "2e61457d-2fda-43e1-89b4-c5c3cf2184b3"
        },
        "item": {
          "id": "75f2da0b-936e-4b73-9f7f-1ea58abeb508",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d7dcd21b-499f-4a00-a33d-0af475c60a44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "5b9baf3f-b0a7-4ab6-a4dd-b0fe04f01874",
        "cursor": {
          "ref": "686454c9-1787-4c5f-907c-13468118da09",
          "length": 58,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "2e7229c4-4df8-4b64-81f0-1ab998f7ab2e"
        },
        "item": {
          "id": "5b9baf3f-b0a7-4ab6-a4dd-b0fe04f01874",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "7120f50e-655c-4b4c-a7cd-275a7ef9d59f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "b425fefc-a4a1-40ed-90af-cab4f070034e",
        "cursor": {
          "ref": "3d5b56d9-b4f4-4905-b5cd-853fa93240ec",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "bfd6e15b-6496-42b4-aa32-0a1cec80ae1a"
        },
        "item": {
          "id": "b425fefc-a4a1-40ed-90af-cab4f070034e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ab42950d-7c30-4d08-be51-45ad7891392c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b425fefc-a4a1-40ed-90af-cab4f070034e",
        "cursor": {
          "ref": "3d5b56d9-b4f4-4905-b5cd-853fa93240ec",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "bfd6e15b-6496-42b4-aa32-0a1cec80ae1a"
        },
        "item": {
          "id": "b425fefc-a4a1-40ed-90af-cab4f070034e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ab42950d-7c30-4d08-be51-45ad7891392c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f11cd0d-d581-49fc-9f98-12ac8c7d1693",
        "cursor": {
          "ref": "d7f5343b-2f71-457a-a7f2-09cd2e364725",
          "length": 58,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "c22fe2ad-85c1-4281-8807-922ff0bd3060"
        },
        "item": {
          "id": "0f11cd0d-d581-49fc-9f98-12ac8c7d1693",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "65e082c6-2bf8-4fc7-bafe-a804c21feff3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}