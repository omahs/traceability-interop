{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "fb197d5f-03bf-43ce-8af6-6bac5ecdad5e",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "54dc2a20-06a8-4bae-bec9-23b492f056d6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "807b4b6b-7d7f-4d52-bcae-50593ce91fad",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e1ac31b9-c135-4557-939f-7a2255455204",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "eb3c7488-bd4f-4716-bbbd-642cfbdb3ab9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "a98dd066-a53d-49d9-bc1c-635d42670948",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "d6629527-3023-4d17-aa6c-40fc113135a1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5477658e-ab83-479e-90fc-9043d21f75e0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "10dc6977-399a-4a4d-b0fb-cad42707c4fa",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b326ff9-bae5-4ee4-b68c-49c7dde46af4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e71720a5-eabb-474b-b4ea-b7dd84f6f4d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f408c3e-8c6d-4335-820d-7fbcc5b67a2e",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e903fca8-281d-4380-ac7f-6193ce34eab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0140434e-a1c4-47f4-9d43-75cc75171ccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "460dfe8f-b2f8-4019-b0e0-bbff28cc08f1",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "330e2dfe-d092-4d41-9e49-b142796a6399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "146bd148-a500-4697-b727-ebceb745f79d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b6bdb11a-f2b4-483e-8cc4-185eb3403d20",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2489ac7c-212f-48ca-b3e0-c429aedd0573",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5170005-a470-45c5-ad37-0341282d2835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "13573d09-891b-4ffe-92c1-ca4fdc376eae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f25427dc-539c-4e6a-96a5-7cab90aecc5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf3858b3-2e0d-4d7e-8976-4a15a952655a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "313d766a-9b3f-4308-85c1-0d9d71f8c4e3",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaae15bd-683a-4185-821c-c3e3faeb4833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dd469fba-4641-4be7-9d98-0fc0bba52bbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7330f2b-cff0-435a-8816-d09ff609ac35",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "d2e1f813-d023-40a0-a213-caf222b2b970"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "cae31394-ae4c-4f9b-ac34-b7657237229f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "33efdffa-45d1-4ebc-b896-462255df3aa4",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "11ea00cf-d5c3-4c12-9ee2-0767d4cf370f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "9b3fcabc-c92d-4262-a23a-8173825190c8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "793ec599-655a-4beb-a464-0cbf9210564b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "0fe5ab8c-ac9a-40b7-a61d-3fb34d530c7b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6403d828-a4c7-4a4a-a97a-db35607c9617",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b1ebfda8-f45e-4c98-af29-6c5aca5d3cf7"
            }
          }
        ]
      },
      {
        "id": "b677cb12-d612-4c04-8995-a092adc8b70a",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "004af51c-7f20-4424-88df-9dc8e217588a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "920ab2d1-27b0-4858-a340-5922d81f4cde",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "5670b2a5-1a23-450e-9be8-bdeb4d6fa046",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4481d7e1-eeee-4e1e-9281-e89408985c9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72df0207-e6cf-42d0-84bc-030ffd3f44c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "649fa88e-971f-4879-86cf-5da48ac7d1d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e2dcf95-4abf-4988-8703-4ea9477d8ec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "383a2c18-c4ab-4261-82da-0fddf02cd847",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63a31b13-e15d-473c-aacb-70efeca5e2cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b58132e-3124-4f7a-afc7-d7d7665d6fbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad7e9ece-4f55-4a33-9baa-8b1f3985c878",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffbdc1bf-6272-4e59-8b8e-00bcbeff11da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb901d10-2f40-42aa-9b15-c40369d325aa",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70467b6d-b670-4470-a8e5-cea371c55711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8bccec4-af9e-473b-9353-b6d86dad5b7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cc96afc-d355-4fee-995c-22184248a1b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c5dd051-aa8c-4458-9e54-2c7d4b204a4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc8c188d-07c7-4a8d-9718-469d2559eb1a",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db0d196-8491-41f8-b388-9c45212108e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2df56ccd-1dfc-49e5-9634-43beca1b0dc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebc89b94-3a9a-40cb-82e9-8786976cbe75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8316906a-f816-4cfe-9004-3ff0d86df16d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0575191-224a-4605-8b20-bbcf39c5c8c3",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d300d47e-d368-4485-9c03-dd4ccbf7c808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caf91637-69e1-4c47-ba1f-999354527d34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e64eaedb-0cc5-4e3f-b551-29936beb92f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2463c1e6-56f0-4ce2-9b8a-3a8139ef01b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e7ecacb-9536-4fdb-9cfe-f4f772f022f9",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "369747d3-f96a-4347-9485-5005075bc497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f628fbf4-d375-4e4b-8036-04944ce7effb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1985e9d0-37f4-4366-9938-c5dcc9ddcb48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f29334ad-0d92-40a0-85eb-f467a1b7fecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2d3df80-d242-422f-9801-2426ef358c0f",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e502b54-b162-4f42-929a-a9fc22791545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cac1dede-e8e9-4004-97cb-c60d5088c727"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db97aa0c-9bc4-4f25-b61d-76cbb1baf477",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc3f1eb5-15eb-432d-997a-c6c624386371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0aaec4e-61ca-400d-9706-b865e6d7ac62",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37839a37-2b1a-44d3-843d-3905fe006f88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e50e748b-2c8f-4382-baa1-616f0efd924a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9c1e5be-5c98-4895-acd9-2b7577cc1f68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfcec728-f470-4fa9-8ef4-058b3639ebb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6edd9ae2-1c58-411d-a0cd-64562f6ed125",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4ba9a92-6b2a-4477-a07e-a2dfd29267f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c053cb1-6128-47ee-b33a-ffe8fff1ae1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59e8cc14-a983-41e6-a643-d1fc64e34eb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88ea4408-2e6b-4457-9f27-91ba4a99cefd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8a84334-ed40-425d-b979-500254d131c0",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24377e66-bb5d-468c-97d7-7812fa6cd6c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b751aa4-7bc9-4fed-9a9d-2371adbf74af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a42147e-4aa7-406f-87fb-4ec93d4d550f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "368c8b09-cfa2-4d90-906d-83674de994da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cc563a0-8fce-487b-b99f-1e491c6962a5",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a073ae83-5300-44d6-9758-ae1f3ec47585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cb56f2a-f211-4f03-af01-900f774e7b0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b124d9b8-fe6f-49b2-bde2-09fa3c937b50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "79f6fb5e-702a-4748-a2d1-ccc13f726c59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "346e5f77-8373-4e30-a9f3-cd55c49c1100",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "110208a5-3c8c-4711-bdfd-2fe10d95d42f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90622fb5-7382-4b3a-ae51-b693e7aa580f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0378b27-207a-4aa7-ad6c-893d6ad1fdb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "7a2ab20b-8a8c-4a2d-b19e-25c9bc499cdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55e5ce8c-6d42-4538-8a19-3bee7998e4af",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84b98a1d-534d-4685-bccb-7cb28a09ff25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78fecce2-dd53-4444-a464-45ee0cdf4c5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e0614b3-a3cd-46cd-83e9-8e9cb451cf54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff702d08-6c40-4850-9fa2-c2bb01c3fbcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82167a27-6ea7-42e0-a0f2-6d14866cfa82",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5db618d-c2f6-4c96-96cb-062414005740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aece831-5810-4d11-9796-b21fa978fc5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33890252-fef1-4cf7-95de-20b3dd1c87a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34558d97-e8d5-4537-84f4-95073d26ade3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88b7395d-0727-4eae-9a66-b54cec4619a0",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e989cf0-ba1b-4939-90f4-ce81abd646fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "697d09b6-329a-4659-b676-7fc32c192bf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f55ed7c-53b6-4a61-91e3-f3ae953a1192",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "2f570e7b-9203-4e15-80cd-e638381ce0ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c505a04-be54-4c0f-b1b7-eba4c10ce533",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49648379-664c-4813-bb24-d8be98e98a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6e5e44a-857d-471a-ae20-5fa2f8591b6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e763617d-f40e-4fa4-8f57-aa95c9514246",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "361400bf-7f33-441c-9fbe-a30e55af781a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57792ea2-58f9-4379-aa85-08a7552d215a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dd664b7-2009-4412-92b4-4928f94c16de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e140f068-7e89-4653-a4d1-0761f15f1ed1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba50fdf2-101a-43c2-a848-c402dfffe1b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62afa21d-98ba-49f3-bdc9-3ea4a920eef4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57618ace-8a15-4fb1-9f43-7c49f5e9bab5",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ca96dcd-a4d1-4b84-a350-8b67683c2eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d17361eb-7238-4410-b77c-b250a96b650e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1e37344-0a05-4985-8a4a-05e2bdecd214",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a45960c-e017-4213-b76e-0054cfaf2fae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "958218d0-7711-49dc-83a3-990869ef1283",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c29ee39-5e4e-4ac4-9128-d5bcc2901e5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a45618f8-d97f-41dc-9eb8-a3fa56731cb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4552305-8dda-42f7-826d-369bd520b6bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14f2fde6-881a-4c9f-a2c8-966ec9d441c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d4bb863-0843-4928-9d13-397d8cbd86ad",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10f53ff1-8676-4d1a-bdf3-9d0d817f842e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dada59a-33ea-4029-b065-cc42b1cec847"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca925350-e64f-40ff-88ee-644197537405",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd297332-dd69-4302-84b5-8db4def6c128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85c35246-6d7c-4377-8a4d-0bc02ac95cac",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "207a56be-6456-4f15-bc5e-84edda98fd1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1f1e4ba-86a4-420e-86bc-a290ce2d81d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e329f749-ca6a-4802-b958-2f86d6e453b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3c848a6-d7e3-450c-ab14-c8ae20b39979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fabf75f-2102-493f-b17a-886c514fec5f",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0d6b302-d06c-4bc2-a547-4a973f11bfc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21050718-fe47-4751-8308-6a585b4c2bb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdf0d86a-4188-4c7f-b8d8-f68ce8f28642",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80e94e2b-4ead-4a50-9608-1b0fff2dae95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6991f87f-44f2-4413-8e92-a5e60aea5a08",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcd3a06b-8e7e-4768-af1d-e48422852a07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72512a74-c722-4eba-9ed2-a882d47b1a3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0b63d6b-6c9c-406d-9d28-deb5ef7c2e30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1092c092-1df8-435c-8f28-27bd84760eb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc90ea37-6579-4945-a0e2-7880d88d0f19",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13709735-dab2-47e8-8aac-63e7d72e4a31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fe3aa66-ce19-4903-b5d7-697e3c9dc529"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14b5d978-60d5-42fa-9b32-ecb1b7b155d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44fa41bd-f968-4dd3-8439-71756ccea447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "343c197b-986a-43a6-a6c8-79472cf05e73",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a34c95a4-9b2c-43da-8a76-40ce68ca21fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "190d5dd3-f972-49d9-b6e6-3dff3a23aa9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "660a7d8c-e469-4270-bb16-64c149914a0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3817a8c-134a-49ec-98ea-7f29dbe590cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cd595d3-335e-442a-9eaf-ec6162eb040b",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84ecf759-e922-4506-b3ac-dc03eb81d539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82ed9d41-ae7c-4d17-bb38-68c4e97db7f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1bc8500-6081-4edc-b8f3-e7c8d3894d33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2560628-a4d7-4739-8054-a6461380105a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2259d136-8114-4596-99ff-2bd46ba8f37a",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e163f1-7064-4708-9683-5004eedea7c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a4dbf60-88d0-45a5-ad21-27d1507860f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7008a28-daf9-49ab-b69a-eabc4959a45d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd9b798c-bd7c-4740-a3b0-ff72b7f4765f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ce0df19-a072-4dbe-b45d-9228d4ff2216",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "985c6a2e-24f2-40de-8750-08e61be0e568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34acad33-24ce-4037-9ccd-821906bac544"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c3d33e7-a24d-461a-a37f-3eadcbfa0e1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07edb104-f51b-48b3-9eba-feb28aa6ccb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1ca3a6d-6af2-4fad-be42-fa2bfd245df7",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c22e8e04-126d-40e2-b7fa-9c0189941f03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd17e4ef-f06c-4146-b238-f127062bbcc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6c852ea-43a8-41b0-b08b-3369a55ce95f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfea1bf6-3c42-46dd-9195-7e37e53669c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36aee030-6455-4e99-b4af-30c6ed76df86",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47f77b0c-2dce-476b-8ff9-358c9ce603ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36e08e7a-6156-405b-b473-ba7c1bde10bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05841113-48dd-4850-b66d-5e92d11b5512",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75a751c5-083d-4f44-acb8-a42fd066d2cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f50a6604-cc39-422a-82bc-9c6c2734059b",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4111cdea-2929-458a-b6e6-1703ba929d87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "a52dc7c0-1181-4f2d-a643-fa56f9717233"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da405574-de60-4c41-99c9-e962d4f47031",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3b0892d-fbd4-4c90-bc60-fd9664dad574"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5b610be3-bc3c-4e37-9dea-564c985430ab",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d9e9c407-2877-4e3f-ad93-e9148b74bafd",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9970a53c-956a-440f-8cb1-db4e0801fa19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8cb5dbb7-a05e-4e04-b362-9e3c5c43040a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5bba8dd-8f53-4df7-9f8e-78318846d2be",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "19f45203-0615-4cd2-97b2-5ba32b823fbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efa9ab03-fd99-444e-8710-cb148bff1c71",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bb46dc7-3f8b-4550-af86-7e6af7702400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "88e6655c-f73f-48bf-b4c4-b693211e5592"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13544328-7763-4650-a6f2-5c6a96f8dd13",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "d5ad2538-d676-4a9f-8476-096d09d83044"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b7a86e6a-6951-4b2c-961f-6f11829259b9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ffa88d5f-97bd-4b61-ab30-ca328969ac7a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "129afdb9-7721-4308-99c7-ceff57bbfa0f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0cefc9de-e691-4168-b192-b04949cb7645"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "15bfcddb-2013-419a-b382-36521fcf6e60",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "628a20a0-4211-4736-b045-f632eee936af"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e7593be7-5c7f-435b-ad10-45a21dc90c4b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4029c922-7147-4983-b077-24140fbc7594"
                }
              }
            ]
          },
          {
            "id": "0735780d-f004-492a-86d5-32f137afd0a9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "aedbc31e-f8f7-46bd-90ad-f297eb484d97",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ecc476fb-c4b6-4d43-8fdf-f3838499953f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ca12acaf-bcae-423e-8fef-2a3cca6b9ab3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5af929e0-aff0-418b-80eb-eb77e80753cf",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "7d6832db-5ea9-405b-b2b9-f36da4b7da30"
                    }
                  }
                ]
              },
              {
                "id": "42631d9a-bd05-4595-a5d9-89faebfed295",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "54120886-89eb-4bf9-b1f5-c021dd939fb3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "53eb920f-b254-4fbb-b87f-4e27a159ab31"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bca569b3-06b3-4acd-8c47-4c2c14032952",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "a571afc8-716f-419a-a319-2a5a4871fb7d"
                    }
                  }
                ]
              },
              {
                "id": "9bbbe86d-3a3b-48be-b798-1883cf5809b1",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b0298a9c-370d-4a6c-8cc8-215d4e7a443e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3b10d58f-406b-4d0e-af97-bc900ee5a0c0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7238c018-71ce-4c50-b372-6ddbfa10e842",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "d79b15d5-fd5d-44c7-8616-a9ff6af0b2be"
                    }
                  }
                ]
              },
              {
                "id": "d4582c24-c335-44b9-af21-02984df7bb1a",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "819f549b-91df-4022-842e-383c8b9fdf4b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "338bdd47-69f1-45c2-b04f-30abda9453b9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "abf06670-bc5d-4374-af88-09745f7c1e57",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "4c27c065-a0d6-41ca-b239-4ed83dd354b3"
                    }
                  }
                ]
              },
              {
                "id": "d352ca64-c3f6-4207-8b9a-8be3a9423462",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "539fd06e-1e98-46b0-88b3-200e52bd648e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof credentialSubject === 'string') {",
                        "  pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        " } else {",
                        "  pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        " }",
                        "});"
                      ],
                      "_lastExecutionId": "ac6f9792-1d90-4e4d-b3ac-33bcc8641ad2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "52eb2556-fbbb-4b41-a535-818a4daab2ef",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "f4004481-1bc7-4dd6-a24a-68b26dad4d3f"
                    }
                  }
                ]
              },
              {
                "id": "f583b3b1-5d4a-4460-9048-44e94e45e8ba",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ab01a0a-bdcd-4416-a54d-1f7f4d601082",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9106c8ef-0daa-47ea-a896-d23ee293fcf6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "05c246ec-8eb0-4f45-92fa-185f11eb8cda",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "6486dfe2-eb54-463f-ab80-6d95de5e05d5"
                    }
                  }
                ]
              },
              {
                "id": "0b9095bc-9e8a-4acb-827e-0b27f6aff4d0",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cf583181-4cf2-4a6d-afe7-3f9f52b39246",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4307a902-fd07-4156-afb3-4b199df27935"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c61f7c23-8727-4799-bbbe-e3e05a0ad747",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "f6c007b7-4499-497a-aa4a-367ecc3051a8"
                    }
                  }
                ]
              },
              {
                "id": "0f50140c-30b3-43c2-8b7c-453c65008ab2",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "de781dc6-1758-4e7b-bac8-500ab87431ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b8d8d438-720c-40dd-a8dc-6cc92fb66a11"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0db46ede-09fd-4d5a-8c4c-7bc8d008cbd7",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "b680dff5-f07b-46b3-9171-17b7bcee4ef2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "828ba1fd-7f98-4572-a6de-387f29279086",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "827f38ce-1776-48d4-8028-301d25cde5a8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "002e6088-2ca0-45d1-bcfb-86fa9e6b2e5c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7527bf82-1a08-4299-8eca-9452ab2067d8"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fb22de74-6890-414a-bc9b-16613da67499",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "03573594-6c9b-4195-9047-4cadfd0c3381"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8ccde4b6-b446-40ae-96bd-024468027a3f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "01182bf6-d9fc-4722-8a81-f102e9b00d99"
            }
          }
        ]
      },
      {
        "id": "e9ff4996-60de-4cac-94db-a337ee7da8ba",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "6f303790-f392-4329-8330-14ec5a216360",
            "name": "Negative Testing",
            "item": [
              {
                "id": "232464ac-da24-431d-9263-61b94a6833f9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a670b3c1-5152-4718-99aa-0e24700126ee",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d3db7c5-397d-43fe-9011-ec1d4614d25e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df40272c-2acc-4321-a1de-e3bac96ab36d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2915fb5-9f5b-48dd-a769-4a89b05247ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "17c2718e-6449-4a3a-aa95-4c2195b1c86d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b02c6f5-dee6-4dbc-b612-ac706413319d",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2642e4c5-304c-4776-a0da-77e6a1e57fe0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "d45c053d-8a37-42c8-8205-3435b6830a3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc47bb4-3339-41cf-b3f6-d51f5651beb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "12977ebd-3f77-4500-81a7-1a837dbdb536"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "65204277-9f4b-442f-a337-d5248f9eed59",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f95b988e-87a9-4425-b998-012e89fa72ff"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "314518ac-30c1-423a-9e40-996d024c7a0e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6dd25075-9509-4600-a5bb-a248d789c6e1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6bc872cb-eecc-41dd-9c11-829fb01a39db",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "8e991b94-7342-4253-839d-c8aedceb6644"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "54cf58bb-1e90-49e2-a75c-9e955916b8bf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7b018f69-a89e-41b7-901f-b9fd028f60a3"
            }
          }
        ]
      },
      {
        "id": "16110071-a74b-40eb-aca7-0acd28782e64",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "994d139b-a5ae-468f-8d7a-c3c0fbd58262",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bb2da710-c8f5-4772-8cf6-1adb6ccd9249",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8998cfb4-2f11-448d-a06f-fdcf1d55c0ee",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2b6f2cf-d299-463d-a51d-0fdca31286c2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "a9e7f7f9-867a-46e0-9135-41e0a1402a5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d659c962-bdcc-44e9-b29b-29cf048b4e30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "65daf2ce-86a4-4eb9-8fc2-ebffc0defcca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "551aa6a8-14c2-4f93-81d4-3b1ba35db946",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c311f24e-b40a-4c2c-99cf-1f11f4d02d15",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "cb12033e-147b-4ca3-8173-aeadebaa8df1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a138fd0d-f189-444e-a305-5e396a776064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "89069dce-54dd-4cf2-9d07-83f2e23a7e95"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dfd8628e-2d49-4d2b-9fe1-5e1dea51afc8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f98160e3-cf4d-4dc4-a989-7807fc5168b3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8440ca42-83d4-4d22-9317-cd115b45c37b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "271268a4-a797-42e1-a71e-78a8687fb343"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "147995ac-895d-4487-ad10-5a2d610d2f00",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "23d38cf5-d5f0-4f57-9626-53c463085646"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3e6851b5-0a53-45f5-b39d-33b9836f9a1c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7f0560f0-1777-43de-996b-fa8d455715b8"
            }
          }
        ]
      },
      {
        "id": "899aa0f2-bbc8-4a02-a9ab-4ccbd4486acd",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "cdc2b320-d8cf-4fc4-9d1f-2b345ed394d5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "be9e3a37-50ec-4bea-8c7e-724cbb5483a8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a5dc2830-fa3d-43ee-b1aa-925852688904",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36081f95-3201-42c1-bf68-9b32be51222f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1648e4a-30f6-416b-9d32-8debaa4a2f3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa2bb022-aba9-4e78-8975-b4c6d18925fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1eb85996-e271-4dc1-8357-fb562e390a55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5222bb19-cdd5-4771-a253-ff085635761a",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf66ec82-8541-4eca-b904-3697562af801",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "ca03cfcb-0380-45eb-964b-1237670bdd37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d92ddc8-ac8f-4aef-9837-93f738eeba79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "39c83f15-1c37-46a9-aebe-2ecb28dbfa72"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "abe0ee5e-93ce-463d-9ece-a5c826b29f61",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bab3ba10-6bca-4d27-9859-71514bf291f1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "934408ce-222a-49f0-b560-6db55d0d4756",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f9ef5ef7-df7a-4b8b-bc0e-9cc67b47eb03"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7241098e-3486-4b56-986a-847c78af2f2e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "52e2b2a8-0591-472a-9488-09c9dc76abbd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a7d48bd9-5d38-4a0e-a9a9-f9bcb283f16a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "53b25ff1-3d22-4289-ab40-b8bf942c72ea"
            }
          }
        ]
      },
      {
        "id": "4c5891bb-54ab-4f20-805d-7a8c9fa02a31",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "9d661d1e-65bc-4464-8321-c8a54a46317f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c4daa2eb-1a9f-4322-9839-2c8a788f8272",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9f241c26-4195-436b-8805-94d0776cb6c0",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaacbe3a-7421-4299-9b8f-a097779e23e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39c574fd-db66-40a8-b4e7-5827ce88371d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d233d4ff-24b0-4d29-a329-248b76c1c120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "40d81236-c797-43c6-a2b3-f6c099e0ecf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2d8ab0e-5f64-4aeb-a17d-7aa07b272615",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "922a428c-32ac-40fb-98bf-5637107aa291",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "6336b242-65b2-4b2a-921e-3591e7953c6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe3d6e0c-d749-4a27-a03d-0cdb4054aa79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dfbcb5f6-5fde-42d4-b9f5-dbdf3778bbb9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "06de6eff-12f9-4701-bcd1-d0a0d2703e07",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "250e0d32-d4e9-417a-b857-dbd11ad506f6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a3065281-7e81-43de-b3cb-45bfbc050139",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2af168e3-85af-40b1-8692-0fcea6c29334"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "658d3372-4b30-47cd-aa7c-7da01f1242ed",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "d53d976d-d003-427e-9dec-cce91580e8a9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a7ae7d4a-ecc5-4c57-a39b-61b369f6aadd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "73c9b926-fd18-4e9b-81df-5469f51dec22"
            }
          }
        ]
      },
      {
        "id": "8dfa6b18-4c02-4733-b0ec-326c83ffe9a3",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "21f4bcd4-b53a-4e6f-977e-1b157be01a90",
            "name": "Negative Testing",
            "item": [
              {
                "id": "629c48a9-1dfb-4ede-ab86-88c58a2c4e61",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4dbd9c4d-4cf3-4c7e-9ba2-2c8e7ec7a727",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a77abccd-bd63-4bf8-8e8b-447caadb6cf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1e7cd66-ccea-4c90-be1c-fa25da93fbea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d784bda6-dba2-461b-9531-7f9851c07eaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "981d8da7-c560-44a0-b5cb-f384cf292823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0a0f80d-1211-4b46-8912-fcb0d2af4141",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3590d0aa-ba2a-4f83-8363-e7dd00b7308c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "b20538ab-ffa4-4b95-8bea-e0b032f14e6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87b2a769-f2dd-4cdb-9049-309a4b676cfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f831a314-792b-44bd-82b7-e0ac6bf6c58e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a7d42f9c-9d61-4c08-9830-8b9ab9eaeab5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d7f00bb1-49e2-4476-97d0-c8e29cd89567"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "db1978ae-7055-433a-904c-4cd6e3ba823a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c5ee8f14-491f-4819-98f6-89bc3e615c8a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "876c162c-d503-4170-a9ab-23425d5e7a2f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "1c904e28-7937-47d2-a5f9-08b3fe251e88"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8c4af282-a142-4772-9c03-3b2d724fb8b4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cdd741df-ba70-48ed-a08b-c511cc3ed961"
            }
          }
        ]
      },
      {
        "id": "65fbde92-50d9-4073-ac98-6192b5052b7b",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "0033754f-e241-4e92-a502-e511aebd3c55",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 447,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 107,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 121,
        "pending": 0,
        "failed": 98
      },
      "testScripts": {
        "total": 226,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 221,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 100.45794392523366,
      "responseMin": 64,
      "responseMax": 324,
      "responseSd": 48.0119300543965,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1660870100402,
      "completed": 1660870114894
    },
    "executions": [
      {
        "id": "807b4b6b-7d7f-4d52-bcae-50593ce91fad",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 58,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e6f1c796-cb54-43a5-94af-332fa4670f21",
          "httpRequestId": "db7ea46f-568f-4804-bc23-ce9f71c7ff3e"
        },
        "item": {
          "id": "807b4b6b-7d7f-4d52-bcae-50593ce91fad",
          "name": "did_json"
        },
        "response": {
          "id": "e60e6a9e-edf7-43a3-a9b6-8a2b0693af6f",
          "status": "OK",
          "code": 200,
          "responseTime": 294,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10dc6977-399a-4a4d-b0fb-cad42707c4fa",
        "cursor": {
          "ref": "6567ab9a-f6a9-4f0c-bcf1-283b0061cf31",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "40bd4b14-0a55-4d5e-b413-540b3232ed66"
        },
        "item": {
          "id": "10dc6977-399a-4a4d-b0fb-cad42707c4fa",
          "name": "did:invalid"
        },
        "response": {
          "id": "e756f7fa-f238-4112-8827-56508a1fccbe",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10dc6977-399a-4a4d-b0fb-cad42707c4fa",
        "cursor": {
          "ref": "6567ab9a-f6a9-4f0c-bcf1-283b0061cf31",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "40bd4b14-0a55-4d5e-b413-540b3232ed66"
        },
        "item": {
          "id": "10dc6977-399a-4a4d-b0fb-cad42707c4fa",
          "name": "did:invalid"
        },
        "response": {
          "id": "e756f7fa-f238-4112-8827-56508a1fccbe",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f408c3e-8c6d-4335-820d-7fbcc5b67a2e",
        "cursor": {
          "ref": "a44abb24-40dd-40b1-a9b1-d360d062b54b",
          "length": 58,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "e269e974-3f4a-4fe0-aebc-0ad1d3acd0ed"
        },
        "item": {
          "id": "1f408c3e-8c6d-4335-820d-7fbcc5b67a2e",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "1803d406-c522-46c8-989d-dfa4a6864b42",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 150,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "460dfe8f-b2f8-4019-b0e0-bbff28cc08f1",
        "cursor": {
          "ref": "18c144ec-0ffa-4a7e-ae30-09eed3bc60bf",
          "length": 58,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e4806d03-3d2a-42da-8bb9-15f475eb102f"
        },
        "item": {
          "id": "460dfe8f-b2f8-4019-b0e0-bbff28cc08f1",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "0e617c59-e6d1-47e8-bfa7-4ee9b6ceee08",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 200",
              "stack": "AssertionError: expected response to have status code 404 but got 200\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "2489ac7c-212f-48ca-b3e0-c429aedd0573",
        "cursor": {
          "ref": "9961841f-91ac-447c-8595-2da0e6bcad0d",
          "length": 58,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "98d5343a-e167-440a-9de7-cc716c888b39"
        },
        "item": {
          "id": "2489ac7c-212f-48ca-b3e0-c429aedd0573",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "c61388ce-a9c6-4a8a-90ed-3c6a100a43f3",
          "status": "OK",
          "code": 200,
          "responseTime": 324,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "313d766a-9b3f-4308-85c1-0d9d71f8c4e3",
        "cursor": {
          "ref": "8887fac5-0a10-426d-941a-cf9fbab10a60",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "289ec3b8-6ff1-4944-953a-777edfd731d2"
        },
        "item": {
          "id": "313d766a-9b3f-4308-85c1-0d9d71f8c4e3",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "3d6072f9-7d8c-4a6d-9d22-8e373eca94bf",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "313d766a-9b3f-4308-85c1-0d9d71f8c4e3",
        "cursor": {
          "ref": "8887fac5-0a10-426d-941a-cf9fbab10a60",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "289ec3b8-6ff1-4944-953a-777edfd731d2"
        },
        "item": {
          "id": "313d766a-9b3f-4308-85c1-0d9d71f8c4e3",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "3d6072f9-7d8c-4a6d-9d22-8e373eca94bf",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "33efdffa-45d1-4ebc-b896-462255df3aa4",
        "cursor": {
          "ref": "7501087b-de62-4e3e-b1f1-640e9547523f",
          "length": 58,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4e033e16-0f60-4a84-b85c-6aab4903a9da"
        },
        "item": {
          "id": "33efdffa-45d1-4ebc-b896-462255df3aa4",
          "name": "identifiers"
        },
        "response": {
          "id": "701a20e7-010b-4978-b910-b2a822e5d229",
          "status": "OK",
          "code": 200,
          "responseTime": 105,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5670b2a5-1a23-450e-9be8-bdeb4d6fa046",
        "cursor": {
          "ref": "1af6f5c8-ed0f-4da4-b57d-e26490a32e7b",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "06292661-0182-4c5b-8b2c-3d8c2f00b3ea"
        },
        "item": {
          "id": "5670b2a5-1a23-450e-9be8-bdeb4d6fa046",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b74f34e2-326d-4d6f-8134-6fa4c78270b1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 323,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "5670b2a5-1a23-450e-9be8-bdeb4d6fa046",
        "cursor": {
          "ref": "1af6f5c8-ed0f-4da4-b57d-e26490a32e7b",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "06292661-0182-4c5b-8b2c-3d8c2f00b3ea"
        },
        "item": {
          "id": "5670b2a5-1a23-450e-9be8-bdeb4d6fa046",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b74f34e2-326d-4d6f-8134-6fa4c78270b1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 323,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "5670b2a5-1a23-450e-9be8-bdeb4d6fa046",
        "cursor": {
          "ref": "1af6f5c8-ed0f-4da4-b57d-e26490a32e7b",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "06292661-0182-4c5b-8b2c-3d8c2f00b3ea"
        },
        "item": {
          "id": "5670b2a5-1a23-450e-9be8-bdeb4d6fa046",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b74f34e2-326d-4d6f-8134-6fa4c78270b1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 323,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "383a2c18-c4ab-4261-82da-0fddf02cd847",
        "cursor": {
          "ref": "b0e3d1a4-e94b-4139-8226-94e64ac9052d",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "dfd6da09-e9a9-4a2e-947c-69d07d44d573"
        },
        "item": {
          "id": "383a2c18-c4ab-4261-82da-0fddf02cd847",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "46a461fc-5d1a-4349-b4b3-63b88d5fecdb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 90,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "383a2c18-c4ab-4261-82da-0fddf02cd847",
        "cursor": {
          "ref": "b0e3d1a4-e94b-4139-8226-94e64ac9052d",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "dfd6da09-e9a9-4a2e-947c-69d07d44d573"
        },
        "item": {
          "id": "383a2c18-c4ab-4261-82da-0fddf02cd847",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "46a461fc-5d1a-4349-b4b3-63b88d5fecdb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 90,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "cb901d10-2f40-42aa-9b15-c40369d325aa",
        "cursor": {
          "ref": "1c17bdff-5955-4b73-98cb-5c296149b891",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ec7f3a1b-3fad-4555-bc62-19739f77cd8a"
        },
        "item": {
          "id": "cb901d10-2f40-42aa-9b15-c40369d325aa",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "a0ccd46b-e836-4e69-a864-44cc71a8463e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "cb901d10-2f40-42aa-9b15-c40369d325aa",
        "cursor": {
          "ref": "1c17bdff-5955-4b73-98cb-5c296149b891",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ec7f3a1b-3fad-4555-bc62-19739f77cd8a"
        },
        "item": {
          "id": "cb901d10-2f40-42aa-9b15-c40369d325aa",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "a0ccd46b-e836-4e69-a864-44cc71a8463e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "cc8c188d-07c7-4a8d-9718-469d2559eb1a",
        "cursor": {
          "ref": "8f136bc1-a1fe-4662-925c-456990916fab",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "eb1f65c2-bcb8-42da-9f3c-95d14fa068ff"
        },
        "item": {
          "id": "cc8c188d-07c7-4a8d-9718-469d2559eb1a",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "6a178be7-7d65-407f-a83f-3ef166dd8802",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "cc8c188d-07c7-4a8d-9718-469d2559eb1a",
        "cursor": {
          "ref": "8f136bc1-a1fe-4662-925c-456990916fab",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "eb1f65c2-bcb8-42da-9f3c-95d14fa068ff"
        },
        "item": {
          "id": "cc8c188d-07c7-4a8d-9718-469d2559eb1a",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "6a178be7-7d65-407f-a83f-3ef166dd8802",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "b0575191-224a-4605-8b20-bbcf39c5c8c3",
        "cursor": {
          "ref": "0b4f80ef-fe74-4a96-a67f-746d71e80a15",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "783f88e6-1396-48e0-8c70-e20c7283cda7"
        },
        "item": {
          "id": "b0575191-224a-4605-8b20-bbcf39c5c8c3",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "0a502ed3-0cdd-401b-b45d-1d5e390ba568",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 84,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "b0575191-224a-4605-8b20-bbcf39c5c8c3",
        "cursor": {
          "ref": "0b4f80ef-fe74-4a96-a67f-746d71e80a15",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "783f88e6-1396-48e0-8c70-e20c7283cda7"
        },
        "item": {
          "id": "b0575191-224a-4605-8b20-bbcf39c5c8c3",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "0a502ed3-0cdd-401b-b45d-1d5e390ba568",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 84,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "5e7ecacb-9536-4fdb-9cfe-f4f772f022f9",
        "cursor": {
          "ref": "4298a44a-94f8-476c-b817-e00d8d56a25c",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "cce91260-91cd-4a53-8adb-343504edbab5"
        },
        "item": {
          "id": "5e7ecacb-9536-4fdb-9cfe-f4f772f022f9",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "b72e2005-97ba-471c-b74c-08e245f97962",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 91,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "5e7ecacb-9536-4fdb-9cfe-f4f772f022f9",
        "cursor": {
          "ref": "4298a44a-94f8-476c-b817-e00d8d56a25c",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "cce91260-91cd-4a53-8adb-343504edbab5"
        },
        "item": {
          "id": "5e7ecacb-9536-4fdb-9cfe-f4f772f022f9",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "b72e2005-97ba-471c-b74c-08e245f97962",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 91,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "c2d3df80-d242-422f-9801-2426ef358c0f",
        "cursor": {
          "ref": "4aa30193-60b1-43e8-914a-0835a02a600f",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "da2000a2-5d66-4310-93c8-49e69080cd90"
        },
        "item": {
          "id": "c2d3df80-d242-422f-9801-2426ef358c0f",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "05a77860-c806-4375-abe1-47936ded7873",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 81,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "c2d3df80-d242-422f-9801-2426ef358c0f",
        "cursor": {
          "ref": "4aa30193-60b1-43e8-914a-0835a02a600f",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "da2000a2-5d66-4310-93c8-49e69080cd90"
        },
        "item": {
          "id": "c2d3df80-d242-422f-9801-2426ef358c0f",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "05a77860-c806-4375-abe1-47936ded7873",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 81,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "d0aaec4e-61ca-400d-9706-b865e6d7ac62",
        "cursor": {
          "ref": "5f5f7169-1709-46f2-b55c-33132df2f5ad",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "ad4cb3f9-8aab-4fcb-b2a3-4325e2f1c0b7"
        },
        "item": {
          "id": "d0aaec4e-61ca-400d-9706-b865e6d7ac62",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "b2dc9915-23a6-42a2-b571-84ff52538353",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 81,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "d0aaec4e-61ca-400d-9706-b865e6d7ac62",
        "cursor": {
          "ref": "5f5f7169-1709-46f2-b55c-33132df2f5ad",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "ad4cb3f9-8aab-4fcb-b2a3-4325e2f1c0b7"
        },
        "item": {
          "id": "d0aaec4e-61ca-400d-9706-b865e6d7ac62",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "b2dc9915-23a6-42a2-b571-84ff52538353",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 81,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "6edd9ae2-1c58-411d-a0cd-64562f6ed125",
        "cursor": {
          "ref": "a2db2078-6625-4265-9b1b-145b5540f785",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "98e8c628-aedc-45d8-97bb-b1455f27546d"
        },
        "item": {
          "id": "6edd9ae2-1c58-411d-a0cd-64562f6ed125",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "298516cb-29ab-43fe-bd14-2f832cadec0f",
          "status": "Created",
          "code": 201,
          "responseTime": 105,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "6edd9ae2-1c58-411d-a0cd-64562f6ed125",
        "cursor": {
          "ref": "a2db2078-6625-4265-9b1b-145b5540f785",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "98e8c628-aedc-45d8-97bb-b1455f27546d"
        },
        "item": {
          "id": "6edd9ae2-1c58-411d-a0cd-64562f6ed125",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "298516cb-29ab-43fe-bd14-2f832cadec0f",
          "status": "Created",
          "code": 201,
          "responseTime": 105,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "d8a84334-ed40-425d-b979-500254d131c0",
        "cursor": {
          "ref": "de7b5ca6-cfb2-4f4e-8a63-1f09ea9d7294",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "9354ea78-1fe5-4e83-bb25-f35938165d36"
        },
        "item": {
          "id": "d8a84334-ed40-425d-b979-500254d131c0",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "88a33bce-0d69-4fad-8094-67662ef38906",
          "status": "Created",
          "code": 201,
          "responseTime": 104,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "d8a84334-ed40-425d-b979-500254d131c0",
        "cursor": {
          "ref": "de7b5ca6-cfb2-4f4e-8a63-1f09ea9d7294",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "9354ea78-1fe5-4e83-bb25-f35938165d36"
        },
        "item": {
          "id": "d8a84334-ed40-425d-b979-500254d131c0",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "88a33bce-0d69-4fad-8094-67662ef38906",
          "status": "Created",
          "code": 201,
          "responseTime": 104,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "7cc563a0-8fce-487b-b99f-1e491c6962a5",
        "cursor": {
          "ref": "7de628b9-3584-4258-808f-eef941d312c6",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "485cd35e-667b-452a-b016-b4ba0c251d9e"
        },
        "item": {
          "id": "7cc563a0-8fce-487b-b99f-1e491c6962a5",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "5468291b-98c3-411d-92af-c40e8004f3c9",
          "status": "Created",
          "code": 201,
          "responseTime": 98,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "7cc563a0-8fce-487b-b99f-1e491c6962a5",
        "cursor": {
          "ref": "7de628b9-3584-4258-808f-eef941d312c6",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "485cd35e-667b-452a-b016-b4ba0c251d9e"
        },
        "item": {
          "id": "7cc563a0-8fce-487b-b99f-1e491c6962a5",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "5468291b-98c3-411d-92af-c40e8004f3c9",
          "status": "Created",
          "code": 201,
          "responseTime": 98,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "346e5f77-8373-4e30-a9f3-cd55c49c1100",
        "cursor": {
          "ref": "8e24f1d9-0105-4a20-be85-73fa9a370cb5",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7a46fe02-0c77-4e34-bfb2-9b1b04619845"
        },
        "item": {
          "id": "346e5f77-8373-4e30-a9f3-cd55c49c1100",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "447bee4f-4eb4-453d-9b2c-7520262cc559",
          "status": "Created",
          "code": 201,
          "responseTime": 89,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "346e5f77-8373-4e30-a9f3-cd55c49c1100",
        "cursor": {
          "ref": "8e24f1d9-0105-4a20-be85-73fa9a370cb5",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7a46fe02-0c77-4e34-bfb2-9b1b04619845"
        },
        "item": {
          "id": "346e5f77-8373-4e30-a9f3-cd55c49c1100",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "447bee4f-4eb4-453d-9b2c-7520262cc559",
          "status": "Created",
          "code": 201,
          "responseTime": 89,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "55e5ce8c-6d42-4538-8a19-3bee7998e4af",
        "cursor": {
          "ref": "5529e0fa-5280-4eba-a289-1f08942f4d0b",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "555459fe-2a5b-4ccf-a96a-416944a2d413"
        },
        "item": {
          "id": "55e5ce8c-6d42-4538-8a19-3bee7998e4af",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "dd251729-ed38-4016-b43c-b17c1656ede2",
          "status": "Created",
          "code": 201,
          "responseTime": 165,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "55e5ce8c-6d42-4538-8a19-3bee7998e4af",
        "cursor": {
          "ref": "5529e0fa-5280-4eba-a289-1f08942f4d0b",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "555459fe-2a5b-4ccf-a96a-416944a2d413"
        },
        "item": {
          "id": "55e5ce8c-6d42-4538-8a19-3bee7998e4af",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "dd251729-ed38-4016-b43c-b17c1656ede2",
          "status": "Created",
          "code": 201,
          "responseTime": 165,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "82167a27-6ea7-42e0-a0f2-6d14866cfa82",
        "cursor": {
          "ref": "e50519b6-552c-419e-a5e9-575721ec5998",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ac9409a6-04f6-4682-8cba-81536734dcf3"
        },
        "item": {
          "id": "82167a27-6ea7-42e0-a0f2-6d14866cfa82",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "89db7f2d-a971-4082-a974-5f47602879d5",
          "status": "Created",
          "code": 201,
          "responseTime": 91,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "82167a27-6ea7-42e0-a0f2-6d14866cfa82",
        "cursor": {
          "ref": "e50519b6-552c-419e-a5e9-575721ec5998",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ac9409a6-04f6-4682-8cba-81536734dcf3"
        },
        "item": {
          "id": "82167a27-6ea7-42e0-a0f2-6d14866cfa82",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "89db7f2d-a971-4082-a974-5f47602879d5",
          "status": "Created",
          "code": 201,
          "responseTime": 91,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "88b7395d-0727-4eae-9a66-b54cec4619a0",
        "cursor": {
          "ref": "4c531ff9-364a-45c8-9d6c-0758a9f5753f",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "3d0ad2a5-f64b-44f5-9bc9-17c631617e0a"
        },
        "item": {
          "id": "88b7395d-0727-4eae-9a66-b54cec4619a0",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "be26a2b8-4e90-477b-9519-887c60fee513",
          "status": "Created",
          "code": 201,
          "responseTime": 98,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "88b7395d-0727-4eae-9a66-b54cec4619a0",
        "cursor": {
          "ref": "4c531ff9-364a-45c8-9d6c-0758a9f5753f",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "3d0ad2a5-f64b-44f5-9bc9-17c631617e0a"
        },
        "item": {
          "id": "88b7395d-0727-4eae-9a66-b54cec4619a0",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "be26a2b8-4e90-477b-9519-887c60fee513",
          "status": "Created",
          "code": 201,
          "responseTime": 98,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "4c505a04-be54-4c0f-b1b7-eba4c10ce533",
        "cursor": {
          "ref": "bc7f94b1-4abd-4b76-87ce-ef6800872aec",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d65ed02b-26aa-4ea9-8ee8-2256df03d780"
        },
        "item": {
          "id": "4c505a04-be54-4c0f-b1b7-eba4c10ce533",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f9a44e24-1367-467e-a9cf-1c92992aa701",
          "status": "Created",
          "code": 201,
          "responseTime": 89,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "4c505a04-be54-4c0f-b1b7-eba4c10ce533",
        "cursor": {
          "ref": "bc7f94b1-4abd-4b76-87ce-ef6800872aec",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d65ed02b-26aa-4ea9-8ee8-2256df03d780"
        },
        "item": {
          "id": "4c505a04-be54-4c0f-b1b7-eba4c10ce533",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f9a44e24-1367-467e-a9cf-1c92992aa701",
          "status": "Created",
          "code": 201,
          "responseTime": 89,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "57792ea2-58f9-4379-aa85-08a7552d215a",
        "cursor": {
          "ref": "25e11ec6-9016-4af4-bf54-6e3b3af388d0",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "519eb80e-a8fd-4e15-8919-6e72d672f2e5"
        },
        "item": {
          "id": "57792ea2-58f9-4379-aa85-08a7552d215a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "82072f04-fdae-4eb5-832f-8fa9e13cf50e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "57792ea2-58f9-4379-aa85-08a7552d215a",
        "cursor": {
          "ref": "25e11ec6-9016-4af4-bf54-6e3b3af388d0",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "519eb80e-a8fd-4e15-8919-6e72d672f2e5"
        },
        "item": {
          "id": "57792ea2-58f9-4379-aa85-08a7552d215a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "82072f04-fdae-4eb5-832f-8fa9e13cf50e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "57618ace-8a15-4fb1-9f43-7c49f5e9bab5",
        "cursor": {
          "ref": "a956f730-5646-41aa-8576-ee5eaf103f1f",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d1c709c0-801f-426b-b0ea-4411cfbbca88"
        },
        "item": {
          "id": "57618ace-8a15-4fb1-9f43-7c49f5e9bab5",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "87567a5e-b8a6-44c7-8dfd-87c0991aa8a5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 86,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "57618ace-8a15-4fb1-9f43-7c49f5e9bab5",
        "cursor": {
          "ref": "a956f730-5646-41aa-8576-ee5eaf103f1f",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d1c709c0-801f-426b-b0ea-4411cfbbca88"
        },
        "item": {
          "id": "57618ace-8a15-4fb1-9f43-7c49f5e9bab5",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "87567a5e-b8a6-44c7-8dfd-87c0991aa8a5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 86,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "958218d0-7711-49dc-83a3-990869ef1283",
        "cursor": {
          "ref": "0869610d-167d-47cc-b984-5995a3335c3a",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "dd5d7181-ab82-4f6d-924d-b9b078b4b420"
        },
        "item": {
          "id": "958218d0-7711-49dc-83a3-990869ef1283",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "a0204dda-c7e7-4ef8-9aa6-af443d58d58f",
          "status": "Created",
          "code": 201,
          "responseTime": 114,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "958218d0-7711-49dc-83a3-990869ef1283",
        "cursor": {
          "ref": "0869610d-167d-47cc-b984-5995a3335c3a",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "dd5d7181-ab82-4f6d-924d-b9b078b4b420"
        },
        "item": {
          "id": "958218d0-7711-49dc-83a3-990869ef1283",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "a0204dda-c7e7-4ef8-9aa6-af443d58d58f",
          "status": "Created",
          "code": 201,
          "responseTime": 114,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "0d4bb863-0843-4928-9d13-397d8cbd86ad",
        "cursor": {
          "ref": "a7403972-84b1-4473-ac07-4a3cfa4bcdb6",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "bed55ac0-2fa6-4043-a1f2-2cdb899b63d4"
        },
        "item": {
          "id": "0d4bb863-0843-4928-9d13-397d8cbd86ad",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "51ffa99b-0cbe-44be-ab78-a36cffe48367",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 88,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "0d4bb863-0843-4928-9d13-397d8cbd86ad",
        "cursor": {
          "ref": "a7403972-84b1-4473-ac07-4a3cfa4bcdb6",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "bed55ac0-2fa6-4043-a1f2-2cdb899b63d4"
        },
        "item": {
          "id": "0d4bb863-0843-4928-9d13-397d8cbd86ad",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "51ffa99b-0cbe-44be-ab78-a36cffe48367",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 88,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "85c35246-6d7c-4377-8a4d-0bc02ac95cac",
        "cursor": {
          "ref": "0ddcf805-8b76-4ead-9e50-d2581f055948",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "33cd41b3-2cf8-4b1a-812c-6a1ba817a3c0"
        },
        "item": {
          "id": "85c35246-6d7c-4377-8a4d-0bc02ac95cac",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "f47494f6-74ff-425b-8c7e-49acebfdf352",
          "status": "Created",
          "code": 201,
          "responseTime": 112,
          "responseSize": 624
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "85c35246-6d7c-4377-8a4d-0bc02ac95cac",
        "cursor": {
          "ref": "0ddcf805-8b76-4ead-9e50-d2581f055948",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "33cd41b3-2cf8-4b1a-812c-6a1ba817a3c0"
        },
        "item": {
          "id": "85c35246-6d7c-4377-8a4d-0bc02ac95cac",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "f47494f6-74ff-425b-8c7e-49acebfdf352",
          "status": "Created",
          "code": 201,
          "responseTime": 112,
          "responseSize": 624
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "4fabf75f-2102-493f-b17a-886c514fec5f",
        "cursor": {
          "ref": "ea62962b-8d6c-4745-a51f-8885fdd22149",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "31c896a9-17cd-49e0-bc92-44c154f7dbae"
        },
        "item": {
          "id": "4fabf75f-2102-493f-b17a-886c514fec5f",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "1475d2d5-b602-4e1f-a80a-a3ea3e83fb0e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 84,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "4fabf75f-2102-493f-b17a-886c514fec5f",
        "cursor": {
          "ref": "ea62962b-8d6c-4745-a51f-8885fdd22149",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "31c896a9-17cd-49e0-bc92-44c154f7dbae"
        },
        "item": {
          "id": "4fabf75f-2102-493f-b17a-886c514fec5f",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "1475d2d5-b602-4e1f-a80a-a3ea3e83fb0e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 84,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "6991f87f-44f2-4413-8e92-a5e60aea5a08",
        "cursor": {
          "ref": "96dcb11b-4b71-404b-a5b3-7ac18c834116",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "78039bf5-81c0-4bf9-936b-980ef338a826"
        },
        "item": {
          "id": "6991f87f-44f2-4413-8e92-a5e60aea5a08",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "bc4361c8-29b0-4797-b803-038c0fb63610",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 75,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "6991f87f-44f2-4413-8e92-a5e60aea5a08",
        "cursor": {
          "ref": "96dcb11b-4b71-404b-a5b3-7ac18c834116",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "78039bf5-81c0-4bf9-936b-980ef338a826"
        },
        "item": {
          "id": "6991f87f-44f2-4413-8e92-a5e60aea5a08",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "bc4361c8-29b0-4797-b803-038c0fb63610",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 75,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "dc90ea37-6579-4945-a0e2-7880d88d0f19",
        "cursor": {
          "ref": "60c75be6-2cb1-4a69-bb3f-81992fc13b6f",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "094b18b2-bddf-4a6e-b2ea-a9bc88afa6ca"
        },
        "item": {
          "id": "dc90ea37-6579-4945-a0e2-7880d88d0f19",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "72ecfbaf-c695-4870-b31f-899a3af5d358",
          "status": "Created",
          "code": 201,
          "responseTime": 98,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "dc90ea37-6579-4945-a0e2-7880d88d0f19",
        "cursor": {
          "ref": "60c75be6-2cb1-4a69-bb3f-81992fc13b6f",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "094b18b2-bddf-4a6e-b2ea-a9bc88afa6ca"
        },
        "item": {
          "id": "dc90ea37-6579-4945-a0e2-7880d88d0f19",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "72ecfbaf-c695-4870-b31f-899a3af5d358",
          "status": "Created",
          "code": 201,
          "responseTime": 98,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "343c197b-986a-43a6-a6c8-79472cf05e73",
        "cursor": {
          "ref": "346ab1e8-5b08-4629-b951-c6cefd3a11a9",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e6bb85f3-3904-4e5c-a111-da6d23410db9"
        },
        "item": {
          "id": "343c197b-986a-43a6-a6c8-79472cf05e73",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "1177a617-70cc-466c-8536-1bc30daaf89d",
          "status": "Created",
          "code": 201,
          "responseTime": 90,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "343c197b-986a-43a6-a6c8-79472cf05e73",
        "cursor": {
          "ref": "346ab1e8-5b08-4629-b951-c6cefd3a11a9",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e6bb85f3-3904-4e5c-a111-da6d23410db9"
        },
        "item": {
          "id": "343c197b-986a-43a6-a6c8-79472cf05e73",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "1177a617-70cc-466c-8536-1bc30daaf89d",
          "status": "Created",
          "code": 201,
          "responseTime": 90,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "3cd595d3-335e-442a-9eaf-ec6162eb040b",
        "cursor": {
          "ref": "9ee3bbab-4823-4be2-8899-b5799f853738",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1e4c856a-b476-431f-ba6c-000020d81246"
        },
        "item": {
          "id": "3cd595d3-335e-442a-9eaf-ec6162eb040b",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "0df9d0ae-e2c8-4af7-9e0a-3799f13cbd1a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 90,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "3cd595d3-335e-442a-9eaf-ec6162eb040b",
        "cursor": {
          "ref": "9ee3bbab-4823-4be2-8899-b5799f853738",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1e4c856a-b476-431f-ba6c-000020d81246"
        },
        "item": {
          "id": "3cd595d3-335e-442a-9eaf-ec6162eb040b",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "0df9d0ae-e2c8-4af7-9e0a-3799f13cbd1a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 90,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "2259d136-8114-4596-99ff-2bd46ba8f37a",
        "cursor": {
          "ref": "fc6761b9-c722-4166-afd5-af5634d473b7",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5bbd9aaf-8081-4a1b-ad7b-e2c4d6c21295"
        },
        "item": {
          "id": "2259d136-8114-4596-99ff-2bd46ba8f37a",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "49230bc7-84da-4acf-993d-8be4bb2c69fd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 101,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "2259d136-8114-4596-99ff-2bd46ba8f37a",
        "cursor": {
          "ref": "fc6761b9-c722-4166-afd5-af5634d473b7",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5bbd9aaf-8081-4a1b-ad7b-e2c4d6c21295"
        },
        "item": {
          "id": "2259d136-8114-4596-99ff-2bd46ba8f37a",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "49230bc7-84da-4acf-993d-8be4bb2c69fd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 101,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "0ce0df19-a072-4dbe-b45d-9228d4ff2216",
        "cursor": {
          "ref": "d8e308e0-43ab-4af2-aee9-ec0a0a285d5e",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "2a5c8a0a-717d-45d3-a524-9a528d8c132a"
        },
        "item": {
          "id": "0ce0df19-a072-4dbe-b45d-9228d4ff2216",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "c527de48-00ae-4c0d-9c5f-136d85f58187",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "0ce0df19-a072-4dbe-b45d-9228d4ff2216",
        "cursor": {
          "ref": "d8e308e0-43ab-4af2-aee9-ec0a0a285d5e",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "2a5c8a0a-717d-45d3-a524-9a528d8c132a"
        },
        "item": {
          "id": "0ce0df19-a072-4dbe-b45d-9228d4ff2216",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "c527de48-00ae-4c0d-9c5f-136d85f58187",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "f1ca3a6d-6af2-4fad-be42-fa2bfd245df7",
        "cursor": {
          "ref": "ba8cb7af-25a9-4410-a998-31d16a0c7ff5",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "64618919-c1fe-4c8f-95fe-fa9d16eca7eb"
        },
        "item": {
          "id": "f1ca3a6d-6af2-4fad-be42-fa2bfd245df7",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "edc54d92-0e18-43cf-8db9-592ef0e71caa",
          "status": "Created",
          "code": 201,
          "responseTime": 110,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "f1ca3a6d-6af2-4fad-be42-fa2bfd245df7",
        "cursor": {
          "ref": "ba8cb7af-25a9-4410-a998-31d16a0c7ff5",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "64618919-c1fe-4c8f-95fe-fa9d16eca7eb"
        },
        "item": {
          "id": "f1ca3a6d-6af2-4fad-be42-fa2bfd245df7",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "edc54d92-0e18-43cf-8db9-592ef0e71caa",
          "status": "Created",
          "code": 201,
          "responseTime": 110,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "36aee030-6455-4e99-b4af-30c6ed76df86",
        "cursor": {
          "ref": "454ab63e-a7a1-467a-a0e9-fd578c7bef74",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "e66db779-f238-4257-acdd-4186a7e0ff64"
        },
        "item": {
          "id": "36aee030-6455-4e99-b4af-30c6ed76df86",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "caf39764-a2da-447e-bf1d-baede6891ff2",
          "status": "Created",
          "code": 201,
          "responseTime": 93,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "36aee030-6455-4e99-b4af-30c6ed76df86",
        "cursor": {
          "ref": "454ab63e-a7a1-467a-a0e9-fd578c7bef74",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "e66db779-f238-4257-acdd-4186a7e0ff64"
        },
        "item": {
          "id": "36aee030-6455-4e99-b4af-30c6ed76df86",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "caf39764-a2da-447e-bf1d-baede6891ff2",
          "status": "Created",
          "code": 201,
          "responseTime": 93,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "f50a6604-cc39-422a-82bc-9c6c2734059b",
        "cursor": {
          "ref": "436445c4-2705-48e1-a9d4-7ac2cffd4e3c",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "bfda6b27-4885-4933-aada-a0b3f51bb0a1"
        },
        "item": {
          "id": "f50a6604-cc39-422a-82bc-9c6c2734059b",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "79c04e88-ca18-467c-8168-712f961b24cf",
          "status": "Created",
          "code": 201,
          "responseTime": 98,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "f50a6604-cc39-422a-82bc-9c6c2734059b",
        "cursor": {
          "ref": "436445c4-2705-48e1-a9d4-7ac2cffd4e3c",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "bfda6b27-4885-4933-aada-a0b3f51bb0a1"
        },
        "item": {
          "id": "f50a6604-cc39-422a-82bc-9c6c2734059b",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "79c04e88-ca18-467c-8168-712f961b24cf",
          "status": "Created",
          "code": 201,
          "responseTime": 98,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "d9e9c407-2877-4e3f-ad93-e9148b74bafd",
        "cursor": {
          "ref": "7fc7f93d-5b46-409a-a870-93c6c500b865",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "acd072e6-b4ea-46c1-822e-c87fa59b7777"
        },
        "item": {
          "id": "d9e9c407-2877-4e3f-ad93-e9148b74bafd",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "61978c47-d059-4f18-afe5-4191dcf554ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "d9e9c407-2877-4e3f-ad93-e9148b74bafd",
        "cursor": {
          "ref": "7fc7f93d-5b46-409a-a870-93c6c500b865",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "acd072e6-b4ea-46c1-822e-c87fa59b7777"
        },
        "item": {
          "id": "d9e9c407-2877-4e3f-ad93-e9148b74bafd",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "61978c47-d059-4f18-afe5-4191dcf554ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "efa9ab03-fd99-444e-8710-cb148bff1c71",
        "cursor": {
          "ref": "f4bee03b-4ccd-4b0f-aacc-f39aaa83cff2",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b3f6c2ce-475c-48f1-956c-6731ae5e3fb7"
        },
        "item": {
          "id": "efa9ab03-fd99-444e-8710-cb148bff1c71",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "8e9c5f2c-2abe-4dfe-bc3a-75cdb5fca5ec",
          "status": "Created",
          "code": 201,
          "responseTime": 102,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "efa9ab03-fd99-444e-8710-cb148bff1c71",
        "cursor": {
          "ref": "f4bee03b-4ccd-4b0f-aacc-f39aaa83cff2",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b3f6c2ce-475c-48f1-956c-6731ae5e3fb7"
        },
        "item": {
          "id": "efa9ab03-fd99-444e-8710-cb148bff1c71",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "8e9c5f2c-2abe-4dfe-bc3a-75cdb5fca5ec",
          "status": "Created",
          "code": 201,
          "responseTime": 102,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "aedbc31e-f8f7-46bd-90ad-f297eb484d97",
        "cursor": {
          "ref": "45a7c223-e887-467f-9a67-c716d474ff09",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "86e32a92-4dfe-47c0-a30c-a1605c632afc"
        },
        "item": {
          "id": "aedbc31e-f8f7-46bd-90ad-f297eb484d97",
          "name": "credentials_issue"
        },
        "response": {
          "id": "3e42d2d1-efbc-4014-9f1c-23b474697b23",
          "status": "Created",
          "code": 201,
          "responseTime": 90,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "aedbc31e-f8f7-46bd-90ad-f297eb484d97",
        "cursor": {
          "ref": "45a7c223-e887-467f-9a67-c716d474ff09",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "86e32a92-4dfe-47c0-a30c-a1605c632afc"
        },
        "item": {
          "id": "aedbc31e-f8f7-46bd-90ad-f297eb484d97",
          "name": "credentials_issue"
        },
        "response": {
          "id": "3e42d2d1-efbc-4014-9f1c-23b474697b23",
          "status": "Created",
          "code": 201,
          "responseTime": 90,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "42631d9a-bd05-4595-a5d9-89faebfed295",
        "cursor": {
          "ref": "d22ae587-b028-471c-ad6e-b81fa2795b82",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "54a409bb-8a0b-4056-b5e4-2cd436179462"
        },
        "item": {
          "id": "42631d9a-bd05-4595-a5d9-89faebfed295",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "7625a612-bf06-4685-bd2a-0fc56a274b49",
          "status": "Created",
          "code": 201,
          "responseTime": 92,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "42631d9a-bd05-4595-a5d9-89faebfed295",
        "cursor": {
          "ref": "d22ae587-b028-471c-ad6e-b81fa2795b82",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "54a409bb-8a0b-4056-b5e4-2cd436179462"
        },
        "item": {
          "id": "42631d9a-bd05-4595-a5d9-89faebfed295",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "7625a612-bf06-4685-bd2a-0fc56a274b49",
          "status": "Created",
          "code": 201,
          "responseTime": 92,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "9bbbe86d-3a3b-48be-b798-1883cf5809b1",
        "cursor": {
          "ref": "e9195871-db1f-48ee-88e3-6e47a03a9979",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "2c2dd3aa-360a-47e3-ae3e-ce222c994743"
        },
        "item": {
          "id": "9bbbe86d-3a3b-48be-b798-1883cf5809b1",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "2c5f01c6-7f88-4ae3-ae52-a3beae4b803b",
          "status": "Created",
          "code": 201,
          "responseTime": 102,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bbbe86d-3a3b-48be-b798-1883cf5809b1",
        "cursor": {
          "ref": "e9195871-db1f-48ee-88e3-6e47a03a9979",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "2c2dd3aa-360a-47e3-ae3e-ce222c994743"
        },
        "item": {
          "id": "9bbbe86d-3a3b-48be-b798-1883cf5809b1",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "2c5f01c6-7f88-4ae3-ae52-a3beae4b803b",
          "status": "Created",
          "code": 201,
          "responseTime": 102,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4582c24-c335-44b9-af21-02984df7bb1a",
        "cursor": {
          "ref": "478b77d7-88e8-4820-b25d-8248bf353dbb",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "1bb7b4d7-e217-4223-bec4-0a2b8f87af63"
        },
        "item": {
          "id": "d4582c24-c335-44b9-af21-02984df7bb1a",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "f57df389-050f-4719-ab57-bd4e572852fb",
          "status": "Created",
          "code": 201,
          "responseTime": 95,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "d4582c24-c335-44b9-af21-02984df7bb1a",
        "cursor": {
          "ref": "478b77d7-88e8-4820-b25d-8248bf353dbb",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "1bb7b4d7-e217-4223-bec4-0a2b8f87af63"
        },
        "item": {
          "id": "d4582c24-c335-44b9-af21-02984df7bb1a",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "f57df389-050f-4719-ab57-bd4e572852fb",
          "status": "Created",
          "code": 201,
          "responseTime": 95,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "d352ca64-c3f6-4207-8b9a-8be3a9423462",
        "cursor": {
          "ref": "26dfb836-9f68-4233-9155-bba1b2b673b5",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "4aa547ad-2df4-4344-89ea-31232ff2219f"
        },
        "item": {
          "id": "d352ca64-c3f6-4207-8b9a-8be3a9423462",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "d0dd9a4b-ca5e-42ce-83b1-37c8597ae03f",
          "status": "Created",
          "code": 201,
          "responseTime": 102,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d352ca64-c3f6-4207-8b9a-8be3a9423462",
        "cursor": {
          "ref": "26dfb836-9f68-4233-9155-bba1b2b673b5",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "4aa547ad-2df4-4344-89ea-31232ff2219f"
        },
        "item": {
          "id": "d352ca64-c3f6-4207-8b9a-8be3a9423462",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "d0dd9a4b-ca5e-42ce-83b1-37c8597ae03f",
          "status": "Created",
          "code": 201,
          "responseTime": 102,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f583b3b1-5d4a-4460-9048-44e94e45e8ba",
        "cursor": {
          "ref": "f9055a38-add8-488d-83b0-dd191da6634a",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "1b2e7170-c1f8-42a1-bcac-e2f184d2f16b"
        },
        "item": {
          "id": "f583b3b1-5d4a-4460-9048-44e94e45e8ba",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "9ad41879-c9c5-40e8-b2ff-90dd5445b605",
          "status": "Created",
          "code": 201,
          "responseTime": 89,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "f583b3b1-5d4a-4460-9048-44e94e45e8ba",
        "cursor": {
          "ref": "f9055a38-add8-488d-83b0-dd191da6634a",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "1b2e7170-c1f8-42a1-bcac-e2f184d2f16b"
        },
        "item": {
          "id": "f583b3b1-5d4a-4460-9048-44e94e45e8ba",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "9ad41879-c9c5-40e8-b2ff-90dd5445b605",
          "status": "Created",
          "code": 201,
          "responseTime": 89,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "0b9095bc-9e8a-4acb-827e-0b27f6aff4d0",
        "cursor": {
          "ref": "900fe801-4314-450d-bd4d-4bfa665226c2",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "b8bf79e9-52b1-40ca-9f81-a5a91308f745"
        },
        "item": {
          "id": "0b9095bc-9e8a-4acb-827e-0b27f6aff4d0",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "ac78a69a-9299-49b7-8ff3-96c51127439b",
          "status": "Created",
          "code": 201,
          "responseTime": 90,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "0b9095bc-9e8a-4acb-827e-0b27f6aff4d0",
        "cursor": {
          "ref": "900fe801-4314-450d-bd4d-4bfa665226c2",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "b8bf79e9-52b1-40ca-9f81-a5a91308f745"
        },
        "item": {
          "id": "0b9095bc-9e8a-4acb-827e-0b27f6aff4d0",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "ac78a69a-9299-49b7-8ff3-96c51127439b",
          "status": "Created",
          "code": 201,
          "responseTime": 90,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "0f50140c-30b3-43c2-8b7c-453c65008ab2",
        "cursor": {
          "ref": "05270a7f-9ca3-4b39-b936-f981e6ece0da",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "0cf56b4e-27ee-424d-a806-72c4bccda46d"
        },
        "item": {
          "id": "0f50140c-30b3-43c2-8b7c-453c65008ab2",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "fad27bc5-0462-413f-b476-3b67721c8a46",
          "status": "Created",
          "code": 201,
          "responseTime": 109,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "0f50140c-30b3-43c2-8b7c-453c65008ab2",
        "cursor": {
          "ref": "05270a7f-9ca3-4b39-b936-f981e6ece0da",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "0cf56b4e-27ee-424d-a806-72c4bccda46d"
        },
        "item": {
          "id": "0f50140c-30b3-43c2-8b7c-453c65008ab2",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "fad27bc5-0462-413f-b476-3b67721c8a46",
          "status": "Created",
          "code": 201,
          "responseTime": 109,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "a670b3c1-5152-4718-99aa-0e24700126ee",
        "cursor": {
          "ref": "6f1d1f6b-6bac-4c3a-a010-70c237f86ac6",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "98ceefc5-4ba1-4939-b872-fa83709c44ad"
        },
        "item": {
          "id": "a670b3c1-5152-4718-99aa-0e24700126ee",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a4ab6076-a4b8-4ea5-b427-d8f3e48de880",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "a670b3c1-5152-4718-99aa-0e24700126ee",
        "cursor": {
          "ref": "6f1d1f6b-6bac-4c3a-a010-70c237f86ac6",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "98ceefc5-4ba1-4939-b872-fa83709c44ad"
        },
        "item": {
          "id": "a670b3c1-5152-4718-99aa-0e24700126ee",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a4ab6076-a4b8-4ea5-b427-d8f3e48de880",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "9b02c6f5-dee6-4dbc-b612-ac706413319d",
        "cursor": {
          "ref": "1a01af2d-2b92-47a8-b478-851323ebbce1",
          "length": 58,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "1a3d1041-49b9-48fe-8e58-5f388fa3c5b8"
        },
        "item": {
          "id": "9b02c6f5-dee6-4dbc-b612-ac706413319d",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "38a07ddf-6826-4949-a11b-644b1d33449b",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 66,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "8998cfb4-2f11-448d-a06f-fdcf1d55c0ee",
        "cursor": {
          "ref": "9d018424-4db4-471f-9e33-e1ea7c2a5ee9",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d865903f-7881-4110-8f86-11036540da53"
        },
        "item": {
          "id": "8998cfb4-2f11-448d-a06f-fdcf1d55c0ee",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "7a4b8100-8aa8-4d73-a059-2c51cd816bb5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "8998cfb4-2f11-448d-a06f-fdcf1d55c0ee",
        "cursor": {
          "ref": "9d018424-4db4-471f-9e33-e1ea7c2a5ee9",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d865903f-7881-4110-8f86-11036540da53"
        },
        "item": {
          "id": "8998cfb4-2f11-448d-a06f-fdcf1d55c0ee",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "7a4b8100-8aa8-4d73-a059-2c51cd816bb5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "551aa6a8-14c2-4f93-81d4-3b1ba35db946",
        "cursor": {
          "ref": "90583b07-9625-4a67-bfed-107f19d75e67",
          "length": 58,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "a552f217-9531-41b6-bdac-ea637cb64176"
        },
        "item": {
          "id": "551aa6a8-14c2-4f93-81d4-3b1ba35db946",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "fc9d491d-582d-41c7-9a9a-badd1d4f2e52",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "a5dc2830-fa3d-43ee-b1aa-925852688904",
        "cursor": {
          "ref": "57cc47c1-ff55-4473-ae7a-c77846b7a2a9",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "75415db6-2240-4688-b0a2-aa16d0fcbf34"
        },
        "item": {
          "id": "a5dc2830-fa3d-43ee-b1aa-925852688904",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3667e7be-9f3c-43c1-9252-5b7e62a38c4f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 70,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "a5dc2830-fa3d-43ee-b1aa-925852688904",
        "cursor": {
          "ref": "57cc47c1-ff55-4473-ae7a-c77846b7a2a9",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "75415db6-2240-4688-b0a2-aa16d0fcbf34"
        },
        "item": {
          "id": "a5dc2830-fa3d-43ee-b1aa-925852688904",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3667e7be-9f3c-43c1-9252-5b7e62a38c4f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 70,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "5222bb19-cdd5-4771-a253-ff085635761a",
        "cursor": {
          "ref": "5cf8d6a1-4b8a-486e-a20d-ede85f481c48",
          "length": 58,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "2f402333-e863-4f9a-94f1-d1fd7912e6e3"
        },
        "item": {
          "id": "5222bb19-cdd5-4771-a253-ff085635761a",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "8e12410e-8d0f-4639-8179-31e8c55c81d2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 68,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "9f241c26-4195-436b-8805-94d0776cb6c0",
        "cursor": {
          "ref": "0e96c616-3ab7-4c01-9845-251e9d3d062c",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "9d65db9e-6a1c-4e92-98d2-3d2cf72d7ee5"
        },
        "item": {
          "id": "9f241c26-4195-436b-8805-94d0776cb6c0",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e9d73339-114c-44ad-bd62-34f3e89c455c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "9f241c26-4195-436b-8805-94d0776cb6c0",
        "cursor": {
          "ref": "0e96c616-3ab7-4c01-9845-251e9d3d062c",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "9d65db9e-6a1c-4e92-98d2-3d2cf72d7ee5"
        },
        "item": {
          "id": "9f241c26-4195-436b-8805-94d0776cb6c0",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e9d73339-114c-44ad-bd62-34f3e89c455c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "f2d8ab0e-5f64-4aeb-a17d-7aa07b272615",
        "cursor": {
          "ref": "c450c13e-1e35-4ab6-9153-21dd1f6f292d",
          "length": 58,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "388e7537-f862-4656-81d2-1a1b8bdc9224"
        },
        "item": {
          "id": "f2d8ab0e-5f64-4aeb-a17d-7aa07b272615",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "5ff67195-f044-4dcf-a713-2a33a6633418",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "4dbd9c4d-4cf3-4c7e-9ba2-2c8e7ec7a727",
        "cursor": {
          "ref": "03ac5c78-fc34-40d2-ae44-7b64d450d329",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "24631792-6b01-4f3e-83bf-6ea3d19b41eb"
        },
        "item": {
          "id": "4dbd9c4d-4cf3-4c7e-9ba2-2c8e7ec7a727",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "5fb646bd-d55d-43a5-afc1-5e89c4cc8176",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "4dbd9c4d-4cf3-4c7e-9ba2-2c8e7ec7a727",
        "cursor": {
          "ref": "03ac5c78-fc34-40d2-ae44-7b64d450d329",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "24631792-6b01-4f3e-83bf-6ea3d19b41eb"
        },
        "item": {
          "id": "4dbd9c4d-4cf3-4c7e-9ba2-2c8e7ec7a727",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "5fb646bd-d55d-43a5-afc1-5e89c4cc8176",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "c0a0f80d-1211-4b46-8912-fcb0d2af4141",
        "cursor": {
          "ref": "51843f73-85e9-4fe4-b59c-f72b89129b63",
          "length": 58,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "c5f2b05f-9a40-4c56-ba79-b3a9c6aada5b"
        },
        "item": {
          "id": "c0a0f80d-1211-4b46-8912-fcb0d2af4141",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "fa4dadbf-5f65-4202-9567-a997b3fce51a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      }
    ]
  }
}