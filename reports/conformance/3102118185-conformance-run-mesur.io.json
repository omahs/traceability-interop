{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "f8c2e934-b5e3-46b1-8889-fb8967afaa12",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "6d98cc19-65ed-49c6-9d3b-3c0a4498585d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d88f5bf7-45bb-4d45-936d-69441ff33025",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dfdd4d6e-f64a-417f-823a-16863185e502",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e58edc94-6dc9-4880-9a04-ef1fffdc1177"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "2aeb01d4-54e9-40de-8874-66f531bcc930",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "bd936dda-611c-4d94-a21d-94a7bc797887",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bbc9a68e-8502-43c3-ae36-ab4e0cb03873",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1746cbd2-b863-43fd-96cd-28017e113e0c",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae65c23f-ecd4-463c-b7ea-d48bd0ba3482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cecfd493-d2b5-46d1-abc1-8a4b397589cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0d07e6b-19d3-49f2-883b-912ce0195421",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8aeac5e-d922-48be-b112-9d27685c6790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e761318d-023b-4a10-ae4f-fa943f727eb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a7bc26d-139f-49f8-8ba5-b36d98b15bcb",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07885264-5cc1-4fb4-875f-f962829ec8db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ef42bdbf-9ea7-408f-be2b-12c116a1d0bf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c57b4522-2c94-4be3-9df1-9e4be9dc7516",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a79c894a-8c95-4c9d-aba2-17035d46680d",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b55a39f-24ce-4cf4-95e0-d4aca25e9037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9956e48f-1265-4a48-a116-d2a8e8d38503"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cee1d2e6-5be9-48c7-809e-ced470e8cf36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "339e643a-d68f-4581-b0ac-24c7a0631360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "608df452-d06e-4ca5-aa8b-cb9bb01041db",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c633680b-eace-4ed4-9226-3a3806457db1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8e517c99-6504-4cdc-98a3-416d7ce0dd53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8af5ef0-4739-434c-a48f-f97f003423a5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "a01e54fa-c321-4a99-9afa-efd9b75cdd26"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8a9d2e8d-3402-4122-85e4-a6d3d5356afd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "64faa7f7-ac20-4d65-88f2-1c8195e0b2eb",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c6aa085c-6f95-4ca8-af35-8845e2b81dce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "11e80a4e-8277-40d5-adb4-bfea336b6e91"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "59cd8bd9-c0d6-4561-a696-7e7492cc73ff",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "01b52db9-2119-4409-9272-e9c0501cc9ea"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7f571eff-a09b-4116-b841-64d72a353c5a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8bb4efb7-d66b-4393-ae68-86958d56573f"
            }
          }
        ]
      },
      {
        "id": "15e816a7-10e5-45a1-8d85-3d6bc72eed02",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "54e81a20-328c-40eb-8103-a08ee8e33a3b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9cbb8034-02aa-4ac7-a3de-dcdd38e7437e",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "554399d7-de24-4158-8735-0bd0ddb70fd3",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ae87b24-5f8c-4714-96a3-c5b896b714dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b21b8ab3-d015-4c32-b5c7-eec6417011be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf7aa2ba-2a70-4537-b233-ad2cfdbb0d05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71c1ab88-b691-4046-8835-8607281fb7c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69dcad1e-b53e-47bd-a14c-9ba7fbe0b3f2",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ee07765-cf6b-4f2b-877a-6d25986d700a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07aa3970-6d32-433c-8628-aae7a3c7e64d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa32e230-337f-4f5b-ae61-1082fa86865a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d7c10c8-e71f-4b68-8cf0-e0dd54ce55e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83fc8f60-17fa-4d04-b790-f563f8ef5108",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e508e33-3219-4824-a07f-6b2a31334bef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5ebf7f3-6a3b-4642-b63e-2824bc4390cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa26e44d-1b5b-469e-8fec-8f3c406dd122",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1a1c733-d796-42fb-8531-eb5e10bffbd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab60a9dc-4424-4b78-ad06-8b930a95c0db",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf5763f-6d04-43f0-a815-a89f61751234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d292be9-1338-477a-b098-564860686362"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c910df43-9d83-4a9f-9aa7-5e0b12eac813",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8ba4414-844a-42f5-9222-981f80b92a46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "920acc44-e3b2-4b70-a10d-e083be10ff1b",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ba34e75-dea3-46b2-9695-2292f4227a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "207298e1-c8e0-4f93-a523-88691e6358f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5871c5b-ee9b-41d1-8938-394fa98e96db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9384f54-f440-4b43-974c-2b35b4ef5c73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fedb8a9f-30a8-42f9-9c07-a95c5cb6e5ac",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "574f481e-6696-4ef5-b403-e8ae8daeb778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfef523b-cd12-49ae-b749-694f4877ded5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d4a1625-0af5-45c0-8125-bb3873db97a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22786d47-2cd2-46c3-81ff-7206e7453bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cdb011b-48bf-45fa-9439-4b3bca5bf951",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c759f0c4-9ff9-404b-9e12-f84929d5848a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cb63a13-8db5-462a-a309-757f8e4e1e29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7185e1bb-5c1e-4a03-9313-337a43c04461",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "697fb73d-e5e8-49e5-8304-6c4a5d2b9730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "409d710f-94b8-450c-9fc7-92f0f3606f94",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d1bf5ea-8753-4e78-a793-ca6ead711472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba7651dc-2112-45b3-b7c1-bad028b177ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15e68f53-4baa-4385-ab82-3c3a47e2fcfd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd8137b3-9644-4ea5-bb12-92c0cacfc8e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "371ffd2f-2342-4d9d-9a4b-b095282ad936",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "033cfe98-0974-4267-a64c-c58e4d731dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b54b833-17da-4793-810c-5fd3a719b984"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fd3cb24-3d6e-42d9-8bcd-6828649fcc01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aae0de2e-1726-4858-9c78-8d1159842c2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fa6c5ca-d4ce-4cfc-a533-1421a7e2d011",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f063d04c-ca70-4548-9ca0-b2208f15f875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a00b978b-4a0e-418f-bd75-a1a2881bcf46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b89bf30c-9d1b-4876-b334-5e95600f2b32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4435e9b-22ec-4d3a-8af8-f5fd7350c967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23e5dbd8-3725-4293-9a6d-094d6c0b533d",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0b6a16b-b25e-4b69-b969-a5021090e6b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81d82a3e-61c4-48db-bef0-9d3b94fa359a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c0309cb-fbe3-4eb0-a2aa-09fb8281918f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "8c901d39-dfdc-4591-95e2-c36d72848a0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41855239-4070-4c7c-b3f4-65f2679015fc",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02232723-7bd7-4a00-8e44-26de98888df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e4f2d72-7822-46d8-b03b-f930accc24a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10c609c2-6917-4d41-b70d-8623f7fd4902",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "f437ac46-7117-4ac0-bb51-1ee7b539d899"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d954cf2-773a-46e8-b769-a4fb18903344",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48574bae-3acc-4dc9-bff7-e9192e28ff67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfee84d0-c525-4e2e-9667-be634f1ca2cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6513c95c-a2a6-4997-8df0-4fad6bbd36bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cc3119b-78ba-43d1-854b-c0dd788a74fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8738428-74fe-4762-b1ce-77399b382b46",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fbff19d-3160-4221-bbea-242378718a88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "877be978-9591-4a51-b205-b2b392e9f18a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96b54420-ee87-419e-acff-97f33935a0d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00227af2-5f8d-4a6c-8cd3-6fe03bc42cd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f5c3fb4-452b-47c5-9e83-9f96ea3a90b9",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "604e3f3f-72d6-4235-a0ce-1671d40710f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fb7b98e-6c58-4a83-9091-4cedd9b10dbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "527d7412-4396-4800-b70b-54bc1830dd11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "863b1ca9-297d-4905-99d4-8240e34ac047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f338481e-c4ce-4b3e-b901-ccd572db417b",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "725546ea-4707-4b46-8b84-9f672be80c3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ba6da28-3d6b-4ca7-a9ac-63cac0416841"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57b5b67a-50e5-4ddb-860e-1fb4d14b5d5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "0ec2bf68-73a3-4f7d-85f6-72f642963dbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ef17815-8b5d-4107-ac50-074883c9f19d",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec228788-3d0b-4927-aa7e-8f5a5ad5d6e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fee9310d-b596-4193-a300-2af52c62d18d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7d5ce1a-f89a-4e3a-b0e0-d7f0c498a883",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bb3737b-f9a6-4cbf-9684-6af133015b6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d96af742-1426-4f25-8b68-69cff3e63ee1",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ae97ec0-24a6-4f16-ac55-801264cb0ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ceed58fc-6beb-414b-aac0-58d1135f2c12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7a8be9f-59e2-4839-bb75-a45c662a6cb5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cbcd67c-61d1-4fa4-9903-155eb97eda0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9005f9da-a793-4ec2-8991-68fa8c1eb91d",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "944208c8-46b3-4bb0-a4b8-374873a08950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63774702-2f74-4cf4-bc96-3c0d0d06893b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3e8ec0f-14ce-45a1-8b77-bafb4e59b4ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfa7565a-089a-4f02-b9c0-85a00e688b01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edbdf895-4ac7-4f46-9f33-1aa0549b987d",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59f7dff9-22b1-4f28-a846-16d48c6291af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07e7d3d6-3fd9-4e3d-b49a-baccad314f0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c8c09c1-4c77-4f04-886d-f38da88cd14e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bb752b5-5dd9-430f-8655-33d33ada2464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1d401f2-ac47-401d-8ff2-fb965c256fa3",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7877b456-9734-48e4-86ac-d03d3d0ee5ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42b5a189-daf5-4eb1-9c80-faf804d24e78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fee48e4b-1f92-4691-8394-ba758af6057d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be an object",
                            "rawBody.credential.credentialSubject = \"did:example:1234\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c44fe2a-241e-4549-824d-cc25c12469ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2efe26f1-4fe6-47c8-b213-3f3bfe5aea8d",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73fd3d2d-f52d-4f4c-9c57-aff862e6c17c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73912070-6414-4b14-83d4-e59a169f7dcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19171b37-fb0d-4774-883d-f3d89d636589",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"did:example:1234\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2aff422c-e8c7-44e0-8286-db96f3f4b5dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc70cf89-9328-4042-8ea7-ff9723b0b0d8",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "414bd065-bcf5-48f8-9b2a-342418d15fff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae157682-a93f-4a2a-abeb-b99a38de6353"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd77ca18-c464-4164-a09f-e5505472e721",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78b3156b-7a56-4299-80cf-21354861d198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9683b9c1-81d9-4f0c-947b-969ab38ad46f",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36d0b90f-9bee-4783-a24f-d5045e436858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "009b5863-9aa0-47c6-be18-5431d3a58ae1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f40ac9bc-d98c-41b1-ba12-c1780341f188",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8c3665c-1cf2-4dd4-b630-da7c097ba0b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18f04abd-2024-45df-bc70-a188563aca19",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb1da669-9223-4724-a7cf-c508b6d49513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "617ce78e-1b85-44b8-94cd-4bd1049b2f66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1926699b-0e13-4d2c-a1ab-29dfdf67253f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22edf91c-43f7-4a5f-a2a2-d642fd4f2340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5e171d1-bae7-4dd9-a0e3-d62284536641",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d4761ce-1372-4845-97d1-d38889efb313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e14f158a-7b36-4f65-8fe3-9c5d600b2e2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1265bd5-0234-4e06-b827-809c84d7106d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "333ecb16-2391-4b05-8175-d68418976079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c6ac06a-7a1f-4fe1-ab3a-710f1ce08b8b",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1efdc2b1-b07d-4376-8204-178546cf126d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e26d8e34-26d1-4c7c-a6bf-a6db4e052938"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a880e4a-e111-4ccc-9a5c-a52beb385d40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2516e96f-67f5-4e97-bdcc-46e7f698fac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "896cb2c4-29b7-4d2f-b7f6-1868c5b7366d",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba9f5940-bcfd-4db1-baaa-873366cd7bfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b6fdb19-a14d-4946-88cd-9847c4282318"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce9a7ebe-ce01-4b55-82dc-db9374a1ad08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8efe91de-ba65-4101-8136-e235df330ba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5052b80-8128-4b04-8d2d-1981b5365b0c",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99a1a76f-44ec-4934-952d-0fd11ed5e1dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76f9baa2-f7f6-4b38-aeb7-e84e75631e03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97af764e-10c5-4915-b6ed-a0ab2cb763ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6d672b7-f286-4ddf-8d22-2b193e641827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e410c0fb-acd7-4c76-a898-16db2a55e2ac",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d53c8fe9-d078-477d-8e43-2e0f1e940537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4162574-6f90-4d53-997d-e5a28adc3f95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3d5dda6-c62c-4b3c-8d70-8c3edcffaf24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "407431a3-9292-4950-a94e-41e29aa2fe53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80818f05-77b5-4ff8-83a2-0b6fb78ee654",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd66609b-413f-4d5e-ab5b-717ffb9a9404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "5353db91-beae-4199-859c-71060288531e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70eaeb21-42aa-42e0-a2f2-0bf9b141754b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37e1b997-f7cb-4e9d-b58f-f6ebf4ffd212"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c5aa0ff2-fdc2-4c91-aa5d-4ecf17e31085",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1581e3e7-44a4-45af-acc8-8134c868d1fe",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e3dc2c4-96ff-4c24-9c42-b9fceece036a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1258131b-e098-43b1-938b-29cac25df04e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ae8026e-7457-403b-a7b2-48fb213768d0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "34970973-ce06-4e68-8bde-ed6056d967bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96e661a2-d5da-4af3-b64f-6e2c01a0ea4f",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "338fb29d-7ea8-40f5-97bf-326b6d624a61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "190d42c7-3fd3-4080-9ed0-fd6c08d69f7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da2f7a5f-a5f9-4c21-9005-1d5720258cde",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "b5ac2321-3c3e-4a2c-a71e-4d8e7887be2c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6cc7f4ad-52cf-4fa7-98d3-c7f6f02f1189",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "246b07d2-36fb-411c-a87b-0220f3e940d4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "17e9ec6b-d1de-46db-aaf3-dcc01eb88486",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b586be10-153b-46d2-a9a3-0c6ec169eab8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b6af304f-eece-4fc5-bdc8-34c94dc75da8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "885187d8-5ba8-43ca-a692-76deca8b0334"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b6854ec1-25b3-4249-8352-ddfa731da5b2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4a8e3af3-07f4-4fd9-bb8c-88642a2ea1d2"
                }
              }
            ]
          },
          {
            "id": "2fccf8ad-c20b-4b04-ae77-b8f03ee12552",
            "name": "Positive Testing",
            "item": [
              {
                "id": "be814e90-ecd8-4089-b387-6b4af291e8fd",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e44bf27e-f4e7-4af9-a2c1-4c18c31b9013",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7a8c9d7a-7a38-4731-8865-e8aada7aae08"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4b8e1b16-79f0-4c77-856b-35013158b0b0",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "10b6030c-ab26-4caf-b622-4833d1e065ac"
                    }
                  }
                ]
              },
              {
                "id": "3d3a238a-fee7-4caa-a477-56d30d0b7c94",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f5494692-0f08-431d-8605-7dcd40083e56",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0c22d079-f3a9-4dca-80d1-c907bc2a268e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "77d90051-5dfb-4100-903d-212342216d14",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "a44e284f-5536-48cf-9627-ac3e32893808"
                    }
                  }
                ]
              },
              {
                "id": "8e064460-4c2d-4d5c-bc3c-e5134d731f4c",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a18effd6-ca4a-4c15-8fd8-6b74ca0099f6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "26e58996-85dd-419f-b83f-182519ac0ef7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1e1f5f6a-b320-4f30-bdb0-8275eef6962b",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "e3d36b68-07e1-42a3-8aab-5072dcdd5b9e"
                    }
                  }
                ]
              },
              {
                "id": "c5ca56d6-61c6-420d-85c4-a6e583c6829e",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a62ee1d-524c-4fce-9adc-8ef53ca6e315",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "796e808c-3aaf-4ad3-adc5-4f513e9c6150"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2e867fa1-97d1-4bad-8fb0-ab1b9b9151fe",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "3091d1dd-fa37-4c67-8606-21702fe62c9f"
                    }
                  }
                ]
              },
              {
                "id": "977772b6-f4db-4779-8edc-031fe297495f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0dd138ec-0ef4-418a-a350-61c32e4b1226",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "42cce614-e884-4a53-919d-a52437616d41"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8557662f-3562-4c25-a9f0-3a1939166cf1",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "2dc09936-fa7d-445e-ae62-2aeb9c847cd7"
                    }
                  }
                ]
              },
              {
                "id": "07598d96-8e34-4f1f-a277-e720adbbbf41",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "228b89e1-b05b-4a1c-bd12-c0815104f435",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e125eb63-3aba-413f-8dd7-f14b12d0dc63"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0219606b-c028-40c2-bae8-e8b31c746bdf",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "a8b44f22-85a8-4aa8-8438-e409e0b2563b"
                    }
                  }
                ]
              },
              {
                "id": "e6cb01ba-6ac3-4e28-9010-d9ae7ec5ad75",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "58d8c4fb-0aaf-40cd-8b35-7aff2fb02247",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7dbef631-45b1-4c91-b421-96a1799abed0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4264607f-e787-4058-9167-2f9b53bf7361",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "67434301-4d19-4ee8-88b7-5ec16de5973e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fdf522dd-060d-4d1d-a935-64f4bbddae89",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3a40c755-78c1-4aeb-930d-f7daecb24402"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "38dad9fa-155f-4151-8769-c59af8159d98",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f7d8d49b-c725-483f-880d-a4c414b1432c"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7e525e1d-fde9-4847-a751-6f0621670159",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "e08141d5-5c6d-4c93-ac9d-5f1398e46fc3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0f200c0f-2db2-4af6-96cf-08456dc92dfa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b91eff7e-ac00-4edf-8d3c-78b3dedc61cf"
            }
          }
        ]
      },
      {
        "id": "68f11c97-7d8e-4995-a613-1100107ed634",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "b5add378-c0e6-46c3-bd56-30b0b47f3284",
            "name": "Negative Testing",
            "item": [
              {
                "id": "28e9b2e3-2b9f-4267-a028-441fb0cb4552",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d6f062a2-009a-4979-9c04-e8b9a886f07f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "580cc06b-7367-4275-bdd9-b4a0abe187cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8bd1d48-c493-47ae-b13e-f3e9f690d474"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bfb31ae-9617-4f45-a569-cbd2c538fd47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1257115d-ef61-427b-9795-346a790339f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aa65972-2dc9-4118-9a2b-7d128eca7828",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52baca9f-4148-4755-ba14-4e836233b1ae",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "4795fb38-8db3-4b44-aa3a-3ed25729ee55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b9b3e22-4363-4a0e-92cb-69c6660671d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d222b9b0-c6bf-4845-a4c5-053e36a027b0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0a581d4f-62b4-47a8-9596-90d0927c38bc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0a43bc94-40f5-4aac-9b3f-910c26da216a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ea8b97f-6249-4c72-bcf6-fd0ca593a0f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4494e01e-4c56-4b5b-8e78-a028b64b9de4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "73b40000-772e-4c41-b307-8184cdd44272",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "a1dd9b07-c655-4d0a-b80b-989919a4ba61"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1a3aeb81-673b-4f15-9f90-4a6dfc995189",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "465f8b61-ce47-4b86-bd58-7829e374023d"
            }
          }
        ]
      },
      {
        "id": "2a85dd71-f203-4b80-a16f-1f937e65765b",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "f2363ec9-fec0-44ac-991b-185d640db54f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0c9db967-21f3-4b3f-b242-e5b2ae2d34fd",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "093fc9fc-2973-4c7a-8fe3-e96019f0b217",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a106a2b2-fba3-4104-a3c1-6a6ff8778ced",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "303955c1-9c2b-4c54-ac61-ea54b16e3d4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecbf26dc-c2e0-4fc2-a5a6-9fc38ecff04a",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a14cfb3-63f2-4aa9-a083-2e52ce24ce12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c88c64d-48b3-4412-953c-f3a5d8b8b232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e9a6fa3-1dbf-4e1b-995c-124d9fe53814",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09535af0-e17b-4b83-b329-3fd87c05e15d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b78d0f9-dcc0-496c-82bd-dc34b1b3c76e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51b56a77-0baf-43eb-ab49-41009795b77b",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68448e47-6d58-4b59-8680-174a9d5f0e23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34b80366-a921-4b76-820c-d502185ca2eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cffed5f6-fa17-4af0-9f4a-1d6c75d03306",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8b7f2b6-f715-4d0b-8c8d-f910e717fb72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "347f7aeb-d35b-4c57-b27c-26a2d408a0ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75c66535-08b4-4be3-9f29-2de58b9e1139",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0834b12e-e30b-4d98-a05e-a90605f29765",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "375e743c-f5f5-40fe-a90c-3c794340a0bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b187e3be-b184-4ac3-91f9-f192cfc1ac09",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52f12110-80bf-414a-8f7c-4bb2ce492523",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58e925f7-7952-4f09-8431-6f7d124cae11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1bd90cf-d2e1-4551-a562-54163c314143",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf208412-0724-4247-8658-cd4c7625888a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e61acd2-2eab-42d7-a5cd-b0782c956546",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d2afd1d-5ea0-478b-af8c-3edf86e37294",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41a755f7-aaab-4535-860c-cfa08232dfe5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebeb31f2-c5b4-4cfc-ba3f-894ef3adaa61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "609dfc7c-0097-4631-af5d-f967f38f07e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0e1cd7d-29f7-48cb-9867-4e930170655d",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea144631-2432-4163-a84e-b9e9940375a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e09d67d7-97fd-465b-9e0c-eb51f7874dda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af75faa6-4901-4f63-9899-9d35ab08013c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33a668a6-22cc-48dd-b144-6b203f1d9a69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86a998d7-2dee-4fe1-9a51-966040def2dd",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0c0704b-5a63-4fc6-aad2-a5a973b05436",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42dc11ee-3486-4829-bbd4-f8cba92ea75c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d679026a-85c8-4234-b45a-802b2d9d7474",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dee17636-0e47-4aef-8841-af9e82f2d1f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc628d6f-e0ee-43a1-85f7-44b345b3dd54",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..RJunbl8K6pk5JyKv0VkmdJT4I8sfatEPdbup0RAYKU6F1fDvEZ8j0xFlr1ocpNQGIi4H5cufTCRE3Fi45ZQ-CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baea7273-e76d-4b20-baba-d12f2977cf2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26d2de11-0aab-4f1b-8a61-8b98f7e6e229"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e8a1094-2866-4836-9738-e328ca39cd96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bee3d870-9b41-4ea4-acd5-ee3d18a1609f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2523f03b-5bc9-41e1-8b2c-400ec47fb53f",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..33cnhPeRXCGz478h0OHf8saAVLVXrxpUI5wG_hdHUWjqKz-bnw2xRGx837FIMgC5jICPlDjEQl1c_durehmQBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57c458f6-3dba-48f8-9a76-29b55892f743",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe7d44f4-dd3b-478f-ba0d-0bd2c4e287ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a45ebc-8ad2-4622-9eb8-6110c4e63e6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcf06e50-5c71-4577-92fc-deab790d248b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2766ca3-f65b-4c58-b5f0-2c6dc9f43f63",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77852e6a-1c88-4dc8-bca9-0f020d8dcfa6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6d7d8fc-b43e-4e57-a7e9-1a083b405871"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddc541e7-339b-4844-8890-ea6bfa717e4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b60887a6-9def-424d-9d5a-2a05fbba31f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3efbc070-1c03-4e79-9eae-024da0ec03ef",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ba138a7-5394-41ad-b122-0318278a1604",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be09667a-d162-439c-a735-6848280c5a75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "164f52b7-c233-4c3d-ad28-b09acee812e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d0bcb28-063d-43e6-b317-0fa39c436715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5bbd54c-c924-46cb-8082-fd57d1f8f0a9",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8909dc7-3bf7-4a7c-ae26-8d0b63d3858e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55757cfd-a476-4221-aa64-395f9cfe98de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42c72ccf-a2a3-4c57-97ab-d38b04bb99ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57763786-8d43-42ad-a11b-e64fc89bbfd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "609edc53-7885-4381-846a-6c7f6f12afea",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1d10d9d-fa92-4dd5-a12e-160ab3dc54fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83477123-7818-4040-a1ad-d918cea7df26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f749409-7b0a-4096-8621-25af63e90e97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9daaab1a-bc97-4c55-af7c-299723107aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccfd2575-9504-4d99-b205-09017792a781",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..33cnhPeRXCGz478h0OHf8saAVLVXrxpUI5wG_hdHUWjqKz-bnw2xRGx837FIMgC5jICPlDjEQl1c_durehmQBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99996167-7ad3-40b4-9889-08bd1f9a933e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94974802-fbcc-4ffc-945a-eca2b0757bab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51ecc910-6672-4fd2-b940-1953f4f657eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7eee7fa-a066-40f2-9fff-1d3f7abbc49f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fbe7f7a-2783-469b-a0a7-901e3a96cc9a",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..CaZ2UcTNDOTCXaDXAclLPy7_3rpuf2sbL5xwaMnN2abolieE_C7fB7RsmZ7i5_6CoKRhGnrM3_YkAms8IlObCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36cbcf9a-3bef-437b-92b0-e19b42f6ad4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "171b2f6c-259c-4f16-b62b-afade2e904c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c78e82d8-a68a-4f7b-8ad4-03f2c82cbc53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ded81dc1-eded-44fe-9731-ac3620ba5c4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e62a4bd2-e565-4e02-b191-9a81193ac00a",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..yonwdW7r7YFAAjZZxjVrYPkLVrbLR5TMZ3bkWN1uo2UbUi5tgtlikoyyHlj8QD0MPA7xd4Jv-1PlryIVOqtUCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "690472a1-570b-47d2-8941-4042a942ef0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "436b8d5e-402d-4b3d-87a2-bd89b2e83767"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c865e010-9774-4076-a977-38ea1fd1dd05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2acf5ba9-f7b5-4912-a5e9-34907a456232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c213ca9a-5c19-4fc6-9aa7-8c32af84b86e",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TRCl90uRMmkycDvfeHw1S7yxyAVl1-Vc2SfwwDzXkn1SqfCJxptwVsgJWwr3gQRAqveZR0xrxQczy4tWHq2FDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea5b88a2-4b4a-490b-84f0-aa2ae1a29f81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a9a76ad-0ff3-4553-b3f2-cb6c9dcf650a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04c99a81-e8f9-4bea-bf9d-e266ba6ecc3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1eb01597-4a0b-4084-968f-8a15abe4a566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea5c8fd0-8607-41aa-9a5a-d6f66bd3f32a",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..33cnhPeRXCGz478h0OHf8saAVLVXrxpUI5wG_hdHUWjqKz-bnw2xRGx837FIMgC5jICPlDjEQl1c_durehmQBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fb26140-8693-48cd-827b-84ebab98e5ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6821c409-61c5-431c-886b-7ee339063d1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6d72a87-dc17-4bec-a28e-39c623f19d46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "057fd25d-ae2d-4ae5-bb84-42eefadc2cef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ef3215-fccb-4e63-9cf3-74fff546934f",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ymo0kNnQ9mVHr1RKpfCuR_ekUAXzNEM7stSEtbbFv4ZPZb6NK7kUBkckgwrZyBp8re9RQEedJ9yiyfzTL41dCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be64bd54-754e-4f38-8a72-96ae041717af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baf35964-7747-4ff4-9029-cca777441854"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2af180b-569b-4eda-8aea-4d57a7a71258",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16316cf9-7c9e-442b-aff3-8062a9bbc5d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca5c4139-4812-4018-872c-7a9dfd7be827",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "314f35ce-df17-491b-82b5-45f7c0b256d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6f335a0-98d2-4c5c-8852-79b397345024"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc24733b-74e3-4efe-8849-b89fd8318771",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c30190fa-5893-4726-a8e8-f18ab7a335d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b57b467-cef6-4aac-bd22-b8c0fec30355",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f52e813-93ac-499c-b695-a9955fb081f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8f14a43-c931-4f69-b3a7-1c3ed8b58522"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a72e845b-18ab-4beb-afcf-1af70be6b2ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7d3bf25-82c9-4fcf-8321-43069f013cc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a777bad2-1a78-43ec-bc01-5ad53977d1bf",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14b186d4-1149-4d9a-b993-ddad566bdbde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42783d14-80b6-4e7e-b9ef-2d9f737e0f3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bca0ad51-79d1-47bf-ab03-593e8b5aff6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b469dc9-f46e-4eed-a992-d03cdb588387"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30363715-0a35-4e34-943c-4c1bf80e33f1",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b95ab08-a81c-44e1-b80e-cb409e3409f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d9ca9de-f632-4efa-b24c-21c903d1cef6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74bac04b-5002-455c-a4b1-bcf7848aa529",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11208ae2-14a4-4fe3-9bbb-0441a2a2cff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4da77cb5-9df2-448f-821b-23c8cc4cbfd6",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaa6d2b9-55bb-4245-a86f-0c203ad0804a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94646857-ff1d-42d6-aa4b-debde26983fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59436525-ebb3-4362-8c40-d9d1d39ed618",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3ac188a-bd60-4254-b85d-2f94e77d4cfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcbb28ff-7de2-4f0f-bf53-d227ee5e1607",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..J3mhnnbzRyvk8fyfh7fwzuuznEROTdVRM_MrdE-HV93WdGfTdgVhebmdmVZHmvmJiQaxYiIuD-natToEB7xvCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ada94d87-de56-4a82-ae07-b98d78bd2f4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e718ad6-d34f-4370-a056-b1779bbc3d38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "733d8312-ec74-4267-b9e5-533812d0bb49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e8809a2-f882-44c6-bdbd-8d92e5a3c118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "079b259e-dabe-4686-81ad-76c5d5e7627c",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f06df9dc-c028-49cf-a8ce-67b073b5354c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9dcf5d3-1f4b-4048-8da6-3ed39328b7fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c2e3ada-1cda-4a5c-a60d-01547a2d6013",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e9c88b2-8eb0-4712-be67-1fe4789e21cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28b7dcf0-539a-42ca-972b-ae4c7009f7e7",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28b2d6b4-2911-4557-807e-e98b235c5642",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c52fd7c5-8077-4d26-874b-b07bdbf898e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42ab141f-c64c-4727-b39c-49ce38fdb9ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a540e1e2-7d8a-4851-825f-1404dc8e4368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "581e3b39-6d23-478b-9757-2e311f843291",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b77c5c43-e6fd-4211-91f7-08b385cc7d86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1c57b72-7537-4d1e-91be-17ea8dc864bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b00bd056-7548-405e-b962-56d6f24759a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc352be6-d754-4a1c-98eb-714f83607834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "149b7231-3324-45f4-a67b-4690431d9239",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "800f163b-aaa9-45c3-a29d-62e558021219",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1c648d4-9c5e-4901-bed8-56d5ae0f36ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc29c751-b388-4e28-8e20-843f81bada21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e563ec3f-0d82-40c8-8172-ccf3c34c89c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54d95728-a458-4b08-b134-adbc805b6903",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5071724-f8df-4826-8de6-5aa4a181b66a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20ff0f17-0ae1-40f3-a2c7-2e8d60cfe2b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e845bbfb-20f3-4c75-95bc-4fb15542714b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "364db97f-4940-481d-9b0c-9de8c8c8d798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a60a4b1-8898-47b5-bfad-db131e9b6a9a",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xkCnC0dheSr9rWQn6uxLta6CXejSLy7FIQkZT2rYiOV0jmWW8SWcCdLqHg2gJ3WyBBmxj_zRwNBpFIUvsLCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5edd3df1-a8ca-4447-b4d0-093abb0db88f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bf5a0c1-998b-4047-b434-9cd1c2d4e6b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de8241a6-d49e-4875-9b19-86f8fedd9351",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39ca0bab-6c4b-4607-8eb1-68a03a18f143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39a167d1-cd16-48d0-b90f-2e2b033a4b59",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bgY03ZzK02APUHCDiqUVMYbbvu4mSPNC1sGY3lTC8ko7j5oZDB4rB8FRzsXCc9L0O4nHx4UNJURCsRZUErbRCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e7c7ce6-399b-40d4-a3ae-2df47267f325",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77a801e8-dd8c-409b-9e2c-2dbb0c5e63eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47bc389f-be6b-48a8-97d6-857da6aa7589",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48885785-9075-4625-8d45-70e7b6ad4448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa54848f-1af6-4c64-84fc-7bf4adb556e7",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..2Mu6q2PaIBjmfXHqLuT7XIFthDHboV4bdlIdLFY9KxapUXic6uhoefYFrarss-AN_5dUHdjWnHEMCoWYjW4MAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "362a5fef-e8af-47d7-87e6-b94edcf8f603",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8987ad53-2e5a-4766-b756-0f2e27539e9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fb38c0c-3832-4e0d-9df5-cc051329a38f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1b3ac33-fdb8-43ca-aeb2-3da1cacbefbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8ff9963-6a19-4a40-8956-0003cee32c3b",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..L3RWLJfQzaffmRy3vXZF_7gfdlR-iQbA_8TjGFaBCmaOqm8R7Qi0B6JivEqshh8MZWufDitgO-r6ASk2iaGVDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f6a8e4-c13c-404d-8010-0ef8fec5d2a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "472a31df-676e-49de-8b55-496099a8e820"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c047d02-beea-4cc1-b2de-8888955385db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "224fa2d2-4fc4-4f34-b546-a39cd25eb2c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de90406d-3519-4363-b474-655e58c1d448",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xkCnC0dheSr9rWQn6uxLta6CXejSLy7FIQkZT2rYiOV0jmWW8SWcCdLqHg2gJ3WyBBmxj_zRwNBpFIUvsLCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9e016e2-736d-4464-8982-eaa2c9534158",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6f6ef3f-d431-4739-aaa1-bf1ea6aa1621"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08a827b8-04e7-4d0e-bca1-bbf445c01791",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "476bb29f-935a-4da8-b8f3-7e1cd77159a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebfdb833-33f4-4f3f-aef5-43642468e6e4",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n0Ffdz9nyzKuJw3OlGpU5h8clE5I6MFEFEEobztPABGQn1hFRN7CBx_BmDMsT7KF3jSLl008sTJ3RllFql5QBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0246374-15b0-4284-9b68-60b97b9b45a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c8816d9-617b-43e8-be05-a212cb6322da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b491e10c-fc6b-460a-b7a4-1c8e2143a0f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4051e686-9ea5-4b33-93fa-5feca3d72130"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab216865-f09f-4377-8616-f8cf7847f940",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..E4WypAOLo4KNTnvHucei_9yLEMdlq_UwhS7mexlp5i3hF8SfBAlLv2scHANd3Ikhtqr9JIyaXuDnIN2LsaVFCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ea83fcb-0c72-4604-81b2-680b965cdb0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebb1bfb0-8651-45ac-a5ae-5f8a6e002c63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67fc24e9-e97a-437d-93ba-9d1f2b8ecb1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ca0ffe4-1469-471b-8e11-a5f1d56218b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92829be0-e5a5-4245-9637-55c33b148481",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rnEgkKo3EQPiGixl67oPIFuZ7H9zueq0ELswP2p_FdahgJooIojScCnp-AcxeC_G6YDtLUbsNlVy0SkDvTnwBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a928ecf-29ee-4870-8701-721813902b6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ec03edd-2606-4304-9ca9-d874a559889e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39b0b79a-84d7-4399-816f-6bb769234ded",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92d2e1c7-71e8-47cf-a0c2-517bad5d31e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb4bf630-cc56-4946-ba41-adad3106af46",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..nK8J_eHLw18__7Byp9ohgpDCHY1-Wfpw8vk-8k-nw4ezzjlwYoYjbo9x_xx3ES0WY0aCN2Xr9SbRoZHr78P0CQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57b14033-c1c2-4925-bb74-290a34d3accb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c84c7bb3-dc14-4d4e-896f-c126d5de4faf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ad06f58-02e4-4fb1-8731-bdd5c0c067fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bace4977-78e9-48d1-9a95-13d6f1e26416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d4e8ac6-b251-4b0f-a3cb-3a52366b1279",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n0Ffdz9nyzKuJw3OlGpU5h8clE5I6MFEFEEobztPABGQn1hFRN7CBx_BmDMsT7KF3jSLl008sTJ3RllFql5QBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fda8cdf2-fe9c-4241-9d5c-232c481ee30c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83a2a1fb-36c4-4ec5-9952-8383a3767f08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f91ca1ec-bddd-49b1-ac0f-332da803b93b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8b6cada-c12d-4d38-92bf-724c128126a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72a50863-e4b8-46f0-8ff0-d813eab5e19c",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GEyy2tqmKf8AzHhXY06veUbSRVk9uoQIu21GZlYtcdMGh-VrTjvfVg2R8DAFtCBe6tEUL4dnsM87mT-20nG5Dg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbcb391e-7c83-4ee2-a1b2-078b90e23374",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdb6ae91-fcba-4083-9344-5bb1d76324c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b45a7b-1ae6-4abe-b767-8fd322972301",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1550d687-6313-49eb-8a5e-cee2fd6e79e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9bec17b-c689-4e92-9868-564b1c715d09",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..WtxX0aIcE2JJ6T-a5nqfvElr_E5NwRYeOJgRBqeAVVFNJJaQJh6rz1V6nZsDl2xsblGQxCAaWQq9V6SphImACA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "387ae8cb-b70b-4726-9397-ceab488009e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdc80700-15fc-41a8-9c0b-12042b07109e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d298badd-37c7-4d3d-814a-3b5d58d9625c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43c3dc08-88c0-4e7b-9b67-d47c11a1c06e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "028dd658-92cf-4137-a638-6c87dc254e1d",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vuVI_mdt7bpVwmKIsmIusWlCbj-wk33p6_FC2COcGBKzh9m5jxydHlDRIM6YoJQJWpS8_EavVFKwQvPuLuwNDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca4cb9b5-97b6-4023-ae64-479d32f44997",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b63ec4ec-c162-49d8-85b1-4036e256014a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f789897-cf74-4cbd-8d04-dc229573d0bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b103744-fe34-4ec9-9025-9cdc06f43175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98939138-de12-4792-a727-2248ef8b18fc",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..jurLQ2KXgTdIxIAB1dwcysrBFVMT95g3Mn2SuyxAubRWS8Rbe-dFsoVG24kxo5wE6EZVYEuES8uHwNX_SSrvBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48646b7e-fbab-4a9a-ab8d-9d140fa70c17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "784b5eb5-3137-4fa8-98d0-5311162ae784"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5ce9f7b-d0d1-4851-807b-f1857cca7426",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62f8b1eb-4ef3-4b5a-a58a-1338c7313f5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "293a3a46-8d3c-4985-bca1-ebb587b30b4d",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..HyTRfrVnRzNCXO3qmmbQnmtXYV_bAdmZg-27bnuBGqQScL87kkmPfY3CpSTLN_8aV72mVBkvy1-uvYhkQotmDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2370798d-4e29-4ccc-969d-aa15d714a5ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "027e46d7-1216-4c4c-b0ed-9f10d9eddf39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70832b5a-db3c-4cb5-92ac-836292ffc1f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad57fcf1-27fd-488f-a768-acdc5fa3b93a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7de2b903-5105-4a8a-8255-53c741bee149",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..WtxX0aIcE2JJ6T-a5nqfvElr_E5NwRYeOJgRBqeAVVFNJJaQJh6rz1V6nZsDl2xsblGQxCAaWQq9V6SphImACA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a13fb008-0e65-4654-8bc4-984d811ec57b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "985c2ec1-6525-48a3-ae4a-bacdc3b10587"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5e70d6e-717b-44b4-91ea-40525341aaee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc715f9f-aedd-4848-bcc7-fa5c1eb10832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "239b6695-18f8-4ac0-b95d-4a9981476a5d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5NhiK8XqFDY7TB3l0Mli_VAhnflErggK8zlj71jNg6F5WD4eNAVufeVLhK8HtvGaC-7R7nQzQfzkCH9692DUAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc399c9-b4ff-4789-8f33-e5531ee85dac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77be33a1-1871-4862-932a-a23f5c2edd29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e750b1ed-f074-4c16-a663-8f485aca1c0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9b8d6b0-c67e-4dd1-91d6-34859a9e6ce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "058c6f4b-9035-4327-bcb1-7ac692d2978a",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1phNak29yV9Dt7ljiilV_cD1b78U9dV8Zhwjgrocc4Nahxchof8QHmEAFjfupRQZ71WIBpW-VGUtW-OwUu6eDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f581d7e7-8976-4ff5-8259-5d1f99f4e68a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "556e28ac-a053-423d-bbb8-60f70882271b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba78b1f6-6ed5-4e84-b12e-35d425fece3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98acee89-d042-410d-866f-a60c1103775d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f58370a5-ee48-4e5e-a8ab-afd70a5e51e3",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..jbb-uyU5OrakaqoC-9v-KQVdCXvOfr4Vjxox8hwFNP6qggsTP9NhHuq-T2Vdyag8BweIFTykT0SR_jAgtOxKDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9f3bb8b-e794-4b2f-99cc-01f67c488382",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f105c433-f4f2-4b5d-bbd9-adec08471ce4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f16145-144d-4cce-8211-73e1790718a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c223aa0c-3fc4-4e7a-a3bc-96a0aaf7e7d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64056e6d-0ee9-42b4-b839-ca70b7953fa4",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..J3mhnnbzRyvk8fyfh7fwzuuznEROTdVRM_MrdE-HV93WdGfTdgVhebmdmVZHmvmJiQaxYiIuD-natToEB7xvCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23104a3d-b509-4fbc-a63a-3bef96895f38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daa93d0b-d276-4e9d-94b6-df515545e8ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b63b8b1-70dd-4e61-bb61-d72fd8130a30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e95988f2-648c-421c-8bf8-01903b6aa0d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e998fb84-8a72-4e0c-8fc6-6444f421dcb9",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..j1W65DhMkwul7bodXfKrVNsT_27QIFO7rI-8TDk0-ef-wu4PU7OuA8MFAOXfx-HdVf5KdqVu0BB1ITE6WjIXCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "671fc473-883c-42f5-9b01-161572d8c4da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d581cdb-7604-4066-80c0-61607f2c18ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a15c8414-b063-4e65-9498-c51550f087af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "238c6c68-496f-495f-bfab-69993b6d897f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fb3949f-ac9b-4f0a-843a-51cf24b11616",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Wm4yBzXF87zLmyA0LMEwHSWs-2EfPpdN2yJstmvPJkPVLFdXKUdjh7lZuHNVtTkAMGNT8Wi_RZ5Q1BWAY054Cw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea1a5feb-362f-4133-98ff-4baee49a0c27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9865923b-7849-4960-8ac0-7175ee791ba0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7449b94e-665f-4d9e-8edd-8ad1b7b92dbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fa9f788-9712-4a21-b1e7-2765236a2f9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f69570-3381-4a4a-a65a-f812c62b2156",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..jbb-uyU5OrakaqoC-9v-KQVdCXvOfr4Vjxox8hwFNP6qggsTP9NhHuq-T2Vdyag8BweIFTykT0SR_jAgtOxKDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f26be72-e07b-440b-97a2-93132f866add",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "908adc71-740f-430d-aed8-e36f36b8b0bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79e47bf2-59ab-4f79-8d39-9b7556bba6fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef739dda-69f9-4884-b8f1-5bb870741615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32ed46f9-2ea5-437e-a0ab-eae7b22fb91a",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..J3mhnnbzRyvk8fyfh7fwzuuznEROTdVRM_MrdE-HV93WdGfTdgVhebmdmVZHmvmJiQaxYiIuD-natToEB7xvCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7465df1-d1e0-4966-adab-9345e89b327d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39f2bbe9-8158-48cd-bb21-0bff88293c92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25232d3c-1a31-4662-b835-283f59a136b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d984b631-86e6-450d-a474-e75e820d01f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6beb7218-1ca1-40ec-a699-6eab4ee74f15",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VDVadt3rnBQ7P8dSYyZU5RHdfxVBWz3liR1wKbXbfBuaNT-rJYOoUCLQj-7IQ2elQaB4Fhp2nsgul9ZQmZc1CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25d09f6d-4155-48d7-b81f-09526d573ce0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b3c6ec6-aa86-4d36-8873-216d97723c51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e70a02c-cb7f-4992-8653-f0ee5e93c2c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38f31c0c-2695-496d-8fa5-128ce0791df7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa902509-299f-4aee-8b76-0930b7827ea5",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Kz272GRCnCfgHy4D8txIaM1bY5O5vW8iFfQrL2B8a7OnaVTcq6nF-dhqnoMLHPEbrUNzHK7spVAZG05Njl6CDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24e22c4e-29ca-478c-8b2c-01921724b02f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bef145b6-3275-4174-8b07-c8a15ef0e764"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e94a5a9e-69d0-458f-9154-ab8b1953b444",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ee35b61-fb89-44c6-b89a-48af5b6ec64c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b54c7045-e04d-4248-a5c4-f4518ff350da",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..P9pVMuK8IN7B38_-uHlTyqAeQFcasIOW06wJWEZDZLPpaeLA4L-S6ee-tZsbGmM0QoSr8WTkbqkhiXpEhuIbAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0d125ca-e2ec-40d5-a037-a802c35f6648",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "becf6999-1fcd-4cbe-b5fb-66370a147a2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06da513f-e6ef-4e74-bf06-167af8f35d23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb7870b6-efc5-46e5-96ea-92160b5f9198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d98b41ee-5c97-4eeb-9cce-5d211fe6f6da",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rdlyOsz8ZwKwD5_CacS7c9iPQnRUIywCc_sHdyJlADD9Cq4cRwRw0wwJ7OZtLDylbm512V0s3Cn69i1qMWc8Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b790c734-d967-482d-8846-28dbefb4b462",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76ea0c55-9857-4bac-8b8f-aec4adbb1abd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed7f17c3-d0ee-4e32-a83e-7d88f4b8cb5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f80276f-ccd3-448b-ba3d-5504c34ef886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7301b78-5f1a-42f3-a13e-2f937153dd6e",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:web:example.com\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YXI2e8nVY98qybXn64g4bOG063TH6yjKFmSF9gRq0MtX3q3cex1t5ayc38JjZSBEgoJTKQzUTbL71FOukoNrAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cf114a2-0d6e-4ece-b989-3ca3419bab04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ec71d4e-76e7-4453-9d8f-85022c5f3535"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aba4065-40cf-4856-917d-0806cc44d9f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06610f96-26ce-49b8-9b3e-3b97e833ced5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e0ff65-c0db-436d-a702-45848f4db2bc",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "261914b4-95c6-4a31-a14f-a9878d46a03c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8eaab28f-7edb-418a-ac6a-5187a5b211ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9533081c-0d51-4fde-8134-33166a51f4c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c827bce-8b3b-4e6b-993e-a3240ef6d6b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec307241-ece7-4bad-9d69-30be6abe8fe7",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c2dd91f-29a4-41f6-85fb-b32e0dea8656",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ab3c7f6-9431-4042-951e-dffd661efaa7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a680a7c2-e56e-41cd-8ce2-d212c535f5ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "910ece2b-93ae-4bf7-ac0e-b42f0bd13ec8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa853e54-15b3-488b-9e23-b44e6e1956f8",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a56b0ac6-be55-4c6b-8235-9a326de63c3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe19783f-4c31-44ea-961b-36135d44604b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e673661-e9a6-44cb-8fc0-60988c8a46e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06496dc3-09aa-40c9-a66c-80279dd38ce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af2680be-9235-4106-b3e3-6e520c189083",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8a19fcb-577c-486b-a6be-16ad3a3cc0c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49e0af36-de36-4a23-872f-7f139094a141"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50761c40-0756-4d59-aff4-80da9d702314",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da91dee6-d7c8-4ca1-8b46-287e2fa358a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9951a34a-7948-44cd-b1e7-95f581fd2e4a",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7447fad1-0be7-4519-97be-def5810c1c84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50a34434-f836-4a5a-b392-1723775987d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49356989-758c-40d4-b531-398ad58504af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "318bfb15-6f50-4cdf-a2ec-0f77d48fd514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89111876-8f9a-4a34-8081-3c0034a50c08",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "545b335f-d1c4-4bf7-88e9-9f5e544bb3b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e4f25fa-1bac-403d-a7d9-c658e1a03d3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07075f9b-deb8-4e32-b042-f9bbfa9c0d56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2d82d0a-805a-4ee9-819b-449dade16cba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff6da0b1-af5f-4c73-9e58-e3a4643e0749",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3ba6144-11da-4e0f-ad2f-2a95ba758adf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4b3f3be-19a9-4de6-b395-5e37e42bbc42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7448efbf-1767-4a61-87c7-9193daeddc70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c4de898-5356-4c84-8548-00840f75621b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c191b3e-0d24-404c-899f-ffed01ab5caa",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "976075f4-3110-434a-9c12-b14009128ae1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80d1fc93-be44-43e3-849e-fea1e7bc0cb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b10ecde7-81ec-4eb0-8ad4-678200dbbc2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d09cd9af-4591-4353-affc-7f7170b21328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a19443b-5cad-4b18-9566-4e4d6cd1eb05",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1248fe39-105f-4360-8027-6b220555bf09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90bb44d9-d562-41d0-8a16-06032ab87beb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a79f3f63-1deb-4f18-b109-a08548516441",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23298853-7857-47ff-b066-dbdfcf32dc08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61eff0e4-9179-469a-ac15-d7377059873a",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ddab9bd-42ed-4889-bb19-c025abc5f6df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ad060f8-7055-4024-801f-3bfcb24540b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76bb1569-42ea-4f13-9b78-7b4a8413afcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3876038f-aa41-4780-b0cc-13cc11274ddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab257a95-891f-4d0c-983d-e2556264da9e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbb39edf-e0b4-49c5-b1c7-b0623d9ab4db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65f72fac-4ebd-4a52-aa9d-2502fd576bba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b3d7b80-2fd3-4991-a068-77d9974523aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af2e3722-874f-44bf-bf96-8a967989fa7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d76915f-ec55-49dd-a050-fafb55721652",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b960ddde-c9d3-4df4-b3de-08a9c82f92f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81c51c67-812b-429e-a658-020296a58850"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a34da60e-aeb4-4dfd-9b94-eaecf403e0f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca40df42-f283-494b-86f6-d91fffe36cac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ab9df94-50e6-4354-8846-030f0621ac75",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e694e13-21f1-46b8-b189-a9b1c86857d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f2e98cd-0f17-4253-88c7-1a8e402ef4e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4ec9ff5-4d2c-4887-bcb6-5fe0363c74b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbf892c8-076a-4220-9ded-9c1e5ca09911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14321afd-5c2e-4802-905d-93bb88eec8d8",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "766188f2-3a28-492a-a151-01bdfbeca5a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87e9266e-a2b6-4edb-b213-10b50555c1ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f859a1-3542-4584-8368-811c70328064",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11303055-f41e-48d0-8a31-8e9fba8dd8ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbf10ef9-cab4-40a3-8fae-48996f4568be",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcd5a6aa-3649-4206-8c54-ec2641a797d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c98941d3-d91b-43b2-b224-94309ff5303c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9642c26f-0203-4ea8-ad0d-ff56e34d0f12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "343a685b-4580-461f-a68f-e3b2c9d92b97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31638b14-024c-4383-82f5-5f2e1acfbd22",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8f9adee-30b0-4e51-a5ce-c0a3fc1a7260",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "416df859-8d71-4ece-bb47-b1b56110ddd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e38cc6d7-2bbd-4116-a910-7321c9ab964e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fa22029-c9e6-4db0-a548-64bd6c9df28c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73f270eb-5201-4c37-a6f0-d5d18e8084f4",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40694abd-81b4-4c95-a0a3-14e39fa71cb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "598d7f1e-77d7-40ce-af13-1b92d77993a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6427ebdb-4cb8-49ce-893a-e3171f5ac0e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0ef0148-1402-4aa0-a1e5-b809ebeb026e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2426ca7-34d5-4eda-958d-c13b4d86b45f",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd918c84-7166-4f90-9cf0-914f9cebe44f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c04fdeef-6461-4e1f-b14b-1ce6f811dc8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4a0982b-b603-4ec2-8ede-a4731b8f53b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97564aec-591a-4e56-bfa2-9c809e4361a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9371bd86-bae1-4d8a-98bb-e1aa45a6c6a2",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6755f61d-ebcf-4aeb-a872-a8e06b74cf05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36511e73-8a2f-4e40-8c91-50d7fca2850a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1e50859-d450-4832-ad3c-5e0a8e90c94c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08b8f9af-dfdc-4e3d-847c-312f91da752c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d59616a6-053d-44b8-854f-041184634715",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19c7f46d-8372-4e28-9e37-6dd8c0f4fc26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6344be7d-1ebc-4ec3-9a05-983783fe51bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2c6d1f9-194b-49de-b267-30ff0448aa6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39777b22-4def-417f-8755-a1e25b635300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68bed958-5e68-4140-83bf-d72280b62c91",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f22fa2f4-850d-4cc3-b31d-9b0fb75fb74b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25b30a2b-6d47-4637-b48a-ae3f99facd6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efd4073e-1f2c-4903-83ef-84d77e1d979a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67d19a14-7041-46f9-83d5-654193961809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b04cf840-3192-45c1-8774-a86b7446f258",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe67b544-3a3a-48bb-b82c-0ec58112396a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64a2330d-3c94-4e73-844d-f78142008358"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d70434ce-3633-4222-bc26-c5a050ff075d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38b5ee84-7c54-4638-9d3d-d6e10bd75d6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4217065a-b43f-4e26-a3e0-00a31e62369f",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28353fd0-9296-4d21-904d-4f4a413478a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3d6e6d9-14b6-4fd1-a717-87ec5c7cd1ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1d3d5ce-a5dd-4f07-8836-8606e76b5649",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cbedeb1-c0fd-4135-9b48-ec45ae6d7dd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ea6c453-2b64-42d8-996b-6f6a6763adbb",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58ab6dd9-e418-45ae-ba88-d5e673c5a830",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a1eb886-fffe-475e-8140-69b1bca06291"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2af7f81-cf36-4c30-81bc-c6651130ae24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "610e37d0-6a5d-4f1e-ad0a-761dcc590653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d96f278-9ec2-450c-90a4-52e2a25355a4",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "217e2031-6f4d-43ee-889e-499c936436ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5611814a-1f89-4e67-b8d5-34f150d53e03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e17396b-9faf-4ec1-9ec1-c705cf2377da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94d4586c-8062-484d-8e8c-43d332218931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c660245e-265c-4035-848d-426ec0f68664",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1774326b-4b72-4e4c-b92f-1e769ac7d94d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ba13de3-239b-4aec-943e-0677c07fdf4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54f7e076-a029-4684-89f4-83bb26152190",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aa1b38c-2a62-4221-9c3d-2fabf5b51112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7617bfd-1f54-4937-9e8e-af9c85d918bc",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "312c2f1b-518d-4901-a428-f618ff945094",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff67c3b7-a32c-4e30-a4cf-58662e26a40b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "508b644c-a22a-4c7f-821b-e7ae6da0492d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1292f55-b3a4-4b31-83d8-3c87b3cda673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07e8d0a5-0e77-4de0-9272-a5ae6f9e05dd",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5715a4b-b824-45cd-8cc6-0a0e5e6afeb5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6aa83a44-6c3a-4d89-a6a7-8a18b3785633"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efe01fe1-5fa4-49c3-a5de-f43a830b4276",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdafa89c-0975-45a4-a539-248e94835abf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c11c3e6e-e549-4fed-a9b9-0d0689e5e32c",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc504a3d-7f56-4dbb-8f4a-22e04607f9ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b27bbc88-af6e-4a90-8ce4-4f9b9d43830f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8ccc888-8de7-4302-8d45-92e4f91411ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d56987d-7f27-44b1-ba8a-b559a949f0f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a1c16c1-7d19-4ea3-8e0d-049df13ccfbb",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2db329c-81f0-4310-8684-1e5db9d54d0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea03acd2-63d3-42c3-bf63-9e08594ed50b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "010bb12a-c141-451e-825f-e84fe48fe58f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa96f9ec-9999-43a8-b6a9-3d1d43ec167c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85f6c42d-b50e-4a18-9e77-eed7179acc99",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcc7b655-e5bb-469f-b7a6-e5a4a7f978a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8aee94cd-1ec3-4202-9f24-1b5bcfdaa8d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa661e04-e0d8-40f0-9145-40ba03a02252",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "269920fa-066d-4efd-aaf8-a01d8ee932f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd9f5056-835b-40a1-988a-f11598d5d6a2",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4240227c-ca9f-427a-8168-05ff067c8903",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbaab359-adac-4255-b34f-6efce97a1fd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e91904d2-f292-4262-8f0a-6b8d6e14ffa0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "912e0802-6be6-4f64-a194-f84d222eaf42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d38c1776-277c-4eeb-bb62-4b43eb25fefe",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d388919-c05c-419f-9994-4301c22e8f10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "975cabe6-ff52-43c2-9572-9680aac39e6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df5fd982-d25f-4e5f-83e4-a5acffa302eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f10d43b-7356-4447-b98f-3131d0baa2ec"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aea135fa-dba5-422a-a07d-e905efd6600a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f73b8ce7-d2a1-48c1-bfa3-8129fe0b0f24"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ce68b342-51f8-4730-920c-308699f6d82a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b8cf7725-e0c1-4eb5-a1df-ff5837b9f39d"
                    }
                  }
                ]
              },
              {
                "id": "6e3fd291-39e0-4300-96c8-8c90e2f7626b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f7d678e4-4c17-49ab-9896-da543266e993",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86136abf-ac43-4034-a02a-6aa65fe35414",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c242792a-5de2-4879-94f9-01713747a343"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed2cb95a-1add-49fd-9be1-10c20c41472a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c6fd0298-2413-4c52-9917-01a10b17c6a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a9e9508-779e-4358-94e9-ddb9a5785cd8",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e034204-7cd9-4d35-bcc6-6578a8b4a659",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a380dc31-ca62-476a-b7ef-6dd558267a7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52846aa3-1145-4f68-9329-20252777a001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2d60030b-2c9c-4352-ad8c-36a9c34094bc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "358f3488-4ce9-485e-bd61-20d3be20abb8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "683d340a-f15c-421a-b7a7-95bf56a6f1fe"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5087e4bf-996e-491c-a4f5-a28d0837eb4a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "88869904-6838-413c-9f6a-37afbe9147ba"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "853f6076-cc8d-47dd-88e9-d87a496904d8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e9248d58-4af6-450d-a9e6-555dbeac7a13"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5f625572-118e-41cc-9792-c5d928cf52ca",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3fdd13cc-165d-4f7b-bccb-62848f17698e"
            }
          }
        ]
      },
      {
        "id": "922b0c0f-ecea-44f6-9f91-0c8878bdbb38",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "3c5f1a21-98f0-4633-9f83-63a11201a84e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "11f987d5-6bf8-435b-ada4-8c6c5ea2927d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "63b17313-1aff-46e4-b519-abf9451c21ae",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61797abd-48b8-4718-a3f2-7aa880254f5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "594f9494-77f9-4497-9edf-3b105c0da057"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87ed1012-7a98-4e55-9d4f-48a033ccea12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0e6f765d-c788-4d96-b130-4ef1a8b9cc89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf98258a-26d5-40a3-b6a8-a866b6920fd8",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30be33a7-1a9c-424f-b841-d6498d5c199d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "7b6afcb3-c54b-45df-ac36-1ad4d551167e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c4c85d3-260e-45b0-93f6-64e224d6776c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9312eb5b-cf0b-43d4-a566-9fd242ff7c7f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "89b4db08-73c1-44c6-8238-55e6a04e5302",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9effe183-7748-4e1c-823c-8abd7250069e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "137562f4-a527-4889-8a45-8c4e14f81094",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "39435b34-a5b6-4524-a95b-b479f044a670"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "93ec72a8-72cb-48e5-a58d-61efc4678080",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "87fd99ca-9f9e-488f-8f04-fa9a3970c499"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9b96d73c-693a-448a-a413-0eb6ee142ce8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "82802189-e304-4905-a5b8-764298cccca8"
            }
          }
        ]
      },
      {
        "id": "13bfc23e-0037-49ac-bc38-5a6731635de6",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "1fe6d70d-6101-443a-ba93-6a12d5e5b719",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6bb46d90-6937-4990-b716-96857aef89cf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "38939c33-2b57-4cd1-9e24-a8ba12b9b678",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d690c66-c9db-481b-911c-657f01785774",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aab3e44-7a23-4f18-9ee1-c9d379a307b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6943357-13be-40bb-a5d0-e228817c9092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b24e5f71-500c-4f94-b69d-57232131e217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a28fe991-1543-4a92-bef5-cc29befbc09e",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef4aa325-0395-4c99-b5fd-9651481a5d6a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "833668c1-fac9-4f0f-a6c6-0f3c2b4922dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9301eb7-b195-472b-b959-08d750c42f64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8c693dd0-b112-4a52-9f50-f309fd5daa2e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "37f3f1ba-fa59-478f-836c-b14c1bafabe5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b422bc17-d753-46e5-ad98-b6dbbc3835df"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1fe9a2e7-ce48-45cf-94fd-244c25402390",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dc61c076-c5bf-49c3-ae1c-c71b2589e76a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1e9b1539-83f9-4e9f-9d2f-046a60a7ad97",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "11c08757-cdab-4cab-9ee4-64c076106591"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e891ffb3-8709-458f-ba00-f7452e3c9d20",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bb83710f-b5af-4a7e-a196-39be29217d19"
            }
          }
        ]
      },
      {
        "id": "b5a8cea2-0d2b-4cc3-8dc8-217ed20944b1",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "c95791c9-5155-4ede-908f-e09a83d0b75b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "095f0d30-0a06-4593-8f79-db2883b56d2f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8ffe318f-e06a-4def-bd37-845ead53e099",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33dccdfd-e491-4aab-845d-368dc4d734bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3138c32-1522-43de-89f5-797064938208"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95dca22d-3cd1-4d0a-a086-f44397be7474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4b0d52ef-148d-45a4-9ffc-a8bd9bf277de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d43dde6b-cfff-48a6-912c-dcb367c0bded",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b1f77f3-cd97-4c68-bc8d-1d5966775deb",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "c9a3721e-fe5d-4cda-b697-6ae9317954ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6016ec38-eb4d-4c96-a65e-3be13a775686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2276e0b1-4c32-42ff-b09b-a3e0e14dad05"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c08da698-54ce-428c-b180-87473c1ee3a9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2cae7535-939f-4c60-9dc0-c74016974b10"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "da4caad6-ac81-4264-8706-c10628a16e38",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "72f1819c-4cff-4ef8-8e2e-233ea7485cc6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a82e01ac-41b2-4aba-9ad0-b16edc11a1d4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "dfc2883c-3bfe-4981-80b9-a794af2503fa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fb9e369e-ac46-4ba5-aacd-ab1a9cb24ce2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "11341d4c-35df-4b69-ae4d-744762b355e7"
            }
          }
        ]
      },
      {
        "id": "c6bdfc35-5eb0-4d48-97c2-40536c3ce072",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "7c9c6264-6686-49aa-b2ad-ea417c1e8268",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 152,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1193,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 152,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 200,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 152,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 309,
        "pending": 0,
        "failed": 283
      },
      "testScripts": {
        "total": 602,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 591,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 60.98000000000002,
      "responseMin": 31,
      "responseMax": 512,
      "responseSd": 64.4559508501736,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1663807930740,
      "completed": 1663807951287
    },
    "executions": [
      {
        "id": "d88f5bf7-45bb-4d45-936d-69441ff33025",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 152,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "3d2a258e-d4ff-48fd-b4a9-d089d91da9f0",
          "httpRequestId": "b66a593a-933a-4240-b50c-3e6f4fce7c25"
        },
        "item": {
          "id": "d88f5bf7-45bb-4d45-936d-69441ff33025",
          "name": "did_json"
        },
        "response": {
          "id": "a256ef4d-9fee-422c-bedd-6b5f8370308c",
          "status": "OK",
          "code": 200,
          "responseTime": 222,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.service[0].type should be array",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.service[0].type should be array\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "id": "1746cbd2-b863-43fd-96cd-28017e113e0c",
        "cursor": {
          "ref": "1238b1e8-e334-4619-a7f5-9045febc5805",
          "length": 152,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "3e42f67f-2f07-42e9-a993-3352bb79ea4d"
        },
        "item": {
          "id": "1746cbd2-b863-43fd-96cd-28017e113e0c",
          "name": "did:invalid"
        },
        "response": {
          "id": "0a0a74db-a93c-442f-b5d5-0a8f65c1721e",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1746cbd2-b863-43fd-96cd-28017e113e0c",
        "cursor": {
          "ref": "1238b1e8-e334-4619-a7f5-9045febc5805",
          "length": 152,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "3e42f67f-2f07-42e9-a993-3352bb79ea4d"
        },
        "item": {
          "id": "1746cbd2-b863-43fd-96cd-28017e113e0c",
          "name": "did:invalid"
        },
        "response": {
          "id": "0a0a74db-a93c-442f-b5d5-0a8f65c1721e",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0d07e6b-19d3-49f2-883b-912ce0195421",
        "cursor": {
          "ref": "c716c82e-73f3-4e41-af3d-237125e61499",
          "length": 152,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "532cc316-6201-402e-ab31-5208c2a33963"
        },
        "item": {
          "id": "f0d07e6b-19d3-49f2-883b-912ce0195421",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "ad14e7e4-3e4e-4521-844e-8b1d4a356870",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 187,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "2a7bc26d-139f-49f8-8ba5-b36d98b15bcb",
        "cursor": {
          "ref": "8c82607a-0510-4714-9753-ccbfc6bdbf5e",
          "length": 152,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "474e41d5-aa4c-4620-b85e-40b2b866207e"
        },
        "item": {
          "id": "2a7bc26d-139f-49f8-8ba5-b36d98b15bcb",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "f463f6f5-54fc-4d78-8c87-a396c402a2c1",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 200",
              "stack": "AssertionError: expected response to have status code 404 but got 200\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "a79c894a-8c95-4c9d-aba2-17035d46680d",
        "cursor": {
          "ref": "c133578f-b8a5-431f-b067-751b3cc69b2f",
          "length": 152,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "03617f45-2d9d-4672-91a4-b582fcfe0cd1"
        },
        "item": {
          "id": "a79c894a-8c95-4c9d-aba2-17035d46680d",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "42e907a3-0e9b-47ee-a478-c7fdf454069b",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "608df452-d06e-4ca5-aa8b-cb9bb01041db",
        "cursor": {
          "ref": "3d254b2f-03d1-42a6-8067-0d5313fd8647",
          "length": 152,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "349a6492-f9a9-4667-b89e-b03f99ff96cf"
        },
        "item": {
          "id": "608df452-d06e-4ca5-aa8b-cb9bb01041db",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "eb3ba482-38b7-4bf7-93a2-7ed9e1966cf8",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "608df452-d06e-4ca5-aa8b-cb9bb01041db",
        "cursor": {
          "ref": "3d254b2f-03d1-42a6-8067-0d5313fd8647",
          "length": 152,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "349a6492-f9a9-4667-b89e-b03f99ff96cf"
        },
        "item": {
          "id": "608df452-d06e-4ca5-aa8b-cb9bb01041db",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "eb3ba482-38b7-4bf7-93a2-7ed9e1966cf8",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "64faa7f7-ac20-4d65-88f2-1c8195e0b2eb",
        "cursor": {
          "ref": "312ea538-0577-4907-bb69-fb69292a5e02",
          "length": 152,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "92e435ae-feec-4558-a5a7-b514fdd30206"
        },
        "item": {
          "id": "64faa7f7-ac20-4d65-88f2-1c8195e0b2eb",
          "name": "identifiers"
        },
        "response": {
          "id": "bdbe00b8-590d-4759-aad7-1d46cd58a90d",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "554399d7-de24-4158-8735-0bd0ddb70fd3",
        "cursor": {
          "ref": "d8092f52-df4c-4f77-aa6c-533c5006ef7f",
          "length": 152,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a512123b-de38-4323-95db-d0198d0ac782"
        },
        "item": {
          "id": "554399d7-de24-4158-8735-0bd0ddb70fd3",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "331f2545-7509-4e28-8c09-6dbc8da74fe7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 512,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "554399d7-de24-4158-8735-0bd0ddb70fd3",
        "cursor": {
          "ref": "d8092f52-df4c-4f77-aa6c-533c5006ef7f",
          "length": 152,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a512123b-de38-4323-95db-d0198d0ac782"
        },
        "item": {
          "id": "554399d7-de24-4158-8735-0bd0ddb70fd3",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "331f2545-7509-4e28-8c09-6dbc8da74fe7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 512,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "554399d7-de24-4158-8735-0bd0ddb70fd3",
        "cursor": {
          "ref": "d8092f52-df4c-4f77-aa6c-533c5006ef7f",
          "length": 152,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a512123b-de38-4323-95db-d0198d0ac782"
        },
        "item": {
          "id": "554399d7-de24-4158-8735-0bd0ddb70fd3",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "331f2545-7509-4e28-8c09-6dbc8da74fe7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 512,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "69dcad1e-b53e-47bd-a14c-9ba7fbe0b3f2",
        "cursor": {
          "ref": "1cd18c8f-5d1a-4613-9a73-36340d86060b",
          "length": 152,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "62ec7bdb-b9ef-4c9f-9c9f-f05316841b9d"
        },
        "item": {
          "id": "69dcad1e-b53e-47bd-a14c-9ba7fbe0b3f2",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "10fe606a-2534-4afa-baf0-c68749787f3b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "69dcad1e-b53e-47bd-a14c-9ba7fbe0b3f2",
        "cursor": {
          "ref": "1cd18c8f-5d1a-4613-9a73-36340d86060b",
          "length": 152,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "62ec7bdb-b9ef-4c9f-9c9f-f05316841b9d"
        },
        "item": {
          "id": "69dcad1e-b53e-47bd-a14c-9ba7fbe0b3f2",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "10fe606a-2534-4afa-baf0-c68749787f3b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "83fc8f60-17fa-4d04-b790-f563f8ef5108",
        "cursor": {
          "ref": "b9880fec-6f98-4a64-bffb-210cc50485a1",
          "length": 152,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "68717621-60d0-40b3-9a8d-3e1700450b61"
        },
        "item": {
          "id": "83fc8f60-17fa-4d04-b790-f563f8ef5108",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "9749c362-dafb-4c74-9f11-0383e7c3ad4b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "83fc8f60-17fa-4d04-b790-f563f8ef5108",
        "cursor": {
          "ref": "b9880fec-6f98-4a64-bffb-210cc50485a1",
          "length": 152,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "68717621-60d0-40b3-9a8d-3e1700450b61"
        },
        "item": {
          "id": "83fc8f60-17fa-4d04-b790-f563f8ef5108",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "9749c362-dafb-4c74-9f11-0383e7c3ad4b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "ab60a9dc-4424-4b78-ad06-8b930a95c0db",
        "cursor": {
          "ref": "05a114ab-7a61-4140-8fbc-68ed34716a21",
          "length": 152,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "685952fc-d2b0-4f4c-b1b9-cdf9f60e0149"
        },
        "item": {
          "id": "ab60a9dc-4424-4b78-ad06-8b930a95c0db",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "c397794d-222a-44b1-8c5f-5b1d31cb4899",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "ab60a9dc-4424-4b78-ad06-8b930a95c0db",
        "cursor": {
          "ref": "05a114ab-7a61-4140-8fbc-68ed34716a21",
          "length": 152,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "685952fc-d2b0-4f4c-b1b9-cdf9f60e0149"
        },
        "item": {
          "id": "ab60a9dc-4424-4b78-ad06-8b930a95c0db",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "c397794d-222a-44b1-8c5f-5b1d31cb4899",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "920acc44-e3b2-4b70-a10d-e083be10ff1b",
        "cursor": {
          "ref": "7c4b5cc7-3b00-49f7-8efa-c75bd258754d",
          "length": 152,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8a4f8e0d-4521-4048-b33f-f353095a033a"
        },
        "item": {
          "id": "920acc44-e3b2-4b70-a10d-e083be10ff1b",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "911ec454-0bd6-4e63-896a-994c60b7c083",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "920acc44-e3b2-4b70-a10d-e083be10ff1b",
        "cursor": {
          "ref": "7c4b5cc7-3b00-49f7-8efa-c75bd258754d",
          "length": 152,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8a4f8e0d-4521-4048-b33f-f353095a033a"
        },
        "item": {
          "id": "920acc44-e3b2-4b70-a10d-e083be10ff1b",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "911ec454-0bd6-4e63-896a-994c60b7c083",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "fedb8a9f-30a8-42f9-9c07-a95c5cb6e5ac",
        "cursor": {
          "ref": "dc6dcb5f-73d9-41b1-958b-e31fbd204be9",
          "length": 152,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "1f4148e7-4b3c-4c5e-8b18-a16522f0e3e7"
        },
        "item": {
          "id": "fedb8a9f-30a8-42f9-9c07-a95c5cb6e5ac",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "5e506b56-2595-4d26-a5fb-7177807454c5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "fedb8a9f-30a8-42f9-9c07-a95c5cb6e5ac",
        "cursor": {
          "ref": "dc6dcb5f-73d9-41b1-958b-e31fbd204be9",
          "length": 152,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "1f4148e7-4b3c-4c5e-8b18-a16522f0e3e7"
        },
        "item": {
          "id": "fedb8a9f-30a8-42f9-9c07-a95c5cb6e5ac",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "5e506b56-2595-4d26-a5fb-7177807454c5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "1cdb011b-48bf-45fa-9439-4b3bca5bf951",
        "cursor": {
          "ref": "5855375c-8f23-4b6c-bad6-e394396fff1c",
          "length": 152,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "afbe8aaf-928d-4405-b59c-a2485751cca4"
        },
        "item": {
          "id": "1cdb011b-48bf-45fa-9439-4b3bca5bf951",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "6b2684aa-dfb1-48b3-a484-ee3dd45c44b5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "1cdb011b-48bf-45fa-9439-4b3bca5bf951",
        "cursor": {
          "ref": "5855375c-8f23-4b6c-bad6-e394396fff1c",
          "length": 152,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "afbe8aaf-928d-4405-b59c-a2485751cca4"
        },
        "item": {
          "id": "1cdb011b-48bf-45fa-9439-4b3bca5bf951",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "6b2684aa-dfb1-48b3-a484-ee3dd45c44b5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "409d710f-94b8-450c-9fc7-92f0f3606f94",
        "cursor": {
          "ref": "0e34dd87-52c3-45ec-9500-aeb1b2bd3a28",
          "length": 152,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "422d214b-4a86-4d25-8f69-5d6ca96f4963"
        },
        "item": {
          "id": "409d710f-94b8-450c-9fc7-92f0f3606f94",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "953cf258-0a13-47c2-9e19-2c6714936831",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "409d710f-94b8-450c-9fc7-92f0f3606f94",
        "cursor": {
          "ref": "0e34dd87-52c3-45ec-9500-aeb1b2bd3a28",
          "length": 152,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "422d214b-4a86-4d25-8f69-5d6ca96f4963"
        },
        "item": {
          "id": "409d710f-94b8-450c-9fc7-92f0f3606f94",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "953cf258-0a13-47c2-9e19-2c6714936831",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "371ffd2f-2342-4d9d-9a4b-b095282ad936",
        "cursor": {
          "ref": "f642876a-f3ec-441c-b92d-516ef58c8380",
          "length": 152,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c58f9348-327b-46ad-8b41-9d7487edcbf7"
        },
        "item": {
          "id": "371ffd2f-2342-4d9d-9a4b-b095282ad936",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "88e72936-1586-4aa5-867f-2fd57b72405c",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "371ffd2f-2342-4d9d-9a4b-b095282ad936",
        "cursor": {
          "ref": "f642876a-f3ec-441c-b92d-516ef58c8380",
          "length": 152,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c58f9348-327b-46ad-8b41-9d7487edcbf7"
        },
        "item": {
          "id": "371ffd2f-2342-4d9d-9a4b-b095282ad936",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "88e72936-1586-4aa5-867f-2fd57b72405c",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "4fa6c5ca-d4ce-4cfc-a533-1421a7e2d011",
        "cursor": {
          "ref": "2098ace4-179d-4058-b72f-4ea2eba0b46a",
          "length": 152,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c62416d9-9122-48e0-8d7c-c8f05dc61366"
        },
        "item": {
          "id": "4fa6c5ca-d4ce-4cfc-a533-1421a7e2d011",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "ee51c09d-a122-476f-91a1-6b70dbc7a739",
          "status": "Created",
          "code": 201,
          "responseTime": 78,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "4fa6c5ca-d4ce-4cfc-a533-1421a7e2d011",
        "cursor": {
          "ref": "2098ace4-179d-4058-b72f-4ea2eba0b46a",
          "length": 152,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c62416d9-9122-48e0-8d7c-c8f05dc61366"
        },
        "item": {
          "id": "4fa6c5ca-d4ce-4cfc-a533-1421a7e2d011",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "ee51c09d-a122-476f-91a1-6b70dbc7a739",
          "status": "Created",
          "code": 201,
          "responseTime": 78,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "23e5dbd8-3725-4293-9a6d-094d6c0b533d",
        "cursor": {
          "ref": "050d00dd-f72c-4a67-bdc6-e0d780ce15bd",
          "length": 152,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "ff55e603-556d-4b16-b03f-ac06d0fd8b83"
        },
        "item": {
          "id": "23e5dbd8-3725-4293-9a6d-094d6c0b533d",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "e7ab781a-892d-4249-8469-75a5e632b1d3",
          "status": "Created",
          "code": 201,
          "responseTime": 69,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "23e5dbd8-3725-4293-9a6d-094d6c0b533d",
        "cursor": {
          "ref": "050d00dd-f72c-4a67-bdc6-e0d780ce15bd",
          "length": 152,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "ff55e603-556d-4b16-b03f-ac06d0fd8b83"
        },
        "item": {
          "id": "23e5dbd8-3725-4293-9a6d-094d6c0b533d",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "e7ab781a-892d-4249-8469-75a5e632b1d3",
          "status": "Created",
          "code": 201,
          "responseTime": 69,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "41855239-4070-4c7c-b3f4-65f2679015fc",
        "cursor": {
          "ref": "0edb70b7-890c-4a41-b9fb-e8d4e2678fff",
          "length": 152,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "a4ec3a27-bd4e-41ba-9f3f-780d65eb25c9"
        },
        "item": {
          "id": "41855239-4070-4c7c-b3f4-65f2679015fc",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "5d0c9f37-0694-441f-8b2a-670a6f7ab089",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "41855239-4070-4c7c-b3f4-65f2679015fc",
        "cursor": {
          "ref": "0edb70b7-890c-4a41-b9fb-e8d4e2678fff",
          "length": 152,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "a4ec3a27-bd4e-41ba-9f3f-780d65eb25c9"
        },
        "item": {
          "id": "41855239-4070-4c7c-b3f4-65f2679015fc",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "5d0c9f37-0694-441f-8b2a-670a6f7ab089",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "1d954cf2-773a-46e8-b769-a4fb18903344",
        "cursor": {
          "ref": "180f6b11-8902-4249-90f4-287b516ded89",
          "length": 152,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "73271edb-b54f-47d0-9508-422364a8b3ce"
        },
        "item": {
          "id": "1d954cf2-773a-46e8-b769-a4fb18903344",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a51abc66-c5e2-4f36-adb2-9f744fa4b428",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "1d954cf2-773a-46e8-b769-a4fb18903344",
        "cursor": {
          "ref": "180f6b11-8902-4249-90f4-287b516ded89",
          "length": 152,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "73271edb-b54f-47d0-9508-422364a8b3ce"
        },
        "item": {
          "id": "1d954cf2-773a-46e8-b769-a4fb18903344",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a51abc66-c5e2-4f36-adb2-9f744fa4b428",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "c8738428-74fe-4762-b1ce-77399b382b46",
        "cursor": {
          "ref": "6d7c9783-937f-4324-96f2-960746c0cc76",
          "length": 152,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ee3bc50f-fd87-42c6-8331-861d9673adb3"
        },
        "item": {
          "id": "c8738428-74fe-4762-b1ce-77399b382b46",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "69e5e5d1-5a9c-4945-bfff-d110c8813ce0",
          "status": "Created",
          "code": 201,
          "responseTime": 68,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "c8738428-74fe-4762-b1ce-77399b382b46",
        "cursor": {
          "ref": "6d7c9783-937f-4324-96f2-960746c0cc76",
          "length": 152,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ee3bc50f-fd87-42c6-8331-861d9673adb3"
        },
        "item": {
          "id": "c8738428-74fe-4762-b1ce-77399b382b46",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "69e5e5d1-5a9c-4945-bfff-d110c8813ce0",
          "status": "Created",
          "code": 201,
          "responseTime": 68,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "7f5c3fb4-452b-47c5-9e83-9f96ea3a90b9",
        "cursor": {
          "ref": "08e9b4df-1751-4f73-ac0a-63f53232af6b",
          "length": 152,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "da7f01ea-c726-4346-b608-456d4a526585"
        },
        "item": {
          "id": "7f5c3fb4-452b-47c5-9e83-9f96ea3a90b9",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "87605ba5-a3f9-459c-989b-fb7fb83453a7",
          "status": "Created",
          "code": 201,
          "responseTime": 65,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "7f5c3fb4-452b-47c5-9e83-9f96ea3a90b9",
        "cursor": {
          "ref": "08e9b4df-1751-4f73-ac0a-63f53232af6b",
          "length": 152,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "da7f01ea-c726-4346-b608-456d4a526585"
        },
        "item": {
          "id": "7f5c3fb4-452b-47c5-9e83-9f96ea3a90b9",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "87605ba5-a3f9-459c-989b-fb7fb83453a7",
          "status": "Created",
          "code": 201,
          "responseTime": 65,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "f338481e-c4ce-4b3e-b901-ccd572db417b",
        "cursor": {
          "ref": "83ffe3c4-d81f-46b9-972a-eea9260fbd45",
          "length": 152,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e7367d4d-a04b-47c7-9fac-27089cde6180"
        },
        "item": {
          "id": "f338481e-c4ce-4b3e-b901-ccd572db417b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "0f866a91-144f-486b-ace4-d18c2ad58fc7",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "f338481e-c4ce-4b3e-b901-ccd572db417b",
        "cursor": {
          "ref": "83ffe3c4-d81f-46b9-972a-eea9260fbd45",
          "length": 152,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e7367d4d-a04b-47c7-9fac-27089cde6180"
        },
        "item": {
          "id": "f338481e-c4ce-4b3e-b901-ccd572db417b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "0f866a91-144f-486b-ace4-d18c2ad58fc7",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "5ef17815-8b5d-4107-ac50-074883c9f19d",
        "cursor": {
          "ref": "360171d8-fc19-4a0b-9e4e-69dafb5a4360",
          "length": 152,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "eb1bb639-d3bd-44aa-9d08-3252af2e3de8"
        },
        "item": {
          "id": "5ef17815-8b5d-4107-ac50-074883c9f19d",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "f86a5422-508f-4fe2-bb2e-fcf6d77150a2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "5ef17815-8b5d-4107-ac50-074883c9f19d",
        "cursor": {
          "ref": "360171d8-fc19-4a0b-9e4e-69dafb5a4360",
          "length": 152,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "eb1bb639-d3bd-44aa-9d08-3252af2e3de8"
        },
        "item": {
          "id": "5ef17815-8b5d-4107-ac50-074883c9f19d",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "f86a5422-508f-4fe2-bb2e-fcf6d77150a2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "d96af742-1426-4f25-8b68-69cff3e63ee1",
        "cursor": {
          "ref": "9a2e0431-c727-4dc5-adb3-0e0438966867",
          "length": 152,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "4b56b5d2-5a3c-4caf-bb01-b8953dd00075"
        },
        "item": {
          "id": "d96af742-1426-4f25-8b68-69cff3e63ee1",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "25b33de0-3c19-490b-ada5-b7ddb36aee21",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "d96af742-1426-4f25-8b68-69cff3e63ee1",
        "cursor": {
          "ref": "9a2e0431-c727-4dc5-adb3-0e0438966867",
          "length": 152,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "4b56b5d2-5a3c-4caf-bb01-b8953dd00075"
        },
        "item": {
          "id": "d96af742-1426-4f25-8b68-69cff3e63ee1",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "25b33de0-3c19-490b-ada5-b7ddb36aee21",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "9005f9da-a793-4ec2-8991-68fa8c1eb91d",
        "cursor": {
          "ref": "52731e88-bdd8-4c95-82ba-4ce6f6060b09",
          "length": 152,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7bc1c416-0924-43af-afc1-936be46cf3f3"
        },
        "item": {
          "id": "9005f9da-a793-4ec2-8991-68fa8c1eb91d",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "6f6bb24f-e11c-4e59-9087-fb7ae5cc55b6",
          "status": "Created",
          "code": 201,
          "responseTime": 74,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "9005f9da-a793-4ec2-8991-68fa8c1eb91d",
        "cursor": {
          "ref": "52731e88-bdd8-4c95-82ba-4ce6f6060b09",
          "length": 152,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7bc1c416-0924-43af-afc1-936be46cf3f3"
        },
        "item": {
          "id": "9005f9da-a793-4ec2-8991-68fa8c1eb91d",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "6f6bb24f-e11c-4e59-9087-fb7ae5cc55b6",
          "status": "Created",
          "code": 201,
          "responseTime": 74,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "edbdf895-4ac7-4f46-9f33-1aa0549b987d",
        "cursor": {
          "ref": "273d140a-76b2-45a1-9034-5e2c6cdd617d",
          "length": 152,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "3e63527b-f67a-422c-9b83-0e926a21c8ba"
        },
        "item": {
          "id": "edbdf895-4ac7-4f46-9f33-1aa0549b987d",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "6d882a70-2013-41df-bfa6-a7ed13e1f4aa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "edbdf895-4ac7-4f46-9f33-1aa0549b987d",
        "cursor": {
          "ref": "273d140a-76b2-45a1-9034-5e2c6cdd617d",
          "length": 152,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "3e63527b-f67a-422c-9b83-0e926a21c8ba"
        },
        "item": {
          "id": "edbdf895-4ac7-4f46-9f33-1aa0549b987d",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "6d882a70-2013-41df-bfa6-a7ed13e1f4aa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "d1d401f2-ac47-401d-8ff2-fb965c256fa3",
        "cursor": {
          "ref": "3ccdd66f-a909-4639-aa0d-a71cdf6971b5",
          "length": 152,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "216dc807-021b-4ffe-bee5-bdb59d38082a"
        },
        "item": {
          "id": "d1d401f2-ac47-401d-8ff2-fb965c256fa3",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "6bb6ac0e-be2c-445e-ab8f-cd16957cd766",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 620
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "d1d401f2-ac47-401d-8ff2-fb965c256fa3",
        "cursor": {
          "ref": "3ccdd66f-a909-4639-aa0d-a71cdf6971b5",
          "length": 152,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "216dc807-021b-4ffe-bee5-bdb59d38082a"
        },
        "item": {
          "id": "d1d401f2-ac47-401d-8ff2-fb965c256fa3",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "6bb6ac0e-be2c-445e-ab8f-cd16957cd766",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 620
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "2efe26f1-4fe6-47c8-b213-3f3bfe5aea8d",
        "cursor": {
          "ref": "53368a10-d896-40ff-a67a-729009268cd4",
          "length": 152,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9ee277f7-ec64-4d1a-84a1-efa1a3dca408"
        },
        "item": {
          "id": "2efe26f1-4fe6-47c8-b213-3f3bfe5aea8d",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "29e2e7dc-0133-41bd-a8ae-404805d6b057",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "2efe26f1-4fe6-47c8-b213-3f3bfe5aea8d",
        "cursor": {
          "ref": "53368a10-d896-40ff-a67a-729009268cd4",
          "length": 152,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9ee277f7-ec64-4d1a-84a1-efa1a3dca408"
        },
        "item": {
          "id": "2efe26f1-4fe6-47c8-b213-3f3bfe5aea8d",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "29e2e7dc-0133-41bd-a8ae-404805d6b057",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "bc70cf89-9328-4042-8ea7-ff9723b0b0d8",
        "cursor": {
          "ref": "7f8060f5-b21e-495f-91ff-9132378e38cb",
          "length": 152,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "fcb79c67-d50a-412d-acb4-9ef2a6e62eee"
        },
        "item": {
          "id": "bc70cf89-9328-4042-8ea7-ff9723b0b0d8",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "8b00bdc6-7386-4c8b-947c-c12dfc44b672",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "bc70cf89-9328-4042-8ea7-ff9723b0b0d8",
        "cursor": {
          "ref": "7f8060f5-b21e-495f-91ff-9132378e38cb",
          "length": 152,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "fcb79c67-d50a-412d-acb4-9ef2a6e62eee"
        },
        "item": {
          "id": "bc70cf89-9328-4042-8ea7-ff9723b0b0d8",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "8b00bdc6-7386-4c8b-947c-c12dfc44b672",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "9683b9c1-81d9-4f0c-947b-969ab38ad46f",
        "cursor": {
          "ref": "57c5e600-1560-4d52-b693-e466cbf3dd22",
          "length": 152,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "484ae179-04d4-4a9e-b4b0-6cc01d4328cb"
        },
        "item": {
          "id": "9683b9c1-81d9-4f0c-947b-969ab38ad46f",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "769b1d55-8c9d-4b5b-a1d8-58dadf2d2492",
          "status": "Created",
          "code": 201,
          "responseTime": 63,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "9683b9c1-81d9-4f0c-947b-969ab38ad46f",
        "cursor": {
          "ref": "57c5e600-1560-4d52-b693-e466cbf3dd22",
          "length": 152,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "484ae179-04d4-4a9e-b4b0-6cc01d4328cb"
        },
        "item": {
          "id": "9683b9c1-81d9-4f0c-947b-969ab38ad46f",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "769b1d55-8c9d-4b5b-a1d8-58dadf2d2492",
          "status": "Created",
          "code": 201,
          "responseTime": 63,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "18f04abd-2024-45df-bc70-a188563aca19",
        "cursor": {
          "ref": "4e80a317-fcf7-4307-8a47-74a1399803c5",
          "length": 152,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "496b612c-d343-48b0-abf3-735a59917bb7"
        },
        "item": {
          "id": "18f04abd-2024-45df-bc70-a188563aca19",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "021bea40-813e-43f3-85c0-c2af13a48e6f",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "18f04abd-2024-45df-bc70-a188563aca19",
        "cursor": {
          "ref": "4e80a317-fcf7-4307-8a47-74a1399803c5",
          "length": 152,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "496b612c-d343-48b0-abf3-735a59917bb7"
        },
        "item": {
          "id": "18f04abd-2024-45df-bc70-a188563aca19",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "021bea40-813e-43f3-85c0-c2af13a48e6f",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "c5e171d1-bae7-4dd9-a0e3-d62284536641",
        "cursor": {
          "ref": "c7ba0de6-c6c6-4ef0-a476-b1b065463e57",
          "length": 152,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "5b625051-eb44-4e99-a7a8-52590551ff78"
        },
        "item": {
          "id": "c5e171d1-bae7-4dd9-a0e3-d62284536641",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "261b0b46-abac-4ed6-a204-1993b8d63e1b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "c5e171d1-bae7-4dd9-a0e3-d62284536641",
        "cursor": {
          "ref": "c7ba0de6-c6c6-4ef0-a476-b1b065463e57",
          "length": 152,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "5b625051-eb44-4e99-a7a8-52590551ff78"
        },
        "item": {
          "id": "c5e171d1-bae7-4dd9-a0e3-d62284536641",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "261b0b46-abac-4ed6-a204-1993b8d63e1b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "6c6ac06a-7a1f-4fe1-ab3a-710f1ce08b8b",
        "cursor": {
          "ref": "9be75772-b057-4edf-81c9-5cefac64dd32",
          "length": 152,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "151c6dcd-6913-4ea6-a781-5eb50a4eaa70"
        },
        "item": {
          "id": "6c6ac06a-7a1f-4fe1-ab3a-710f1ce08b8b",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "6ead1844-9351-416a-bd4f-4dbb09a76ad6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "6c6ac06a-7a1f-4fe1-ab3a-710f1ce08b8b",
        "cursor": {
          "ref": "9be75772-b057-4edf-81c9-5cefac64dd32",
          "length": 152,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "151c6dcd-6913-4ea6-a781-5eb50a4eaa70"
        },
        "item": {
          "id": "6c6ac06a-7a1f-4fe1-ab3a-710f1ce08b8b",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "6ead1844-9351-416a-bd4f-4dbb09a76ad6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "896cb2c4-29b7-4d2f-b7f6-1868c5b7366d",
        "cursor": {
          "ref": "46032b85-d6fe-4709-911d-46f149b74d7e",
          "length": 152,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "829149a1-4325-4983-950c-459863276a2d"
        },
        "item": {
          "id": "896cb2c4-29b7-4d2f-b7f6-1868c5b7366d",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "bf5a9ca7-dcc3-47f4-9de6-2ef5eaa4c512",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "896cb2c4-29b7-4d2f-b7f6-1868c5b7366d",
        "cursor": {
          "ref": "46032b85-d6fe-4709-911d-46f149b74d7e",
          "length": 152,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "829149a1-4325-4983-950c-459863276a2d"
        },
        "item": {
          "id": "896cb2c4-29b7-4d2f-b7f6-1868c5b7366d",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "bf5a9ca7-dcc3-47f4-9de6-2ef5eaa4c512",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "e5052b80-8128-4b04-8d2d-1981b5365b0c",
        "cursor": {
          "ref": "9521a31e-e822-4d47-b09b-a5229771daf2",
          "length": 152,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "3c35d6ff-154f-4f09-9101-688d9a07190b"
        },
        "item": {
          "id": "e5052b80-8128-4b04-8d2d-1981b5365b0c",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "200710be-77f5-4ad5-bbfc-7c9c1bf3553c",
          "status": "Created",
          "code": 201,
          "responseTime": 75,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "e5052b80-8128-4b04-8d2d-1981b5365b0c",
        "cursor": {
          "ref": "9521a31e-e822-4d47-b09b-a5229771daf2",
          "length": 152,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "3c35d6ff-154f-4f09-9101-688d9a07190b"
        },
        "item": {
          "id": "e5052b80-8128-4b04-8d2d-1981b5365b0c",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "200710be-77f5-4ad5-bbfc-7c9c1bf3553c",
          "status": "Created",
          "code": 201,
          "responseTime": 75,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "e410c0fb-acd7-4c76-a898-16db2a55e2ac",
        "cursor": {
          "ref": "5e349a12-020c-4a68-b5e8-8ac9acb678ef",
          "length": 152,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "5a547090-936e-4f47-aae8-304e97cfeb58"
        },
        "item": {
          "id": "e410c0fb-acd7-4c76-a898-16db2a55e2ac",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "13fb9468-e3b9-4c51-a04c-22a9c4f24904",
          "status": "Created",
          "code": 201,
          "responseTime": 63,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "e410c0fb-acd7-4c76-a898-16db2a55e2ac",
        "cursor": {
          "ref": "5e349a12-020c-4a68-b5e8-8ac9acb678ef",
          "length": 152,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "5a547090-936e-4f47-aae8-304e97cfeb58"
        },
        "item": {
          "id": "e410c0fb-acd7-4c76-a898-16db2a55e2ac",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "13fb9468-e3b9-4c51-a04c-22a9c4f24904",
          "status": "Created",
          "code": 201,
          "responseTime": 63,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "80818f05-77b5-4ff8-83a2-0b6fb78ee654",
        "cursor": {
          "ref": "c0a7a30e-8793-499b-9f71-88bffe02e389",
          "length": 152,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "a39d838e-825e-4a89-990d-b5d398c1ca7b"
        },
        "item": {
          "id": "80818f05-77b5-4ff8-83a2-0b6fb78ee654",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "56547e77-c101-4f8c-af7a-e249b757a82c",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "80818f05-77b5-4ff8-83a2-0b6fb78ee654",
        "cursor": {
          "ref": "c0a7a30e-8793-499b-9f71-88bffe02e389",
          "length": 152,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "a39d838e-825e-4a89-990d-b5d398c1ca7b"
        },
        "item": {
          "id": "80818f05-77b5-4ff8-83a2-0b6fb78ee654",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "56547e77-c101-4f8c-af7a-e249b757a82c",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "1581e3e7-44a4-45af-acc8-8134c868d1fe",
        "cursor": {
          "ref": "214c953e-6769-4357-a336-748457b26e9b",
          "length": 152,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "cd142c0e-c4e2-4d38-be2e-bef16f179c97"
        },
        "item": {
          "id": "1581e3e7-44a4-45af-acc8-8134c868d1fe",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "91b45b9b-4c27-4814-9446-387fe65f2f73",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "1581e3e7-44a4-45af-acc8-8134c868d1fe",
        "cursor": {
          "ref": "214c953e-6769-4357-a336-748457b26e9b",
          "length": 152,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "cd142c0e-c4e2-4d38-be2e-bef16f179c97"
        },
        "item": {
          "id": "1581e3e7-44a4-45af-acc8-8134c868d1fe",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "91b45b9b-4c27-4814-9446-387fe65f2f73",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "96e661a2-d5da-4af3-b64f-6e2c01a0ea4f",
        "cursor": {
          "ref": "d6682787-d40f-4145-911f-bc1c672d8ad4",
          "length": 152,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "63d82914-2c4a-471b-baa0-afcae8ef0384"
        },
        "item": {
          "id": "96e661a2-d5da-4af3-b64f-6e2c01a0ea4f",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "b1f75ec1-bc80-41ff-9acf-ee70e15d7ac4",
          "status": "Created",
          "code": 201,
          "responseTime": 66,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "96e661a2-d5da-4af3-b64f-6e2c01a0ea4f",
        "cursor": {
          "ref": "d6682787-d40f-4145-911f-bc1c672d8ad4",
          "length": 152,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "63d82914-2c4a-471b-baa0-afcae8ef0384"
        },
        "item": {
          "id": "96e661a2-d5da-4af3-b64f-6e2c01a0ea4f",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "b1f75ec1-bc80-41ff-9acf-ee70e15d7ac4",
          "status": "Created",
          "code": 201,
          "responseTime": 66,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "be814e90-ecd8-4089-b387-6b4af291e8fd",
        "cursor": {
          "ref": "4a8856cc-9087-4b45-b67f-ac1bbac4feae",
          "length": 152,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "c0317418-42bc-4880-8f86-aa3e2ec1d2b0"
        },
        "item": {
          "id": "be814e90-ecd8-4089-b387-6b4af291e8fd",
          "name": "credentials_issue"
        },
        "response": {
          "id": "83ac8ccc-35d4-4c0d-8096-a5faf9695428",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'",
              "stack": "AssertionError: expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'\n   at Object.eval sandbox-script.js:3:41)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "be814e90-ecd8-4089-b387-6b4af291e8fd",
        "cursor": {
          "ref": "4a8856cc-9087-4b45-b67f-ac1bbac4feae",
          "length": 152,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "c0317418-42bc-4880-8f86-aa3e2ec1d2b0"
        },
        "item": {
          "id": "be814e90-ecd8-4089-b387-6b4af291e8fd",
          "name": "credentials_issue"
        },
        "response": {
          "id": "83ac8ccc-35d4-4c0d-8096-a5faf9695428",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'",
              "stack": "AssertionError: expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'\n   at Object.eval sandbox-script.js:3:41)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d3a238a-fee7-4caa-a477-56d30d0b7c94",
        "cursor": {
          "ref": "6c4898d4-0003-4201-a3da-be608f85fa80",
          "length": 152,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "e737eac7-2c0f-4ae7-bebe-52b52023f4bc"
        },
        "item": {
          "id": "3d3a238a-fee7-4caa-a477-56d30d0b7c94",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "f24f36f5-e351-4146-b1a0-dda7e11e1dbf",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d3a238a-fee7-4caa-a477-56d30d0b7c94",
        "cursor": {
          "ref": "6c4898d4-0003-4201-a3da-be608f85fa80",
          "length": 152,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "e737eac7-2c0f-4ae7-bebe-52b52023f4bc"
        },
        "item": {
          "id": "3d3a238a-fee7-4caa-a477-56d30d0b7c94",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "f24f36f5-e351-4146-b1a0-dda7e11e1dbf",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e064460-4c2d-4d5c-bc3c-e5134d731f4c",
        "cursor": {
          "ref": "432b6205-5886-465c-9597-eea687fb027b",
          "length": 152,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "805ecf09-d7e8-4536-8f0a-2a9cec89cff5"
        },
        "item": {
          "id": "8e064460-4c2d-4d5c-bc3c-e5134d731f4c",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d8497f3a-acd1-4055-b5d0-1bb5290126f1",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'",
              "stack": "AssertionError: expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'\n   at Object.eval sandbox-script.js:3:43)"
            }
          }
        ]
      },
      {
        "id": "8e064460-4c2d-4d5c-bc3c-e5134d731f4c",
        "cursor": {
          "ref": "432b6205-5886-465c-9597-eea687fb027b",
          "length": 152,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "805ecf09-d7e8-4536-8f0a-2a9cec89cff5"
        },
        "item": {
          "id": "8e064460-4c2d-4d5c-bc3c-e5134d731f4c",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d8497f3a-acd1-4055-b5d0-1bb5290126f1",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'",
              "stack": "AssertionError: expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'\n   at Object.eval sandbox-script.js:3:43)"
            }
          }
        ]
      },
      {
        "id": "c5ca56d6-61c6-420d-85c4-a6e583c6829e",
        "cursor": {
          "ref": "10ccf8fd-1c1a-4fb9-aa13-ff08a5f7c76a",
          "length": 152,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "55c5e346-1e46-4182-b20d-eb0a2f9b0379"
        },
        "item": {
          "id": "c5ca56d6-61c6-420d-85c4-a6e583c6829e",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1a605592-cbd5-4af9-bb92-4f0f47736c46",
          "status": "Created",
          "code": 201,
          "responseTime": 111,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5ca56d6-61c6-420d-85c4-a6e583c6829e",
        "cursor": {
          "ref": "10ccf8fd-1c1a-4fb9-aa13-ff08a5f7c76a",
          "length": 152,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "55c5e346-1e46-4182-b20d-eb0a2f9b0379"
        },
        "item": {
          "id": "c5ca56d6-61c6-420d-85c4-a6e583c6829e",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1a605592-cbd5-4af9-bb92-4f0f47736c46",
          "status": "Created",
          "code": 201,
          "responseTime": 111,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "977772b6-f4db-4779-8edc-031fe297495f",
        "cursor": {
          "ref": "0c99c5a5-ac23-4788-bdf6-a6ff78e04fb3",
          "length": 152,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "3f17b8e6-04e9-48b2-9582-3deeef19d8e0"
        },
        "item": {
          "id": "977772b6-f4db-4779-8edc-031fe297495f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "417816a0-be5d-480f-b2b7-68fb71eba7ec",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "977772b6-f4db-4779-8edc-031fe297495f",
        "cursor": {
          "ref": "0c99c5a5-ac23-4788-bdf6-a6ff78e04fb3",
          "length": 152,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "3f17b8e6-04e9-48b2-9582-3deeef19d8e0"
        },
        "item": {
          "id": "977772b6-f4db-4779-8edc-031fe297495f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "417816a0-be5d-480f-b2b7-68fb71eba7ec",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07598d96-8e34-4f1f-a277-e720adbbbf41",
        "cursor": {
          "ref": "a685e3a6-f3f6-4fea-a197-a181aded94a6",
          "length": 152,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "6988d5fb-0aa5-4142-8a7d-7169cc4f4f71"
        },
        "item": {
          "id": "07598d96-8e34-4f1f-a277-e720adbbbf41",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "86ca999a-fbf8-479c-8881-8c200538deac",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07598d96-8e34-4f1f-a277-e720adbbbf41",
        "cursor": {
          "ref": "a685e3a6-f3f6-4fea-a197-a181aded94a6",
          "length": 152,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "6988d5fb-0aa5-4142-8a7d-7169cc4f4f71"
        },
        "item": {
          "id": "07598d96-8e34-4f1f-a277-e720adbbbf41",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "86ca999a-fbf8-479c-8881-8c200538deac",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6cb01ba-6ac3-4e28-9010-d9ae7ec5ad75",
        "cursor": {
          "ref": "398381fa-18e3-4a53-a81c-61eb7e2e6bd1",
          "length": 152,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "c4bc6ec7-9a58-4ba7-aff9-a71956f42662"
        },
        "item": {
          "id": "e6cb01ba-6ac3-4e28-9010-d9ae7ec5ad75",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "fa24d9aa-4bb9-495b-a124-0a25dd73bf0c",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6cb01ba-6ac3-4e28-9010-d9ae7ec5ad75",
        "cursor": {
          "ref": "398381fa-18e3-4a53-a81c-61eb7e2e6bd1",
          "length": 152,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "c4bc6ec7-9a58-4ba7-aff9-a71956f42662"
        },
        "item": {
          "id": "e6cb01ba-6ac3-4e28-9010-d9ae7ec5ad75",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "fa24d9aa-4bb9-495b-a124-0a25dd73bf0c",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6f062a2-009a-4979-9c04-e8b9a886f07f",
        "cursor": {
          "ref": "22ef8fff-9e38-4df5-b352-628c60ea4c0c",
          "length": 152,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d44bb9a8-69a3-4838-8547-97dfff6a5f74"
        },
        "item": {
          "id": "d6f062a2-009a-4979-9c04-e8b9a886f07f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "6393abd6-b7bf-4c96-aa03-94008ccd039c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "d6f062a2-009a-4979-9c04-e8b9a886f07f",
        "cursor": {
          "ref": "22ef8fff-9e38-4df5-b352-628c60ea4c0c",
          "length": 152,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d44bb9a8-69a3-4838-8547-97dfff6a5f74"
        },
        "item": {
          "id": "d6f062a2-009a-4979-9c04-e8b9a886f07f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "6393abd6-b7bf-4c96-aa03-94008ccd039c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "0aa65972-2dc9-4118-9a2b-7d128eca7828",
        "cursor": {
          "ref": "10859af6-a2d8-4072-b087-0d7029ef9a97",
          "length": 152,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "1c8e3bd7-6fd8-4f9a-ad4b-85bfe0c5b17e"
        },
        "item": {
          "id": "0aa65972-2dc9-4118-9a2b-7d128eca7828",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "6cb4b572-2c86-4bfa-af5f-c5e360ac1aef",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 33,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "093fc9fc-2973-4c7a-8fe3-e96019f0b217",
        "cursor": {
          "ref": "2251f52e-1467-45af-accf-4bd43050a247",
          "length": 152,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "d9f83c2b-2681-4b10-bb89-03b7287a961f"
        },
        "item": {
          "id": "093fc9fc-2973-4c7a-8fe3-e96019f0b217",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "fb8cf087-35d3-44b6-992b-ce95595ae932",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "093fc9fc-2973-4c7a-8fe3-e96019f0b217",
        "cursor": {
          "ref": "2251f52e-1467-45af-accf-4bd43050a247",
          "length": 152,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "d9f83c2b-2681-4b10-bb89-03b7287a961f"
        },
        "item": {
          "id": "093fc9fc-2973-4c7a-8fe3-e96019f0b217",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "fb8cf087-35d3-44b6-992b-ce95595ae932",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "ecbf26dc-c2e0-4fc2-a5a6-9fc38ecff04a",
        "cursor": {
          "ref": "bbc2771c-495b-4e49-b099-1b9df046d2e0",
          "length": 152,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "b0d68559-de99-4e4a-8e7b-ae9c0e411749"
        },
        "item": {
          "id": "ecbf26dc-c2e0-4fc2-a5a6-9fc38ecff04a",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "6ad3603c-c1d8-4023-9708-826fa67faa9c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 56
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "7e9a6fa3-1dbf-4e1b-995c-124d9fe53814",
        "cursor": {
          "ref": "0bfb2e99-061b-4806-b530-e377e3293474",
          "length": 152,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f51a6a14-7877-4934-b9e7-937052ee12bc"
        },
        "item": {
          "id": "7e9a6fa3-1dbf-4e1b-995c-124d9fe53814",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "049f4aa4-5244-436a-ac0d-deb4bb04de89",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 65
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "51b56a77-0baf-43eb-ab49-41009795b77b",
        "cursor": {
          "ref": "c9416856-1878-42fa-bad9-1f60a7a9addf",
          "length": 152,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "d3b4822e-219a-41c3-ab0d-76ea269cc006"
        },
        "item": {
          "id": "51b56a77-0baf-43eb-ab49-41009795b77b",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "a0a89735-df94-43b6-b5c0-5c033bfa03b8",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "cffed5f6-fa17-4af0-9f4a-1d6c75d03306",
        "cursor": {
          "ref": "e9abcbc1-66c2-44eb-a01d-76a3e2c687a2",
          "length": 152,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "0ab0e231-c00e-474a-a064-3f4026fd0e74"
        },
        "item": {
          "id": "cffed5f6-fa17-4af0-9f4a-1d6c75d03306",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "f8ba00f0-cb92-4150-b315-386a30368b30",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "75c66535-08b4-4be3-9f29-2de58b9e1139",
        "cursor": {
          "ref": "7dbf4157-bebe-46b2-a653-94128d159186",
          "length": 152,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "f3980146-66f6-49ea-beae-54179a91228a"
        },
        "item": {
          "id": "75c66535-08b4-4be3-9f29-2de58b9e1139",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "232c2291-5ca8-4144-b7bd-aac55124eb57",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "b187e3be-b184-4ac3-91f9-f192cfc1ac09",
        "cursor": {
          "ref": "b902c0b5-3c89-44ec-a60b-b73503f8c50c",
          "length": 152,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "9fa72107-3570-4d08-81ef-575db8c9f055"
        },
        "item": {
          "id": "b187e3be-b184-4ac3-91f9-f192cfc1ac09",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "5f331af0-30df-4a50-8e2c-b7eef6c9591b",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "9e61acd2-2eab-42d7-a5cd-b0782c956546",
        "cursor": {
          "ref": "1d209208-075a-48fa-bb22-3903a53c0f40",
          "length": 152,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "c6152eb5-6381-453e-bd3a-9b527cd42cc1"
        },
        "item": {
          "id": "9e61acd2-2eab-42d7-a5cd-b0782c956546",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "d7dfba3c-001d-42d9-8e17-e44d15622639",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "c0e1cd7d-29f7-48cb-9867-4e930170655d",
        "cursor": {
          "ref": "83408d2a-12b6-4d1b-b6f4-8e64f57b082a",
          "length": 152,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "8b4be7b6-4642-4a54-8252-028d5ceb2e63"
        },
        "item": {
          "id": "c0e1cd7d-29f7-48cb-9867-4e930170655d",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "e353f3b4-7d73-4f09-8612-3d621f8937f7",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "86a998d7-2dee-4fe1-9a51-966040def2dd",
        "cursor": {
          "ref": "4a7645d2-4480-4e63-8330-cb3fe6656281",
          "length": 152,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "3f6ac0d5-b73a-4586-895f-21d9a2b4729d"
        },
        "item": {
          "id": "86a998d7-2dee-4fe1-9a51-966040def2dd",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "3fa37d71-3025-4d86-b91f-32994a12a52b",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "bc628d6f-e0ee-43a1-85f7-44b345b3dd54",
        "cursor": {
          "ref": "8e77caf4-58b2-475d-91e3-a9a577cee51c",
          "length": 152,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "cfb85fdf-65b8-42fe-8f7d-dff09b0ae05d"
        },
        "item": {
          "id": "bc628d6f-e0ee-43a1-85f7-44b345b3dd54",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "31ca498f-2d15-49a2-bc9b-2d811f687816",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "2523f03b-5bc9-41e1-8b2c-400ec47fb53f",
        "cursor": {
          "ref": "f87ebdd9-d131-4fbe-8610-f0f018aaf499",
          "length": 152,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "d8e63f9a-cf04-47e8-84b5-4fbaeac7e3ec"
        },
        "item": {
          "id": "2523f03b-5bc9-41e1-8b2c-400ec47fb53f",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "8c195e8e-523f-4ef1-b1e5-d09d9c7ffe7b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 208,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "b2766ca3-f65b-4c58-b5f0-2c6dc9f43f63",
        "cursor": {
          "ref": "607bf66c-1de9-434c-aaa7-97d522225bdc",
          "length": 152,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "d42b5b05-f2bc-43d5-bc63-29a8c2bd3f51"
        },
        "item": {
          "id": "b2766ca3-f65b-4c58-b5f0-2c6dc9f43f63",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "5e41c457-fad1-4ff2-beca-249015804bca",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "3efbc070-1c03-4e79-9eae-024da0ec03ef",
        "cursor": {
          "ref": "3ab59a99-e74d-431a-b842-366e6eb44c84",
          "length": 152,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "1d664cfa-8ff7-4edd-a15a-d5238e119821"
        },
        "item": {
          "id": "3efbc070-1c03-4e79-9eae-024da0ec03ef",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "fb943bcd-117f-4d28-9405-cce42539b90b",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "f5bbd54c-c924-46cb-8082-fd57d1f8f0a9",
        "cursor": {
          "ref": "4f16a76f-5c9c-484b-b95e-bfd7ede94282",
          "length": 152,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "ba050381-311a-43d0-aa94-33336f234255"
        },
        "item": {
          "id": "f5bbd54c-c924-46cb-8082-fd57d1f8f0a9",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "9aaf3a9d-2527-4684-afd6-3a6a15bc3126",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "609edc53-7885-4381-846a-6c7f6f12afea",
        "cursor": {
          "ref": "b2a37a29-9031-4b9c-82d8-244dad2dabc9",
          "length": 152,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "cfb1836d-446d-456e-beb1-528acb99c247"
        },
        "item": {
          "id": "609edc53-7885-4381-846a-6c7f6f12afea",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "0c373b8a-7e85-4cde-b194-9dadd7bf0d78",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "ccfd2575-9504-4d99-b205-09017792a781",
        "cursor": {
          "ref": "8602e422-7e0b-48f3-a513-2546be9f91f5",
          "length": 152,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "5ef5b8ff-e3f9-429d-a19b-5b9013bf5742"
        },
        "item": {
          "id": "ccfd2575-9504-4d99-b205-09017792a781",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "c16fb9d8-6a65-4578-b6cf-4a1f07e95288",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 73,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "2fbe7f7a-2783-469b-a0a7-901e3a96cc9a",
        "cursor": {
          "ref": "4652c3ba-0737-4cef-8461-10d56724d747",
          "length": 152,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "be8513ef-0f90-47c0-b953-25c3878582d2"
        },
        "item": {
          "id": "2fbe7f7a-2783-469b-a0a7-901e3a96cc9a",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "ec10ba83-4413-4ddc-966e-b266f8852b8c",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "e62a4bd2-e565-4e02-b191-9a81193ac00a",
        "cursor": {
          "ref": "944e2c0f-0ea7-43f1-9bf4-ac2cdf039bda",
          "length": 152,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "0a9ad69d-6b9a-4238-8fca-f6e9fd5a045b"
        },
        "item": {
          "id": "e62a4bd2-e565-4e02-b191-9a81193ac00a",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e7e9da8a-8c30-4e7d-9a9f-bcf088c313e3",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "c213ca9a-5c19-4fc6-9aa7-8c32af84b86e",
        "cursor": {
          "ref": "79f11400-d774-4835-8bf9-e8726985c099",
          "length": 152,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "ba3dd044-5fc0-4066-b4c7-f84d7f14e7ea"
        },
        "item": {
          "id": "c213ca9a-5c19-4fc6-9aa7-8c32af84b86e",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "794e9ae2-9cca-4b95-ab34-88bbd8c212b3",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "ea5c8fd0-8607-41aa-9a5a-d6f66bd3f32a",
        "cursor": {
          "ref": "8b01470a-95e9-4d7a-9fc6-cf87cac7a890",
          "length": 152,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "2edd4793-5002-4eac-8e9f-caaa10780d74"
        },
        "item": {
          "id": "ea5c8fd0-8607-41aa-9a5a-d6f66bd3f32a",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "a3357034-22c5-491d-8e67-fec39beff0e1",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "c6ef3215-fccb-4e63-9cf3-74fff546934f",
        "cursor": {
          "ref": "eb17e6e6-a08a-43d6-bcd5-ebb324a028f4",
          "length": 152,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "11f648cb-58d3-410b-b17f-00d659ac76de"
        },
        "item": {
          "id": "c6ef3215-fccb-4e63-9cf3-74fff546934f",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "dacc9f5e-8d79-42bc-b262-4adef5b40af0",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "ca5c4139-4812-4018-872c-7a9dfd7be827",
        "cursor": {
          "ref": "f346ea84-2e39-4722-baf8-2f007e7f849b",
          "length": 152,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "db1ada30-9382-439a-afff-80c61bc4975d"
        },
        "item": {
          "id": "ca5c4139-4812-4018-872c-7a9dfd7be827",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c6215657-e136-4526-b922-52d503cd2865",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "7b57b467-cef6-4aac-bd22-b8c0fec30355",
        "cursor": {
          "ref": "1979362b-6d9b-4e39-84ee-80386c57293e",
          "length": 152,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "016b29d4-4510-42bc-8533-bac970c624eb"
        },
        "item": {
          "id": "7b57b467-cef6-4aac-bd22-b8c0fec30355",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e0648001-a209-4d86-9576-c725168913ba",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "a777bad2-1a78-43ec-bc01-5ad53977d1bf",
        "cursor": {
          "ref": "a7300963-b828-4b12-9fe7-4ff0aa69b548",
          "length": 152,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "777ea6bd-6cf3-42da-8edf-6799dfbde885"
        },
        "item": {
          "id": "a777bad2-1a78-43ec-bc01-5ad53977d1bf",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "1ba87cec-9368-4964-a0c0-225849554118",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "30363715-0a35-4e34-943c-4c1bf80e33f1",
        "cursor": {
          "ref": "0c5bd1d6-6740-455b-81c7-3a95e0377118",
          "length": 152,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "a94bca23-9edb-4e2d-9b0e-c443a4807a94"
        },
        "item": {
          "id": "30363715-0a35-4e34-943c-4c1bf80e33f1",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "fab88a9d-5577-47e7-9ae6-73776675d8aa",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "4da77cb5-9df2-448f-821b-23c8cc4cbfd6",
        "cursor": {
          "ref": "dd25383e-1631-4370-82fe-9c23371d5fda",
          "length": 152,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "469a02ee-c369-4393-bdbf-9f035aa8859a"
        },
        "item": {
          "id": "4da77cb5-9df2-448f-821b-23c8cc4cbfd6",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "db996e79-948d-4a74-a759-06491979e0a7",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "bcbb28ff-7de2-4f0f-bf53-d227ee5e1607",
        "cursor": {
          "ref": "be652bef-b240-411b-8cc7-71bd3976e782",
          "length": 152,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "77334ec2-a717-4af2-9e1f-322518091123"
        },
        "item": {
          "id": "bcbb28ff-7de2-4f0f-bf53-d227ee5e1607",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "b4597434-cb6a-4a37-8680-59800758098c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "079b259e-dabe-4686-81ad-76c5d5e7627c",
        "cursor": {
          "ref": "71f2dca3-7df4-45a2-a2b2-96866353c29b",
          "length": 152,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "c5142120-9f0e-4288-9465-6a0caaad324e"
        },
        "item": {
          "id": "079b259e-dabe-4686-81ad-76c5d5e7627c",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "1aa0d3f6-b7e4-4c84-a945-70a8bedbf0bb",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "28b7dcf0-539a-42ca-972b-ae4c7009f7e7",
        "cursor": {
          "ref": "e3d1498f-0eeb-461b-9bb9-27a1da9bdb25",
          "length": 152,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "981792ff-bb54-4987-bdff-1028b8f6e06e"
        },
        "item": {
          "id": "28b7dcf0-539a-42ca-972b-ae4c7009f7e7",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "05da0480-ff52-4c26-b8f4-7d95b216ee9e",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "581e3b39-6d23-478b-9757-2e311f843291",
        "cursor": {
          "ref": "844f2ed4-6511-40c3-bcf3-70731c8a37ae",
          "length": 152,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "c4c63013-1b48-4d52-94d7-6427aa5978f1"
        },
        "item": {
          "id": "581e3b39-6d23-478b-9757-2e311f843291",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "b8fcbb35-6870-40b6-8f76-ee8d224186c4",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "149b7231-3324-45f4-a67b-4690431d9239",
        "cursor": {
          "ref": "da7b40a1-f3a8-4b41-9fd3-0cc94e67705f",
          "length": 152,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "3bd434c0-2208-45e8-b382-2083e743f408"
        },
        "item": {
          "id": "149b7231-3324-45f4-a67b-4690431d9239",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "06d4fd15-71aa-4a49-9ed8-07c9f07dd181",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "54d95728-a458-4b08-b134-adbc805b6903",
        "cursor": {
          "ref": "48f86cc6-db99-4637-a368-332ef1d7b750",
          "length": 152,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "6d3a5802-b466-4331-a3b6-afac50c9976e"
        },
        "item": {
          "id": "54d95728-a458-4b08-b134-adbc805b6903",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "2bbf4ec6-88ee-45d7-8c3e-31472e3c0220",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "0a60a4b1-8898-47b5-bfad-db131e9b6a9a",
        "cursor": {
          "ref": "2a712916-b188-454a-8b4e-b7f165386be8",
          "length": 152,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "d0ca2355-dd83-4d6f-bfc2-198485511035"
        },
        "item": {
          "id": "0a60a4b1-8898-47b5-bfad-db131e9b6a9a",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "983823a2-5b8e-4a9c-b85d-35783ddad244",
          "status": "OK",
          "code": 200,
          "responseTime": 57,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "39a167d1-cd16-48d0-b90f-2e2b033a4b59",
        "cursor": {
          "ref": "0f3354d9-7991-4d48-8232-444972153e64",
          "length": 152,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "f2c24304-f482-45bb-a26e-b6d4abcf890a"
        },
        "item": {
          "id": "39a167d1-cd16-48d0-b90f-2e2b033a4b59",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "1f895c17-a97f-4a76-8b73-0d97d51f0ed2",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "aa54848f-1af6-4c64-84fc-7bf4adb556e7",
        "cursor": {
          "ref": "a325dfa9-0735-42b0-8416-1dcc2e8710a7",
          "length": 152,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "1f7a0bf8-cef4-4e78-9dd8-38f05bb6b463"
        },
        "item": {
          "id": "aa54848f-1af6-4c64-84fc-7bf4adb556e7",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "2f12d2ff-5f2f-4a37-ae86-334492aa3a27",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "b8ff9963-6a19-4a40-8956-0003cee32c3b",
        "cursor": {
          "ref": "8f6cb31a-089e-4284-be95-2a7b08bfe278",
          "length": 152,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "e7adb9a1-156e-4c2a-9db1-644a7b8fee37"
        },
        "item": {
          "id": "b8ff9963-6a19-4a40-8956-0003cee32c3b",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "04504e26-3598-4f4e-9b82-131495e22489",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "de90406d-3519-4363-b474-655e58c1d448",
        "cursor": {
          "ref": "e3fcecfb-7151-4a0c-9543-49a33d426c41",
          "length": 152,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "98a72381-1150-41c5-8f34-1096531bbf5e"
        },
        "item": {
          "id": "de90406d-3519-4363-b474-655e58c1d448",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "4f21146b-3639-4e95-97fa-d3fc8b36b3f2",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "ebfdb833-33f4-4f3f-aef5-43642468e6e4",
        "cursor": {
          "ref": "e778db90-8fd3-4f0e-a7a8-22b4bfc8f941",
          "length": 152,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "02e4cca6-3bde-4af8-bbc3-cb64b7fbd351"
        },
        "item": {
          "id": "ebfdb833-33f4-4f3f-aef5-43642468e6e4",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "1cbf48b3-d032-459a-b0ca-79954c2cd437",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "ab216865-f09f-4377-8616-f8cf7847f940",
        "cursor": {
          "ref": "25cfb911-05d4-4c74-b45e-46856bd45e7c",
          "length": 152,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "7036bbee-e192-4ce1-98da-545ac8e0eb36"
        },
        "item": {
          "id": "ab216865-f09f-4377-8616-f8cf7847f940",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "c5688ad1-2d3d-4762-b3b1-7e0fb6effa68",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "92829be0-e5a5-4245-9637-55c33b148481",
        "cursor": {
          "ref": "79c167df-8c9d-4c7f-8a01-2fd300944df4",
          "length": 152,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "70b6a574-9932-45cb-aec7-b9762ab7d55d"
        },
        "item": {
          "id": "92829be0-e5a5-4245-9637-55c33b148481",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "099fc875-0b9c-4e72-96e6-66b09dc7466d",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "bb4bf630-cc56-4946-ba41-adad3106af46",
        "cursor": {
          "ref": "d85cd23b-74ba-4ee0-a07d-91e8fd581bb1",
          "length": 152,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "1c31a010-a1c7-4561-b945-eaea059b6f6f"
        },
        "item": {
          "id": "bb4bf630-cc56-4946-ba41-adad3106af46",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "e793e918-c187-45b6-815f-bf501ba6ef03",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "4d4e8ac6-b251-4b0f-a3cb-3a52366b1279",
        "cursor": {
          "ref": "e6514583-cff9-45b2-b10d-0d7c1d392c35",
          "length": 152,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "14769aca-278d-478b-9473-4d0b3d01f243"
        },
        "item": {
          "id": "4d4e8ac6-b251-4b0f-a3cb-3a52366b1279",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "51ff6150-b1c7-4e6f-b08b-7f017ab51fd8",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "72a50863-e4b8-46f0-8ff0-d813eab5e19c",
        "cursor": {
          "ref": "aebbb3e7-3dba-487d-b844-22105b38a0fa",
          "length": 152,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "d9c4b381-7a3c-4e70-8c4e-f5b5359f0f01"
        },
        "item": {
          "id": "72a50863-e4b8-46f0-8ff0-d813eab5e19c",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "e18ebf16-b703-4290-b643-f70e6f3ca7c0",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "f9bec17b-c689-4e92-9868-564b1c715d09",
        "cursor": {
          "ref": "a0537a26-059a-489d-96db-57560560f693",
          "length": 152,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "3b58986b-9a25-4755-b592-f1266976f6be"
        },
        "item": {
          "id": "f9bec17b-c689-4e92-9868-564b1c715d09",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "566fcc80-68a8-4de7-8a65-0f7b27d483b1",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "028dd658-92cf-4137-a638-6c87dc254e1d",
        "cursor": {
          "ref": "af4bd47a-7494-45e3-8a28-d38dbdb3dd81",
          "length": 152,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f7bb9220-2c2e-48e2-9df1-62fe1c99fdcf"
        },
        "item": {
          "id": "028dd658-92cf-4137-a638-6c87dc254e1d",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b900db62-0036-428a-b9a0-93ec265362d7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "98939138-de12-4792-a727-2248ef8b18fc",
        "cursor": {
          "ref": "db7dc8dd-06d9-4c70-9187-2b9232ce14f1",
          "length": 152,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "0cf6d628-336c-4a36-a077-a5f56962b2a2"
        },
        "item": {
          "id": "98939138-de12-4792-a727-2248ef8b18fc",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "a7feabc1-45aa-4995-8a56-ae201855150e",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "293a3a46-8d3c-4985-bca1-ebb587b30b4d",
        "cursor": {
          "ref": "87d58b04-03cf-4c07-b8f6-7bd5eabea79b",
          "length": 152,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "e829c35c-6100-4a60-bb56-66015fadeb16"
        },
        "item": {
          "id": "293a3a46-8d3c-4985-bca1-ebb587b30b4d",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "136bcdc1-dd49-428f-bcea-694ebec729a0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "7de2b903-5105-4a8a-8255-53c741bee149",
        "cursor": {
          "ref": "e23b2d96-46ec-42d3-bace-bceb5b4a5a51",
          "length": 152,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "ff881b0f-6618-40e5-8ea9-dc0c501924c2"
        },
        "item": {
          "id": "7de2b903-5105-4a8a-8255-53c741bee149",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "555718f0-e349-4d0d-820b-c9f8e6e61603",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "239b6695-18f8-4ac0-b95d-4a9981476a5d",
        "cursor": {
          "ref": "ac3e7169-0af5-4c0c-b561-23094ce539fa",
          "length": 152,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "b0e72998-4f77-4bda-9d4e-ce6ff9e7af64"
        },
        "item": {
          "id": "239b6695-18f8-4ac0-b95d-4a9981476a5d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "2f5ef4f9-c411-417b-837a-a4566ac982ce",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "058c6f4b-9035-4327-bcb1-7ac692d2978a",
        "cursor": {
          "ref": "f06b37fc-d2f0-4911-9e66-811f9912b334",
          "length": 152,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "58c49e75-84a9-4682-8fa0-be89f3abce88"
        },
        "item": {
          "id": "058c6f4b-9035-4327-bcb1-7ac692d2978a",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b4a4fb27-3390-4c9f-bfa7-50b0a31f3e97",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "f58370a5-ee48-4e5e-a8ab-afd70a5e51e3",
        "cursor": {
          "ref": "a92cbafe-2de6-4f59-a12a-547fb7c70343",
          "length": 152,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "360a8e0e-1815-42f0-944d-9459a5401ff5"
        },
        "item": {
          "id": "f58370a5-ee48-4e5e-a8ab-afd70a5e51e3",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "c1f5e28e-32ca-48bb-96a8-3efd12c19434",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "64056e6d-0ee9-42b4-b839-ca70b7953fa4",
        "cursor": {
          "ref": "36aa60b0-a6dc-4349-bcf4-1a4f92875ec6",
          "length": 152,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "1e2cea1d-3f4f-4c67-b417-a94eb7f2c255"
        },
        "item": {
          "id": "64056e6d-0ee9-42b4-b839-ca70b7953fa4",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "8e22358e-1ca4-4959-9acf-da64baf7d49d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 85,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "e998fb84-8a72-4e0c-8fc6-6444f421dcb9",
        "cursor": {
          "ref": "94f0309a-8ffd-4dab-98db-89e1bc1f7b7a",
          "length": 152,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "e968526a-392c-4404-bdfc-ef7e7606286e"
        },
        "item": {
          "id": "e998fb84-8a72-4e0c-8fc6-6444f421dcb9",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "4238981e-4ae9-44c2-bd8f-0de2e21b903a",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "4fb3949f-ac9b-4f0a-843a-51cf24b11616",
        "cursor": {
          "ref": "656a8764-5dda-4cfc-b934-73a825cf6a98",
          "length": 152,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c1ddd01f-3319-4a12-93d1-0254aa0db6c3"
        },
        "item": {
          "id": "4fb3949f-ac9b-4f0a-843a-51cf24b11616",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "fbddc99d-cde7-4173-8252-81b8c99562ae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "50f69570-3381-4a4a-a65a-f812c62b2156",
        "cursor": {
          "ref": "fdef5207-26d1-44c7-8da8-00630e98aab7",
          "length": 152,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "a78b26f4-6f64-422b-bdbc-ec58b68a1e21"
        },
        "item": {
          "id": "50f69570-3381-4a4a-a65a-f812c62b2156",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "141ee3eb-f97f-4751-ad56-828b4e2f1fe6",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "32ed46f9-2ea5-437e-a0ab-eae7b22fb91a",
        "cursor": {
          "ref": "e59806dd-0124-47d4-aea9-67afe68ec9c9",
          "length": 152,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "2449b910-b45e-4bd4-99f8-adda52190f57"
        },
        "item": {
          "id": "32ed46f9-2ea5-437e-a0ab-eae7b22fb91a",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "3d209e9c-1e8d-46c8-93ec-728fe9025066",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:106)"
            }
          }
        ]
      },
      {
        "id": "6beb7218-1ca1-40ec-a699-6eab4ee74f15",
        "cursor": {
          "ref": "e787574c-5edf-4df4-b5ac-aade5b5783ad",
          "length": 152,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "5e42a463-e92f-4081-a7ca-6056280e2790"
        },
        "item": {
          "id": "6beb7218-1ca1-40ec-a699-6eab4ee74f15",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "a03eb942-369c-4a2d-9774-ab951e2f2e83",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "aa902509-299f-4aee-8b76-0930b7827ea5",
        "cursor": {
          "ref": "d8949da5-5dc4-4111-9152-d6c145353dae",
          "length": 152,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "f7b49470-3531-4b81-91b0-d12aadb5bcef"
        },
        "item": {
          "id": "aa902509-299f-4aee-8b76-0930b7827ea5",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "01bc7160-72ae-49d6-9812-44959371366c",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "b54c7045-e04d-4248-a5c4-f4518ff350da",
        "cursor": {
          "ref": "88b1f297-3d9b-4958-8d39-25247af4b7b2",
          "length": 152,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "004978e9-ca37-41c1-aa00-17435b405eb9"
        },
        "item": {
          "id": "b54c7045-e04d-4248-a5c4-f4518ff350da",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "94770871-2789-450e-a274-7d25280d6e14",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "d98b41ee-5c97-4eeb-9cce-5d211fe6f6da",
        "cursor": {
          "ref": "2af4ed33-10f4-4f5b-9693-19bba9c3a809",
          "length": 152,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "3ce87fa9-2033-42e7-aed5-72ccbfa8999c"
        },
        "item": {
          "id": "d98b41ee-5c97-4eeb-9cce-5d211fe6f6da",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "12a8e519-6227-4761-ac94-1feca36aec0e",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "a7301b78-5f1a-42f3-a13e-2f937153dd6e",
        "cursor": {
          "ref": "424fc3ff-03a6-4977-b6ad-eb161451a985",
          "length": 152,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "2a22d979-153d-4ec5-8797-0e198f11d0db"
        },
        "item": {
          "id": "a7301b78-5f1a-42f3-a13e-2f937153dd6e",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "6eac3766-981d-484c-8c4d-cfc657d28417",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "17e0ff65-c0db-436d-a702-45848f4db2bc",
        "cursor": {
          "ref": "30162596-b910-43a1-9110-66e721bd19d0",
          "length": 152,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "7b1453da-cc1a-4472-ae05-bf5fcaa01da1"
        },
        "item": {
          "id": "17e0ff65-c0db-436d-a702-45848f4db2bc",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "af2fe950-2bcb-4b84-81fd-870e1f9bddf9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "ec307241-ece7-4bad-9d69-30be6abe8fe7",
        "cursor": {
          "ref": "95841d8c-4c5e-4b6c-886c-6727f2be13cb",
          "length": 152,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "01e3b6df-8e12-4f3c-b9bd-e8372b504e74"
        },
        "item": {
          "id": "ec307241-ece7-4bad-9d69-30be6abe8fe7",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "60d59c7b-5876-4955-a2b1-caccf064f1ee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "aa853e54-15b3-488b-9e23-b44e6e1956f8",
        "cursor": {
          "ref": "cc58dee5-b417-4e06-8719-8f46bf7105e6",
          "length": 152,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "0923c8d2-d426-467b-b4b0-ddafb014e629"
        },
        "item": {
          "id": "aa853e54-15b3-488b-9e23-b44e6e1956f8",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "1312288c-ce5c-4f01-8163-f02119b78817",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "af2680be-9235-4106-b3e3-6e520c189083",
        "cursor": {
          "ref": "380b01b8-df4d-4e2c-84f1-5625e8c91aae",
          "length": 152,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a3205ff7-8e9b-41b4-a119-97734634181d"
        },
        "item": {
          "id": "af2680be-9235-4106-b3e3-6e520c189083",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "027ba169-ed74-41bb-84d6-cc7fcb043644",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 41,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "9951a34a-7948-44cd-b1e7-95f581fd2e4a",
        "cursor": {
          "ref": "502d70d3-7fe0-4895-901c-b0d8bc01b211",
          "length": 152,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "3e1b58b0-8303-4be6-b9a6-0e6750ba1bf3"
        },
        "item": {
          "id": "9951a34a-7948-44cd-b1e7-95f581fd2e4a",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "4f75bd4b-1ead-4b45-aaa5-dade235bc405",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "89111876-8f9a-4a34-8081-3c0034a50c08",
        "cursor": {
          "ref": "f3bb37b0-ea40-4c46-9cd8-427995665bdb",
          "length": 152,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "1f8c0512-aefd-4099-976e-51b062d73b14"
        },
        "item": {
          "id": "89111876-8f9a-4a34-8081-3c0034a50c08",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "3125a435-a756-4713-8a53-1bd71edf8a63",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "ff6da0b1-af5f-4c73-9e58-e3a4643e0749",
        "cursor": {
          "ref": "79950613-f69a-46e1-b8ea-593a6b956083",
          "length": 152,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "235c68c6-e24b-4d99-9a2a-0f4e3a7aee08"
        },
        "item": {
          "id": "ff6da0b1-af5f-4c73-9e58-e3a4643e0749",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "3b4a9ccd-2de1-4e0b-aec1-f57857be2529",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "9c191b3e-0d24-404c-899f-ffed01ab5caa",
        "cursor": {
          "ref": "b1f5c887-a5ff-4662-99e2-bc7eb88ffa29",
          "length": 152,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "0044a30a-9935-474f-bbda-edb6e882ac0e"
        },
        "item": {
          "id": "9c191b3e-0d24-404c-899f-ffed01ab5caa",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "c45b2b14-042a-4bc0-959c-2f6fdeaca80c",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "4a19443b-5cad-4b18-9566-4e4d6cd1eb05",
        "cursor": {
          "ref": "9d51975f-bc49-45ae-bcfc-bbf37613fcb0",
          "length": 152,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "e8bbf841-8d48-4ef0-95c6-38d642ac109f"
        },
        "item": {
          "id": "4a19443b-5cad-4b18-9566-4e4d6cd1eb05",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "460f0ed2-67f8-46b9-b1c1-074a4237ef4c",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "61eff0e4-9179-469a-ac15-d7377059873a",
        "cursor": {
          "ref": "f5db20dc-54e9-4a67-9412-43be8fa9585e",
          "length": 152,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "46c8b777-dc73-4205-a527-31caeb3adac3"
        },
        "item": {
          "id": "61eff0e4-9179-469a-ac15-d7377059873a",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "c753d7cb-8d8d-49df-b959-2f785ee38fc5",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "ab257a95-891f-4d0c-983d-e2556264da9e",
        "cursor": {
          "ref": "45937cb4-0888-450e-a2ed-c8e3bac89195",
          "length": 152,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b22e1455-5b67-4760-90ff-90c0c92a7da3"
        },
        "item": {
          "id": "ab257a95-891f-4d0c-983d-e2556264da9e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "3149755b-5df8-4874-ada3-d0ccb7bd1038",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "2d76915f-ec55-49dd-a050-fafb55721652",
        "cursor": {
          "ref": "f0dd8dac-5372-4a41-b068-2798ae438d1e",
          "length": 152,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "15048d81-061c-43db-9264-47ea862eb1b6"
        },
        "item": {
          "id": "2d76915f-ec55-49dd-a050-fafb55721652",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "56d0880e-2e8e-4292-b3ea-989f73570473",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "3ab9df94-50e6-4354-8846-030f0621ac75",
        "cursor": {
          "ref": "ccc98db9-0c73-4c9f-a8bb-f5044fd72bf3",
          "length": 152,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "636d2a72-65bb-4dd3-9f52-1e61180d198f"
        },
        "item": {
          "id": "3ab9df94-50e6-4354-8846-030f0621ac75",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "665bd670-05b0-451f-b8c0-54642e160730",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "14321afd-5c2e-4802-905d-93bb88eec8d8",
        "cursor": {
          "ref": "8e1b7dde-279a-456a-9352-6d485f928071",
          "length": 152,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "e873fe71-6de6-4b29-bc0f-6635e68e3d22"
        },
        "item": {
          "id": "14321afd-5c2e-4802-905d-93bb88eec8d8",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "60694d77-e8b0-4644-b55d-2f11b91b63c8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 79,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "bbf10ef9-cab4-40a3-8fae-48996f4568be",
        "cursor": {
          "ref": "7647347a-a1a2-441f-9236-5661f20a9e56",
          "length": 152,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "84a127ea-9b2e-45b3-a78a-bb526e860902"
        },
        "item": {
          "id": "bbf10ef9-cab4-40a3-8fae-48996f4568be",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a35981aa-3849-4ecc-93aa-87437490c357",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "31638b14-024c-4383-82f5-5f2e1acfbd22",
        "cursor": {
          "ref": "c5e196c6-c3d1-4799-b9b3-9ddab0f8572d",
          "length": 152,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "545c1654-23c5-4bef-b6da-323849c8ea96"
        },
        "item": {
          "id": "31638b14-024c-4383-82f5-5f2e1acfbd22",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "b33edf94-20e2-46cb-bd1a-2b53ac0ee27a",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "73f270eb-5201-4c37-a6f0-d5d18e8084f4",
        "cursor": {
          "ref": "11581557-4954-43a9-8cf9-fa8658f1fc42",
          "length": 152,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "947ca262-b7e0-411c-9b73-d4b7d92c8f4d"
        },
        "item": {
          "id": "73f270eb-5201-4c37-a6f0-d5d18e8084f4",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "9edd9b8d-e121-4813-bb03-9453aee099c0",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "f2426ca7-34d5-4eda-958d-c13b4d86b45f",
        "cursor": {
          "ref": "2521af10-952a-4695-9e42-83b1bee1e23b",
          "length": 152,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "9559526c-0b0d-4d7d-8b24-6580a5cfc9fd"
        },
        "item": {
          "id": "f2426ca7-34d5-4eda-958d-c13b4d86b45f",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ce973c42-e753-4abf-a3f5-6dba00cef618",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 43,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "9371bd86-bae1-4d8a-98bb-e1aa45a6c6a2",
        "cursor": {
          "ref": "82a1ca5d-2ad2-4229-82bf-dd2ab047a43a",
          "length": 152,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "7e6ec9f3-a777-4a62-878b-23436e21b263"
        },
        "item": {
          "id": "9371bd86-bae1-4d8a-98bb-e1aa45a6c6a2",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "9c9c8f0f-7592-4103-b401-42c0beda7053",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 41,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "d59616a6-053d-44b8-854f-041184634715",
        "cursor": {
          "ref": "60d952d8-dc72-48a7-803c-c837b49eca4d",
          "length": 152,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "fcf661bb-32b7-4371-adc7-95c406b8bad9"
        },
        "item": {
          "id": "d59616a6-053d-44b8-854f-041184634715",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "667e6e7c-19c1-4033-82da-6e258d2be869",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 41,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "68bed958-5e68-4140-83bf-d72280b62c91",
        "cursor": {
          "ref": "dbeb3fa6-74cb-411a-a1a8-f22e4bcfc9f8",
          "length": 152,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "93163f1d-86ab-439b-ac35-8cb5a1ebc29f"
        },
        "item": {
          "id": "68bed958-5e68-4140-83bf-d72280b62c91",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "37ccbd53-d3f1-4e3d-9888-da17c035235b",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "b04cf840-3192-45c1-8774-a86b7446f258",
        "cursor": {
          "ref": "2122f4c4-2be5-4b73-80ab-790f5f0c9cdd",
          "length": 152,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "ec8e3a37-bb3b-4120-8f12-3f31531d855c"
        },
        "item": {
          "id": "b04cf840-3192-45c1-8774-a86b7446f258",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "fc5cac39-d832-4e45-925b-cff5eb32c4bf",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "4217065a-b43f-4e26-a3e0-00a31e62369f",
        "cursor": {
          "ref": "9d7e7591-e597-456b-98fe-e024b3a31c02",
          "length": 152,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "8f27337f-7f5a-47d7-a8aa-85d6e9002bba"
        },
        "item": {
          "id": "4217065a-b43f-4e26-a3e0-00a31e62369f",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "946060b7-3c2f-485f-b818-0d13dda6f040",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "9ea6c453-2b64-42d8-996b-6f6a6763adbb",
        "cursor": {
          "ref": "956aa8df-5839-4689-89b7-8aab61d46e17",
          "length": 152,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "931dd65e-dc5a-440f-843a-9f6f526f7e01"
        },
        "item": {
          "id": "9ea6c453-2b64-42d8-996b-6f6a6763adbb",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "4166c9d2-0e3b-4e99-b322-4e12aeaab1ae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "7d96f278-9ec2-450c-90a4-52e2a25355a4",
        "cursor": {
          "ref": "66c40477-ec63-416a-b76d-152233938299",
          "length": 152,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "0c66e995-cc5b-4379-8a4b-acb5e0e90114"
        },
        "item": {
          "id": "7d96f278-9ec2-450c-90a4-52e2a25355a4",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "e4dfbb45-d3b8-4030-a558-9f7b3a55df56",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 44,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "c660245e-265c-4035-848d-426ec0f68664",
        "cursor": {
          "ref": "292d62e3-270a-4038-a205-45600bc3e860",
          "length": 152,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "c41e0a96-4f58-4ef5-b8e6-d7b633cea77f"
        },
        "item": {
          "id": "c660245e-265c-4035-848d-426ec0f68664",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "737252dc-05d9-4134-aa1f-cb4b0d6abcf8",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "e7617bfd-1f54-4937-9e8e-af9c85d918bc",
        "cursor": {
          "ref": "38084315-b884-46a7-99d5-f9bbea3ce05b",
          "length": 152,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "b2c22101-3ed6-4541-bb18-e0ba97e7535a"
        },
        "item": {
          "id": "e7617bfd-1f54-4937-9e8e-af9c85d918bc",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "314b5b47-80c0-48d8-80af-5148b33922fc",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "07e8d0a5-0e77-4de0-9272-a5ae6f9e05dd",
        "cursor": {
          "ref": "04c42fc9-1274-4af6-9a5a-fbe6a31e7e2a",
          "length": 152,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "c49ed8ef-d665-4e03-ad66-3de4405555db"
        },
        "item": {
          "id": "07e8d0a5-0e77-4de0-9272-a5ae6f9e05dd",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "d627f692-8d3b-4878-9599-7fc9b79fec91",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "c11c3e6e-e549-4fed-a9b9-0d0689e5e32c",
        "cursor": {
          "ref": "f3eae651-d43e-42ac-9f80-f83fa17f877a",
          "length": 152,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "d1832dc4-06d0-4db7-9046-3bc461cfba91"
        },
        "item": {
          "id": "c11c3e6e-e549-4fed-a9b9-0d0689e5e32c",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "dcf5a408-873a-4c61-b2c0-f0ff903ca704",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 41,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "7a1c16c1-7d19-4ea3-8e0d-049df13ccfbb",
        "cursor": {
          "ref": "65943577-748b-4b84-a7c4-b8c4346e839d",
          "length": 152,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "53d56196-4d9f-4561-bd2e-7a5939005244"
        },
        "item": {
          "id": "7a1c16c1-7d19-4ea3-8e0d-049df13ccfbb",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "5841c5d2-e151-4413-aee9-ee05f916dd27",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 44,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "85f6c42d-b50e-4a18-9e77-eed7179acc99",
        "cursor": {
          "ref": "bcc8bfac-f22f-498a-b627-a99747c63f5c",
          "length": 152,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "d1078953-348e-4a43-b764-9118c2b263db"
        },
        "item": {
          "id": "85f6c42d-b50e-4a18-9e77-eed7179acc99",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "d5ffbe6a-afd5-4171-afed-b209a34c4289",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "dd9f5056-835b-40a1-988a-f11598d5d6a2",
        "cursor": {
          "ref": "a75deb9f-cdfc-42a7-ba4e-8b8ee75ba08b",
          "length": 152,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ca445bb4-0139-426b-9f70-8bf867e27633"
        },
        "item": {
          "id": "dd9f5056-835b-40a1-988a-f11598d5d6a2",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "8da46fd5-b8e3-4db1-9c33-dbf66e9a6c3f",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "d38c1776-277c-4eeb-bb62-4b43eb25fefe",
        "cursor": {
          "ref": "5098deec-5ec5-4bde-876e-01824a821e6a",
          "length": 152,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "abdde7e4-4460-454a-a36a-d8e859ec0e84"
        },
        "item": {
          "id": "d38c1776-277c-4eeb-bb62-4b43eb25fefe",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "8d499382-7219-43cf-8f74-0811608554fe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 42,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "f7d678e4-4c17-49ab-9896-da543266e993",
        "cursor": {
          "ref": "973becfa-b101-4af8-957d-dc753787d022",
          "length": 152,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "0c63f15b-95bd-445a-9b04-95c0c644f70c"
        },
        "item": {
          "id": "f7d678e4-4c17-49ab-9896-da543266e993",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "14d78463-46d7-4d19-8497-df1d172d0824",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "9a9e9508-779e-4358-94e9-ddb9a5785cd8",
        "cursor": {
          "ref": "1f24c875-d679-497a-ad89-647885696634",
          "length": 152,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "c29e7ce7-3515-4224-b6d6-2df5726449f5"
        },
        "item": {
          "id": "9a9e9508-779e-4358-94e9-ddb9a5785cd8",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "4679840a-791b-4a91-9918-ab43e56c31f3",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "63b17313-1aff-46e4-b519-abf9451c21ae",
        "cursor": {
          "ref": "d0b44de6-d354-4986-a96c-80b6ef1e17a5",
          "length": 152,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "2219ebd6-ecc1-427d-8a2f-3f4f7425b52b"
        },
        "item": {
          "id": "63b17313-1aff-46e4-b519-abf9451c21ae",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "71e7d060-581b-47bc-a87f-7904f8d76101",
          "status": "Not Found",
          "code": 404,
          "responseTime": 36,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "63b17313-1aff-46e4-b519-abf9451c21ae",
        "cursor": {
          "ref": "d0b44de6-d354-4986-a96c-80b6ef1e17a5",
          "length": 152,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "2219ebd6-ecc1-427d-8a2f-3f4f7425b52b"
        },
        "item": {
          "id": "63b17313-1aff-46e4-b519-abf9451c21ae",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "71e7d060-581b-47bc-a87f-7904f8d76101",
          "status": "Not Found",
          "code": 404,
          "responseTime": 36,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "bf98258a-26d5-40a3-b6a8-a866b6920fd8",
        "cursor": {
          "ref": "58ca4616-7070-452f-b609-143ebd6f07bf",
          "length": 152,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "7d176f32-c4ae-4662-82be-63ee0f6a9efc"
        },
        "item": {
          "id": "bf98258a-26d5-40a3-b6a8-a866b6920fd8",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "d07e75b5-9e91-42ee-a474-949543ec90a2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 35,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "38939c33-2b57-4cd1-9e24-a8ba12b9b678",
        "cursor": {
          "ref": "527cf2bb-fb2a-48b2-8efa-30c20d177bcf",
          "length": 152,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "164563a9-bdbf-4664-bc0b-0a3a2bd91628"
        },
        "item": {
          "id": "38939c33-2b57-4cd1-9e24-a8ba12b9b678",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "7e70faea-7404-4d17-b4a7-11bb820cc8ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "38939c33-2b57-4cd1-9e24-a8ba12b9b678",
        "cursor": {
          "ref": "527cf2bb-fb2a-48b2-8efa-30c20d177bcf",
          "length": 152,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "164563a9-bdbf-4664-bc0b-0a3a2bd91628"
        },
        "item": {
          "id": "38939c33-2b57-4cd1-9e24-a8ba12b9b678",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "7e70faea-7404-4d17-b4a7-11bb820cc8ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "a28fe991-1543-4a92-bef5-cc29befbc09e",
        "cursor": {
          "ref": "ee87c6d5-736f-4a3d-9666-fb5cb64e0b88",
          "length": 152,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "f8d4640e-ffa8-4b2d-9cc6-9e03a2692d2b"
        },
        "item": {
          "id": "a28fe991-1543-4a92-bef5-cc29befbc09e",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "f0f85cbb-f273-43b3-b8de-074d94a35fad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "8ffe318f-e06a-4def-bd37-845ead53e099",
        "cursor": {
          "ref": "26e99e95-e739-4f64-9984-1adc6a0f1576",
          "length": 152,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "b853d737-4d82-48ad-89f5-a065fcf2da69"
        },
        "item": {
          "id": "8ffe318f-e06a-4def-bd37-845ead53e099",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1b819999-6f85-4d13-a6c9-1391b2363173",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "8ffe318f-e06a-4def-bd37-845ead53e099",
        "cursor": {
          "ref": "26e99e95-e739-4f64-9984-1adc6a0f1576",
          "length": 152,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "b853d737-4d82-48ad-89f5-a065fcf2da69"
        },
        "item": {
          "id": "8ffe318f-e06a-4def-bd37-845ead53e099",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1b819999-6f85-4d13-a6c9-1391b2363173",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "d43dde6b-cfff-48a6-912c-dcb367c0bded",
        "cursor": {
          "ref": "8029f416-ca6d-47eb-92f2-76f3d864c890",
          "length": 152,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "3986275d-018e-4db0-bdad-adf8573d9383"
        },
        "item": {
          "id": "d43dde6b-cfff-48a6-912c-dcb367c0bded",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "071c90b6-93a5-45d5-a1c9-cf12aa001ed5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      }
    ]
  }
}