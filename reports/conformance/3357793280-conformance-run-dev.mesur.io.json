{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "177fecd5-4155-437a-b88a-31166ea022c3",
        "name": "Clear Cache",
        "item": [
          {
            "id": "8e62e2ac-727b-439d-b568-04a079181b6a",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1dcecc62-37d2-4177-b45e-44d2a312f609",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "405a94cc-7175-4f38-a8dc-ded3e80e0e47"
                }
              }
            ]
          },
          {
            "id": "5c3ff87a-497e-4021-8aea-8bc4f8ff6267",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f3c56e11-926e-4cf7-a160-1fa90a3616ab",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8038d86e-53ba-4889-9eee-b68f8d0ab26f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "9c457443-7520-49f4-ba28-5ab3794df782",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "a8e4d52b-b7e8-47a8-a0fb-b7861a1f6653",
            "name": "Positive Testing",
            "item": [
              {
                "id": "33b82bc3-83ec-4df3-b54a-66505cffb5aa",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7911939d-5eb0-4279-823f-b89445b54329",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "952f072e-b019-44f4-acbb-e88e40b45fdd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a4812595-b4fd-4e06-b3c1-b60fe5bb41c1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "df34e9ec-4f4f-4c57-aaf1-704e9a10d695"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d723aa4f-aa79-4216-8608-af5b10c58e91",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fb62d5e2-baf9-4ae7-bee2-306ee5c7e855"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1e0a445c-513b-4854-b2ee-daf8a2930c31",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "07498acb-9778-46d2-9cb1-460aad8c777f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0e508483-e164-4dec-bc18-8239c99a2205",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1df8b10d-abaf-474e-bf40-8aa4e10a0cb4"
            }
          }
        ]
      },
      {
        "id": "d3f196bd-b0d9-45f7-80dc-ffd65cb783e6",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "0d04ff6f-cbc2-423c-af55-6cdff5d546fe",
            "name": "Negative Testing",
            "item": [
              {
                "id": "eb60a6c1-0e98-49e1-9e08-dabd6ef4c94f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f658c5fd-d7ff-4122-98b8-03a6c5e10d29",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "840bc304-87ce-4930-a467-e1dfdb701224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d2fa8f24-9df3-4f52-8c59-4042755859fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f3c683a-61be-44b9-bbca-60adb09b22a1",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f90f5c57-f065-4a00-84f5-5bdf2669eb70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6b696487-ed18-499c-83c3-c8ba5a889205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "713c4f06-3679-44fa-9cbb-abf20d9563d1",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f2552b5-98d8-4d9a-9006-f0acf6fc62b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2ab9515a-349e-456e-89fa-c2dbea4db77d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e6160799-cf01-4811-9760-b16c73e4617a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "22aa5bfd-f72c-44c5-aa0a-a8198fa76e7d",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7f1f2f8-3b5f-4d83-af66-be371a2dafc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "de40a5dc-1213-4b67-9e0a-27f4c192ff36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2c781ab-c44e-4650-aa29-37561059ae81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8be4ecb6-74aa-4771-8e59-cc59c6f8d316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f8ac4bb-95a4-452a-b40a-d6455d662aa2",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be45a54c-e436-4673-b4d4-0f31f38805fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "709a8c1d-73dc-4cb1-9b31-176c39e1ae2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70ccadfa-2726-4353-bafd-0bb654c17b86",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "0b6bd7ea-a8a9-4cd4-82da-f37ada952811"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f8ff6c3d-a247-47af-be0b-76707e30427e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6cec05a0-9b1b-48aa-b63a-2c4cf099a1de",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e26a250-fadb-4f75-9f1f-edbf1c37a199",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "5b191d86-2a2a-4b51-a3ea-375832a1854b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "02e7cbbc-945b-4a10-b830-643e616b1611",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "72789bce-2a53-4e34-80bc-b7ba24d05e57"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "28139d53-ad27-4679-9cda-9cd443470696",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "83a5bd32-667b-44c2-95fd-cd245b7c38c1"
            }
          }
        ]
      },
      {
        "id": "7cf80113-7a0b-4e69-968b-8f592c3619dc",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "56b3975b-a6d5-4a5d-81eb-7dbd46403d51",
            "name": "Negative Testing",
            "item": [
              {
                "id": "21bb8fbf-0e3e-4216-ab06-c4d4f9137a4c",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "3a4cc831-50b7-4b11-a8f2-692692edbbca",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09d0fcc3-f3dd-4017-afd5-fbed98d8277c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2f8837b-fc0b-44e2-96b1-a94b361d2e7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ebf9b82-c7ca-4e2e-8e3a-9bb71b194cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4a4f8804-46e8-4366-ba4d-8fc63c8666c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d246ac6a-cabc-4b7f-93c6-8404e436be9c",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5ff4702-74d2-48a8-bb6b-10e5824035b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0aa0d83-6be8-4ea4-acea-e4e360eca1dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2293c6c-9ead-44af-ab3d-c11ce7080f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "22777301-d2b2-409d-91b0-8469985cb47a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dab34d59-e5d5-4d0c-8232-cdb46fd8bfa8",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3acf6bf-80cf-4b91-89b7-e428916bc320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5030609-e873-4371-8616-3f18de510077"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6109bb6a-c862-439a-b550-ec87c28c8b9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b054718-965e-401b-bfcb-6451f40afb3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d842451f-4378-430c-8c82-515a99711942",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc4af57f-e326-4d23-80b5-406d747f99b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18f1deb8-d298-48b7-a1e1-5745e2b6da57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5430ef96-26e9-42d4-b11b-23b15386bda6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47550dce-aa9c-4a91-a4af-3b57d457154b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11ec3298-5dac-4027-addc-0761a910e8f2",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2197327f-d853-4466-bb4b-fe89a8f43b12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ed74f7f-97a6-4655-a8ce-0434611eb84b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd647fce-9712-4342-9fe3-e1348b084c1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f54a9f12-1d2b-4e72-a925-02b4125f750d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d03946b9-4af0-4e91-b305-9eea21377a8c",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56d88a47-b245-41af-9e6f-7d1de4565fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b57e9d8a-9d7b-4d9b-8b13-f232ba5b1eff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7e7df58-2e3c-47c4-bce0-6780faf6aca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "16f0f187-008b-4834-b922-11bb22b40f8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a13d3808-aa13-436e-8813-097c6c29e1be",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39f8e7ea-890f-4eae-a9b2-71be361f1d05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52ba0cb3-b5f6-4fd2-aa12-b3453c6b23d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5f67efb-ea17-4f51-882b-9974fb3fd471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5c111b07-d4b4-473a-8eda-b72fd65718d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "628c380b-c054-4784-bf2a-81d5fdf69b9a",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b3de3fd-7327-4ead-b3c5-10607198c655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9be4e287-659b-40ed-abec-eb9bb12c2ca8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f24185fa-d745-49cc-8a81-5eff1a9fba85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ac4bf857-be91-4b24-a605-7c41ca86fb3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e484a822-3f01-48cd-b918-8a7218d9e807",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1b0fd28-86d8-4a10-a960-08761a73cdca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ee5bfaa-3f82-44be-b819-22b54aa0743a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fad06c0d-11d8-4f64-a54e-b22dfd69250d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "15f005ab-af14-4d25-b818-a0757f37b1d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67ce3da2-c90e-44fa-acff-c4d0dfb1b7e4",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68ef1b4a-0e9b-45f2-b755-5a7eed0a1f78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "569e4315-0d64-4789-9085-105289bffa9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dc47da6-e5aa-42ba-919e-73b3eb9c9ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0a9ea955-3c02-40a5-ba0f-e1cb8a0228cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d06da700-2d99-44f5-8da1-e6e3190b0545",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21689e46-109f-4415-a6ad-ae4e90649773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9a04203-3b01-4bf3-8205-27949f6e55fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1341335-75bf-4831-99b3-30e009fbd575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e3434c53-95f0-4d16-9256-6ec0791033dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a19e52c-3113-42a6-b657-fcbb19a8fc58",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00d4dea7-ccc1-4d83-a961-e3b8e196f2df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e5ada2c-5692-4f56-992c-a0547daccb17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c91977d5-b485-4d9f-b716-a3140088c679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1c9fffc6-f20f-4677-bc9a-d16ac349e833"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95489aec-14d6-4484-895c-5c49964e0712",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3258380-5f87-4692-bf64-cc3863356f63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fa49767-9ef7-48af-b077-738452d51413"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0040b874-437c-48ac-9d4d-9bdc29385890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2dd54aaa-b011-44b1-b218-58274f6b87dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce573e74-ffc9-4f76-bccf-2af9d05fa9ea",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17806d43-1541-45c6-89fb-db79212756ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15878619-41b9-4d0c-a71e-950a1aa471d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57fdf99f-37cd-4461-ae0f-f766a81ec2a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe025ea5-1e80-41ab-ae30-2a5f97910b98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "399356d1-f9d9-4405-9c0f-f7c56a401e56",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f883d62-9c7f-44da-8a6e-e0d9bdc4145f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d8284b6-a3fb-4c20-ae85-6570f1bd8bb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "085b1d30-0e2f-4f03-bccc-1c81bf5b76f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e20453c-36d8-42a3-8b5f-2c5dfe9c5f0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84c41fe5-1faf-4c19-8cd2-29c4b9e3a1d1",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dff9ccfd-23ba-490a-8148-65d23ce543ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62b735fb-2897-48e7-8633-2fbb2dc6d6c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18991d90-6ff0-448d-924c-cf00e19f9727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d1b268cb-4969-4aa2-ae45-5156dbfc8a5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a45a4d9-285c-470e-988d-ab0668d3e99f",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "287ee06d-2689-4d26-b026-051d8c3aacff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ac474e4-6cbd-4313-9a95-defcd558d25f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d2ab318-2baf-4711-bb89-81717c7dede6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd3e37b0-8f5c-4a84-a6b9-ae07ae51bb43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f84ce083-fed4-4db4-8592-4a39447cceb2",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd3cf12d-e52b-4c36-bf5b-39783b501dfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "229862e4-2f74-434b-b548-5cff6f380931"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89864903-5c8c-424f-99a5-d26128feabe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9d1e162-fe53-42fc-9655-530f47cff1b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "631519b2-be1c-4e07-aefd-f199db753acd",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36ea666e-2fa4-479c-9d92-fe147474915f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc6ea0ee-617d-42a0-adc8-73936e88154b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c49e2ec4-72cb-44da-8fc6-05451bf6da71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f8d7a79-98f3-47f6-a8f4-597536e4450c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fb33952-2ae1-4d00-92c7-7bff9f295126",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "546997d7-ecfa-46ab-87b7-f10a4843a8ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b38eec5-3abf-4076-b2bd-923a1507bcf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99229941-07c3-4c45-a28a-44bf157ffd0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5155eb13-3a0c-4463-b807-a3bfe459935b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3064ca93-2f7b-4eb2-807c-8ef74d0beee8",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0ef9b01-e8de-4b0a-b362-a7009a00de65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe16e7df-9a62-4eef-854d-bc172b2c7761"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b104f9e6-a74e-4e37-be56-10f7c2f61188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "08ae5b1d-86d8-4cdd-8cff-d50a4560f788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83099620-808d-4645-8239-8f0d25d40362",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b89c20f-fcd2-4018-ac4f-573abca204f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab93d3b5-ba69-44c2-8258-cf98d4860ed0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39c5ad22-81a7-43f1-a99a-14873736ef84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cfd5e05b-cdd2-4bb4-a486-7096396d8b31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c224b24-1883-439d-ac0b-8b596eb83628",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d843d256-0bff-4d87-9c5b-2f8b504b2bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ad1ed4f-caac-4991-b7ec-35f5c39de655"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36091501-db54-4e1f-a7fc-758b920ba115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "672efb21-e76d-464f-a128-f990ab6e8445"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72d83645-de11-4199-bcc2-e221f0bcace4",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "079b36db-07cc-468d-a76f-482840197d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8747e7b-fa2d-436f-9e48-5237b89b8287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3b14970-ca11-4ec5-8ae6-ea950743ed59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "67a5e93c-cd24-4357-a932-5c5744094c93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e49183ba-4dd8-49c3-97b8-77ed5d7183e2",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4185d4ea-5b20-48f0-9040-5ed0cf3c1e51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee4c939e-d645-40b8-861c-0e2d2070cafc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "028e5455-8cf5-45d4-90b1-76e7b8d9eff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "de6e359c-32f5-46e1-9cb8-ffc4835f9335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "680cbef8-bce2-4f38-89a8-a30f956c9e05",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb4295ea-5a7b-4c79-b299-23d2161fd56b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "459e0a7d-89ea-4d62-83b3-da891646c25e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b14dcad0-5e67-4125-8ddf-46cf97e43f8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7cbeaf7-6bbe-498b-a839-72a290ac1762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7167b89-7ad5-4a4f-bf97-3e4515c6635b",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1084cc34-0bce-497e-ac09-ba180b65d1db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "297375b7-8c23-46aa-a71f-ee5345b53189"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8add5d3e-74bf-4c8a-abec-8c7142573f3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ae63076-b0f7-426a-9dee-4f5f3791da0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd77a69f-46e3-4acc-8e1b-ab935ec4635a",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28c0ecdb-4f82-4a2b-96a2-0391fbe27ada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3539b670-e448-4504-aec5-b3a8b9a5addb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "951cca01-1750-474e-821e-320ad3e308eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f3aa412-2cc6-4a58-952f-c2e5cf34cc4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d277c9c9-db4c-403f-9121-dab2da95f13b",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a7e9d5a-2872-443d-9c74-417d5e2e17dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4ecfad6-7996-4497-8e5f-dd6b219b2eff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c9d7490-e644-4e25-a222-304fc50991d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae36f5bb-88b7-4099-b7b2-59d717d09ae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d3793a9-3ab3-4f5e-acb9-ede4ab28607f",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3507fcd-cc30-473c-abd3-63ff414ef860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4be4bda1-2b06-40a2-9adc-880a412cb656"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "321200a8-c4eb-4b89-b9a1-c088499b3976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "53903599-d9ce-4fc4-bb3d-c5fe78298e0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc5fe2b8-9302-4569-8744-dee2710b072c",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "381a51aa-baf0-4e2b-ac4a-088d4fbcc18f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "584628ed-c1a4-467f-99ba-7c1c530b68b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4198864-04aa-49bb-be4f-ffb86421d164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "60a0094b-c642-4d0e-bf0e-12271cde031b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c93f56d-261f-4593-bcd3-6a4c4de4c983",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f99fc1ff-662d-48ee-a20d-a68739b039d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6784df87-8718-45d1-b89b-792371e108da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8a8348c-c444-4ac0-a26a-cad1499e2070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "afbc9dfe-ca3f-4c7d-8e8e-02e624b92566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a53c58c-660b-4eb7-add2-21595d4373d1",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81f9918c-95a0-4d38-bffb-d293a6ac0ca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62c2356a-48e2-4ce4-8aa2-92e11ed3f9b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a98beda1-501e-4211-80c9-29dca5d12dfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "37736490-d5b8-446b-8204-df0e95b368a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91e8e558-80d8-4131-8576-3be2801ea526",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64de9489-9469-49c1-8f10-e889da0e4d08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "207671b5-6a9f-4d83-98c7-6aeb28aa3588"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29f8891b-0fd1-42d4-923d-d1147b5492a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "24380f47-0c40-493c-a475-8273cbe2476e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b557b4c8-5bfa-40a0-a1a6-8ee657ac9908",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a0563ec-4df9-43b7-96fd-32b513df32dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba52de1e-02b5-47bf-b883-17750e23ecb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d34c8ca7-9069-450d-b444-9363b68f5771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "dfd871c5-bddb-4232-b3f3-59262387241a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdc0ded7-abc2-4936-bca5-59c08845b689",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05bb7a74-424b-468e-99ef-749bfde7b1b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f94c7f38-6f79-491b-9a1b-fc2c743bb01e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b5d2102-5de5-4f07-b92f-d01ddb5fdf78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7e12b432-315c-4016-a10c-a5f2b3315225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81ee8fd4-36c1-44ec-b3ae-e4a4c4baece8",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0de84d95-f2f8-4654-9f1c-3ce6b7643329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26295693-5c8d-4772-975e-c1d683eff2c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8826beea-5fe1-482c-881b-50d67c2bb9ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c3108343-6d12-4f37-a751-5f3fded03337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28fa643f-f44c-4735-bc3a-d388b967e541",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2462a1c-4951-45ca-a8bc-b79d36838355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93131f67-8f33-43cb-9878-d78922177f20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce3337f8-89b9-45c6-a2a7-6fc470b427ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "49e76f2e-b770-4e45-808a-5bff5a8a9812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e42e4e75-8f45-4109-b74a-7dbcf05b651d",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aab76be6-e3cc-4746-94c3-fe7930124964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b255ae0d-225e-4a00-b6eb-361feb151d36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa41f0e6-ccc5-44c5-8fee-31a2f2b1f1f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "34a53b01-3c47-4ab1-a57d-4840f8532149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a86a7ca-6301-42f7-afa8-9f2bb4f58b34",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98ee59ed-8ff9-4dcb-af16-d29a04930f27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b64fc69-15e2-4961-b936-78405eff6c9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13fe9950-539f-4e05-b6be-6cec16c39504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2083c630-727f-4516-8fc7-4e2d210d6672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea0abbb6-7ef3-44cd-9f6a-3028af6f0205",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fb9eb44-3282-4f00-ac43-f93f7170f00a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "050025ae-4498-4402-a373-a99afad8b678"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcb1cbf4-7992-40d0-9bb9-6cac66472449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e7203cc-eb4d-4240-8fc5-0694b0aa62f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c6b2a75-7d37-4fa4-8fe0-0ce28d46d37f",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7e5262e-e8a8-44a6-840a-0bd9610d4c60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bb58cee-31f1-4ee4-b078-a57b3d8597e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eced13a2-14b1-4617-b68e-a81f188971eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "e47ee0e5-3dff-4396-8f26-57a30adb0f74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ef07d82-b6e3-4fd3-9731-8f50e4dbc846",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5fb724c-c308-4911-99ca-352fe4565872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e019630c-5ec8-41f3-af9c-19ce95384773"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85f65817-9069-4ee7-b5ad-0ea991b69d60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "18310651-f9b3-441f-9221-50791a515b34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61a248d4-e2e3-4ba9-8358-28dbe06d2e18",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2517b35-0d02-4611-b348-315da2e7aef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b4d5a1d-c631-481c-a524-3489a66dbd3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "483b607e-2684-46ee-a437-ac0b07c541ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "158f0bfe-64f8-431d-ae22-717dc456fe77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "741ef0dc-315c-417b-b6bc-a91b849f259d",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "148268b1-94c4-422f-acf6-d9b22d397bbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49cdcb39-e68d-4f52-9dfd-a43501a1875b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a048a1c-87c4-4111-9502-029d2672050a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5439c03c-aaa9-471a-a8d5-93e8b4492edc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d99ac5b-1787-4c0c-9bd1-8558d35d2093",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a9b3d8e-7e2a-4ed1-ad24-c98d3c07e16c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61903b9c-736a-43ff-ac11-a5c09d824d31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7ea3b8b-d985-4c24-9dc2-b456d88b0ab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "32f4a2c2-1763-4fd3-8cd7-428f04b2821a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e762b46e-3fa0-407a-ba96-2b51af4a9bf5",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29ad6c9e-187b-4d22-945e-f62647d158d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cefdd5e-444c-4737-9b7a-a6a0a0199492"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48096723-7d90-4325-a2b1-f4a18d69ca9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d709578-5a63-4ebf-a062-8a122952f4c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b648a3ca-241c-48df-904a-3a49798a3ef1",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f69bcae5-091e-4d29-96a5-618ea33d1166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15c07b30-ce91-4bcb-9462-5cfce8c6bbc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebb644c2-76dc-4229-80d6-0357f192135c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8e98668-0d6c-4adb-ba9e-54688385c59d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "349b7cb6-fa15-46fa-9fa8-95af7c17ac2b",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f7158d7-cdb1-4d28-b037-270e10fc6391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a67c2d3-7711-418d-b6a8-fc0b1e74ecaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "937468a1-ccc3-4599-8df4-cc30e2864349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e85a1a7-91c2-4dcd-9f9d-a3d9a3faeb59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37de2f0e-7211-4406-8f15-1ae0988472d6",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d389a38f-98ac-4b7e-97fb-76d6cbcd56a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bb08c2c-f8fe-4530-b9ca-a8cbb0d41ac7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63f36f06-0711-43a3-a54a-d33aff0f860b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "727558c1-1ab1-4a1d-a5e2-b3cb7f0b4369"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c9aa764-8ec1-4a8c-9ffc-e228a978984c",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95a4156e-4681-468b-9686-5cfea58a5a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7edea5f-99a0-484f-a2b7-76c29d3157d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "649024f8-479e-4ee3-b11a-a1267da290e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd32912d-e2f3-4565-8806-d7ac76b0fd9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18ed0df8-0e88-4d6b-b8af-e268789ce162",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce24274b-8599-4081-a0ad-7685a575ac79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f56c6940-8073-4034-b7a8-6143b6a4b90a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2926ac1e-3886-432f-8b1e-c640d3798532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a467fc6-fd15-49f8-8940-fb12af25fb0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "672955d8-77e9-4b82-afb4-43fc7f063b56",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbe0a54f-6386-4a78-9f49-1380c608cdb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1848961-258b-4fbc-9622-f28ae4e32f3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36745ee8-28a4-4a8e-835e-7ed86734ff12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "161338e9-0cbf-433d-a8a5-50775180ab46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e92060a8-fab1-4839-a314-4dca808ac306",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcc79924-ca1b-4098-93fa-c0f318fdd8c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e59ee43-6a9c-4607-89b9-0c4d2d00be38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4e01546-03c1-494f-990d-bc749d70b782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "651f91f3-ba6e-4a16-8a24-b5347e8ab70b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e8fc573-7a77-4d58-860c-9f7071e739aa",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdaa4abb-e064-46e3-9ccf-08a533de8652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3948ffb8-9787-4d29-94f5-38125e8f21ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cd52c47-ff48-4ed4-a4a8-f8c7b83bb036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf07da1f-9fff-447c-87cf-8633f433aa95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73f8903b-3f17-45a3-bca8-cfce95b4c645",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecd93411-50d3-495d-8295-a84a83f97565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d19b020a-9a7b-4608-aafe-e9e782e43121"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cefc61ea-04a2-43a5-b1b7-3c707e70589d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "777263f3-3932-4fd0-a51e-779b7e4680e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bad156c9-a907-438a-8f7a-ee62f3cdaf35",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c01ece93-e694-4788-be1b-3c5921c00690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bfb465e-ac46-46d3-8b9f-ebd86d9e54da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9825aa23-25e2-4aaf-9c90-c49f09dd7bb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f7a372c1-4fbf-45a5-8169-b994b0c132ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b61d1087-f5ac-4178-990e-85247eff8c7e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cdffe38-0011-48d6-bc42-b5ae56c1bb26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7f60803-5deb-4075-82f5-4b0f4da55a3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a47760de-87b2-4c92-8759-c0fa4c455897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "60ebd61b-feab-4767-8a65-787c404ce723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "713cb7a6-e5d6-4990-99ea-388ec4ae4658",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f601fe7e-6a26-4e49-b1c4-9cf09bbc35df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2482d7cb-5a5c-4ac6-bc6b-846656ed9632"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0161c69c-96ff-4b39-9099-104e2af75e6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2e3a7c94-91f5-4f75-8d98-6da5186e470b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b0106bb-8ef1-4a1f-acd4-af286c9e45e9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c39509c-619e-4fd1-92a8-393c3e50f6e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3b6da1c-05b4-496d-9a1e-7bfe8c5e0607"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abd17dfb-d758-4fee-9bfa-d73297cc5d13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "09cbb241-1938-4370-87d8-bf2cc74a2c62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faf6ef7d-f1bb-470e-b1c5-65346ff29d39",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42b7313e-235a-44ed-ad9d-0ef1f3207454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99f1ca80-3d37-4c36-9c8a-ebe84ce2f6e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "930ba41a-b232-4423-bcf2-ab1340728aad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "92765775-334c-4b4f-a98e-c93bfedef388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68741f4a-6955-42ab-8316-3c62252a453a",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2d54096-2e64-4557-a025-e32161a2d64a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3979f00-91ef-4560-beca-f7b7463a3be9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b5a40da-dafe-4e76-8598-6865ea04bfda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "00db0d86-d770-4d11-9c1b-1f8fe5f5233e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5050caad-a931-4df1-880f-8bbfd2cde0b3",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1a613fc-41da-4562-8bfd-9d1e45bdfdba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10c91c47-ad59-4954-a342-ae43623260d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a11c6fd2-33e5-4dc8-948e-cced18ac5ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2dfe3017-41a3-4c58-bc8f-f44bea898384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91403b25-ac94-4d12-b32c-7d51c91b96b1",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33e2cc49-266c-4a74-81eb-612b300cc683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31ad2e99-edc7-4f25-844a-91c101d5b176"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6367921-69fd-48f5-880e-41a324e6b15c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3befdbfd-cebc-474b-9d8b-e8a229d68a4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3988bcda-1737-4863-8b0f-ee4c6c10243f",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53cfc0a2-3207-4a98-af8d-dcf8d02a04e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77cd7ab5-8dad-4482-9204-7b8d1d727650"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ae7fa53-0bad-4439-803e-d1bf97e7e579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "516d32d0-ff6c-4f00-9141-881e21743e88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "692ad7d5-a7ac-4b87-acce-ced3a45f4ce8",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9f41a58-0c00-4e9f-9f15-cedaedbcb279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "392a58f3-57e5-4338-be41-2b1402225335"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6d2a700-ee01-42bc-aa19-4e4e94aa187e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "03769ac1-c0bd-48fa-a061-3c213382f08e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2f7dd7a-6192-406d-8731-9a25cf5a8330",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c0ea4fe-fc7f-4a0a-85d9-8a8974a4606b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1163b284-2c2d-4876-bfa8-faef74502a6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d794ee7-b698-455f-bf60-77df535a7a8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "337e3d49-df6e-4de4-a2fe-3c166b9bdec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01abc83e-ee2d-477f-9123-dbb534ad8405",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fd7b636-ab0c-4593-8993-b4b3bb9c330a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f612f47-48c2-4a83-98af-51b653bf9f92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf3120e5-6870-430d-9688-7d48aa363117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c25b9498-fe6f-4be6-a8b8-010d19afc7aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61ac7533-4ec2-4271-87d6-e62892c34248",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dce4600-5afb-409c-b5d2-44bbb2560a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aae9d3a1-f482-4fb8-9694-dd107a04cfd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "792628c4-83e0-48e0-8525-863cab253d57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e124c12f-cd4d-4814-9efc-e2ce675ca9e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48d5e3eb-e4cc-4127-b105-ed975a173464",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "932d605d-8bfc-4f5a-937c-64067772cd28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78c87894-2865-4a16-bf82-7cbc07e2d950"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34264845-e3b0-4002-9d68-2d6b68b29029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "726d251f-f89d-4fe7-8291-3213eb48801a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6456dd53-d2be-4056-baf8-90dc7e26e3da",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cf52647-3084-4e2e-8e1d-27dd265b18cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4f727fa-d13a-4cde-b8b0-7680579ae7d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1489567d-af45-4e3b-9383-beaa7c0aaecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "59b09be5-340c-41f6-9373-0cfb2ffce1db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a60e0413-52c9-475e-9a18-5439f84a4c84",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeb46dbb-b6f8-4eba-a642-ea6c3a72e6c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43b76a1f-e257-4f69-ab55-79929ae7619f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94cb13ea-10c6-41b8-8fa4-3a60d141c88c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "044677eb-d365-4cf3-9506-4dfa4a808f1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7ebe582-4540-4717-865f-a2830be10db6",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e24e9f3-c5d3-4239-bb64-b380d442c49e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96ab77a2-5150-48b2-9027-403e7925cb5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87f2da08-cb89-44d7-8112-82a42f87c272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3ab2cd55-00cd-49f4-bb26-8065a578c6af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61c79115-347f-40ad-b8dd-a3674c02ebb5",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57510b95-d1a2-46f6-b131-cf39171b7824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a333c4a-0f7e-4683-9cf4-687a505f1e0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "165eb657-117f-4483-88bc-1b1d98d4bfa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d95c376c-5de6-4ce2-a0bb-f9362c7a8d00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c661666c-1620-4216-97d3-0f9e281a8688",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0885d3b-782c-4803-96b2-2949c6f46b57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2390d2a0-f958-413d-b606-ed0f574bdc6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6b02d98-e285-48d9-8743-3a615434be2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "35e10bbe-2c16-4652-af01-e21cdc6f6e45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d3f3b5d-7ef3-40cc-a214-82165b0cd390",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "363adddd-b2b1-4c7a-a6b5-10216502ff43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69c9668c-02bf-4f26-a2b3-3fae640d2f4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f4ba79c-9b73-4fb0-9008-55da6e4b55c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e17927c-1127-45fb-9b30-f90e04548ee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f286155-2254-4424-8fef-e49f7c2bcc44",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b0ee0ba-9ffa-4823-8ed9-d1958147522f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55518e84-793c-4366-99c3-de9b35471bc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6c811de-9b7f-42ea-8d06-f41b51ab7fbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "901eb8b1-8d35-4496-b709-c484fcde10d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08a9abc3-607c-452d-ac59-3a380961af90",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c727ee2-0f03-45a8-8ab6-a68cd132dac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcc2f3eb-54fb-48f4-9552-9464ea33c12a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c22fae32-a6d0-4a0b-858b-34dd7cbaabd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d03e13ae-7551-481c-b3f5-be3eca44d015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fefcab4-aa31-4aa3-a22b-26c2a917d4c2",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36ae7cf1-3758-4afc-b79f-a96c7e88e593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94584e80-6425-475b-aadd-c5ab1acac733"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81f0caba-2aa5-48b5-b1cb-34061e05cdc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1d1041aa-9e2d-4882-97e2-0593e166fee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "488be3e0-9d16-4f4d-b47a-328b326cfb1b",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "906d48f0-94c6-4460-aaf5-e07b8053545a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eb0713d-8cca-4c7d-a5c2-d1507ee5de6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f64a320-b8fb-4418-8663-70f14fc89064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d14d9329-bcd8-4a04-aac1-b37985ea2372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b91a43d4-87ad-4410-9a2d-0de7f8be5e86",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d84e953f-be65-44a0-965b-83dafa133809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c78e3e31-6226-4c87-9816-e7ef16fb8b70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f361126-d8c9-4421-b4c7-225fd91ddbc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5474381-53a2-483d-ba69-2789ac0a31fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "949f34e2-70e2-424c-a591-11baf8379c9d",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc35b261-3992-4cbe-95a4-5d013f49b47a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a9f420f-4f4e-4e68-87e5-fd91b8ae2ec9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa76c50e-2aab-497d-adf2-0486958f5715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a9b89ad-192e-42fd-8c3b-5b14d37e2123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bc160a1-2964-452c-ac31-1b273410903b",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c30933cd-fea7-48d3-962f-146810fe3c4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "290d28e7-35b5-466f-896a-82a8b744045e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "479e8e8c-4912-4db4-8ed2-6d9cbf90c53c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f10f92f-530d-4fdf-8eff-3c75db33ac05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "873fb00e-6cdd-4466-87d2-e56bcbfce35a",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "201c5236-c7a5-4f72-a219-04ae6a3b446f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dda3fa49-a401-4456-a6c4-8da502c98229"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50b21cc2-163f-4a13-8c1a-9e9f8ea8c3da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8cb13cf4-b127-49e0-9e73-947a5e2a3e25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb33f488-8b68-475b-962f-08886a0fe496",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "076a3fdf-42d4-40f8-b4f0-066ce39d423f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0707acfd-e261-4c56-a27a-8c3392d8444f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39179d41-ecc0-4eba-b7fc-4c6afc51fdcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d6b9f35b-6028-4912-b611-33b8d9c8d8db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7be1c872-8c37-45a1-a2a8-f9d817294a50",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8c1b872-7767-42df-87b5-2ffd59dbffb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e190990-7365-49e7-8399-d6d20c85619c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1501c1a-fbb6-4ac0-8731-86d7903bb628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4bba2940-91b2-4522-8454-8676e5ebdf47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4265ae73-1431-4303-92ff-103b6bba3ba7",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c760d590-2892-4fb4-a0f7-8ca016bf8941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ffb78fc-e83e-4e38-b531-810b311d23d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d96ad384-2cbf-4848-b570-c4320c1135c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "673d6b6b-79a1-4013-9c85-f264cdbfb502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f68dd24-df9d-46db-b466-09d2bf111847",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18ea505b-2dff-422f-a92d-93f24743695c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52feb485-6cb9-4fe9-af41-ec8c88547c84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d94015b-e6ac-427b-966f-e6d61770e3c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "dec26d47-7a90-4f14-bf75-ba1daba456cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0d44a00-23fe-444d-9625-d13db363fd7c",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9b88dbf-ccbc-465e-9c9d-447e16210fbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25fe3613-340d-4eaa-9b77-d301d58696cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a4443f0-8ecf-46d8-94cd-1f791522ee24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed69510b-22cf-44e6-a24e-21e419177657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee4db053-d865-4723-bb8e-41678502daee",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f93d6c3f-df44-44d7-aa28-57d3c644801a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffd4ff18-ca75-4a8e-8b62-f77659531c9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b60d6538-ab11-456d-a60f-d4f19916dbb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "71e8d81b-c3b8-4ccb-9888-0fe889a0edb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1077a0a6-109c-4f20-be2d-c25cb0bb6fad",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43516f4a-3327-48a5-96d8-00cfb3fea38f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a97a6bd9-f167-4420-a52a-42166020f1e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d34278dc-830f-4111-813c-1008eb2ae4eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6d59a0e-c77f-48f0-ac88-1f0b6a49862f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61bd641d-ac57-4fce-9287-38d4b28fe93c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80118d4c-65e6-4b0b-84d6-956fafbea7d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "dc79eb1d-7cf7-47a4-b6fc-8a56c6b3f115"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e43f4f02-f9ab-409a-9c29-4999a4afbcdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "86ada706-6b58-45ee-b4ef-fc1f7551adc0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "984bb068-da80-4320-b904-c262716b4277",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7bdd5bd1-7381-46b2-8eda-48e0573ffd35",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dfbb805-3829-49bb-be29-9ce2caa3294f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "06e85721-b361-4ce9-9b55-14639264759e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c527dc2-8c6e-4cc9-b3fd-e1a3f6d71994",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "528418ad-40ac-43cb-871a-69cca71559d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6629838-90c8-4b2f-b015-039ad5c1d5c2",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bc3d572-13f6-4cc3-bf95-989a407c4359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ce095453-e184-4ad2-b1c8-94e1cd7e420e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a67fc96e-8562-4f1e-954c-41dbfb874753",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "062fcfbc-9299-4d1a-949b-e189591c9148"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b0f1a243-a19d-4bb6-888e-d6d39a319a09",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7c4d8cac-1aeb-4a6c-975a-51699d33c2a3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "24e6c97a-bac2-4422-9aa6-f2b95991d5a6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e760db81-2347-4f82-8239-b514efdabde7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "12652f53-6f24-4cb4-8433-f91f6c49e9b1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d76aea8d-fb8f-48ab-8d77-e89987036432"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "afbf1232-1f0a-4965-9d26-70e839eee88c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "17c13c56-278c-4971-8f6d-5ee8bed1eba9"
                }
              }
            ]
          },
          {
            "id": "ea948093-45b0-4c62-b7e3-db4d31cf0aa3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "14e94ca5-94c7-4f5d-9773-62e7a65f5ebb",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c9cd5202-35cf-49dc-b016-2bd911262e38",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "424bea8c-8017-4741-bb65-736e7d7cd0f0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1caf8051-2805-421c-9862-a4a3046aaf3a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1f3a2995-bbe9-4e07-88cd-b5aa77a8deed"
                    }
                  }
                ]
              },
              {
                "id": "2e674f55-cc31-43af-8ace-c98528f7793f",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e837e2e4-66da-4562-897e-dabc79a623db",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9b7986c6-b903-4755-aad9-182bc7199aeb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8e0b79a3-aa88-4184-9fe3-b0795a4d5916",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c6f5dc4b-cca3-474c-b657-c40f9e053baa"
                    }
                  }
                ]
              },
              {
                "id": "26085cf1-ddbf-47d3-b5cf-2d2746b22a8b",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2e567158-9d11-40e3-9a19-b17a79b5fa91",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ad01ad83-5b86-471a-82d5-cd3e7403bbfd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ec53286c-c25f-4b57-abca-25faeb43bea1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e0ee1295-192b-4a53-a934-3874e281f63b"
                    }
                  }
                ]
              },
              {
                "id": "c97714a9-e0eb-4e31-9c52-9346be6170e2",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "534fc63b-17c8-4082-b496-5d2ebb207da5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f8db3df4-8262-4ca3-abb7-cfd58089b519"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f7495570-d998-4df1-bd6c-58853906a250",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "67224009-141b-4b15-aa2d-71b75ad8f4f6"
                    }
                  }
                ]
              },
              {
                "id": "7143aa26-e7e9-466d-bc37-d3161c486f65",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b8e88c0-030c-499d-bbbb-3f8897762356",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e6baa86f-6473-41eb-9527-a9e120828af0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "964f2c80-e9c6-49b2-b475-1e9291159358",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "a71892f3-582c-4fc8-abe4-40f4e5f3966c"
                    }
                  }
                ]
              },
              {
                "id": "7e45c07c-d33e-41ae-b747-048f1fd6076b",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "18c3e5f3-d8a3-4fdf-a1e2-ebd5d0b018eb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f3c2b7e9-e6ef-485f-99c1-27dba02d63b1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b4c87a5-9936-4df9-9e4c-3ab7b4700584",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6e6910f5-2084-4f54-97d5-ccee39e60b1c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "80991be6-c618-41c4-a8ce-9efd1c990906",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b8261fab-fecd-4bd7-a182-856f4ef72bcc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b6b09484-e41c-4b53-9e29-a48f1c9cc043",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ca34019e-72e0-4a9f-9928-8b6ae7687712"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2b607e01-db50-4637-a96c-685bacd9e5a1",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "16625354-7f18-4695-9563-e0145303bb55"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cb3ef01e-ee67-44f7-b6df-cd3333db9f13",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4a293fb2-6ec5-431e-95f7-504d44e608e2"
            }
          }
        ]
      },
      {
        "id": "b41d5fc5-8314-4e7a-b8a1-cf41c72f26a4",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "e17fb098-87c4-4390-9261-3df99fea955a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3fe98365-e4c7-4f28-8f07-b9e6742acdab",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ebcd90ad-2f87-4d33-b76d-5c3a89d41781",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b1eb453-0772-4417-9fe8-714ebe612f31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3aac5b94-fd6e-47b1-8fa2-e7a113bc5e3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5b42bb7-2586-49ad-aa1d-e0a202fba226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a724ff01-686e-4603-8792-94a5db7617ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7efb3ab-6e1a-413e-9ca7-372452b19dc9",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "599bbf5d-80a7-42d5-bcdd-9416d7dfe86a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c079a04-ce31-40a2-8e50-c792bf8ce26e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3053672-89ad-4697-986d-4ec87d50377d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b8c4897-efdf-4ee2-b7ce-8f6a862a1550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd846372-6968-49c8-8e25-bcfb577bf3dd",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62df79a5-9271-4a65-a0b1-8bf62fa6b170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d9eb51f-0034-4b9a-83fd-512d09c5c7d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "848641f6-239f-452e-ad89-30ceaf6190cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "37f84633-4a40-4912-ae9c-2fec72569eaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ac0eb03-b240-4aeb-9b4e-993634e59cd2",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c36725c7-6af9-474c-b0ac-64876d468b6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5adc28a2-7c56-45fb-a93a-623cd5cfeaf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a315d785-bda0-42cc-801c-1f3d51103139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "098d2e63-e691-4b91-8013-26feab1f81b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e55f37b5-87ba-4524-9574-2b54026526c1",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5934d277-d08a-42a7-b0de-43f9d5a26c6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "811e287f-c942-445f-a3d0-5f7c1222eea1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f3a63d3-e284-463a-b2ad-9469af880fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ff87f4c-907f-4c42-8828-e330b3cdc055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46186a15-2dcc-42b4-81c4-c17ac4ede1fb",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea6824f1-dd8f-4bf9-ad9e-83dc293072a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73ad3998-09a2-4560-802c-1334c91e5a20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00e69bd6-5777-4656-8b6f-c52eabd63fca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1fb343dd-a073-4598-9c8c-a5349e9bcee2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71a2ec57-cf85-476c-a4c3-bdb9f7529a1e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f5b727e-fd71-449a-b45a-ccfcc3d819df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "004293c7-7294-405c-bc93-fa1168cf8b5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6e35f24-637e-4d7d-b8d3-2a0948bf6653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "91c5644b-2854-4505-9759-1d93910573e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67627aaf-d9c5-4488-aa22-6ecfa47e916e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cadb344c-b02f-47e2-9e21-5fadd7ade54d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e0aade9-44ab-4dfe-9252-51bd6dd74379"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90b8da2d-c58d-4152-bbf5-cc161fbb80c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b9589e5-f353-4a2a-9e4e-13e3840d19c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e331fde3-a679-4630-a4df-2c99459cc43e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ead7385-331a-457a-b2d1-b6426f7cad6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d38f2f3-15ae-4703-bd0d-b3b64031d191"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51d14f6c-0f89-429f-9e39-3edfe28355f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "903d19f8-2f2f-4139-9132-1178fa97d2eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d1fd1d8-9f58-4cd5-8df0-b9d97a0e65f3",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b33eb17-22b2-465c-accd-1277e91b3428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40168147-df19-4606-968b-4cc9c8f3f378"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03ca19fd-ee67-4644-905e-720f0f534b5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "79659f7d-39c0-4f90-95be-b49a431e6fcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3080fd94-2853-480a-875f-9578b16379f3",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58de299d-57b8-456e-97c4-4f4270e40ed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d4dc446-97f0-4826-8c19-77f852eea557"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db0cc526-83e6-4355-b390-35e3355a2c18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "3889f9b4-1fac-4490-857e-ef995077c565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f10fe8e-448c-4da8-a97b-f7748e4a978d",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feee5013-3dbd-40f5-a520-7c863ba054ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18fd1271-958b-46b4-8bda-6a9cd7a4a508"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4da75bc8-f7f5-47fb-b4ba-e3c21abd6a4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ecad993f-e648-4900-b76d-c9b91137e338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1615751f-6f01-440b-83f7-20d0ebe1df40",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c278fc70-fbd5-465c-aa3e-b39338a12e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77345f7f-2ae4-47ea-a962-936e9c2b71b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d63ece59-a4ca-4183-88f7-a0ff39d12ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2568bc9d-ee12-4267-9dfa-c6c25e68a8ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "934c3fb8-e0c0-4045-9baa-4cb634fed106",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dfe6243-7b9a-47f1-a423-77d280204f5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1716bbc8-765a-4604-9217-b5806020f2bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97120497-92d5-45b3-9516-18afe1f61c79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "70e397a6-8805-4598-b5e6-2485ae33ac57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69690c63-5fc3-4b00-9d58-b81a608235c6",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "638efc1b-203e-4cce-9de4-649c8d16c1ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55163fd5-eefc-49d6-971d-6b8b59d067fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa7ef82d-0b45-45c2-b37f-e77d7c4f41ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7017495-5ccc-4c0d-bd37-eb7303a9b853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a584d15e-9ceb-4a2b-a5d2-b394f76e3b89",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c20bb39-f2a4-4537-b6ce-d2a400d0a5c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b97afd51-3e97-4a09-8113-c29456d25888"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5e7787f-b8e2-4e2c-816d-47179afc42c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6131c022-5788-432b-a676-f4d0ec9a0cd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8de34d2-cf7e-4ed5-baa1-f4b3a81dd99f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eef27e25-a4de-403e-84fc-8948f1b6e158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c6ad6ce-6b39-4602-9438-d35fd530ac36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51c48263-b08d-491d-8a39-8515875e2b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "48d59af1-dc68-4143-acc5-301668bffaef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2647b62c-dd56-47a1-a147-6e66dd100093",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "023de777-4c44-45f9-890a-636ee8489a91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb944279-93c6-449b-a98d-9eaf89398230"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4a0ead7-8d85-4827-a6b3-27050c34b553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "10f0c883-11e1-4300-843e-d8a5811a3d37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43dac84b-39be-483e-815b-9329ec8bd5a7",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8b17441-99e3-4c92-be0c-73360a383ff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "784052e9-bb5d-44a6-a604-66e735378c9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2768f1a2-09a2-4802-bfca-dd3937d2f061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e51b05ed-bcac-439e-a624-ca3e8f456732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a2deafc-a65d-4e5f-991b-212c5cea2bbc",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fc509d9-4bda-46c8-90c8-220248ac962a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99b6d636-0e52-4522-b6f7-00604a29e311"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ee8da18-32b5-4737-9f2d-36f103205060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "165a3ca8-55f7-4c7e-831f-140e8842a3c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f507362f-cf4c-43ff-91fd-480cd66e2100",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efc64761-3e88-4f38-8d6d-aa31a51989af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06a0e3c1-e022-4cdc-b308-cdb6ac0ba3bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cf2cfab-360e-4521-8cb4-aaa6b59e630e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fe16214-1b92-46f4-a3e7-804f77e3e84e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f479575b-0a41-489b-b805-02bd29ce6263",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce08e820-3610-4049-a5d6-113f890af1e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29b2aa24-a7b3-4942-8200-513c35569134"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4b07cbb-d9c3-46ff-8af2-d2840ec39a02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "73c3a49d-ca71-4d61-80a0-0d6ba1408481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "114969fd-5ed1-4877-b677-7f6771027e1f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ca3929a-a705-438b-bf74-db2eb608548e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "414822fd-d004-442d-8407-d7f4e2918446"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6679c86d-668a-462e-9a37-68b8304c69c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cea75c14-10ab-450e-95f1-0e9e9d595ba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b78ccdc8-e72c-4322-86f0-f2bda16f7aeb",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18143026-58a9-4980-8809-d1fef0dae70a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76508324-c1ea-49b1-b593-d1d2d659021c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52643e6e-1145-407e-bdfa-f935b2f8afd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a61845a5-16ff-4f27-9524-91daa0164309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22be2502-a276-4b1a-8b7c-b278321ae853",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae589518-2aad-4a5a-a12a-4fb967e28e08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34db6d57-fee8-49c1-9370-39be77180783"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fa0f3da-e0ad-475c-8ae3-b31819e363fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c545284-a65e-4876-b9a4-115b90580e74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d3cfeb8-bc46-4d45-b0a7-4b9c2b877918",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6346458f-6694-491c-956d-f9134b082500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82ca4cc1-acf1-4365-b173-cc2eebc4254b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "347c893a-3b51-45e7-a988-e5fb414ad162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "088387dc-3f1d-42a3-acf0-b54fa126145f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4a82977-6b37-4d71-994f-9ba9b3f8aede",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71ac281e-23bf-4346-a9f3-c41b65564498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b914a7d1-1977-4325-9cb0-e9523c6d9b88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c164509f-8463-41b3-903f-038f6b2514e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa701804-f5bc-4c14-bfa5-9814a465db51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd1b713d-4ded-4341-8f5e-f47dbb61136e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e23485a-f5c1-4d78-9d5e-9145939b25b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c1f5e25-903a-4585-a103-6a5c978a0e31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37ac33c9-6497-4d66-9c55-a3647f7fa7c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "853dddff-8685-4853-bfa9-df5c4cf13e3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e68dea2-31a4-4271-81c9-9e6195f4e57a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daa41fc8-010f-4d77-8f60-da2dacedfaa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e58b267-9501-4e56-bc56-fbd3b1e2ddc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa42214e-33ff-46a5-8aee-0af39a7e9646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c313044-ea61-4faf-9380-5349344039f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "281811c9-3a9d-47d8-a3fa-0947596d4b7a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a1ee109-8ebb-4016-9177-f7d2f2a254b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1882ea1-da08-48b0-9607-55373bf5fbd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04aff6de-2739-4ef1-b0e8-514e4d08cef1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1fdf424d-9e21-47e3-80fc-0be79979ad6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b741c028-00ac-4445-b0f1-6e23a9c35673",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aef11804-f737-43eb-bef2-913a2e7d2468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ababb4d-e04a-49b7-a026-781c8951c9cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd38cd90-1355-4b1d-86ea-68b55db6069d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "191a7c77-578b-4cd2-9f6b-39aab2846c35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72a3b42f-28cb-4d95-9a1b-240caab2ae82",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc147e08-4a22-4d92-86ea-22ad866c487e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bf044f9-43f0-4e8c-ab65-df7ca6a5f2ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba601269-a68a-44e1-b08c-85a84e726ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b7b3b9c-592b-457f-b0a9-6cc5378887b9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f9a09cac-a248-4bd6-81e5-d6dbaee9d162",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "eb564375-85f8-4a5c-8bed-7e4240edf98f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5f92785-3bc6-431d-a0c5-6692359e141a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "216abf32-44f6-4b0d-bea7-7a98a8ccea7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f81631a-9fed-4a8b-911e-430e1e978354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6e8c7a85-95bf-4f45-afd1-a29099f88128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62bf8987-54ca-466d-a87b-ce9071555c1a",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4d9cdeb-12a6-4b70-b885-6af6507ebb86",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "3a6ecd21-75ce-4097-8e76-96be5fa80b8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31434967-a6c1-4d33-b45d-1511ffe07d75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d142cdec-07b1-4956-a358-af0d781d1d2d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "19b1df52-e901-412b-b2dd-bf6ae338b4fd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fb022580-e6a5-461d-9060-0b3116da1996"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "89e4fa87-549d-4010-8838-6f79780030ad",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eb31b9d3-dde5-4be0-93a1-ef3f40693f79"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bddc0177-a05d-464b-99bf-fbd9d247afe5",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "97717c35-0246-4fb6-952d-d8fdfd511056"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "df49c508-97c9-40c0-a91a-8913499eebe4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e500a924-6356-493c-96a8-00d00c3920cf"
            }
          }
        ]
      },
      {
        "id": "18aa300e-c9f0-4bca-b98b-d87d59dd955a",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "2ef769ed-237a-4055-a33d-b3f83ddcd8f0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "48e02efa-586b-4758-9f39-2c60146c7dc2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ebb809b5-a3ba-48f2-9dba-c80eb1324c13",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "244ad805-5cde-421a-9c31-dca7fa892e87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0316869c-6e32-497a-be28-f4ffe7dfd41f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7079e7e-c80c-41aa-a697-2df7880ab1db",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4157a618-099c-4af4-98c8-856a3a59601c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f36278e8-620a-4284-a76b-6c8d018994f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2161498f-7a58-4a19-8d2c-9f4c56da82a0",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b44f4740-f36d-4d44-9f6f-9f6e97d5df3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bb2b6f1-ecb6-4c66-bad8-a8ba3e8aee35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7025678f-7a44-435c-8d9b-66b6c1d345c2",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b0b2466-3dc7-4450-b4f5-f37d97add41e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36f7ba41-356f-4805-9a73-3ed76fa3aa60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d23b1b4-a4ad-4890-8bbe-0288008764f0",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2337c9f5-4b89-4eac-9ea6-565ac7c1d2d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51fb1a1a-55eb-4f26-ab45-fa76d347693e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cf4c718-a76e-49b8-82d5-3e739212b440",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1117632a-22e9-4289-b8d7-1b95cd413a8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa9bc272-321a-4b29-8d4b-756ba2c24702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3feb9faf-8561-48c3-886a-e23a928fef8b",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4407e0ea-f35f-481c-a687-4614bae3ba52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59803687-5671-4b6e-b3b2-91744fb1465c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bb4b5f6-7624-42f8-8282-68ea6da2fe98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9460267-1825-49ef-92dd-517d501604ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b42bdde4-cb25-4d68-b7bf-5743882d9f8b",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a1487e2-1833-4423-8de4-364ca936e4b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96d29301-2de5-465a-bc0a-b45da0086d36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb894e9-0c37-4594-abab-822f7953a055",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "597cac87-d4e3-47f8-9da9-b0b662b1fbbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4856cf64-0f9f-450b-b7f2-6374e8213a8a",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a07a95f2-824b-4db6-acd8-817961077446",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "930ab537-aaa1-465f-a851-7a47941d717d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77991dc8-0364-4454-8783-4c8c8352997b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e4d4a5d-5ce8-4591-99cc-3daf996063db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8400b30e-272b-4c4d-92a3-d95bf3f3e2dd",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d10000e7-e6e0-4eb4-a7e3-02a813ae3b43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12645159-30e9-4500-8cbe-64a91b8a7651"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e34cb6a3-c322-4460-8adf-91457d986cc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "704bde7d-99e7-4279-9b5b-9e731efe5ce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "302e2084-9a06-4e4e-a3ba-41f99aea8af4",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd8284a8-3c46-452a-b20f-498a2bddd3b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52ea6bcc-518b-4743-99b3-44f983cb2e4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "734077e3-5e98-4c8b-ab64-49f27abe7588",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "693f4af9-bc57-4312-925f-f93e8346e9c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46563442-8da0-431d-9b29-a493f517efca",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36b08ac4-fbf2-44c1-babc-926eccbd95c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "798be6ca-620c-496d-a0dc-e78bf659d298"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfc41c07-849a-4d71-82db-e34c7fcf4d66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b08a402b-1dec-4593-a3b7-3510548f9bd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e249fcfa-cd60-4733-923c-93dca8390ecd",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45432081-d2ef-47ad-ba43-493a10abb97f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80382037-2b75-4e7c-99da-e0bac9f57e1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "270c92d8-8900-403b-9ec6-49f9560d17a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4086a4f7-32b0-4d87-8d6f-bbc7ce6adb0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd933003-55e2-4a28-b850-d9c91ff3578f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fef03433-60dd-489d-a65b-8d1342b533bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1413cc37-ac3e-4dd4-ae7e-cb33d9fd9be3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68caf360-bcd0-4b8c-8f2a-8ee9972c17f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ec083b9-79c8-4a0e-b2ce-ebc72a2c3462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "200c278f-1f24-4a77-b770-72b65d4bbaea",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58b412cc-aa34-47a1-a5a5-762cfcb02fc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7288dfe3-ee78-4a63-bcb4-c5164e2f5845"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a90bc71-54f2-4b6c-b03c-7c35f8c3150e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d7ea24c-3b9d-4bb4-881f-f5029fed99f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41b0b345-bc0d-421e-99b1-7f1df33c0327",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a897bec2-565e-47c1-9a9d-6e805ec8d059",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "527ef688-0b6b-4347-9bbd-a2fdfeaf14eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85ef42ec-4065-48d4-8874-df3bce5f3e0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f657d909-2f5e-4004-92e9-7fadfc802f43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "981813e7-57a8-4940-a316-20c92a309764",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e57c3154-495b-45b1-91d4-d89d6c545a12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ed2515f-14ad-49ca-a33b-46ab7c395741"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaa055cf-80f7-4766-b3ff-16f02bd0eff6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bc890eb-10ee-4a79-beb0-f7aeddd4f811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "959bc9c6-2925-452f-97db-317455ee8276",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28cea8a5-73df-4dee-aa49-e3661695494b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ad6e5a6-0856-45a6-9748-a95e5199bd2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d709c69-3974-4181-93da-2cebd36ec135",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3717347a-2d6b-4cb0-8e1f-5a796ef22903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8ef00a1-a9ba-44d3-988b-fa5975244e6b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0af47fd7-0c5c-485b-80dc-01d76ad4c983",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4dc25c8-ab02-4273-83a8-be72b6324b0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8c71a82-1f5f-4e65-89ad-b9cf499dce68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d2317f2-a3bb-4ed4-8698-fd7c3482c275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65b8d365-2a35-4bb5-8fc0-69afae6623ae",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba810d05-90f1-4c3d-8566-e06ac81a6ae3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9208e9b-239a-4e2a-9e0c-25e0c2cf96f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07bcbc99-654d-4af6-83ae-f72ed7e27616",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb2c9252-1830-4f7c-bcec-6afed0a64401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bf80236-cb77-4562-8157-86d9a102dd08",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97c1604b-4436-4d50-af92-1419fe303c8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "402b9be8-0cb1-41ce-8842-15af54da83d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5fa58b4-d42f-4621-a12f-0b4cf3444c8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6329b9bf-e878-4264-9ef1-57e0ed33197e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efb29ad4-57fc-4405-a872-dd44c7140b0a",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "493de6df-90d9-4ef5-928d-a86a9030da59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a92061b-e053-451b-92dd-eca1b5897d17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99f09135-7cd7-4758-b201-8539705759f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c911589-3a4b-478a-854d-3b875b55c356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e51fe2b3-0596-4344-a674-82a318180cf2",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa3aeab8-a241-4a4e-a5c4-fa999bce7fd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b49d395-cff8-46cc-b732-0ce43597d6e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9da76338-baab-4249-8a47-04a57685088e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eae86716-0a41-427a-b306-bb0aff454d11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdf4cf6d-56ff-426f-8ccb-1e1715b8d637",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eebbf2b-f5a4-49c7-85aa-04bcb2b9a2af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03003318-9e3e-4ab8-bf82-bb656aeddf45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30b306d4-3340-49db-aa9a-f41c775495b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4d2ce36-c326-4ed0-9562-4dbe5a99c048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23c3a73d-435b-41c0-9178-30e82754c230",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4642ab2e-3660-4c1c-baa5-75bae9b7d614",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf1d02bf-7965-4fb4-90d2-01fe9cffe2c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7495bdb8-8e14-422d-a365-9d86330834c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "947a6739-eea7-4372-bd64-4676b387c732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8becc59-be86-45e9-b3cc-ee424844b0d3",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62e37891-4469-4643-8b66-eca1cec850c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f489328c-5166-427e-9f3d-49b02c6369ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83cb0a18-65ae-49fb-b3fd-8128f4f3a343",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed9c61e7-fa5e-4aa9-a7db-34f3c349c93b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "709879e8-8eeb-411a-bc31-031bae0564f4",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17010726-cc4d-47fa-8f10-e09b7865f0f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8f2cbfa-cc20-4a72-af92-40fa15f9852a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e005028-5566-4b29-a1b7-856e54c2e1c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3df05ef8-bfc9-4096-988a-36a85a5b8c61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e1579a9-c137-4f4c-b61f-951bb5bb6311",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d148b65-34dd-4386-ae58-7adc349759e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18ae7263-1447-4b02-aacb-71637e95efd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "171a11a3-3b21-48b9-99f9-de5b23c5e0b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f582c65a-fc65-431b-8ce2-953b925c04fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afa801dd-d129-44eb-9a80-c6b07437209e",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "933c41d9-9e73-464d-b595-f90eec25ea27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c8ac338-c64b-44f6-8034-b84474c94d02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a381e1b2-6177-4d2e-955a-67b633d34312",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c3f9ca9-2358-41fd-ac00-31c6b3332216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d44b24ef-a1db-435a-8b17-b4c13604c840",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fef206ed-959a-4de0-94d3-5451c66115e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4980fc3e-41fc-4eab-b846-edbd251ca42f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aa4ab30-0dba-44a5-8188-19dc679e5159",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "619e6544-cb80-499b-b115-9164d184e78b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "587fe32e-31f7-43ca-8e64-e665b45c9727",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd4ae3e5-0d43-488f-9775-bbcfd6d57d0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d9ab7b2-477b-4c30-b5a4-000e075df202"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a29798a-131f-4188-9d72-ac99d4bc825f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "555697fd-7fc8-4d32-9bf9-1a78706f6210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea0d3a29-731d-41fb-ab76-c1ded2b2cbd6",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b43ce11-2e8a-4af5-a93a-d44cc49e5101",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb0adab3-0e6b-4eef-9f40-8d29d704e7bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8dd8b8d-98bc-4fbc-8d36-39d92f1938b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "282c684c-a7c4-4aa9-ac69-49349b2aee15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3eddfc5-7140-4617-b59a-a2e090ed6f99",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "276e4a49-1b79-4c23-b22f-04443556543a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f8149cd-8c6e-4d3e-b6a9-c87adb504e3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01c95959-ea36-404d-8402-a0931bb850cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c19a0deb-4cbd-4578-90ff-676d44eedaeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce0348e3-2547-46d6-91da-76d2de84d526",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e44e8f20-65a6-4ef7-961c-4c372d681604",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d10d77cb-8e0e-407d-9e46-9526e7fb376b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9ce3f58-53c0-4520-93c7-15335842ca15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5e3f2dc-d6c7-4feb-855c-53173b924d61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0181450d-3058-4e1e-9da2-ea7211510e4e",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41a41e47-ff97-488c-9749-8f8571d810a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "612ab602-3438-421b-8a8a-11fdbef2cb85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9ee34e2-cb98-4a67-9bea-2f351d2eb20e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2befd39-91a2-418f-a833-07da3d9731e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f9ba4a9-fea2-4d31-bb0c-28b1dee495cf",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a39e74fd-c93f-48c8-98b9-b317ef3ce9d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e84713e0-13e8-4796-94a4-c93d31796bf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "812f196d-c6f2-4503-ad3a-309268e58c74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6da1cd33-b8a4-4539-acc8-cfd0893d91ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b94254a-ce69-4121-b779-dbd5942f9f5f",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcabe7ca-9688-463f-a9f5-e6ab4b5ca685",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12404736-ceaa-47e7-896a-e51c4763dea3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1811a791-08bf-4c2f-b7ed-35d378302b16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd8dffdb-5cfa-4892-bfd3-345c43ba021d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "057826ca-7d8d-41b2-97b4-5e9cf5d33342",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d71424f-27ad-466e-b251-6328c4fd53f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0338404-285d-47aa-a562-7deb4e49b7a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9c599e9-c1be-49c3-a2f4-837c1d425cda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47b05710-5d0e-48f6-a3ac-0a64214943c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90fdc014-9530-4c2c-9bd4-91c685658230",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5adedc93-4b59-424e-9484-8b9a27f4b2fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7a64e49-72e7-4071-9edb-6ad9d7864f50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9ee7996-34d5-4a85-b02e-b72fa5dbe38e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7a23510-d37c-40d7-af96-660015c45c75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9725d96-baa5-4786-9e85-a4658ffd52d2",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84e02b15-098d-4dd2-8d1f-3b761909398f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a207570-8f0a-4a98-8c5f-e424950e8869"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6c2600e-bf15-462d-853a-8eb75ae2efd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b0b30b3-4a0b-4737-a462-e60af856b094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76c42abd-75ce-44b2-bba8-480299660962",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e96a62aa-5980-48a6-afb6-1c0f8f6d88fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ab5fe24-1eff-4691-9ccc-133102b21187"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3d81793-505a-4b61-848a-d0fd2ae78bfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3e5db7c-016c-42d8-b1c1-d6175c4aad81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b753ac3d-1b52-4898-8bd7-bcb7f6cc714b",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ffecaed-dc1a-4e2e-8354-157dca8b5d2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "798854e7-7266-4660-97cc-2fa6ea5fbf24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a6f1bba-d355-434d-a6e6-b9375aa9451f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58662aa0-eef3-41f4-8b6c-be42f4a52fd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0b51ce3-bf10-405f-b160-5f7f0b875fe0",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5439bc5b-819c-42cd-b8f7-b04ef63b6097",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3072ec21-e5a2-487a-9090-18556fa53363"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cad549b6-0a80-46c5-b1e9-517d20f5c543",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "827e06f2-85ad-46eb-8a39-f6faf243de0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04733045-bd49-43ba-b83b-2203905207f0",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76e35493-23da-45f5-9693-ae92eada8334",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3764d47c-90fb-4bde-96ac-eb878dfbc205"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "657ca08c-b0f7-4006-8dd6-18e78be37f34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "785a95cf-c72a-4c01-8a1a-cf1855a2670d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b2a09d2-7dde-4309-bed3-bfd492eb40b2",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39064697-3900-4bbe-af4a-7bb6cfa06fd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73178ee1-5a67-491e-804a-cb5823a96fb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0059ac05-2509-4f8f-861f-ab4ae66a0ce9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56934503-8219-4039-8b3e-cea7a77bb84a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "873bcaf8-4c42-4df0-88d9-31f7de3f3ce5",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeed3059-92fb-4be5-ba90-b5a915e3d796",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88c426bb-62b1-42dc-a924-0d81b08b1e27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db670b1-2856-4f38-a613-e735f4907abd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d724fc2-7b20-4ef2-a79b-367ce825f69f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d9efe87-20bc-4d89-a662-9999bceb87c2",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e7aaaed-0837-438a-b74a-41981e3385fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46570f45-54af-4dc5-b2cc-00f1ebc57b54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a32ba61b-ae4f-43eb-b3ec-63f8367c3f51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f57a630c-5490-40b9-b402-27e43123691a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "632f0e93-989a-4e2d-9941-fb1f59c39c9e",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaa3b42d-f2e1-44e4-b5e1-5e1fc8b7f8a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44d55ab3-50b5-4c6e-984f-f6e869192ac7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c6fb689-8711-4025-91d0-579bb33b57c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6430d5cb-b7e1-4530-a9ab-5b9f554e1d90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bd00d34-9b6a-45f0-8ff6-d0fc349ec071",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2154e40f-b660-4b99-8d64-96ed12d9a5a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fea012a-9387-417d-b22f-df631ecadfeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97b6dbab-d9b3-488f-bcbf-8370f94776ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5564d52b-d9c8-44ee-9d35-e351effe152a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb502bf0-d086-4fbe-b767-1db5f0a4000e",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f31801f3-e875-45a0-9854-c5b536812bb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2e975aa-f810-4740-90be-5a52fc199027"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a01e85c5-e377-4de1-9b73-f4acbd3d8eea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ef225ed-e496-4daa-9658-151bcdd4a6ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeabd64f-3eee-4106-b5ca-be9ba2a648a0",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1d2a496-a5f2-4324-9720-78107b13f6de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d87f4fc2-cfcf-45bd-aa4f-db7f34cab766"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3196909-22d4-4eb2-96ea-13aef9959989",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "347da55f-d687-4f36-89d1-ae21ebd1735f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69e6ba40-039a-4049-bdec-0aaf48601742",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be45148b-4eda-4010-b00b-80c03f17bf59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ed411f3-ba50-4295-bdac-a751cb5c0cfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88f94e98-0eba-4613-b5b7-d97631a74078",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "588e0dbe-d53a-47a7-b14b-73ae3c34dcb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71796caf-ea3c-474e-90ee-3e2defc66945",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a697381-4b6b-4b26-85fb-eaf5284808d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11933098-4732-4368-932b-79744b705895"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c310d51-fa1f-4999-8d9b-826c9fbba4a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfc86dea-1705-46f0-93d6-b26f128f4b68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cd1597d-4c0d-4dae-b7c8-b8189ee2c070",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a824ab31-ef65-47b9-bf7d-b029b94b7b22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "979011db-af68-4fb2-a5a0-0d41fca9282d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ca4f4f-eb22-4188-b2ee-b2fac806552a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "129fc0d1-fb48-49cb-ba44-6fdf25af44cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc5019f1-2e49-43dc-a64d-1bfaaef158a5",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f316076d-731b-4594-b840-871ebc98653d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6006e0c9-f084-4b30-a2a3-ff3f68c73c08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "643bbb33-5fca-4611-860a-5128166862cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "984aabd3-9432-40b0-baf0-83b19a1e59b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d15c3ffa-34a9-4067-b3eb-8be5618d7a4b",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b20b5bb-e7ef-451e-b3d5-3778a4bf6555",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "394ad1fc-e936-4ef5-9c44-939a78d4034a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9152984-8d02-4e02-b180-4d3a4ef1660e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32d5fda2-2142-4977-b489-2bfa1fbac112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9fac760-93f4-4fd7-a36d-d237de71623a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e62f2d45-b201-4d6c-88c2-f5d548ebf747",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "042a3266-3c38-4898-b95e-e7d902680f59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "633c219c-851a-438c-9730-c5417515b6ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba29ae2d-3343-455f-ad3a-ee2c1f7b2bf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a7027e2-2080-4ca8-b6a5-fbdaf92c603d",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9109e29-e64a-4aea-91c8-695f232f9de9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea4f35d9-9bf5-4793-866b-4ce625c0372f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f94337d6-5ff0-486f-91ce-208ee3fac025",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3af87be6-1ad2-46bd-a1dc-0772fb9e0510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "737de5e3-99ec-4322-b622-90bd7e5fb00a",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7666dcf9-1b2a-4aae-9120-6c81f660c58f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34798bea-0e31-46b7-8959-f49932b21135"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71978152-eadc-41c9-a823-d6571ab9b4ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a20dbe1-a705-42e9-bce3-d67dde944444"
                        }
                      }
                    ]
                  },
                  {
                    "id": "833e7d48-8c5c-4ca2-b544-3012c99670fc",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "357e077c-7489-4cbd-9445-63ee620f304b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa22be53-ba23-40ee-97b4-58afcf262e5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dba1c55-2674-4c59-8588-8c5de45e8302",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17aec287-af3d-48f5-b9eb-f579b09ccb96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b309a54-f8c8-4169-94b1-fcbb966ff673",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc751406-666f-4287-9eda-e8fa884c0f06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd919747-f9ee-43e8-b364-5ddc728e3969"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59c6da5a-c1a5-4ca5-86fa-72632e3882ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07992e74-5326-469d-aa6e-60d7f2166c0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12f1b31b-330f-4cb4-807b-329e96b7b5a6",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1f0a975-1a1e-4255-80e0-3cb70ccfff36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ce2db16-285d-4034-aa1d-98f134354eb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e22b7d32-c4eb-41b1-8cbc-db4dddfb7700",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe56f795-63db-4b3c-bd83-60b8c754d68b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d07e4ac-eaf5-45dc-99b4-9c208d40000c",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11ada260-881b-49d7-a9aa-efcb8454b2bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b64d9c17-6b32-4f7d-8ae4-8221b8470ecc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45c31383-c860-40d5-8de8-4175c5ed3d22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef8a8a72-7871-4017-a77f-d74657ab0412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd18aaeb-d837-45c0-b117-868a502af394",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbc65506-7828-4191-8b92-0014a01c5616",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8236cdca-dc9f-4e4d-ad03-e08b54f85bee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c822f40-96ba-4dfd-9083-590499345e5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07c4e485-53f4-4095-ba2f-fa1e3a0640b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b86c17a5-2078-4307-8352-0cbb5959a717",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "014841e4-7097-464b-acbf-9a2a3a6cda61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67ee9024-0723-4c0f-a457-8606ad45134d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1935e32-0e00-42d1-9614-3cee48924600",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6d03c36-f1b6-428f-a62e-6c174682dc48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14feb0ec-ccbc-488d-bf16-3d20d91566da",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7c2b532-2dcb-4280-a4ea-6013e9ae6b65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b5902dc-3e82-4b34-8061-1aa2ecb1188d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad12f365-77a9-4527-aee4-856aec384dc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c6b5689-068f-4299-b68a-74ec546674c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3f23bfc-827a-4ddf-9cbd-11e0555f6f2b",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dca2241-7cb7-4427-ab49-23039589dbfd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a098e024-c0fa-4aac-8e42-ce9044bdde30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d58bc2bf-4788-4122-8ab6-b90e53002032",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d00defb-7828-4fc5-bd2f-1c3e2e66c812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c22b168-6a27-460c-b272-92ee3604834e",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80e3e652-c3fa-46a3-8d35-bea06384e8cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5531cb85-ddc8-4ad9-acc9-d9685a4dadc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7c3a6b8-6f35-40d5-9e5a-45308c1b9ec6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4423bbb-cf8f-405d-a32b-a5e38b6caf66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc78814c-2e72-4541-a06e-a933b63e5cc4",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d8a94ec-f62e-4ef2-ac94-b32d3b809e3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "287ff830-8e41-4c71-9095-b028e4371639"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd015aa1-f2fa-4717-bb38-5ca29c927e26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbf3b78a-9175-44eb-91c4-251699e6b28a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b3d6a3e-fa73-43c6-a4df-46047c0666b6",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd4ef0c0-7c10-4bfb-8e9d-3c962621bc6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "413dd6c3-70b0-427f-bb4a-f1e451426f51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80641b42-cdf9-4157-aaef-1722a6b32d47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "127c678e-d31f-4955-b235-9cedc2e036ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac092ab-7e76-4114-afca-4cc31d595163",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59906562-7ad4-4762-8e6b-ec1364349b1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9e27f3f-c47a-4194-95e2-37e45e2eb99d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6a21383-b84a-4889-b948-0ef66c43ca0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8c8c99d-fe89-417f-abe8-6180eebb0424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b99f0b5f-0517-4ef6-b19c-c042618703e6",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c04c350-6847-42e4-9347-cccaba3080a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6685fe52-75c8-43ad-b455-5a45151f4b57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b5f392c-bca2-474e-83cc-3ba81f63b597",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c74fe35-b2a0-4025-9b89-891c134f6b15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4e45519-ee69-42f3-8961-f505c2081a13",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "218a2cd5-d387-41c2-82d3-023b04710a6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68b6e9b7-509c-412d-af48-f0bb911c9bec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3447ab52-95b4-4796-8b6d-91763eca8e08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "924427c2-86d0-4ef8-9d28-a53c800aff7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d592c82-1f05-46d0-933f-9f56d25ecc1e",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91eb660a-8d02-488d-adfd-020166b2ab8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "575dc4ee-ef31-4b1a-a21e-333381d1edb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bceafc8-3a2b-4d37-9866-7d7c3103ecbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47b117ec-8cb5-4cfe-8b76-aee437263a68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b17f19d0-9db6-44ad-818f-862856467078",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cca37535-fcaf-45d3-8464-8ea2a219513c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84c362bf-685d-4a9c-a2b0-10deda8e3de6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2be15c2d-ed9b-4182-9750-0d2ebd6ff7cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2323bbf5-6b65-488f-b472-bae3d934f8a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eab981bc-567c-4834-8404-570c625e8746",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1de82816-8eda-4f29-81c9-44fc2d1d9b33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c2ae4f3-15d6-42ce-8470-bdf921cfc5b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b282e3cc-5340-4e26-aa5b-17548122fb5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0487857b-9e20-44bc-beb8-86b62ec6ad23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1469538d-afdf-4138-bde3-5764b333f482",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c98788f1-f37b-4a4d-90eb-c020a5a5702a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf9c5aaa-dab9-48ec-9a0b-2c1dc901d353"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9de3c5f5-7541-4771-9e48-e8e11518a587",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "948ea20c-739a-4cad-88ad-f8cba065e6d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b65c8d17-4093-4dd5-ae6e-a3a071b32409",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "948e32d3-6c34-44f5-b36e-eb368752c2c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5abc811-cd8d-4cf2-9478-87529ec436df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91c3b85e-e219-4f54-9c7b-70e90b171135",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65e22d47-81ba-4fb6-adae-e15c73931aed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd10952c-1569-44fb-a9c3-3f97a76333db",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ad1f3e9-3bed-48c9-a9e5-a42d2ebf83e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ec5fc1e-577f-47a0-9264-b7363d0a354b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97050758-b907-47c6-a211-480993b9041f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d13cc730-b2e4-4cc3-acf2-f57e756fc3cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f96e493e-48c0-453c-9e82-6f4f904fa822",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41fffb8e-beee-47e8-b8de-2ca44a51a3ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "337d9a17-bc66-4312-9974-48ac1d18bdd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d94b7265-6db5-4239-9866-f6355736a718",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "257de9cb-62c4-45dd-bad2-b0ffc9a5145a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dad878d-dd3b-4aa9-9208-7f20743fc557",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0d2245c-f31b-492b-8c07-71e9458aae48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f25fee0c-f5c7-4097-b294-e4e505b5e27a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ab1c15-1b81-4be4-843a-460f8c4e46b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94711ad6-eba8-4384-a0f4-316086aa56b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdf32f7e-02b4-44fc-af79-ba1d39f8b138",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc9f6bc4-6a68-44cf-a0ea-081343e7a5f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c666fb32-d4a6-46c2-853e-6206dd7c0bc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c353c2e-d267-4aa1-b1a6-c547e6db0aa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e04ac75e-2a36-4e86-ada1-1a2350e492b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70915fe6-8419-439c-ac34-9f6c3928e426",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d690300-b626-4a9a-9fd4-f43c2a6863ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe32c4ed-2158-4464-ad83-b1845c3ba5a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "510fdf38-ef45-4825-8593-023b3458f97c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47384dca-5d57-4767-8d1a-02c58363f402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ca70ff6-6561-4e31-81f7-45f28574dcfb",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f41b5a26-313f-4392-84ca-3cc81bb14445",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a371eb41-42d3-4394-aff5-42d0fbca7962"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce94b619-277d-468e-9750-5bdb55030428",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07980e9d-9544-4431-8b6e-77638bd400d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c0b68e8-98d8-46fe-8723-28aa6d13ae05",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5403c95-71a1-4e4f-8b46-16f72308139e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7d19d87-da2c-417a-a3d0-b3aa22c75d82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb37f241-a772-4a0e-a27a-9155add5bdd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfd235f9-335f-4b91-a2e7-1c6307ef3657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19e6def5-5d43-4986-ad0c-0b4cdeda9bf6",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "830f522b-4c89-4340-8543-c254b7f025ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44ced4ae-e864-4f2e-bff7-8e4e569ba690"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fe996c8-350a-414a-b209-15abc5aca6df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e521ce5-1ad3-4483-832e-55d2f35a93db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05986b41-a486-4d06-b867-527bbd33f570",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8acbf2ce-4e6c-43b5-9fef-6c06fd122e43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18bbc59e-91ad-45fe-9141-773c72e1bd5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b6b69dc-8de4-4896-bc48-21af420eb282",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bdebac5-25c7-48f0-96af-3843e798dcae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5328088a-6f02-4a85-8328-262afe358b66",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14387323-af6b-42ac-b9f4-c441a7579c05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cfdff0f-61e0-4928-8ddc-ba3034fcd11a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b300096-2b66-4598-a73a-a81d51fb5f31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "462703f1-0e78-46f9-9873-594c5076d654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5909e6d3-19d9-49d9-8df7-90f2d67ebfb4",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "708f98ae-f4f3-49a8-8f31-90da2584e852",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33baf7f1-e71a-4544-bf21-27fbdeb1bc09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42fffe2f-8c40-401c-b804-217c542374b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07b67f38-6fa3-4113-a0c2-a212157ba536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d0f16fd-b561-4710-a20c-f97ead0377ee",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e70ed458-b59d-4771-b215-a29eb53d12be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de3cc236-5e8d-487e-91c5-2cbe9f9bfdf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42c6da3b-4593-4d37-b10e-009226b2c725",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0f3b589-2f23-4ddb-8692-6d3ff3028929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64b089c8-a66b-4417-a17a-fcc38aa42a65",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b796491-7357-45f7-9481-42256e76490e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cca18de6-8c54-4415-87ee-79f2306b1015"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac1f02e2-c290-4bce-bd47-146f91f7a212",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10f43b26-8a5a-4313-8161-adea44ead6a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f0ed7f7-8c7b-4737-b438-f20eac959cb1",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66bdd807-4a30-4217-a4da-9a2f75100ffe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20410113-b6f8-4ba9-b2e0-6b0ef81e3cae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d491cd8e-d32b-447f-bf6a-4743535382c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb665f85-5396-4608-aeba-7826bdcf8ae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2249dbff-5b0a-42e9-a2d7-332d2c6393c8",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8082873b-729d-4a4e-8316-306d07d159e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28088c20-80a2-4f8f-9604-7d05576f9631"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c85f306b-827a-4446-a993-6eb82388e4f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a87d50dc-6437-4ade-8617-f10befb13b2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d11c1f1c-87c1-4a5b-9e26-1a7bacd10360",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad093653-b474-4130-ac6b-c04653805e2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a85cdc9-c36d-4d1a-a085-43c4a100ac5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "689369e3-9a6e-4f27-9574-d99bd8649735",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec7a5bf7-24bc-4052-8636-3056ca8d2e9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "483ac70e-6658-41a2-9d57-c31d03bb6f36",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84ee417e-c6a2-49e3-b223-7b88177b2b1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa333403-d9e2-4509-8ae3-a4bb2f048be4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9847589-0982-4949-89b8-901a147a40f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d97b1fcc-a10b-4324-b755-9184d0f4e718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bed70e8b-7bdc-4d3e-9504-abaaee496ff3",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87c65a09-0467-433d-baa9-bcdf514a724a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd1984f6-3505-4cf4-95eb-41ee3e3d302c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b35f2e6b-6aa7-48d4-9b70-0cf1e648ef26",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3102f978-bcc2-4247-8a03-97e1ef48587a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41ab51f1-a78a-499d-9d8b-0d56ebd25fba",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "773c0e5a-7ec4-4d58-80c6-9e6e7a86175a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "192809a2-2285-42b6-b073-f0ba8b3294ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6322b09-7640-4621-bf8e-0945d6d9bbad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c221433-3066-4e14-92ef-8d0385ff1bf4"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6f45e3ee-c020-427b-8206-dd6ac7d41a83",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4bc65a52-7fd6-4568-a559-ac39ec71efb4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "285471d7-6850-44c3-826c-911550ae4f55",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "14dbc4df-5028-4824-9c15-542b13dd75a3"
                    }
                  }
                ]
              },
              {
                "id": "fc3f6a0a-983a-455e-86da-d36423d1a894",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cf3fbf42-a231-4254-b6e1-08d08f145b91",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6bb2815-0e64-4c0c-9ec9-3298d1f28e81",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "2686a5d8-1372-4032-882b-5b65114c111f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e477d61-6d64-4481-9f1d-8e3ed6a75839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "95634464-c803-4b12-b7f9-6f0bc0c7df79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6a28b70-c16e-404a-af13-8e1aff7a52f2",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6af97467-fd42-40ae-b1a5-97821bc91116",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "725a93f4-4fac-44d8-98cf-392f68f09fb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ac918c-31f0-48a1-a4bc-6496b8239d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "52eccfd9-c72b-4622-93cb-dba5bbb9ab7b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6fe7d0e2-f4ef-4f4a-9ed0-62f418a53bf4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "326eb175-f330-40a1-8bfc-f0b4d1888b8b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e42087a4-c745-41db-b6e3-8db611ad8f18",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "32c20a7c-d5e4-4b3b-98be-e38be37e529d"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "1dfb780f-d7be-4823-bc2c-1f4ac535e162",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b8481902-191b-420c-8791-d9ee20243465",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a0e14d77-0871-4ea0-8cdf-2ea96b20811c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7410d769-34d4-4e37-ae5c-06670b659cdb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "12e1a888-498b-4901-b677-4eb1d0447287",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5c3737c0-ce05-4f14-adc7-cdf94ef4ad60"
                    }
                  }
                ]
              },
              {
                "id": "a99d3b30-cd5b-4330-9ebf-1310cde73f15",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7cbfdad4-58ff-4cae-a20b-a9210263c47e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "84b66c2f-1906-4da5-9430-50b120b7c5d2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d313b3e-b37e-491e-a9c9-b51378043806",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "433d9a47-62b6-4ada-b823-eae06dd41510"
                    }
                  }
                ]
              },
              {
                "id": "e6b108a1-e719-479e-bd22-bcbd56f56d85",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8c6dc796-8b84-4bab-911b-65dcf9c49d5c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ce92bf24-e435-417e-acc6-ab575cd887f6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4c3b8071-4bb7-4798-b004-378f413a8852",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "697e8316-a01d-4078-980b-78b5bda6c2be"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ed81a9d8-c16e-4ba4-9071-2170d4b8645a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "3ce7aaa7-b85b-4841-92bb-8398a77ec9fe"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c43841e0-b552-4ec7-b3b0-64145a82ee95",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e36aa3a8-18dc-45ae-87e4-35a7a3fd87c2"
            }
          }
        ]
      },
      {
        "id": "e6f46acb-65f5-496c-a1de-078a5955d168",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "914a7c4c-3fc1-4c72-b4c3-bf8f13171605",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1d77f339-5386-4acc-84b1-c3b8e9959e35",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "85f1ce3a-e114-4490-a9ca-0685026e55b8",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34475c10-3b0a-4148-b6bc-15add8138789",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9db90ea0-fbed-432b-b133-b7a11a18f627"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6468d2d-915d-40e3-b3d6-fac0c031b6d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e11f72d3-26b5-49fb-ae77-989170e2dc40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ecb3630-a6ec-4bb5-86b0-7ede600de4b9",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fdc1f5d-b1f6-43d6-bea8-e87d4293794d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2944b900-da65-4df6-a278-1f623c81d095"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e70d0816-44bc-4ab7-894e-b22c1b1d4687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2cecf632-cfd3-4a5b-a6aa-67c57c7eaa02"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "22c0fda1-4851-4b1f-a867-acbdf99a862a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "55418ecd-1092-439a-9e8c-5a443104faf1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e716703c-8ce7-47cb-be33-97d9b7ea7180",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eb47715c-f48c-4b63-9ff3-5a732620fc08"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ac4e86c9-c7ca-4705-ad64-8f1886be3930",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "16dcb550-cbbe-450e-b014-6ec9856f4588"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d7ea176f-c3bf-4db5-95fc-9c30a989671c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6a7aac26-5f09-400d-a528-850686be9222"
            }
          }
        ]
      },
      {
        "id": "b067d7c6-91b6-4ded-9ecb-da74eaae8688",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "b4aea364-68ba-4925-8dd8-f3ccfbae5c04",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b6d49411-afb6-464c-99fc-f34c130e1fe3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9ae10896-120e-4f1f-b0bc-f1992c38f82b",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2994f209-2ae6-4dd7-8148-e440c53a242e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "52bba16e-6a9b-4c12-b2a9-747a7aad3f30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e12963c-5807-40ba-be4f-d77fe2dbb25e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "958c7fe6-228c-44d8-8dcf-fd20128793d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e9a42f8-6600-4d22-ad4d-65270f9c4517",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c02085a-4ff4-43cf-9040-e05a3a3fd955",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "915ce629-565d-4941-9161-2e6044b7aef6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83023417-2339-45e1-8eb1-ae8841458e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6479c5a7-e7a9-403a-9416-9f7ffeed4e32"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "62606a84-bf89-4bf7-a2f1-ed978645530e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6365ac7e-233c-4b3b-aabf-136250c2e445"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e1286f57-8a8f-42d0-b598-64deb0fda2e2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4601dea5-9e25-42ed-b88a-77b2c6e284f2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "91476544-f3f5-4a49-ad06-f68482135f6c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b179b5c1-b366-4cec-8d3e-ae39b0e33e18"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1f18d92f-b52f-4dd5-ba95-74a59903acc4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7676dc0a-3fa4-4268-b95b-07a277fbe692"
            }
          }
        ]
      },
      {
        "id": "957ba79a-0e3c-4159-a53d-3def2f6a7f20",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "f5b6d2ef-b961-4d64-b085-b149e78f1c39",
            "name": "Negative Testing",
            "item": [
              {
                "id": "032759f7-30fe-402e-8434-efad62b1db6a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "61523d3f-3442-4fea-b7de-56a87caeb7ce",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f1af332-8f3b-41e7-b313-df0e1ad73342",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f6391dfe-820d-4edd-9e51-d743726f7b3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60bccfae-2e38-41f5-bf6f-f9023c7acdae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "747c9935-f95d-4755-8f1a-3c26f05adb37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80e5fb09-bd54-4f1e-93f7-c3d08d58e099",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2399ecc4-b724-41c0-b9d2-22d96c7bbadb",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "09ed8d4c-acd7-4b99-844c-0de5af85b5bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c9963db-d52b-459b-b006-51b1dd97a968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "90f6b275-4aa8-49bb-b02e-87ef2f533c54"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "88521139-9b2d-472d-a39a-31cf6acde957",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "542fb703-143e-4072-81cc-401b2b5e6254"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6918b4ad-a8a7-4b19-a092-b16760c37826",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3b9be5c8-eb94-43a1-b716-95afeef4ff66"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3e6c281a-14e9-4ca1-9ada-454b93a6aedf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "6ef440f8-213c-41c0-8f79-9123b1450272"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8bee2504-d270-4861-b8f8-ef0c45cc83ab",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b98af399-1903-470a-ab77-1042a930af55"
            }
          }
        ]
      },
      {
        "id": "acd5cf70-7e32-4a97-b826-8db7ddd56dfa",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ce4fede6-f7dc-4f49-9233-46a087ad7b93",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "935bbd05-8b69-4638-9641-19eede1921ff",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "4505c6b8-b1bf-4973-a34e-934af2b199fc",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ec59ac61-f3d3-48eb-bb5f-c6e241baf369",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "82e46993-0f54-47bf-8faa-f21e6169a5e6",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 505,
        "pending": 0,
        "failed": 86
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 190.15769230769226,
      "responseMin": 5,
      "responseMax": 3074,
      "responseSd": 409.3673474193276,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1667177831691,
      "completed": 1667177892104
    },
    "executions": [
      {
        "id": "8e62e2ac-727b-439d-b568-04a079181b6a",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b8faf8f7-3dd9-4b03-9282-191f29c73dcc",
          "httpRequestId": "6a4ea8a3-0595-4084-86e1-eb0a23db6675"
        },
        "item": {
          "id": "8e62e2ac-727b-439d-b568-04a079181b6a",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "52f68a27-4404-485e-a4ad-f307961d2c16",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 0
        }
      },
      {
        "id": "5c3ff87a-497e-4021-8aea-8bc4f8ff6267",
        "cursor": {
          "ref": "ff0ecbf8-00f0-47de-b6bd-6512b80876be",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "418ccbc8-4014-494d-9817-314256e15ffe"
        },
        "item": {
          "id": "5c3ff87a-497e-4021-8aea-8bc4f8ff6267",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "f8eb420b-8ddd-4a51-9742-0895021bed90",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "33b82bc3-83ec-4df3-b54a-66505cffb5aa",
        "cursor": {
          "ref": "a0ac5e9f-6684-4a94-bcd3-41e90fbd8c72",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "69d124fc-6241-4e73-8647-55c86cd209fa"
        },
        "item": {
          "id": "33b82bc3-83ec-4df3-b54a-66505cffb5aa",
          "name": "did_json"
        },
        "response": {
          "id": "9651f6ad-ef2c-4efa-b989-c6f9a15031db",
          "status": "OK",
          "code": 200,
          "responseTime": 199,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f658c5fd-d7ff-4122-98b8-03a6c5e10d29",
        "cursor": {
          "ref": "b1ac4c7b-5e9d-460a-a656-9e9f247b807e",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "67f5d17e-bf5f-4c28-8ee2-cc8cdaeb61bd"
        },
        "item": {
          "id": "f658c5fd-d7ff-4122-98b8-03a6c5e10d29",
          "name": "did:invalid"
        },
        "response": {
          "id": "541dfccf-a485-4c31-a5bb-c70fe724e8df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 172,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f658c5fd-d7ff-4122-98b8-03a6c5e10d29",
        "cursor": {
          "ref": "b1ac4c7b-5e9d-460a-a656-9e9f247b807e",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "67f5d17e-bf5f-4c28-8ee2-cc8cdaeb61bd"
        },
        "item": {
          "id": "f658c5fd-d7ff-4122-98b8-03a6c5e10d29",
          "name": "did:invalid"
        },
        "response": {
          "id": "541dfccf-a485-4c31-a5bb-c70fe724e8df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 172,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f3c683a-61be-44b9-bbca-60adb09b22a1",
        "cursor": {
          "ref": "c233eafd-be22-43df-abd4-645970e6b976",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b2051b1d-d1a7-44f3-84cf-53b5c04b3d14"
        },
        "item": {
          "id": "4f3c683a-61be-44b9-bbca-60adb09b22a1",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "5dbd8b1c-4766-4d17-a250-c282dd4896c7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 684,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "713c4f06-3679-44fa-9cbb-abf20d9563d1",
        "cursor": {
          "ref": "c85e6b39-aa7c-4149-9399-63002a6687d2",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "5dc94d19-fb2f-4696-95dd-2b40ed8b19eb"
        },
        "item": {
          "id": "713c4f06-3679-44fa-9cbb-abf20d9563d1",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "08f3cd2f-03b6-4658-87e6-278d32a9a64b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 83,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22aa5bfd-f72c-44c5-aa0a-a8198fa76e7d",
        "cursor": {
          "ref": "b7801356-6b14-4dfb-a435-53367e6aa307",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "76a38919-ee07-49c8-b1cb-77aaaaa0dacb"
        },
        "item": {
          "id": "22aa5bfd-f72c-44c5-aa0a-a8198fa76e7d",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "fe1b92e6-85f3-4492-801f-30ad6a07ba6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 107,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f8ac4bb-95a4-452a-b40a-d6455d662aa2",
        "cursor": {
          "ref": "c28e4705-cbd3-4c12-93cb-f9f59fb7a12c",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "57052153-10fd-4a84-b3b9-ce03e571c56a"
        },
        "item": {
          "id": "9f8ac4bb-95a4-452a-b40a-d6455d662aa2",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "56543bcc-898c-4ee4-ac54-a2eb101974ec",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 25,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f8ac4bb-95a4-452a-b40a-d6455d662aa2",
        "cursor": {
          "ref": "c28e4705-cbd3-4c12-93cb-f9f59fb7a12c",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "57052153-10fd-4a84-b3b9-ce03e571c56a"
        },
        "item": {
          "id": "9f8ac4bb-95a4-452a-b40a-d6455d662aa2",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "56543bcc-898c-4ee4-ac54-a2eb101974ec",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 25,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cec05a0-9b1b-48aa-b63a-2c4cf099a1de",
        "cursor": {
          "ref": "c2594aa2-5221-489b-8fce-d6e5b0f339cd",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "8b0004df-a1dc-4ea8-a979-5b7b2bbaf7c8"
        },
        "item": {
          "id": "6cec05a0-9b1b-48aa-b63a-2c4cf099a1de",
          "name": "identifiers"
        },
        "response": {
          "id": "f3694459-9bbd-435d-8dcc-09efbef5c413",
          "status": "OK",
          "code": 200,
          "responseTime": 204,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a4cc831-50b7-4b11-a8f2-692692edbbca",
        "cursor": {
          "ref": "c089093e-1c4d-40a0-8e8a-1b1d9fc04b6e",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "54737625-6bfb-4cbb-a953-7f70feed85bc"
        },
        "item": {
          "id": "3a4cc831-50b7-4b11-a8f2-692692edbbca",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "7b897cec-0d62-41bd-9958-0dac2375291f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a4cc831-50b7-4b11-a8f2-692692edbbca",
        "cursor": {
          "ref": "c089093e-1c4d-40a0-8e8a-1b1d9fc04b6e",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "54737625-6bfb-4cbb-a953-7f70feed85bc"
        },
        "item": {
          "id": "3a4cc831-50b7-4b11-a8f2-692692edbbca",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "7b897cec-0d62-41bd-9958-0dac2375291f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d246ac6a-cabc-4b7f-93c6-8404e436be9c",
        "cursor": {
          "ref": "0fff3ddd-2043-4c7b-8291-f5fa3827a516",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d2208d45-c599-436d-973e-2a2f8e1bbec2"
        },
        "item": {
          "id": "d246ac6a-cabc-4b7f-93c6-8404e436be9c",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "34032814-6a67-46b2-8247-c7a1bca32882",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dab34d59-e5d5-4d0c-8232-cdb46fd8bfa8",
        "cursor": {
          "ref": "175f428d-93ed-4bf7-a6ea-a4f69eec836f",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "95d267b2-8701-4e14-b1bf-0ed0728c1565"
        },
        "item": {
          "id": "dab34d59-e5d5-4d0c-8232-cdb46fd8bfa8",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "f6d0471b-1178-4d29-ac42-a57123bfa994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d842451f-4378-430c-8c82-515a99711942",
        "cursor": {
          "ref": "0844add5-92df-4d9b-9d31-afa4b9b23fc3",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "46cc1bff-c3ec-4a76-b985-7df3a354717b"
        },
        "item": {
          "id": "d842451f-4378-430c-8c82-515a99711942",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "c73ef3ae-7dbc-4155-b312-887bcbb706fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11ec3298-5dac-4027-addc-0761a910e8f2",
        "cursor": {
          "ref": "4ed7a0a0-495e-4988-8fca-d8c873b07367",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "40a139d1-d421-4330-8ae5-dba3349a22f6"
        },
        "item": {
          "id": "11ec3298-5dac-4027-addc-0761a910e8f2",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "3ed02389-e3f0-496e-88f7-e1e33c140d34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d03946b9-4af0-4e91-b305-9eea21377a8c",
        "cursor": {
          "ref": "481c47d9-acb5-4276-b3e5-a5258a90f91e",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "728a401f-95db-4aa3-ac76-49166f1ac1b7"
        },
        "item": {
          "id": "d03946b9-4af0-4e91-b305-9eea21377a8c",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "3a0e476f-b1d9-4e3a-992a-4895404a6028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a13d3808-aa13-436e-8813-097c6c29e1be",
        "cursor": {
          "ref": "76d453a3-e64f-4cf4-a487-a8e69fe38c50",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "af339955-9655-40ff-a5ce-e8375a921793"
        },
        "item": {
          "id": "a13d3808-aa13-436e-8813-097c6c29e1be",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "2da9e04e-cb8e-45f3-9ef5-049c7608e321",
          "status": "Created",
          "code": 201,
          "responseTime": 1954,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "628c380b-c054-4784-bf2a-81d5fdf69b9a",
        "cursor": {
          "ref": "75dc70e9-8baa-4ff9-aa30-7a91af01bccd",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0ff44795-f0cc-4d5e-af75-2be7633ba7f4"
        },
        "item": {
          "id": "628c380b-c054-4784-bf2a-81d5fdf69b9a",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "df974af7-10a4-47a7-9dd1-4fcea79b0fdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e484a822-3f01-48cd-b918-8a7218d9e807",
        "cursor": {
          "ref": "104965c8-6741-4ad9-b9a9-018dd42490dd",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "fb03ced6-aae2-4c10-852d-2623f3cf9fba"
        },
        "item": {
          "id": "e484a822-3f01-48cd-b918-8a7218d9e807",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "792b4a9d-b61f-4270-98c9-31c106008dd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67ce3da2-c90e-44fa-acff-c4d0dfb1b7e4",
        "cursor": {
          "ref": "213d8522-a6f6-4b1e-a100-e747fe5acaea",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2e80a2f2-b9fc-4928-a1be-f889bc3837ec"
        },
        "item": {
          "id": "67ce3da2-c90e-44fa-acff-c4d0dfb1b7e4",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "7072b2ac-5e22-41c2-a98c-89c0dfed2607",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d06da700-2d99-44f5-8da1-e6e3190b0545",
        "cursor": {
          "ref": "4baf3646-fed0-4e3f-99a2-0491b6d96fdc",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "38e96e63-7520-4487-aa20-38518e4ad600"
        },
        "item": {
          "id": "d06da700-2d99-44f5-8da1-e6e3190b0545",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "0466f046-a5d0-49f3-b910-40685f29a3b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a19e52c-3113-42a6-b657-fcbb19a8fc58",
        "cursor": {
          "ref": "b94cee73-ef1e-431b-aacb-22dc04d44866",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "7fc982f3-73ad-4123-914e-b0b04919eb37"
        },
        "item": {
          "id": "6a19e52c-3113-42a6-b657-fcbb19a8fc58",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "138b7ce8-91f4-4947-87f7-6ee26bd3857b",
          "status": "Created",
          "code": 201,
          "responseTime": 1092,
          "responseSize": 584
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "95489aec-14d6-4484-895c-5c49964e0712",
        "cursor": {
          "ref": "bf72f208-a022-4ba9-a595-9c48553e0901",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "489fed65-6280-4484-b4df-8140d63c1604"
        },
        "item": {
          "id": "95489aec-14d6-4484-895c-5c49964e0712",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "4c21f6eb-94aa-464f-bda2-4030fe91019c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce573e74-ffc9-4f76-bccf-2af9d05fa9ea",
        "cursor": {
          "ref": "37610027-2c8b-4a95-b2cd-8a8274de083c",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "9b9aeb15-e1ac-419f-810f-35597bf18700"
        },
        "item": {
          "id": "ce573e74-ffc9-4f76-bccf-2af9d05fa9ea",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "f2c93be7-e692-4e45-827e-aaeeb253cf84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "399356d1-f9d9-4405-9c0f-f7c56a401e56",
        "cursor": {
          "ref": "2672a63c-95c1-4368-ab84-636a9bb70fbc",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "8b0867c7-8ca5-426e-811a-dbc2eac7bfb8"
        },
        "item": {
          "id": "399356d1-f9d9-4405-9c0f-f7c56a401e56",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "fdbf607f-f53c-4c12-8e67-50da1ec60090",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84c41fe5-1faf-4c19-8cd2-29c4b9e3a1d1",
        "cursor": {
          "ref": "37235217-0f6f-4d81-a33e-a4e9836dbeab",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "68a6814a-62c7-4282-80ee-13e038670e84"
        },
        "item": {
          "id": "84c41fe5-1faf-4c19-8cd2-29c4b9e3a1d1",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "42593bff-451e-43ca-9f36-75a15d833def",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a45a4d9-285c-470e-988d-ab0668d3e99f",
        "cursor": {
          "ref": "c07a27e3-8b32-464e-8993-b51fd077cc10",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "03990ade-b28f-483d-bb3b-a90c2c3d1e19"
        },
        "item": {
          "id": "8a45a4d9-285c-470e-988d-ab0668d3e99f",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "6f46c5ce-f763-4ab8-999c-4068b1024946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f84ce083-fed4-4db4-8592-4a39447cceb2",
        "cursor": {
          "ref": "d8f26fcb-b57f-4506-8c94-55091cf8678b",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "4bb25ca5-825a-45f8-a047-25f9fc066f8f"
        },
        "item": {
          "id": "f84ce083-fed4-4db4-8592-4a39447cceb2",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "9b818329-ba87-44b7-be3e-5fbd39cfa33e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "631519b2-be1c-4e07-aefd-f199db753acd",
        "cursor": {
          "ref": "3490f9c1-76a1-487f-8423-77fa68cd1330",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "3d46c241-74c8-40a8-989e-0f10e66cf26f"
        },
        "item": {
          "id": "631519b2-be1c-4e07-aefd-f199db753acd",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "9e9d6c34-ee2c-42b4-8b2d-76f13d0557a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fb33952-2ae1-4d00-92c7-7bff9f295126",
        "cursor": {
          "ref": "3def5de3-6e2a-4bc0-94b9-520a893549f4",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "ae8d8f01-cc24-47f5-aaf6-9508afdfa5ed"
        },
        "item": {
          "id": "5fb33952-2ae1-4d00-92c7-7bff9f295126",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "99653cc0-f02f-4784-942c-bc4a21c4b564",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3064ca93-2f7b-4eb2-807c-8ef74d0beee8",
        "cursor": {
          "ref": "212152b1-2cbe-4c77-bf16-c80490180e3c",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "361b6204-5b73-4859-9d07-065874a57358"
        },
        "item": {
          "id": "3064ca93-2f7b-4eb2-807c-8ef74d0beee8",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "2bdbef64-7bb7-4c14-915f-0d3607aabc33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83099620-808d-4645-8239-8f0d25d40362",
        "cursor": {
          "ref": "400525ca-29ce-402d-a100-de7d35d56525",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "e2514dd1-9fbf-44f0-be4e-3f31f7d9f53d"
        },
        "item": {
          "id": "83099620-808d-4645-8239-8f0d25d40362",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "fe375fed-3a4f-485b-9bd5-706f813112ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c224b24-1883-439d-ac0b-8b596eb83628",
        "cursor": {
          "ref": "48a0e013-a317-462e-8592-df2adc35f3be",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f9e0cd8a-c522-40b0-ba17-22c2e2e04227"
        },
        "item": {
          "id": "6c224b24-1883-439d-ac0b-8b596eb83628",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "3b07b265-2865-44ee-bcda-fb3b1e0a87eb",
          "status": "Created",
          "code": 201,
          "responseTime": 1300,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "72d83645-de11-4199-bcc2-e221f0bcace4",
        "cursor": {
          "ref": "a84dbd26-0160-4b78-a7e2-21fe067a3bf7",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "cb52950f-39ac-4065-bfff-40c934a3b30d"
        },
        "item": {
          "id": "72d83645-de11-4199-bcc2-e221f0bcace4",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "c89bf49a-bf20-42f9-ad08-9b3a266b2883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 400,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e49183ba-4dd8-49c3-97b8-77ed5d7183e2",
        "cursor": {
          "ref": "67ad01bc-0b31-4fbe-90e3-3ab0debd76c2",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5a5efc7d-52d4-4790-96e6-39beffb0c126"
        },
        "item": {
          "id": "e49183ba-4dd8-49c3-97b8-77ed5d7183e2",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "1d594235-c6b5-47d4-92ec-2ea744688838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "680cbef8-bce2-4f38-89a8-a30f956c9e05",
        "cursor": {
          "ref": "4ced806b-a739-4560-8279-de2a16302b82",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4792975b-a34f-41c0-b0a8-2f025aa3fe3b"
        },
        "item": {
          "id": "680cbef8-bce2-4f38-89a8-a30f956c9e05",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "1dc2a5ff-925c-42b0-8129-35483049d89c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 338,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7167b89-7ad5-4a4f-bf97-3e4515c6635b",
        "cursor": {
          "ref": "c49c4f83-89ed-43ac-b082-095ffba02285",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "0bf1a5d9-1b8d-483b-ab1a-4a095ed93813"
        },
        "item": {
          "id": "e7167b89-7ad5-4a4f-bf97-3e4515c6635b",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "24a762a5-ab8c-4c10-b169-eb2b53345504",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd77a69f-46e3-4acc-8e1b-ab935ec4635a",
        "cursor": {
          "ref": "28cbd5bf-a899-4e0e-b4ba-5c9c93d261ec",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "b89fe0ae-93ec-480e-8c5b-015bc8f54dc6"
        },
        "item": {
          "id": "bd77a69f-46e3-4acc-8e1b-ab935ec4635a",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "397291f1-466d-4f2b-8cb8-c7c032ce3b4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d277c9c9-db4c-403f-9121-dab2da95f13b",
        "cursor": {
          "ref": "7a6abb76-e549-41f3-a8f1-bacbf90a2d3c",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d4573f02-9295-4a2d-a96e-7d2ad5ce1ecf"
        },
        "item": {
          "id": "d277c9c9-db4c-403f-9121-dab2da95f13b",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "e29caf57-e1e6-4a2e-9db4-4ac129090fc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d3793a9-3ab3-4f5e-acb9-ede4ab28607f",
        "cursor": {
          "ref": "d1ef0ed7-e337-41c8-b3be-90881022615c",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "7d37ba7c-a1db-4af9-98d6-00338ec423cc"
        },
        "item": {
          "id": "3d3793a9-3ab3-4f5e-acb9-ede4ab28607f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "efb4725f-ab33-4b93-b415-4255848eb3ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc5fe2b8-9302-4569-8744-dee2710b072c",
        "cursor": {
          "ref": "d70bee63-5321-4795-a686-f473880811e1",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "28f58fb4-9354-4d82-8fb4-1eaeb871567d"
        },
        "item": {
          "id": "fc5fe2b8-9302-4569-8744-dee2710b072c",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "a08260c8-1722-4e6f-84fc-ec906397a0bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c93f56d-261f-4593-bcd3-6a4c4de4c983",
        "cursor": {
          "ref": "fb7631e7-3486-418c-8392-43442799d174",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "33de576b-61e0-4fbe-9d12-7dd210344e4e"
        },
        "item": {
          "id": "2c93f56d-261f-4593-bcd3-6a4c4de4c983",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "7bbcf5f2-a64e-4fad-9c84-b445865f35a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a53c58c-660b-4eb7-add2-21595d4373d1",
        "cursor": {
          "ref": "d4d08a7a-a435-45d2-a79c-e0265e95c4e1",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "fce59a88-fb84-4694-bcb2-04cce9272b08"
        },
        "item": {
          "id": "9a53c58c-660b-4eb7-add2-21595d4373d1",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "0952224e-ebad-4608-8432-4620fb2d45b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91e8e558-80d8-4131-8576-3be2801ea526",
        "cursor": {
          "ref": "97a88cd4-e89e-4284-afb5-9b2ad3cdd588",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "3b91c3fb-7e07-4a9d-801c-950f9c2085c0"
        },
        "item": {
          "id": "91e8e558-80d8-4131-8576-3be2801ea526",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "06d19e29-9636-4e21-b511-7643faf4941c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b557b4c8-5bfa-40a0-a1a6-8ee657ac9908",
        "cursor": {
          "ref": "00b8b5cc-09af-4488-8b2d-53b61b622e34",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "653335be-5c51-4f50-bb4c-4483d7c85231"
        },
        "item": {
          "id": "b557b4c8-5bfa-40a0-a1a6-8ee657ac9908",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "317eaee1-c568-44e4-9e4e-388ec1e9898f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdc0ded7-abc2-4936-bca5-59c08845b689",
        "cursor": {
          "ref": "f4f5a9e6-7333-4069-9058-aa168623792b",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "253bf383-f6b5-4012-94aa-b63ab3592f35"
        },
        "item": {
          "id": "bdc0ded7-abc2-4936-bca5-59c08845b689",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "34a6cd24-bf42-46c9-9ba6-c62d987c54ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 844,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "81ee8fd4-36c1-44ec-b3ae-e4a4c4baece8",
        "cursor": {
          "ref": "7d5ca740-64cb-4f58-930d-0de6e94ffa05",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "6f96c08a-e8bc-4236-8a2a-5517e1a0fd91"
        },
        "item": {
          "id": "81ee8fd4-36c1-44ec-b3ae-e4a4c4baece8",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "34eda1b0-a5dd-4400-a7e3-494c5665a45b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28fa643f-f44c-4735-bc3a-d388b967e541",
        "cursor": {
          "ref": "03b83b13-8a2c-485b-b8bf-c5ba3ac3a30c",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "ef0402b5-c4d5-4bbd-9161-3de00fe04468"
        },
        "item": {
          "id": "28fa643f-f44c-4735-bc3a-d388b967e541",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "e4b0fb6a-7ffa-4fa3-8b36-2ef9c200ae87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e42e4e75-8f45-4109-b74a-7dbcf05b651d",
        "cursor": {
          "ref": "cb385f19-4fed-48bc-ba72-2950ef13502e",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "5c5f4ea8-cb41-4364-a513-fe477c43d1db"
        },
        "item": {
          "id": "e42e4e75-8f45-4109-b74a-7dbcf05b651d",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "abb0badb-0bff-48e7-aab4-cae63e742bbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a86a7ca-6301-42f7-afa8-9f2bb4f58b34",
        "cursor": {
          "ref": "21c5d4c1-e76e-4bb2-8a7a-843a2e0d149f",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "de5e0712-8ed1-49f1-932d-0584eb1fe338"
        },
        "item": {
          "id": "1a86a7ca-6301-42f7-afa8-9f2bb4f58b34",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "7deb0ba0-b601-47d8-a748-bdcd5535f8c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea0abbb6-7ef3-44cd-9f6a-3028af6f0205",
        "cursor": {
          "ref": "f2bd7cfa-06b6-43a1-89e0-5e225ddc9e08",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "ef4239d6-53b1-4b83-9224-58a519f70804"
        },
        "item": {
          "id": "ea0abbb6-7ef3-44cd-9f6a-3028af6f0205",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "20f4e15f-1e71-4842-8a97-44c2496c6c95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c6b2a75-7d37-4fa4-8fe0-0ce28d46d37f",
        "cursor": {
          "ref": "2b505b17-1b74-4a9a-aeb8-7e2f25dc77ad",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "c9f9aa12-6a02-4517-bb05-619f509b6904"
        },
        "item": {
          "id": "6c6b2a75-7d37-4fa4-8fe0-0ce28d46d37f",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "01a2a13f-a67e-41f8-ac4e-d0db806fc5fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ef07d82-b6e3-4fd3-9731-8f50e4dbc846",
        "cursor": {
          "ref": "f5c5b36a-887d-4430-84a9-21fbfa19dab8",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "4cd23a82-34bf-43ee-8a11-d110cae47b54"
        },
        "item": {
          "id": "4ef07d82-b6e3-4fd3-9731-8f50e4dbc846",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "5ef768f8-4a74-4bb4-ba70-1c74a86d6a52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 228,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "61a248d4-e2e3-4ba9-8358-28dbe06d2e18",
        "cursor": {
          "ref": "8d714c9f-9ce8-46ac-bbb8-53aa12bcc18d",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "93b9fd9a-4a3b-4d88-b335-d8706d1642b8"
        },
        "item": {
          "id": "61a248d4-e2e3-4ba9-8358-28dbe06d2e18",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "107fc869-5786-46a4-a8be-be58b0782ffb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "741ef0dc-315c-417b-b6bc-a91b849f259d",
        "cursor": {
          "ref": "8a791f4c-ca84-459a-adf6-39b000c8a0d8",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "25d8ca69-3350-4792-a98f-56212fd18646"
        },
        "item": {
          "id": "741ef0dc-315c-417b-b6bc-a91b849f259d",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "951f5741-ad11-4ce9-97f2-4426065fa4ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d99ac5b-1787-4c0c-9bd1-8558d35d2093",
        "cursor": {
          "ref": "b6c70276-d5fa-4fc4-a295-3c036bf76cea",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "cc757335-f68a-4546-a5d6-ed0ae8a5f87b"
        },
        "item": {
          "id": "9d99ac5b-1787-4c0c-9bd1-8558d35d2093",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "851c48a2-562a-408f-af7e-db53ea3c0b9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e762b46e-3fa0-407a-ba96-2b51af4a9bf5",
        "cursor": {
          "ref": "ea6e5801-9b6b-4dd2-be39-46f7ca26a4f4",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "556441b6-f092-472f-a5ab-46e81180fa66"
        },
        "item": {
          "id": "e762b46e-3fa0-407a-ba96-2b51af4a9bf5",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "5984c92f-d740-4227-ab04-26ea84d38c0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b648a3ca-241c-48df-904a-3a49798a3ef1",
        "cursor": {
          "ref": "277d83d2-6d47-4368-8e17-7fe282090cb9",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "761ac33c-321a-4037-a5f8-a08eeb3ce677"
        },
        "item": {
          "id": "b648a3ca-241c-48df-904a-3a49798a3ef1",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "3fb903b0-6340-4ab6-a9e1-c50e94805b2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 211,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "349b7cb6-fa15-46fa-9fa8-95af7c17ac2b",
        "cursor": {
          "ref": "7f648abe-c7ef-4553-a522-6697d9ef9ea2",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "6bc76318-f235-4d2c-abec-e9c67b5ff44b"
        },
        "item": {
          "id": "349b7cb6-fa15-46fa-9fa8-95af7c17ac2b",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "f321d66c-926f-47c2-b133-c4d04c183149",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37de2f0e-7211-4406-8f15-1ae0988472d6",
        "cursor": {
          "ref": "edc940e2-b28c-4c0d-90d8-62e3df49c877",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "3ae5591b-c278-427f-94ae-af24133bb0ca"
        },
        "item": {
          "id": "37de2f0e-7211-4406-8f15-1ae0988472d6",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "2feab527-cbcd-4b62-a8c2-689beb1cb2c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c9aa764-8ec1-4a8c-9ffc-e228a978984c",
        "cursor": {
          "ref": "66abcd17-941d-49d8-b306-a6370eb0bd96",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "d420c3fb-a8a3-44e2-bed0-eb419e12128a"
        },
        "item": {
          "id": "8c9aa764-8ec1-4a8c-9ffc-e228a978984c",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "e439a92a-0930-46e9-b95e-fb1f99716016",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18ed0df8-0e88-4d6b-b8af-e268789ce162",
        "cursor": {
          "ref": "a4cfba3e-3868-46c9-824c-f4beb109bbbf",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "feed33c6-9403-4d7a-85bf-fda871bbb193"
        },
        "item": {
          "id": "18ed0df8-0e88-4d6b-b8af-e268789ce162",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "b9e53648-bc33-4e01-aea9-3c39c4b20092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "672955d8-77e9-4b82-afb4-43fc7f063b56",
        "cursor": {
          "ref": "edbfd2f0-4665-4483-98ca-a570e7188197",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "bbce5f94-d655-4562-84e5-b9fa5d8e2e53"
        },
        "item": {
          "id": "672955d8-77e9-4b82-afb4-43fc7f063b56",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "d955151f-b5f0-4b4e-ba6e-4c86e2cfdd91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e92060a8-fab1-4839-a314-4dca808ac306",
        "cursor": {
          "ref": "6feb2df4-a897-46b8-9c5e-5e8e0bf4e6d5",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "6978cd00-eda6-483a-bfb5-0bcfefca25ec"
        },
        "item": {
          "id": "e92060a8-fab1-4839-a314-4dca808ac306",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a927af44-f8b0-4fc1-b70c-510b57da1e12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e8fc573-7a77-4d58-860c-9f7071e739aa",
        "cursor": {
          "ref": "fb8ae475-74b7-454d-8943-2e576bcad8e1",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "c2afa3e6-258a-469e-ad15-b557b19f52a9"
        },
        "item": {
          "id": "0e8fc573-7a77-4d58-860c-9f7071e739aa",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "9f949a7c-1424-4419-bfa2-2620c586c74a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73f8903b-3f17-45a3-bca8-cfce95b4c645",
        "cursor": {
          "ref": "ec5c0a6f-12cc-4251-944e-78f3a3add7c9",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "326c1d56-929d-4bac-983e-73a4d0a3624a"
        },
        "item": {
          "id": "73f8903b-3f17-45a3-bca8-cfce95b4c645",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "da07618e-d438-4a72-9a0f-e82cb22f0a68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bad156c9-a907-438a-8f7a-ee62f3cdaf35",
        "cursor": {
          "ref": "566c038c-c7cb-4e89-b65c-e5d321c4732c",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "3cd3bb6b-574d-463b-892f-71519f2d366c"
        },
        "item": {
          "id": "bad156c9-a907-438a-8f7a-ee62f3cdaf35",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "575c2cbe-2f1e-43e9-a91d-1441277b3de2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b61d1087-f5ac-4178-990e-85247eff8c7e",
        "cursor": {
          "ref": "ab70cb47-dec6-4aac-b41a-5bd2ea4b4895",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "8399e518-d1bc-4532-91a2-0d5fc63a8bdf"
        },
        "item": {
          "id": "b61d1087-f5ac-4178-990e-85247eff8c7e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "4ab3f6d7-4ec9-418c-b6d7-e90040d42f4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "713cb7a6-e5d6-4990-99ea-388ec4ae4658",
        "cursor": {
          "ref": "4fa8cd1a-eeec-4638-9154-7dc0b57eaf67",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "21265525-7c84-43d2-8f4d-117e4f0d1090"
        },
        "item": {
          "id": "713cb7a6-e5d6-4990-99ea-388ec4ae4658",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "92a9e7c3-640a-4a35-be20-921cdb26af17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b0106bb-8ef1-4a1f-acd4-af286c9e45e9",
        "cursor": {
          "ref": "f2554a57-4e20-4990-ae7b-70193b05dc0a",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "3732fa1f-10c3-4d02-be4a-880c737293c3"
        },
        "item": {
          "id": "3b0106bb-8ef1-4a1f-acd4-af286c9e45e9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "511c4404-1b02-4acd-94c8-2cb75992e2f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faf6ef7d-f1bb-470e-b1c5-65346ff29d39",
        "cursor": {
          "ref": "748611b3-9bb9-4a99-8e98-b36edb5c0d89",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "1dd0fc97-2d71-48f6-af22-befdfc4e19ac"
        },
        "item": {
          "id": "faf6ef7d-f1bb-470e-b1c5-65346ff29d39",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "f33d751a-907a-449f-92ad-32a649760b1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68741f4a-6955-42ab-8316-3c62252a453a",
        "cursor": {
          "ref": "814cb178-ffc2-498f-a39a-a58221d3ba9d",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "a7ad95cb-278f-4031-870a-a863f84629a5"
        },
        "item": {
          "id": "68741f4a-6955-42ab-8316-3c62252a453a",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "2ab3ab57-851f-430c-8560-2f6e36d25e1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5050caad-a931-4df1-880f-8bbfd2cde0b3",
        "cursor": {
          "ref": "2bd3d2e2-44a2-4eb7-a5d3-18922693e711",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "0c4c094f-f20d-4fe6-9941-0b48fe2efdbd"
        },
        "item": {
          "id": "5050caad-a931-4df1-880f-8bbfd2cde0b3",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "4bc1ff31-e9f8-4466-8ff9-241addbd54af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91403b25-ac94-4d12-b32c-7d51c91b96b1",
        "cursor": {
          "ref": "8b7afb6c-28cb-440c-9822-baf7531f3838",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "0a1023c6-98da-4d4f-a9f6-aeebed730047"
        },
        "item": {
          "id": "91403b25-ac94-4d12-b32c-7d51c91b96b1",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "ca8f824a-9edb-4794-a3c2-baa66a518d84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3988bcda-1737-4863-8b0f-ee4c6c10243f",
        "cursor": {
          "ref": "bd763ee1-f37d-44ed-bd76-7da31b11e9c0",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "626568fc-6c86-449a-90c0-b1ef8af232c0"
        },
        "item": {
          "id": "3988bcda-1737-4863-8b0f-ee4c6c10243f",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "12d44384-9249-4754-a1aa-cf325ca7128d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "692ad7d5-a7ac-4b87-acce-ced3a45f4ce8",
        "cursor": {
          "ref": "5ab72a34-7390-478a-9922-8910e5f8ad9d",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "f9b711d2-767c-4238-80be-41ac108ee676"
        },
        "item": {
          "id": "692ad7d5-a7ac-4b87-acce-ced3a45f4ce8",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "0c4ae263-0ec9-472c-b23b-d1e3c8e3099d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2f7dd7a-6192-406d-8731-9a25cf5a8330",
        "cursor": {
          "ref": "1007955b-a4dd-43d3-a056-ed98ac5c5388",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "2180c23a-803b-4e45-a0f6-1f4f4cf5c62c"
        },
        "item": {
          "id": "a2f7dd7a-6192-406d-8731-9a25cf5a8330",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "9d223b2d-06dc-4183-8eab-a5ed1547bcf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01abc83e-ee2d-477f-9123-dbb534ad8405",
        "cursor": {
          "ref": "d9fed1a6-79de-449b-be94-7393ad915c57",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "cf305a83-e61d-405f-bd52-85c9b979d671"
        },
        "item": {
          "id": "01abc83e-ee2d-477f-9123-dbb534ad8405",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "faa96a1a-46fa-440d-9a8b-b0d3f40ddd21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61ac7533-4ec2-4271-87d6-e62892c34248",
        "cursor": {
          "ref": "d7b6eaad-b4c9-407e-8d79-009c8409340c",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "19cefac5-b4ec-4870-88eb-e11839e719b0"
        },
        "item": {
          "id": "61ac7533-4ec2-4271-87d6-e62892c34248",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "853d2cad-6765-4fe0-a026-6c78c9da538a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48d5e3eb-e4cc-4127-b105-ed975a173464",
        "cursor": {
          "ref": "0004ce00-9be2-43ec-adbc-debdede2baec",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "5830aff3-2b32-40d6-998c-403a7a391998"
        },
        "item": {
          "id": "48d5e3eb-e4cc-4127-b105-ed975a173464",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "f26f8565-fe35-4abf-ae56-cf8c0f23b5dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6456dd53-d2be-4056-baf8-90dc7e26e3da",
        "cursor": {
          "ref": "deb74f29-053e-4e75-927e-185c7e6afd76",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "6d1092d6-0b95-47a2-9783-0a1cfaea9064"
        },
        "item": {
          "id": "6456dd53-d2be-4056-baf8-90dc7e26e3da",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "2968d162-3501-4540-bdc8-78fabcace0a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a60e0413-52c9-475e-9a18-5439f84a4c84",
        "cursor": {
          "ref": "ee6a8118-4546-4875-aa63-9814b458c3ed",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "4b4ee8a5-38ed-437b-82e5-d1fb3d5d4e1d"
        },
        "item": {
          "id": "a60e0413-52c9-475e-9a18-5439f84a4c84",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "91a021b7-0c20-4e82-ba90-3802482a658f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7ebe582-4540-4717-865f-a2830be10db6",
        "cursor": {
          "ref": "d51cd6ce-7cee-42f5-9475-fa9a553f96a9",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "4dbd318b-a407-4d16-9ce0-c554dc46b173"
        },
        "item": {
          "id": "e7ebe582-4540-4717-865f-a2830be10db6",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "f87a06f8-4fb1-446f-a19b-36b193e3df76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61c79115-347f-40ad-b8dd-a3674c02ebb5",
        "cursor": {
          "ref": "b906f0ec-93f4-48be-a986-fb057f2cca2f",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "fadfcb2a-42c0-49cf-aebe-e1a370f47d15"
        },
        "item": {
          "id": "61c79115-347f-40ad-b8dd-a3674c02ebb5",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "8205d708-87ea-423f-b6de-cf2f0465c216",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 287,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c661666c-1620-4216-97d3-0f9e281a8688",
        "cursor": {
          "ref": "f28513ab-f573-4505-a632-1b6f37628a59",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "7e8353f0-d253-487d-a7c8-4b2191d236fa"
        },
        "item": {
          "id": "c661666c-1620-4216-97d3-0f9e281a8688",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ef944f78-a87f-417a-bc79-ed6a0f2ed435",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d3f3b5d-7ef3-40cc-a214-82165b0cd390",
        "cursor": {
          "ref": "430f1d68-0117-461d-8ac6-dfe1d1bddc6c",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "4fbc4d0e-2aae-42b4-bf1d-ed2d65f1b0d6"
        },
        "item": {
          "id": "7d3f3b5d-7ef3-40cc-a214-82165b0cd390",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "b4377877-7ffd-4069-9848-af16d593f142",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f286155-2254-4424-8fef-e49f7c2bcc44",
        "cursor": {
          "ref": "f358da34-25fa-441e-859a-eb55177a0ac9",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "9d96c713-aa56-4abc-88c5-b8ad08402276"
        },
        "item": {
          "id": "6f286155-2254-4424-8fef-e49f7c2bcc44",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "98b8d212-3759-4bb2-acf8-265b4958e821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08a9abc3-607c-452d-ac59-3a380961af90",
        "cursor": {
          "ref": "5fbadbe3-e5b7-4f1d-b4b7-8a789a14db94",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "71ba8f7f-ddb8-4e6c-a380-1b4969b41624"
        },
        "item": {
          "id": "08a9abc3-607c-452d-ac59-3a380961af90",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "f6379732-bc21-4ca5-b8cc-a0eeefbc05c6",
          "status": "Created",
          "code": 201,
          "responseTime": 449,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "8fefcab4-aa31-4aa3-a22b-26c2a917d4c2",
        "cursor": {
          "ref": "943fa0f1-3c22-4d2d-ae6d-81930f335d4b",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "2b8eb610-f08b-47d1-aaa8-1f4fbe6da54a"
        },
        "item": {
          "id": "8fefcab4-aa31-4aa3-a22b-26c2a917d4c2",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "34a49d03-b53e-4316-86b7-7ef64c288053",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "488be3e0-9d16-4f4d-b47a-328b326cfb1b",
        "cursor": {
          "ref": "b091f131-ea1d-462b-a37b-5b02bd2a8576",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "eb885217-581d-4bd2-a02a-f754766c1ed0"
        },
        "item": {
          "id": "488be3e0-9d16-4f4d-b47a-328b326cfb1b",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "5e6edba1-5e66-47eb-a02c-ac1583f4b831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b91a43d4-87ad-4410-9a2d-0de7f8be5e86",
        "cursor": {
          "ref": "344bd7d6-afee-4c32-80e7-64e6e04ed65c",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a1d4caf8-c177-4414-aaca-e910a465e4a1"
        },
        "item": {
          "id": "b91a43d4-87ad-4410-9a2d-0de7f8be5e86",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "c71f65e2-52c6-4ee7-86cb-65ccbd456d85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "949f34e2-70e2-424c-a591-11baf8379c9d",
        "cursor": {
          "ref": "f63a7bed-869f-42c1-83ba-e1ad453a642e",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "b862f10e-1b95-40ba-9f66-a4d71d8b4ca0"
        },
        "item": {
          "id": "949f34e2-70e2-424c-a591-11baf8379c9d",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "c46d2599-61cd-4d25-b4c3-3eb2bc377108",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bc160a1-2964-452c-ac31-1b273410903b",
        "cursor": {
          "ref": "0ffc5fdc-8616-435e-83e7-7318d7b6a63c",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5a0abc92-56b8-46bc-b0e9-5ed17c289884"
        },
        "item": {
          "id": "8bc160a1-2964-452c-ac31-1b273410903b",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "381e8f77-ee88-4611-a009-f05c93dfb2e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "873fb00e-6cdd-4466-87d2-e56bcbfce35a",
        "cursor": {
          "ref": "bbb0ae1b-3bca-4c4d-a18f-9071efabde4a",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "ea8704e8-836f-4cbb-82f7-658ff8336f42"
        },
        "item": {
          "id": "873fb00e-6cdd-4466-87d2-e56bcbfce35a",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "cd51c01f-cc7d-48d8-9986-ae80d8ae9dd4",
          "status": "Created",
          "code": 201,
          "responseTime": 1981,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "bb33f488-8b68-475b-962f-08886a0fe496",
        "cursor": {
          "ref": "3cb1be22-1cc4-47d8-ae80-5c3e31750b6d",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e4ab5c91-cf9c-44a8-84d5-8fbcdccdf090"
        },
        "item": {
          "id": "bb33f488-8b68-475b-962f-08886a0fe496",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "3b2466ab-5234-4290-b64c-635ad5776c1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7be1c872-8c37-45a1-a2a8-f9d817294a50",
        "cursor": {
          "ref": "36cca472-2cf8-4161-b7c6-761c9638d934",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "695bf134-d7d4-4ce5-92d1-85e6d6753216"
        },
        "item": {
          "id": "7be1c872-8c37-45a1-a2a8-f9d817294a50",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "46eda346-367f-42dc-bb4a-36ef60c0d838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4265ae73-1431-4303-92ff-103b6bba3ba7",
        "cursor": {
          "ref": "0419dd7f-5a8c-4215-afb2-7de9a3e3cf59",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "ae0a0668-4c2a-42e5-ba4d-4c1b4f4ebd0e"
        },
        "item": {
          "id": "4265ae73-1431-4303-92ff-103b6bba3ba7",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "92dc2091-e0c4-4b3a-9bb9-09ac7c81e200",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f68dd24-df9d-46db-b466-09d2bf111847",
        "cursor": {
          "ref": "cd1365a1-f1e4-4904-b221-ef8b157fea85",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "b2f25060-5308-4002-99d5-a36856ed28fd"
        },
        "item": {
          "id": "2f68dd24-df9d-46db-b466-09d2bf111847",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "32074052-013c-4325-a9e5-5fe00ecd3cb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 188,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0d44a00-23fe-444d-9625-d13db363fd7c",
        "cursor": {
          "ref": "90e4a79b-6b4d-4960-bae8-244d06ccd77c",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "c6a3b2ae-aed9-49fe-999c-479db07996bb"
        },
        "item": {
          "id": "d0d44a00-23fe-444d-9625-d13db363fd7c",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "cdc76e8a-78ff-455c-b869-e7801609b01e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee4db053-d865-4723-bb8e-41678502daee",
        "cursor": {
          "ref": "dfec05e0-a5ac-47ff-babc-d053ed43cc36",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "d02ab25c-589a-4a3f-bfea-10117554fd9b"
        },
        "item": {
          "id": "ee4db053-d865-4723-bb8e-41678502daee",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "05ad4e08-d4ca-43b1-baed-0693a5cff188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 283,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1077a0a6-109c-4f20-be2d-c25cb0bb6fad",
        "cursor": {
          "ref": "af8c67cf-c47f-477c-bc68-8792ec425b9f",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "5ce269e7-a016-4b25-8637-0e51d05d32db"
        },
        "item": {
          "id": "1077a0a6-109c-4f20-be2d-c25cb0bb6fad",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "cc2483b7-189f-4a0c-95af-3053b180c498",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61bd641d-ac57-4fce-9287-38d4b28fe93c",
        "cursor": {
          "ref": "8380b056-15c1-4452-9f93-e87ed5d55c98",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "69273761-a79f-4464-999a-5286da5fc9c1"
        },
        "item": {
          "id": "61bd641d-ac57-4fce-9287-38d4b28fe93c",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "90d05b78-a434-416c-84bf-ee0ba8a633c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 224,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bdd5bd1-7381-46b2-8eda-48e0573ffd35",
        "cursor": {
          "ref": "4598ae6f-bf34-4e69-a9c2-8bbc171a930e",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "954f332d-54ac-427c-a9ee-ddab8ee0d44f"
        },
        "item": {
          "id": "7bdd5bd1-7381-46b2-8eda-48e0573ffd35",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "317606a5-2ec9-4f5c-8464-b9e87d1f5e21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 210,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "c6629838-90c8-4b2f-b015-039ad5c1d5c2",
        "cursor": {
          "ref": "3bec3ae9-fcae-44a9-bde0-c8e626663bc3",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "c0e5d977-f279-4852-820d-6b0dfa8efb75"
        },
        "item": {
          "id": "c6629838-90c8-4b2f-b015-039ad5c1d5c2",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "339d834d-4d54-498e-8e4c-ceea05e07428",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 189,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "14e94ca5-94c7-4f5d-9773-62e7a65f5ebb",
        "cursor": {
          "ref": "fafee5eb-260f-4c76-a1c2-94df8ae9c68b",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "44414f5a-fd03-44b7-9c4e-df009cba9436"
        },
        "item": {
          "id": "14e94ca5-94c7-4f5d-9773-62e7a65f5ebb",
          "name": "credentials_issue"
        },
        "response": {
          "id": "684abb43-6179-4c35-90e1-a96b2eb997ba",
          "status": "Created",
          "code": 201,
          "responseTime": 2623,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e674f55-cc31-43af-8ace-c98528f7793f",
        "cursor": {
          "ref": "5c59328f-eed8-4f04-b0e9-50750a9b1441",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "13edb3fc-c3c5-4358-89c0-26a628366e5b"
        },
        "item": {
          "id": "2e674f55-cc31-43af-8ace-c98528f7793f",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "8befb805-dd5d-4c2e-9d12-344db7bb24ac",
          "status": "Created",
          "code": 201,
          "responseTime": 1724,
          "responseSize": 591
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26085cf1-ddbf-47d3-b5cf-2d2746b22a8b",
        "cursor": {
          "ref": "37a9d749-f064-44d8-be0e-ad2a24c5949e",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "86992237-d163-4877-a3cf-4508e564b68e"
        },
        "item": {
          "id": "26085cf1-ddbf-47d3-b5cf-2d2746b22a8b",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0a8f5863-63a0-48c6-b2cd-01a1bffae46f",
          "status": "Created",
          "code": 201,
          "responseTime": 474,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c97714a9-e0eb-4e31-9c52-9346be6170e2",
        "cursor": {
          "ref": "220b1f6b-12cb-4cac-abc3-4dd691c9e2eb",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "56f00aac-aac8-4769-b4f0-ceddcc931388"
        },
        "item": {
          "id": "c97714a9-e0eb-4e31-9c52-9346be6170e2",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "22673d32-7436-4cb2-a06a-fd5c84b57b60",
          "status": "Created",
          "code": 201,
          "responseTime": 436,
          "responseSize": 560
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7143aa26-e7e9-466d-bc37-d3161c486f65",
        "cursor": {
          "ref": "bed5650f-35cc-4be9-9ccc-b161c95e4ed4",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "189053a4-7032-4a79-ae80-b886a74fabcc"
        },
        "item": {
          "id": "7143aa26-e7e9-466d-bc37-d3161c486f65",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "3bfed7c8-c641-49a8-a332-9ce049f3f90b",
          "status": "Created",
          "code": 201,
          "responseTime": 448,
          "responseSize": 528
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e45c07c-d33e-41ae-b747-048f1fd6076b",
        "cursor": {
          "ref": "20075495-ad83-4afd-919f-f2d8a740d3ba",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "ae4f082b-4273-4061-aece-2e9689ad5e5c"
        },
        "item": {
          "id": "7e45c07c-d33e-41ae-b747-048f1fd6076b",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "97bb86a1-01fd-4a05-856e-86fad89890ea",
          "status": "Created",
          "code": 201,
          "responseTime": 477,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebcd90ad-2f87-4d33-b76d-5c3a89d41781",
        "cursor": {
          "ref": "d2cb2d40-d294-45d6-a9fd-bc29f775dc7b",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "0af893f3-fe9b-43cf-b12d-6a25b16a4459"
        },
        "item": {
          "id": "ebcd90ad-2f87-4d33-b76d-5c3a89d41781",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d3cc8659-a75b-4be8-8845-b1c06f6aa672",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "ebcd90ad-2f87-4d33-b76d-5c3a89d41781",
        "cursor": {
          "ref": "d2cb2d40-d294-45d6-a9fd-bc29f775dc7b",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "0af893f3-fe9b-43cf-b12d-6a25b16a4459"
        },
        "item": {
          "id": "ebcd90ad-2f87-4d33-b76d-5c3a89d41781",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d3cc8659-a75b-4be8-8845-b1c06f6aa672",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "e7efb3ab-6e1a-413e-9ca7-372452b19dc9",
        "cursor": {
          "ref": "9af48740-ad2a-45c4-a796-ef847de37dd0",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "c9491871-4313-4f5a-b5bd-0557ac3792a3"
        },
        "item": {
          "id": "e7efb3ab-6e1a-413e-9ca7-372452b19dc9",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e69c1b27-5d7d-47f5-a509-7b20caa7573c",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "bd846372-6968-49c8-8e25-bcfb577bf3dd",
        "cursor": {
          "ref": "1e85c8a7-57bf-4a94-ba22-447db2413bec",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a9cb327d-b810-47d4-a573-10c5cf4e31ae"
        },
        "item": {
          "id": "bd846372-6968-49c8-8e25-bcfb577bf3dd",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "0b09e503-8d53-4028-878a-20d46b689198",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "0ac0eb03-b240-4aeb-9b4e-993634e59cd2",
        "cursor": {
          "ref": "b791bae3-9ca7-4f12-8e76-b24b505a5445",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "70fa051b-4de0-4351-9a1a-6121d5710898"
        },
        "item": {
          "id": "0ac0eb03-b240-4aeb-9b4e-993634e59cd2",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "6062a697-e97d-4151-a026-1d6f5a20e5f7",
          "status": "OK",
          "code": 200,
          "responseTime": 22,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "e55f37b5-87ba-4524-9574-2b54026526c1",
        "cursor": {
          "ref": "89c10176-3cbc-4adb-99d5-446067ffa443",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "4be245fe-3c6c-4a7c-b0d6-7ecf5abf7c03"
        },
        "item": {
          "id": "e55f37b5-87ba-4524-9574-2b54026526c1",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "e15df025-71d7-49ee-96cd-9caefee124b4",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "46186a15-2dcc-42b4-81c4-c17ac4ede1fb",
        "cursor": {
          "ref": "d88b31db-4813-4be1-92ca-8b12a3ecd45d",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "874e140c-6263-4cd0-be44-9f307a003b11"
        },
        "item": {
          "id": "46186a15-2dcc-42b4-81c4-c17ac4ede1fb",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f776e96d-c5e9-4ea5-a9d1-14a8751971e3",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "71a2ec57-cf85-476c-a4c3-bdb9f7529a1e",
        "cursor": {
          "ref": "3fa2d27b-570e-48d2-a055-f391eee366f0",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "e57e3ac5-0251-4b25-aa4c-3d1294015267"
        },
        "item": {
          "id": "71a2ec57-cf85-476c-a4c3-bdb9f7529a1e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "51d9b1db-801f-4668-abbe-f7614f427b19",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "67627aaf-d9c5-4488-aa22-6ecfa47e916e",
        "cursor": {
          "ref": "888b2821-6e16-41de-ab4a-56f4f50586d3",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "90677835-0057-4814-8ee0-d61d5a815273"
        },
        "item": {
          "id": "67627aaf-d9c5-4488-aa22-6ecfa47e916e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "b34e7668-18f5-4f94-a4af-00af2c810e6b",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "e331fde3-a679-4630-a4df-2c99459cc43e",
        "cursor": {
          "ref": "4d5fdaca-682f-4676-9b46-ef889061c65e",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "c9bd3f4c-e23b-4847-9b06-3e6c61443ab8"
        },
        "item": {
          "id": "e331fde3-a679-4630-a4df-2c99459cc43e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c3d51562-d73c-4379-a1bd-8aa65a575341",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "1d1fd1d8-9f58-4cd5-8df0-b9d97a0e65f3",
        "cursor": {
          "ref": "6c21e9d9-76bb-4bd2-b009-81dc325e6740",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "0937428f-4016-49aa-a65e-97bc9e2c9ab0"
        },
        "item": {
          "id": "1d1fd1d8-9f58-4cd5-8df0-b9d97a0e65f3",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "aa31a1e9-feaa-4a73-a00e-12cab66edea9",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "3080fd94-2853-480a-875f-9578b16379f3",
        "cursor": {
          "ref": "6e3aebcc-fdb4-47f3-ab7c-8c8438e5614d",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "8310ad8d-ce30-484c-abc5-ae5fd2bee312"
        },
        "item": {
          "id": "3080fd94-2853-480a-875f-9578b16379f3",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b28941e3-34f9-4886-a76f-d24680435c47",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "3f10fe8e-448c-4da8-a97b-f7748e4a978d",
        "cursor": {
          "ref": "7c647b5d-b45e-4a37-a770-227d879852ec",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "44f1b247-69f8-4593-9151-8d04679ff43a"
        },
        "item": {
          "id": "3f10fe8e-448c-4da8-a97b-f7748e4a978d",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "6183193e-106b-4dff-a577-3e8b1d532047",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "1615751f-6f01-440b-83f7-20d0ebe1df40",
        "cursor": {
          "ref": "c0e06539-3bdd-44d6-82af-9e04d49e3570",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "2071cc24-c383-45aa-b4f2-f67c8955377b"
        },
        "item": {
          "id": "1615751f-6f01-440b-83f7-20d0ebe1df40",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "f678126c-b5f0-4d20-a5f9-7e0d4fa5b169",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "934c3fb8-e0c0-4045-9baa-4cb634fed106",
        "cursor": {
          "ref": "5602795b-a989-4150-a40c-ada122578e8c",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "452fd020-ab0c-4ac7-a3c9-b2bc89500fa6"
        },
        "item": {
          "id": "934c3fb8-e0c0-4045-9baa-4cb634fed106",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9f673d02-69fc-4108-bbdf-83f27e4d9b33",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "69690c63-5fc3-4b00-9d58-b81a608235c6",
        "cursor": {
          "ref": "a1311250-6d97-4e12-93f9-aab465858183",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "40d36336-911b-4ad4-8abc-ef5ec4be45c2"
        },
        "item": {
          "id": "69690c63-5fc3-4b00-9d58-b81a608235c6",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "876010b3-4ac6-467d-953a-e29c6967d6d1",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "a584d15e-9ceb-4a2b-a5d2-b394f76e3b89",
        "cursor": {
          "ref": "5586a155-1d49-4f9b-b614-d669eff52e53",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "701567c0-b1d2-4579-aa15-fd9e0b322e56"
        },
        "item": {
          "id": "a584d15e-9ceb-4a2b-a5d2-b394f76e3b89",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "69975911-7c3d-4f66-b985-a81c05b32058",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "c8de34d2-cf7e-4ed5-baa1-f4b3a81dd99f",
        "cursor": {
          "ref": "f319161c-759c-4bec-a078-d7b01eb15c23",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "1e385e55-513e-44b2-a21f-3dceaf7a215d"
        },
        "item": {
          "id": "c8de34d2-cf7e-4ed5-baa1-f4b3a81dd99f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "50052bac-10df-4cc9-964d-7efdd4aa88d8",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "2647b62c-dd56-47a1-a147-6e66dd100093",
        "cursor": {
          "ref": "6da9dfb3-b92e-43d3-850b-78aeac6f894c",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "835eea02-b595-4745-ac76-52883ada2142"
        },
        "item": {
          "id": "2647b62c-dd56-47a1-a147-6e66dd100093",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "b5574f06-3521-4bc3-93bf-f9b710f9c327",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "43dac84b-39be-483e-815b-9329ec8bd5a7",
        "cursor": {
          "ref": "77954a8a-c085-401c-8f73-c2e1fb010421",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "2d27fbed-d3bd-460b-8f60-45cbc19d5e57"
        },
        "item": {
          "id": "43dac84b-39be-483e-815b-9329ec8bd5a7",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ec5b1013-2159-4af0-ab6d-a83b93cdc5d8",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "6a2deafc-a65d-4e5f-991b-212c5cea2bbc",
        "cursor": {
          "ref": "ad92fdc3-46b3-4d58-bd2d-6310d6641024",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "425cd47c-09e0-405e-ac20-6464632d2c21"
        },
        "item": {
          "id": "6a2deafc-a65d-4e5f-991b-212c5cea2bbc",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "dc584d48-337f-4eb9-afa0-ed82efa31fe8",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "f507362f-cf4c-43ff-91fd-480cd66e2100",
        "cursor": {
          "ref": "48d20457-9e17-4d76-b586-80494c9b836c",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "114cfc7e-96ad-4944-b385-d857e9517368"
        },
        "item": {
          "id": "f507362f-cf4c-43ff-91fd-480cd66e2100",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d722295a-cd58-40a9-b538-eeaff4b81fb8",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "f479575b-0a41-489b-b805-02bd29ce6263",
        "cursor": {
          "ref": "cea4d96e-8970-424b-b8f7-22d9c46bd36f",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "329ad9f5-9800-47ac-bb7a-bacaa9c08fcb"
        },
        "item": {
          "id": "f479575b-0a41-489b-b805-02bd29ce6263",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "28ed0ca6-2338-4913-8450-1a8f6b819556",
          "status": "OK",
          "code": 200,
          "responseTime": 25,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "114969fd-5ed1-4877-b677-7f6771027e1f",
        "cursor": {
          "ref": "0c28c121-92de-497e-9ef0-e99e5a802cbf",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "5ce465b4-3e8b-4be1-930c-a7c58a3dc1aa"
        },
        "item": {
          "id": "114969fd-5ed1-4877-b677-7f6771027e1f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d510a427-523f-4151-b6f6-42e210d4c2b3",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "b78ccdc8-e72c-4322-86f0-f2bda16f7aeb",
        "cursor": {
          "ref": "b35538af-33fa-4637-a18a-4428dcc19692",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "14599bc1-c768-4e9e-90b0-31eacaca201c"
        },
        "item": {
          "id": "b78ccdc8-e72c-4322-86f0-f2bda16f7aeb",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "08a85fbe-bb2b-4105-98cc-2ddee43cb819",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "22be2502-a276-4b1a-8b7c-b278321ae853",
        "cursor": {
          "ref": "82a80602-511a-4bec-adb4-301ef64abec5",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "829e00f7-0524-492c-97cb-a8ab8fb28b86"
        },
        "item": {
          "id": "22be2502-a276-4b1a-8b7c-b278321ae853",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b0576900-7f62-4d17-855d-2eb100955ba3",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "5d3cfeb8-bc46-4d45-b0a7-4b9c2b877918",
        "cursor": {
          "ref": "f71a6f5b-74ba-481e-bc42-109586d0ef15",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "f6f5aca6-b315-45c1-995a-c114df235f2b"
        },
        "item": {
          "id": "5d3cfeb8-bc46-4d45-b0a7-4b9c2b877918",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ce8911e9-cecb-45ba-9c66-733650d347f2",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "f4a82977-6b37-4d71-994f-9ba9b3f8aede",
        "cursor": {
          "ref": "57e300c4-afe4-4359-be92-0b35a3c238f5",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "e3cd63aa-2647-47fc-a94b-cb260c9b9248"
        },
        "item": {
          "id": "f4a82977-6b37-4d71-994f-9ba9b3f8aede",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "bdf06dbc-c155-4ddb-b747-9625cbc6be6d",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "dd1b713d-4ded-4341-8f5e-f47dbb61136e",
        "cursor": {
          "ref": "7ec5891a-f4e0-48a5-9235-772b4ccc0c6f",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "f15c6305-b146-4112-884f-889d7066b3d9"
        },
        "item": {
          "id": "dd1b713d-4ded-4341-8f5e-f47dbb61136e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "b7117a51-9627-4fc2-8b4b-114dda1c9163",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "8e68dea2-31a4-4271-81c9-9e6195f4e57a",
        "cursor": {
          "ref": "f4e30ed5-f71b-4a43-b757-54ea16dad05c",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "764b0f5b-3055-4162-bb89-8d0f3f4e95bf"
        },
        "item": {
          "id": "8e68dea2-31a4-4271-81c9-9e6195f4e57a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "21f872ca-e8ab-4bea-953d-e13556698a8c",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "281811c9-3a9d-47d8-a3fa-0947596d4b7a",
        "cursor": {
          "ref": "fef93fe6-ecbc-4ec0-a8ed-df7bbb51e36e",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "40a54028-9605-4880-acf3-6658b313a909"
        },
        "item": {
          "id": "281811c9-3a9d-47d8-a3fa-0947596d4b7a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a542eeb5-227b-4f58-9750-55d93d5fe16a",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "b741c028-00ac-4445-b0f1-6e23a9c35673",
        "cursor": {
          "ref": "a76bd448-cfde-4f1e-bb36-6c13e797619d",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "fd9a4c20-23ea-4f56-b205-127fe5a3e01a"
        },
        "item": {
          "id": "b741c028-00ac-4445-b0f1-6e23a9c35673",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "05380d65-ac2e-4a1b-9642-7405ee1591a6",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "72a3b42f-28cb-4d95-9a1b-240caab2ae82",
        "cursor": {
          "ref": "1db1af4b-9732-4918-b11f-4eb24daecd74",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "79fd1f21-dbe3-4168-bcb0-ed4ebc631356"
        },
        "item": {
          "id": "72a3b42f-28cb-4d95-9a1b-240caab2ae82",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "ba272634-86bf-4823-affa-9eda1effe37f",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "eb564375-85f8-4a5c-8bed-7e4240edf98f",
        "cursor": {
          "ref": "d08178af-c6da-4194-9335-f008b1d5298f",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "33aff067-7fac-46fe-8731-167fa5aed634"
        },
        "item": {
          "id": "eb564375-85f8-4a5c-8bed-7e4240edf98f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "cb86fa20-b9a5-4172-89a2-5b0931518593",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62bf8987-54ca-466d-a87b-ce9071555c1a",
        "cursor": {
          "ref": "4b0d6413-b77d-4af3-a54c-464bec9b7480",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "4bcb1eb8-ce21-4513-bab0-a7644db4bdc1"
        },
        "item": {
          "id": "62bf8987-54ca-466d-a87b-ce9071555c1a",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "f4ee5bcf-8dad-45a6-85be-1e864873f6d3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 15,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebb809b5-a3ba-48f2-9dba-c80eb1324c13",
        "cursor": {
          "ref": "4da5da15-133a-46b1-9eb7-1a26ce93cf7c",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "37682c73-e433-45de-8bf5-d3052c81feff"
        },
        "item": {
          "id": "ebb809b5-a3ba-48f2-9dba-c80eb1324c13",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5fdbdb4d-5f3f-4c76-abc9-28f470feaa81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebb809b5-a3ba-48f2-9dba-c80eb1324c13",
        "cursor": {
          "ref": "4da5da15-133a-46b1-9eb7-1a26ce93cf7c",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "37682c73-e433-45de-8bf5-d3052c81feff"
        },
        "item": {
          "id": "ebb809b5-a3ba-48f2-9dba-c80eb1324c13",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5fdbdb4d-5f3f-4c76-abc9-28f470feaa81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7079e7e-c80c-41aa-a697-2df7880ab1db",
        "cursor": {
          "ref": "470300e3-7e4a-43e1-99fc-49fb9cc643c2",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "8e59d749-8f79-4837-a9d6-4945d64566e4"
        },
        "item": {
          "id": "f7079e7e-c80c-41aa-a697-2df7880ab1db",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "413fcb0b-a924-4228-b8d1-d777fa8faa9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2161498f-7a58-4a19-8d2c-9f4c56da82a0",
        "cursor": {
          "ref": "7de4d123-40ca-448f-a96e-1b357501bbf8",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "78fee2af-a495-4269-80c5-5aa3095b05df"
        },
        "item": {
          "id": "2161498f-7a58-4a19-8d2c-9f4c56da82a0",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "8fccfe4f-100f-4927-aa74-55135af44b13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7025678f-7a44-435c-8d9b-66b6c1d345c2",
        "cursor": {
          "ref": "2855d14c-4c9b-4c89-a96d-1b84fdeeb5d8",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "93b74ebb-5cc7-471e-948e-a182bb13321b"
        },
        "item": {
          "id": "7025678f-7a44-435c-8d9b-66b6c1d345c2",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b6d29a3d-94b5-4627-b232-cca3f8def761",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d23b1b4-a4ad-4890-8bbe-0288008764f0",
        "cursor": {
          "ref": "987cb88d-65d3-42fc-afd8-2610c96ef6d6",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "99907608-6738-48c8-a978-8b1cb74d4f87"
        },
        "item": {
          "id": "8d23b1b4-a4ad-4890-8bbe-0288008764f0",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "11f55eb6-0881-4065-b57e-deec96147e0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cf4c718-a76e-49b8-82d5-3e739212b440",
        "cursor": {
          "ref": "d56083b5-9f57-4957-a6a2-ffdc55327110",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "4072b5eb-e072-435d-8a4a-d470c88f3797"
        },
        "item": {
          "id": "9cf4c718-a76e-49b8-82d5-3e739212b440",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "00268f0b-4c5c-4e37-b72b-01c022dd400a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3feb9faf-8561-48c3-886a-e23a928fef8b",
        "cursor": {
          "ref": "c48dabdf-c45c-4ccd-84d1-fef374bf13d2",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e6e454af-4032-42ec-b027-f039a8178aa8"
        },
        "item": {
          "id": "3feb9faf-8561-48c3-886a-e23a928fef8b",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "d4d4fdb4-8366-4c30-af35-bb199ada02ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3074,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b42bdde4-cb25-4d68-b7bf-5743882d9f8b",
        "cursor": {
          "ref": "c205f442-05a6-4d2a-ab8e-80439684a4bb",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "1b7c5931-dceb-40c5-ab32-4451970e3ced"
        },
        "item": {
          "id": "b42bdde4-cb25-4d68-b7bf-5743882d9f8b",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "9428919d-a715-40da-b0d0-cdb0e9453ce5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4856cf64-0f9f-450b-b7f2-6374e8213a8a",
        "cursor": {
          "ref": "d072f47b-0f8c-420a-b433-e13355a309b4",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a0d00f3a-2d35-469a-b4b6-80476201032a"
        },
        "item": {
          "id": "4856cf64-0f9f-450b-b7f2-6374e8213a8a",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "c686a613-4e78-49f6-97d0-17d5d81252ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8400b30e-272b-4c4d-92a3-d95bf3f3e2dd",
        "cursor": {
          "ref": "9418b7a2-ca5f-48a1-bca5-4394bb077fe7",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "330f9395-e943-4738-a2b7-b12698dfbbe8"
        },
        "item": {
          "id": "8400b30e-272b-4c4d-92a3-d95bf3f3e2dd",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "774aaaee-3471-4433-a206-968f9b95e464",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "302e2084-9a06-4e4e-a3ba-41f99aea8af4",
        "cursor": {
          "ref": "ab2a7c89-19d5-49f2-9f23-da22e9e14234",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "7620c35c-72e9-448f-a133-b5a944c7b4a2"
        },
        "item": {
          "id": "302e2084-9a06-4e4e-a3ba-41f99aea8af4",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "1e02cc26-80a3-436f-8ed7-da1da4368788",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46563442-8da0-431d-9b29-a493f517efca",
        "cursor": {
          "ref": "f359c812-dbb5-40a6-97e1-d5118a86262e",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "df78c384-5514-4b87-9f3e-f804d590ebe7"
        },
        "item": {
          "id": "46563442-8da0-431d-9b29-a493f517efca",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "a29294ee-b087-4c86-be77-0446986e5f1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e249fcfa-cd60-4733-923c-93dca8390ecd",
        "cursor": {
          "ref": "a98724ec-1fbb-4e5f-a576-d4ca71a69b54",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "94fa7c53-d4e6-4eac-81b4-a66d0427f5fb"
        },
        "item": {
          "id": "e249fcfa-cd60-4733-923c-93dca8390ecd",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "3ddb31e1-de81-4700-9736-9466b76e43a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd933003-55e2-4a28-b850-d9c91ff3578f",
        "cursor": {
          "ref": "9d595289-c521-4ade-b4eb-292f327a7dd4",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "7654af6a-b251-42ba-b1fa-8e89c3894eec"
        },
        "item": {
          "id": "dd933003-55e2-4a28-b850-d9c91ff3578f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "831a266e-cb4a-43b7-be70-d11ae83c0365",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "200c278f-1f24-4a77-b770-72b65d4bbaea",
        "cursor": {
          "ref": "0cf12e99-bba1-45b8-a81b-0f62d57855dc",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "506571fe-1d91-489a-b546-46ab64a542bf"
        },
        "item": {
          "id": "200c278f-1f24-4a77-b770-72b65d4bbaea",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "6edd31c1-e7ac-4f65-a3b7-0ffe7efb03ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41b0b345-bc0d-421e-99b1-7f1df33c0327",
        "cursor": {
          "ref": "423915e6-9dc3-40d6-9748-8ee76fca233d",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "00d276c9-39b4-4953-9ae5-bc6ad961f145"
        },
        "item": {
          "id": "41b0b345-bc0d-421e-99b1-7f1df33c0327",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "c69b8bb1-107f-4d86-984d-91fd9c9c9784",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "981813e7-57a8-4940-a316-20c92a309764",
        "cursor": {
          "ref": "1b00ff5a-bb10-4912-a562-2453b3ba53b3",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "baf8c5df-04a4-421d-b028-ea974857f9a3"
        },
        "item": {
          "id": "981813e7-57a8-4940-a316-20c92a309764",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "07f49062-1150-4e74-8c99-91b56243afcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "959bc9c6-2925-452f-97db-317455ee8276",
        "cursor": {
          "ref": "ad1c4c40-8163-4432-b358-bb5d7a5be847",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "170d68c1-80d4-4ee3-a623-0f273ff5eee2"
        },
        "item": {
          "id": "959bc9c6-2925-452f-97db-317455ee8276",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "6849d14e-97e5-4909-bfbf-9264bcdda463",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1450,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8ef00a1-a9ba-44d3-988b-fa5975244e6b",
        "cursor": {
          "ref": "0f00d065-9389-43ae-835e-e40794b34768",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "40033ebb-3d5d-4a81-9651-684e432ff0d7"
        },
        "item": {
          "id": "f8ef00a1-a9ba-44d3-988b-fa5975244e6b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "2474d721-12f3-43b7-b67f-c48b7d70b806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 229,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65b8d365-2a35-4bb5-8fc0-69afae6623ae",
        "cursor": {
          "ref": "e741153e-2939-45cd-9173-e858762e4f8f",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "06e8452c-e2b3-4e91-a448-201288d72136"
        },
        "item": {
          "id": "65b8d365-2a35-4bb5-8fc0-69afae6623ae",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "66eb764a-6a49-4e7b-afd3-c28da713f5b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 369,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bf80236-cb77-4562-8157-86d9a102dd08",
        "cursor": {
          "ref": "6b5373bd-2865-42d3-a94b-e2a234f793b1",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "245c885f-70f7-4f10-876a-5d1ebf973e51"
        },
        "item": {
          "id": "6bf80236-cb77-4562-8157-86d9a102dd08",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "1ccaaa12-907c-4444-905f-2200a6e9a137",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1562,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efb29ad4-57fc-4405-a872-dd44c7140b0a",
        "cursor": {
          "ref": "448419d0-a3a1-4951-bdb4-c72b9d762a64",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "52c3c1d9-b1d7-48c7-b6d7-ce734f7563f6"
        },
        "item": {
          "id": "efb29ad4-57fc-4405-a872-dd44c7140b0a",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "5f68cef1-eb3a-412b-8ca2-08ca06420fec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 320,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e51fe2b3-0596-4344-a674-82a318180cf2",
        "cursor": {
          "ref": "c798f619-cff5-4b52-bde4-8d1eb3ea27b8",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "bf856380-151a-44ee-b676-9290b7a37571"
        },
        "item": {
          "id": "e51fe2b3-0596-4344-a674-82a318180cf2",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "14ca76c3-5c2d-4696-b04f-058f982217ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 349,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdf4cf6d-56ff-426f-8ccb-1e1715b8d637",
        "cursor": {
          "ref": "b21ea7c0-dbaa-4a7c-b858-481e308bee5d",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "688cee19-15b2-420f-955a-e8f203d4044f"
        },
        "item": {
          "id": "fdf4cf6d-56ff-426f-8ccb-1e1715b8d637",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "32ad618d-f649-42bc-aa0d-404975cd552e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23c3a73d-435b-41c0-9178-30e82754c230",
        "cursor": {
          "ref": "52ea1863-2334-4b83-85f9-86f766fb9d59",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "a964488d-e063-4406-a05f-dc10be757db6"
        },
        "item": {
          "id": "23c3a73d-435b-41c0-9178-30e82754c230",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "0d923d75-a0e9-4c02-b7e2-efdba5c90f96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8becc59-be86-45e9-b3cc-ee424844b0d3",
        "cursor": {
          "ref": "e14dfd8f-f5e2-4cd8-bde5-80494438cef2",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "730c98cc-c3c0-40b1-96bb-862738f4a479"
        },
        "item": {
          "id": "b8becc59-be86-45e9-b3cc-ee424844b0d3",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "f169d7b0-f4e0-4b5f-b1be-c3fd767b63d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 361,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "709879e8-8eeb-411a-bc31-031bae0564f4",
        "cursor": {
          "ref": "d42d23d1-63e2-4458-ab41-7bc4522366de",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "8b0c30f5-d8ac-445f-9102-7ddec23ede42"
        },
        "item": {
          "id": "709879e8-8eeb-411a-bc31-031bae0564f4",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "0a7c35d1-50fd-4412-a611-7602ea3706f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e1579a9-c137-4f4c-b61f-951bb5bb6311",
        "cursor": {
          "ref": "c6ce9ea1-b880-42cd-b9ae-3f2dbf39d698",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "ae26e2a9-5f54-4444-8830-ab6bba298c95"
        },
        "item": {
          "id": "3e1579a9-c137-4f4c-b61f-951bb5bb6311",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "0ab7475b-9389-42f5-a2ed-26e38e0a5258",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afa801dd-d129-44eb-9a80-c6b07437209e",
        "cursor": {
          "ref": "ee1b5ebe-5b4c-40d5-af2a-4d2ffb39afdc",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "39c935ba-0bb5-4e85-8047-e57d010de786"
        },
        "item": {
          "id": "afa801dd-d129-44eb-9a80-c6b07437209e",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "02a4c147-6689-46b4-96a0-ff4099743b0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 366,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d44b24ef-a1db-435a-8b17-b4c13604c840",
        "cursor": {
          "ref": "78700bc7-619e-47ec-84bd-26043d50db33",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "6a1ce1bc-fed8-4cd0-a4d0-04427b689b24"
        },
        "item": {
          "id": "d44b24ef-a1db-435a-8b17-b4c13604c840",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "48b21852-4f11-41db-800d-56147fd4c700",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "587fe32e-31f7-43ca-8e64-e665b45c9727",
        "cursor": {
          "ref": "67c125e6-8b81-4227-98dd-7a7cdd6060a3",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "ce6a1c19-47cf-45b5-bba0-aded02487f27"
        },
        "item": {
          "id": "587fe32e-31f7-43ca-8e64-e665b45c9727",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "66f445bd-0009-4e5a-a97b-ece5f5084094",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea0d3a29-731d-41fb-ab76-c1ded2b2cbd6",
        "cursor": {
          "ref": "a5a654f3-f663-4ba8-afab-a5c6df07af14",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "76555df1-9c35-48f5-99c1-3bdf81f03a67"
        },
        "item": {
          "id": "ea0d3a29-731d-41fb-ab76-c1ded2b2cbd6",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "39b9e3f1-2597-478a-882e-d21d1483ed18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3eddfc5-7140-4617-b59a-a2e090ed6f99",
        "cursor": {
          "ref": "d31c7adc-9ba1-40e8-92df-7604e58ed030",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "1375b41f-f459-41d1-a0d5-559371a98877"
        },
        "item": {
          "id": "b3eddfc5-7140-4617-b59a-a2e090ed6f99",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "7ccb7f9d-af84-4340-a211-271cf0b58716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 228,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce0348e3-2547-46d6-91da-76d2de84d526",
        "cursor": {
          "ref": "fa7d9159-795f-4455-9df1-8036980fc504",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "97a1d044-10bd-45a3-85bc-6576665af5ae"
        },
        "item": {
          "id": "ce0348e3-2547-46d6-91da-76d2de84d526",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "4cb35839-726f-4dba-80b8-0294c2ace925",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0181450d-3058-4e1e-9da2-ea7211510e4e",
        "cursor": {
          "ref": "0abda623-4a7b-4185-b91f-34f7a91b9dd6",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "a1bb93e7-d2b6-4d08-b670-beb16e6a3e83"
        },
        "item": {
          "id": "0181450d-3058-4e1e-9da2-ea7211510e4e",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "73b168a3-76a7-4c5d-8418-c6f69ca9bc8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 353,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f9ba4a9-fea2-4d31-bb0c-28b1dee495cf",
        "cursor": {
          "ref": "80fa0dcc-b6dd-4dbd-acdc-86cb2c240586",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "94f62a4d-e724-4c9c-8245-0a9a70fd7510"
        },
        "item": {
          "id": "0f9ba4a9-fea2-4d31-bb0c-28b1dee495cf",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "4119a7d6-a112-4e16-8327-7f32046c28d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 359,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b94254a-ce69-4121-b779-dbd5942f9f5f",
        "cursor": {
          "ref": "152aa66c-600c-4406-bdb2-080d497c15fd",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "1eeced4f-61ce-41b7-9ef4-e274fdda4ae5"
        },
        "item": {
          "id": "7b94254a-ce69-4121-b779-dbd5942f9f5f",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "7e07c9ad-48b6-4fc2-8088-41e79ee8a67e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 326,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "057826ca-7d8d-41b2-97b4-5e9cf5d33342",
        "cursor": {
          "ref": "6058d32e-5d3f-49a3-86d2-1b17a71f5f77",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "da9cbf23-3e2b-4e0d-90a9-d999ec4c972b"
        },
        "item": {
          "id": "057826ca-7d8d-41b2-97b4-5e9cf5d33342",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "79db6304-5156-4627-8c7f-39274c45911a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 306,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90fdc014-9530-4c2c-9bd4-91c685658230",
        "cursor": {
          "ref": "340fd1e9-b795-4222-bafe-5ec3a3511c3d",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "dd6a5ef9-51c8-40a0-8366-471144db274b"
        },
        "item": {
          "id": "90fdc014-9530-4c2c-9bd4-91c685658230",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "ac8596c0-68e8-4d7b-82d0-93c1056c289a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 230,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9725d96-baa5-4786-9e85-a4658ffd52d2",
        "cursor": {
          "ref": "7f840d81-5732-4610-805d-5120c1458d8e",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "5f0bcca3-359d-48de-85b4-7b02b161b2fd"
        },
        "item": {
          "id": "f9725d96-baa5-4786-9e85-a4658ffd52d2",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "3d7f821d-db59-4e88-9af7-2dec157b1d81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 291,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76c42abd-75ce-44b2-bba8-480299660962",
        "cursor": {
          "ref": "b04c0bba-a1f9-4de5-be4e-24dc14a146bd",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "27ee2543-c256-4699-9fe9-468ca2abed91"
        },
        "item": {
          "id": "76c42abd-75ce-44b2-bba8-480299660962",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "d5cf08e1-e7ad-4951-8209-8e14b458f862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 235,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b753ac3d-1b52-4898-8bd7-bcb7f6cc714b",
        "cursor": {
          "ref": "d021d482-76d2-485a-971a-ab1a7c33dbf7",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "035a4fdd-e4a9-4681-bd74-f15f262a6d4a"
        },
        "item": {
          "id": "b753ac3d-1b52-4898-8bd7-bcb7f6cc714b",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "7d64796c-4376-4923-a4ca-ade4120720ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 698,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0b51ce3-bf10-405f-b160-5f7f0b875fe0",
        "cursor": {
          "ref": "cd6e0fa1-83d4-44f7-b411-615e54e33830",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "519ca74c-7c35-4b2d-926f-d825b17a2d42"
        },
        "item": {
          "id": "f0b51ce3-bf10-405f-b160-5f7f0b875fe0",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "e0728d32-8d53-4910-8aa7-3a8bd2ac33b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 487,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04733045-bd49-43ba-b83b-2203905207f0",
        "cursor": {
          "ref": "a1922129-5c0b-46e9-99ca-95d346660bc8",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "90b9343e-545d-40a7-8ef3-37f09a7096d7"
        },
        "item": {
          "id": "04733045-bd49-43ba-b83b-2203905207f0",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "218c9908-1d49-40f7-bf80-fa5704af658e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 358,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b2a09d2-7dde-4309-bed3-bfd492eb40b2",
        "cursor": {
          "ref": "695ccaa9-d66c-4438-b62b-7f5d6129a2f4",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "615591f1-4729-4adb-a2b0-841026e8cb16"
        },
        "item": {
          "id": "2b2a09d2-7dde-4309-bed3-bfd492eb40b2",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "60aa982e-9193-4f1b-9959-4545ef89e33d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 349,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "873bcaf8-4c42-4df0-88d9-31f7de3f3ce5",
        "cursor": {
          "ref": "e4ba7122-999e-4760-892d-b090273f54ca",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "4bb5fa21-2326-42f0-8177-e1b2ee4560a2"
        },
        "item": {
          "id": "873bcaf8-4c42-4df0-88d9-31f7de3f3ce5",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "e6e3076f-828c-40fd-bdae-350daa84adc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 640,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d9efe87-20bc-4d89-a662-9999bceb87c2",
        "cursor": {
          "ref": "952bde13-df47-481d-8860-697a01304986",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "4da009e1-65d3-445c-918c-504b922ee3f7"
        },
        "item": {
          "id": "2d9efe87-20bc-4d89-a662-9999bceb87c2",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "7dd8c297-ed7c-4be7-8a4b-7102cdb0d0b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1526,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "632f0e93-989a-4e2d-9941-fb1f59c39c9e",
        "cursor": {
          "ref": "d9b39e7c-b62c-43e0-84e0-b26f13bcb9b3",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "ede7b45e-3dda-442f-a4a9-0c01e6993ff7"
        },
        "item": {
          "id": "632f0e93-989a-4e2d-9941-fb1f59c39c9e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "a837bf0b-e7f6-4259-aeef-4d58f454d1a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1751,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bd00d34-9b6a-45f0-8ff6-d0fc349ec071",
        "cursor": {
          "ref": "d719f34b-a46e-4d3c-99de-c7bf99d0e36d",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "67545703-c6d2-47ef-a4f0-b4684c96b2f6"
        },
        "item": {
          "id": "9bd00d34-9b6a-45f0-8ff6-d0fc349ec071",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "9bbf66f4-da9b-4c07-a154-4264cb22f7b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 409,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb502bf0-d086-4fbe-b767-1db5f0a4000e",
        "cursor": {
          "ref": "228cd712-82a3-4dad-b1dd-6b546961987a",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "1a00e1b2-e883-4042-884f-753fb2e468d8"
        },
        "item": {
          "id": "bb502bf0-d086-4fbe-b767-1db5f0a4000e",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "94ac8a13-e573-4347-aeec-4290347cd6f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 318,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeabd64f-3eee-4106-b5ca-be9ba2a648a0",
        "cursor": {
          "ref": "eca06291-e7c2-4149-9e36-570f238f62cf",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "36bdfcf5-2dfc-40aa-baf6-4546e66ada6e"
        },
        "item": {
          "id": "aeabd64f-3eee-4106-b5ca-be9ba2a648a0",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "7a3ba30c-dabc-4e99-b139-7f85fcd1acc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 461,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69e6ba40-039a-4049-bdec-0aaf48601742",
        "cursor": {
          "ref": "d46abb0b-71b9-4b53-90b5-1c841ff7cd25",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "84e24d32-9e1a-48c2-b5c1-64a3350395e6"
        },
        "item": {
          "id": "69e6ba40-039a-4049-bdec-0aaf48601742",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "e26242af-cfe4-47d7-b047-0369637d0dd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 427,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71796caf-ea3c-474e-90ee-3e2defc66945",
        "cursor": {
          "ref": "6625dff0-9be1-42fa-84dc-3a3c63263408",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "5b853e5f-5f03-4a36-a40e-b45e290cb6ef"
        },
        "item": {
          "id": "71796caf-ea3c-474e-90ee-3e2defc66945",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "5526dc40-d57b-42d1-a296-974699a9013d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 446,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cd1597d-4c0d-4dae-b7c8-b8189ee2c070",
        "cursor": {
          "ref": "8dbcb19e-265a-4f8c-9ff4-cf094bed4cd2",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "2b3aecaa-f6af-4c02-9b0f-656691b05c79"
        },
        "item": {
          "id": "5cd1597d-4c0d-4dae-b7c8-b8189ee2c070",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "75fbc153-2524-49c3-9dda-8130192f4e5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc5019f1-2e49-43dc-a64d-1bfaaef158a5",
        "cursor": {
          "ref": "ba93ff3f-05c5-4eca-be32-2512ae0f35b6",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "4ef49256-e580-4bf2-934a-a002d768f55e"
        },
        "item": {
          "id": "cc5019f1-2e49-43dc-a64d-1bfaaef158a5",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "4bb0dee9-7241-4226-8e92-84cf104e0af8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d15c3ffa-34a9-4067-b3eb-8be5618d7a4b",
        "cursor": {
          "ref": "b85d155b-d247-4633-b8b1-36a1c8dbc45a",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "f2ad2ebc-38f3-4ecb-a755-67787e138ec0"
        },
        "item": {
          "id": "d15c3ffa-34a9-4067-b3eb-8be5618d7a4b",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "3b0cb6ff-280f-4133-ae65-25aa834cdfad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9fac760-93f4-4fd7-a36d-d237de71623a",
        "cursor": {
          "ref": "7650cde4-4561-46a2-94b5-1b62b14cbe84",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "f0288bc6-e712-4b2e-b7e1-9e7b40b07686"
        },
        "item": {
          "id": "e9fac760-93f4-4fd7-a36d-d237de71623a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "4ee5cf0f-8371-4738-843b-8f3354b6dc25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 328,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a7027e2-2080-4ca8-b6a5-fbdaf92c603d",
        "cursor": {
          "ref": "83bc8655-4ed3-43f2-b485-2ead22b7f7ab",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "3a20cf01-6622-4777-ac96-9d2160833195"
        },
        "item": {
          "id": "7a7027e2-2080-4ca8-b6a5-fbdaf92c603d",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "a27bb0f3-bc64-4023-b5c8-44bd01b45408",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "737de5e3-99ec-4322-b622-90bd7e5fb00a",
        "cursor": {
          "ref": "f6195293-7d57-4b42-a554-ee1f7e2cf042",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a0acbde0-622b-4512-9a1d-ae633af44a46"
        },
        "item": {
          "id": "737de5e3-99ec-4322-b622-90bd7e5fb00a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "9c677a80-5759-499f-8c30-6017ca4cdcb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "833e7d48-8c5c-4ca2-b544-3012c99670fc",
        "cursor": {
          "ref": "f2ce1d5b-06f1-476f-85bb-24f25f0b4071",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "5cc573e3-2fb9-479d-96ee-3fc313ce3913"
        },
        "item": {
          "id": "833e7d48-8c5c-4ca2-b544-3012c99670fc",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "748e949e-92c3-4977-8d88-afdd56d9e4bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 189,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b309a54-f8c8-4169-94b1-fcbb966ff673",
        "cursor": {
          "ref": "24dd180f-abc3-41d6-9705-1df7d95c8fdf",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "0c036ac3-a944-4f78-8f41-bd8f07dcc66e"
        },
        "item": {
          "id": "0b309a54-f8c8-4169-94b1-fcbb966ff673",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "599fa1b3-cdeb-49c7-a929-f6339ebab2ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f1b31b-330f-4cb4-807b-329e96b7b5a6",
        "cursor": {
          "ref": "bf02808e-f44e-47bd-a6c7-a9c4bc2eaaf0",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "6c00e2d0-95a5-453c-bf10-e710a22faaa4"
        },
        "item": {
          "id": "12f1b31b-330f-4cb4-807b-329e96b7b5a6",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "0e871289-093d-49ff-b7d9-4d43904ca801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 584,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d07e4ac-eaf5-45dc-99b4-9c208d40000c",
        "cursor": {
          "ref": "5d4bd2a9-001f-40f5-a713-9e1567da0d92",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "b6d4ec52-7420-465b-bada-b32c51b89bcb"
        },
        "item": {
          "id": "2d07e4ac-eaf5-45dc-99b4-9c208d40000c",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "73a8f017-ec6d-41bd-9cd7-4e1436b125db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd18aaeb-d837-45c0-b117-868a502af394",
        "cursor": {
          "ref": "81b0140d-6f6e-4952-b8ad-598e41f37149",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "00dc9fda-0f32-4c6f-b3f1-ebe18c1d7440"
        },
        "item": {
          "id": "bd18aaeb-d837-45c0-b117-868a502af394",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "477d1b22-c520-414f-91d3-89efa1d4ca40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b86c17a5-2078-4307-8352-0cbb5959a717",
        "cursor": {
          "ref": "b61320a9-6d61-4d15-8881-3c1647a3ba74",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "ed8fdbda-8788-460f-8d41-01cc5ef074d6"
        },
        "item": {
          "id": "b86c17a5-2078-4307-8352-0cbb5959a717",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "4cde251e-c954-4462-8f7b-c88f5803f878",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14feb0ec-ccbc-488d-bf16-3d20d91566da",
        "cursor": {
          "ref": "b0ab5720-7235-4326-a06c-bc06bce1669c",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "e7a9b3ab-e2b8-44ff-98b7-0b65ee24635e"
        },
        "item": {
          "id": "14feb0ec-ccbc-488d-bf16-3d20d91566da",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "3574cf66-2dc6-425e-aee9-e21caf1b053d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3f23bfc-827a-4ddf-9cbd-11e0555f6f2b",
        "cursor": {
          "ref": "d9f5dcb9-e550-4e50-be13-063e6ebc36f4",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "400c3a42-1c4b-4714-b42a-8792800ece69"
        },
        "item": {
          "id": "d3f23bfc-827a-4ddf-9cbd-11e0555f6f2b",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "b618505f-1cf9-45cf-8a99-f0d0806a3b92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c22b168-6a27-460c-b272-92ee3604834e",
        "cursor": {
          "ref": "fd3286b6-d19a-4a4c-94e3-abbe15a44fed",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "f87aa166-9f64-4fcd-87bf-e31bc01f1e6d"
        },
        "item": {
          "id": "7c22b168-6a27-460c-b272-92ee3604834e",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "449a3130-4ea0-48f4-b0b4-6e36dc0e2435",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc78814c-2e72-4541-a06e-a933b63e5cc4",
        "cursor": {
          "ref": "8e7d3986-4b42-4bcb-8f22-595169dc2d6b",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "51a216cf-3116-4c3f-9cec-4a6725a1de0f"
        },
        "item": {
          "id": "bc78814c-2e72-4541-a06e-a933b63e5cc4",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "35928cf7-fd48-49f0-81c1-ea5c5ada47c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b3d6a3e-fa73-43c6-a4df-46047c0666b6",
        "cursor": {
          "ref": "35bca8da-9af5-40e7-9a6d-2dbfdca8a926",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "8dd4e300-3232-4237-b8f5-573f40092cb0"
        },
        "item": {
          "id": "5b3d6a3e-fa73-43c6-a4df-46047c0666b6",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "78072e8d-4b51-48a6-baed-032774d5923b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ac092ab-7e76-4114-afca-4cc31d595163",
        "cursor": {
          "ref": "e938003a-098e-4d53-ad1e-5e81b7d212e9",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "c5800e0f-2877-4fc9-9ac6-1d76aedb3b72"
        },
        "item": {
          "id": "5ac092ab-7e76-4114-afca-4cc31d595163",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "6f300048-8e94-4731-b980-2f430b8abb4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b99f0b5f-0517-4ef6-b19c-c042618703e6",
        "cursor": {
          "ref": "44d97f63-3684-4778-a46e-a6f02aeda5bf",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "8781057e-2410-4101-a0e2-ea58b9e8fc0b"
        },
        "item": {
          "id": "b99f0b5f-0517-4ef6-b19c-c042618703e6",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "876d7293-fc85-4427-9a13-4a7dd3c700b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4e45519-ee69-42f3-8961-f505c2081a13",
        "cursor": {
          "ref": "fe95ef02-df88-452d-b9a4-5daa940f1322",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "7c69867e-a411-4845-b999-ab95c86e8242"
        },
        "item": {
          "id": "d4e45519-ee69-42f3-8961-f505c2081a13",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "4c3fab9f-9268-4cb4-a245-881c2f58b776",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d592c82-1f05-46d0-933f-9f56d25ecc1e",
        "cursor": {
          "ref": "9b8c91cc-aa63-4e9b-b988-4c89b58dcd56",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "b09445e4-27e4-49ff-8be1-229d0e18afff"
        },
        "item": {
          "id": "9d592c82-1f05-46d0-933f-9f56d25ecc1e",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "672981bd-2195-4982-856c-3885a2106260",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b17f19d0-9db6-44ad-818f-862856467078",
        "cursor": {
          "ref": "14ad16a2-9821-4c7a-960a-e563b076f182",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "b7137236-b705-4e77-8184-758264b881c6"
        },
        "item": {
          "id": "b17f19d0-9db6-44ad-818f-862856467078",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "2621117c-61cc-4822-b4ee-f52fb37d1256",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eab981bc-567c-4834-8404-570c625e8746",
        "cursor": {
          "ref": "c0f5b472-6de3-4bd4-bf27-8fe41bdb3f87",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "319bc8a9-7a29-492d-8801-846bfdb433ed"
        },
        "item": {
          "id": "eab981bc-567c-4834-8404-570c625e8746",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "1c29b703-62d3-4e28-9850-47872aaa0325",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1469538d-afdf-4138-bde3-5764b333f482",
        "cursor": {
          "ref": "ce0bc9a9-8327-4442-a908-f389a7b2b3f7",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "ad630c10-1252-45c1-b335-25548648647d"
        },
        "item": {
          "id": "1469538d-afdf-4138-bde3-5764b333f482",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "7c45c886-5760-4969-a289-f6282a4effbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b65c8d17-4093-4dd5-ae6e-a3a071b32409",
        "cursor": {
          "ref": "abc0803c-f264-481c-94ae-7026532c2dfa",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "9c6c2947-de43-40ba-b7d8-1273bb1bb07e"
        },
        "item": {
          "id": "b65c8d17-4093-4dd5-ae6e-a3a071b32409",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "c6045041-0c9d-48df-8841-0fffe867b24c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd10952c-1569-44fb-a9c3-3f97a76333db",
        "cursor": {
          "ref": "3596fee2-e5da-452b-991b-ffcb85b9e216",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "5bf1cdec-676a-4c18-8f87-41ebca20c6cb"
        },
        "item": {
          "id": "bd10952c-1569-44fb-a9c3-3f97a76333db",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f56fee89-adfc-4e11-82dd-4075ccec6162",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f96e493e-48c0-453c-9e82-6f4f904fa822",
        "cursor": {
          "ref": "9fda0bf4-3578-4f35-9107-3d645bd4a275",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "93ecd756-8a4a-4ae1-b0c5-647c42e095f9"
        },
        "item": {
          "id": "f96e493e-48c0-453c-9e82-6f4f904fa822",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "ab81b484-844d-47bc-b44b-6b6c2c1c9ff4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dad878d-dd3b-4aa9-9208-7f20743fc557",
        "cursor": {
          "ref": "ae416128-ae56-4c75-a1bc-6454a34aada1",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "6a458007-71d2-44fc-a9cd-8bd03bd54d5c"
        },
        "item": {
          "id": "6dad878d-dd3b-4aa9-9208-7f20743fc557",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "0e3a2f68-4658-4b94-b574-4a0e0f78c8e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 222,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdf32f7e-02b4-44fc-af79-ba1d39f8b138",
        "cursor": {
          "ref": "eda15fbb-496e-4280-89f1-a21a7b91f26e",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "d499c8b7-ca77-41ae-8728-a17302af47a6"
        },
        "item": {
          "id": "fdf32f7e-02b4-44fc-af79-ba1d39f8b138",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "e455e1e5-a40e-4d0e-84c2-5912b5874df8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70915fe6-8419-439c-ac34-9f6c3928e426",
        "cursor": {
          "ref": "27f23f92-5956-42f6-80c2-efd12ffcde9a",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "305423b4-720a-4120-bdf1-4ffbd023144d"
        },
        "item": {
          "id": "70915fe6-8419-439c-ac34-9f6c3928e426",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "e36629be-b3c2-43ff-9278-e46f4f835ba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ca70ff6-6561-4e31-81f7-45f28574dcfb",
        "cursor": {
          "ref": "1a18e2ba-cc20-459b-b87a-f8681717aefb",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "3db60141-5de8-462e-9806-76d25357288c"
        },
        "item": {
          "id": "7ca70ff6-6561-4e31-81f7-45f28574dcfb",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "a30bf3f2-fc30-41f3-9c32-8630a364fe23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c0b68e8-98d8-46fe-8723-28aa6d13ae05",
        "cursor": {
          "ref": "3f41311f-6217-4af8-b2f8-693dbb27eb9a",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "a7849a15-7abb-44b4-aee1-2da882669267"
        },
        "item": {
          "id": "5c0b68e8-98d8-46fe-8723-28aa6d13ae05",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "24925806-62e3-4bfa-89c7-2b2c35c7f277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19e6def5-5d43-4986-ad0c-0b4cdeda9bf6",
        "cursor": {
          "ref": "972340c9-e840-4369-b7b4-f7491c2aa6c5",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "a4c433d8-540e-460e-a130-722e1a053072"
        },
        "item": {
          "id": "19e6def5-5d43-4986-ad0c-0b4cdeda9bf6",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "78e10675-16b5-4a3f-ba17-1b7a08169eff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05986b41-a486-4d06-b867-527bbd33f570",
        "cursor": {
          "ref": "1911df5a-e7c3-4c8d-a58b-f8037c6aca62",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "6198f300-8cc0-4368-9dfc-69f516380ccf"
        },
        "item": {
          "id": "05986b41-a486-4d06-b867-527bbd33f570",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "dd1f9070-89cc-4204-98a1-bc12d9f1f12d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5328088a-6f02-4a85-8328-262afe358b66",
        "cursor": {
          "ref": "d3deca06-20f4-4d02-9c56-9e20389d4a55",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "5f1f941d-d142-4564-ab7a-defc7ce06b48"
        },
        "item": {
          "id": "5328088a-6f02-4a85-8328-262afe358b66",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "68ced66e-4982-44f1-aea4-4a920a64955c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5909e6d3-19d9-49d9-8df7-90f2d67ebfb4",
        "cursor": {
          "ref": "5c1d7864-12f2-4bb9-9bec-0940812e9be0",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "2540510a-012c-4872-b527-6729cd387a9f"
        },
        "item": {
          "id": "5909e6d3-19d9-49d9-8df7-90f2d67ebfb4",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "8afa82f7-7da7-4c64-91d0-48a16de502e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d0f16fd-b561-4710-a20c-f97ead0377ee",
        "cursor": {
          "ref": "73e8887b-74fd-448d-8556-3dca8138dec1",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "74e0e84e-afb2-4abe-9a15-a1d26b436095"
        },
        "item": {
          "id": "3d0f16fd-b561-4710-a20c-f97ead0377ee",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "e00b2069-2341-4561-961b-bfdd86738d48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 275,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64b089c8-a66b-4417-a17a-fcc38aa42a65",
        "cursor": {
          "ref": "969224c4-0bfc-44ac-8831-fcf75357ba2d",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "8c06d1a8-d9e8-4334-a84e-bbaa3752cf82"
        },
        "item": {
          "id": "64b089c8-a66b-4417-a17a-fcc38aa42a65",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a0433148-4967-41d4-b3d9-e8345259015c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f0ed7f7-8c7b-4737-b438-f20eac959cb1",
        "cursor": {
          "ref": "45b0d8c5-2019-4980-b634-0264bf2f26c6",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "5f363cb6-3209-44bf-b94d-c85d0543d257"
        },
        "item": {
          "id": "7f0ed7f7-8c7b-4737-b438-f20eac959cb1",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "4989721f-23e6-468b-940a-f8a6ecfe7d44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2249dbff-5b0a-42e9-a2d7-332d2c6393c8",
        "cursor": {
          "ref": "c0d56864-938b-4b0c-9866-85da8cedc0b5",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "fd9a4ce9-a1a7-40ac-808c-8ed161cd9c4b"
        },
        "item": {
          "id": "2249dbff-5b0a-42e9-a2d7-332d2c6393c8",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "2b65cb24-cd69-4b15-ae88-dc39a648f4a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d11c1f1c-87c1-4a5b-9e26-1a7bacd10360",
        "cursor": {
          "ref": "4c1cf095-c5c8-4885-9318-3c9391b795c0",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "80485225-2efd-402c-9e5a-a779ceb27cfe"
        },
        "item": {
          "id": "d11c1f1c-87c1-4a5b-9e26-1a7bacd10360",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "d02c194f-8ea3-4dd8-950c-b87dcef9a948",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "483ac70e-6658-41a2-9d57-c31d03bb6f36",
        "cursor": {
          "ref": "18396f72-5f08-4e1e-a610-2b1a96c57466",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "946edca5-794d-45ed-b01b-4852817430cb"
        },
        "item": {
          "id": "483ac70e-6658-41a2-9d57-c31d03bb6f36",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "b5850233-d274-42cd-b067-48fa47e02654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 159,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bed70e8b-7bdc-4d3e-9504-abaaee496ff3",
        "cursor": {
          "ref": "252b08e4-1810-4da0-ab53-b1cad9ec90d5",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "e3c3568c-f712-4673-9e83-bebcc2d5921a"
        },
        "item": {
          "id": "bed70e8b-7bdc-4d3e-9504-abaaee496ff3",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "9058c7e4-0376-49cd-b575-a44d2d6864c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41ab51f1-a78a-499d-9d8b-0d56ebd25fba",
        "cursor": {
          "ref": "54d225e3-4c1b-49df-800a-59e465975f0a",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "a8d77312-773a-4317-98b6-06724eb9f3cd"
        },
        "item": {
          "id": "41ab51f1-a78a-499d-9d8b-0d56ebd25fba",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "95151339-7d9d-4182-a484-89ce60bee281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 158,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf3fbf42-a231-4254-b6e1-08d08f145b91",
        "cursor": {
          "ref": "47408ccd-f891-49dc-8b50-44a292d5df31",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "d4036cac-bd52-4827-a2ea-005d97471dd6"
        },
        "item": {
          "id": "cf3fbf42-a231-4254-b6e1-08d08f145b91",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "b1dc4623-16d9-4605-b981-b78bc30c60af",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 8,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6a28b70-c16e-404a-af13-8e1aff7a52f2",
        "cursor": {
          "ref": "4d4e8bfd-5526-45cb-92a3-eaf008df4b5f",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "411d8306-b52d-47ca-8a3c-32d14e9feb44"
        },
        "item": {
          "id": "d6a28b70-c16e-404a-af13-8e1aff7a52f2",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "56a2debe-82a2-47ea-8464-d24836050af7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 17,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8481902-191b-420c-8791-d9ee20243465",
        "cursor": {
          "ref": "14d691d5-a030-424f-ba37-6fa687a4a3d5",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "ffd3a4b7-3292-49bd-b219-894b8a8c3372"
        },
        "item": {
          "id": "b8481902-191b-420c-8791-d9ee20243465",
          "name": "credentials_verify"
        },
        "response": {
          "id": "6efe6cd9-b274-4761-9812-a550ef2d7ebd",
          "status": "OK",
          "code": 200,
          "responseTime": 1103,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a99d3b30-cd5b-4330-9ebf-1310cde73f15",
        "cursor": {
          "ref": "52974957-576a-4afb-9d3a-a8b27a033287",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "5613af74-25f5-4d9b-a0d6-25aae5bbf304"
        },
        "item": {
          "id": "a99d3b30-cd5b-4330-9ebf-1310cde73f15",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "40aaf8a3-2192-45e7-9049-cdb0e8850117",
          "status": "OK",
          "code": 200,
          "responseTime": 1472,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6b108a1-e719-479e-bd22-bcbd56f56d85",
        "cursor": {
          "ref": "1ea7c39e-5381-4ba1-8d16-24a9e9a259c1",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "0bb00c06-c567-4a90-bb8a-1b129728ef8b"
        },
        "item": {
          "id": "e6b108a1-e719-479e-bd22-bcbd56f56d85",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "1fc2bd70-3b3b-4d53-bf16-ddefa188cd5c",
          "status": "OK",
          "code": 200,
          "responseTime": 1165,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85f1ce3a-e114-4490-a9ca-0685026e55b8",
        "cursor": {
          "ref": "1dd08d4e-7990-421a-80a2-e874ccda653d",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "1f07f04b-dd64-45b2-98a9-fbc0fbe2e9f6"
        },
        "item": {
          "id": "85f1ce3a-e114-4490-a9ca-0685026e55b8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c4b90fe5-7bb0-44e9-9ab0-663e60c14e41",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85f1ce3a-e114-4490-a9ca-0685026e55b8",
        "cursor": {
          "ref": "1dd08d4e-7990-421a-80a2-e874ccda653d",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "1f07f04b-dd64-45b2-98a9-fbc0fbe2e9f6"
        },
        "item": {
          "id": "85f1ce3a-e114-4490-a9ca-0685026e55b8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c4b90fe5-7bb0-44e9-9ab0-663e60c14e41",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85f1ce3a-e114-4490-a9ca-0685026e55b8",
        "cursor": {
          "ref": "1dd08d4e-7990-421a-80a2-e874ccda653d",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "1f07f04b-dd64-45b2-98a9-fbc0fbe2e9f6"
        },
        "item": {
          "id": "85f1ce3a-e114-4490-a9ca-0685026e55b8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c4b90fe5-7bb0-44e9-9ab0-663e60c14e41",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ecb3630-a6ec-4bb5-86b0-7ede600de4b9",
        "cursor": {
          "ref": "f9602acf-7e04-4137-99f6-0750dacbd006",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "0b191d4a-bf85-41e2-b8f9-c86311257e7c"
        },
        "item": {
          "id": "5ecb3630-a6ec-4bb5-86b0-7ede600de4b9",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "a95bddaa-ce44-4240-b2d1-5cc18c5b3615",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 25,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ae10896-120e-4f1f-b0bc-f1992c38f82b",
        "cursor": {
          "ref": "d221ef12-39e9-44a6-814c-82d5fd1622fa",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c4a12072-576b-4d44-830c-97fb4684e174"
        },
        "item": {
          "id": "9ae10896-120e-4f1f-b0bc-f1992c38f82b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "08f7ef57-51a7-4f23-ac02-8e9f4184d0d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "9ae10896-120e-4f1f-b0bc-f1992c38f82b",
        "cursor": {
          "ref": "d221ef12-39e9-44a6-814c-82d5fd1622fa",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c4a12072-576b-4d44-830c-97fb4684e174"
        },
        "item": {
          "id": "9ae10896-120e-4f1f-b0bc-f1992c38f82b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "08f7ef57-51a7-4f23-ac02-8e9f4184d0d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "4e9a42f8-6600-4d22-ad4d-65270f9c4517",
        "cursor": {
          "ref": "f7c78a8e-f46b-4ffc-8bfc-21f186c225a2",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "e98665bd-2c02-489a-8423-dd161db2deb6"
        },
        "item": {
          "id": "4e9a42f8-6600-4d22-ad4d-65270f9c4517",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "b93c5d00-9726-45bb-a67d-e503fa2c34f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "61523d3f-3442-4fea-b7de-56a87caeb7ce",
        "cursor": {
          "ref": "e3abb8bf-d6f0-4b6a-b5e3-b49421d68399",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "9b4d0136-18c8-45a5-a88c-ccb6687cc4e4"
        },
        "item": {
          "id": "61523d3f-3442-4fea-b7de-56a87caeb7ce",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d6fc4a34-c614-4436-9498-21dad687a15a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61523d3f-3442-4fea-b7de-56a87caeb7ce",
        "cursor": {
          "ref": "e3abb8bf-d6f0-4b6a-b5e3-b49421d68399",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "9b4d0136-18c8-45a5-a88c-ccb6687cc4e4"
        },
        "item": {
          "id": "61523d3f-3442-4fea-b7de-56a87caeb7ce",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d6fc4a34-c614-4436-9498-21dad687a15a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80e5fb09-bd54-4f1e-93f7-c3d08d58e099",
        "cursor": {
          "ref": "1ec12d6d-dd1a-4538-a77c-5ef3119b5e01",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "3812e8d3-9714-44f0-a144-4cc6e4d31f3e"
        },
        "item": {
          "id": "80e5fb09-bd54-4f1e-93f7-c3d08d58e099",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "9709b9a3-944e-491f-a6e1-8431359f88fb",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 46,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}