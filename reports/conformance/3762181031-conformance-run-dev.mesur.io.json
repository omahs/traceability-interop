{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "1919b9b1-52a4-4e67-a379-a71cf8636186",
        "name": "Clear Cache",
        "item": [
          {
            "id": "eb7052eb-1558-4f52-9f34-f96666d148d5",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d980eace-2bbf-4474-a3b5-bd97728c4feb",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "210cdec4-1b78-49d0-8b34-e2e7a308da7e"
                }
              }
            ]
          },
          {
            "id": "f6b4da6a-45f8-4a9f-a608-b228d1ed1265",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "77cb2653-5c7e-4829-9280-cb7605a0a5fe",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "61327966-d2b9-4080-be95-e7f39a9fe26a"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "2bdaa25e-8864-43b2-8b9e-2988bdbe3c37",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "8b3c055c-b354-4b2c-bbe8-77dd596f26c6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "dd5a8df9-3415-4847-9597-5d6a1df04ddb",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3d765ccb-523c-4f6d-bab6-99076a17c438",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5faa568c-6c51-47e5-9b78-e7bf84759738"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "acdb4bdc-f137-4304-8b92-7424deb206e7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "534d69f6-73e8-48bb-b45c-d94a778f65a7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "55485276-22e8-4542-ac30-30f4959a28ae",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "29bc97a4-54cd-4991-b2af-a403124dc5bf"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "63594197-4942-44e3-9376-304b664c5a1f",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "cb81ce2b-511d-4733-8dcb-4acd3ea7eba3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0054c756-057e-4e03-9bcd-a0999618b114",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f68babc5-1124-49fe-8af5-9880efea8f03"
            }
          }
        ]
      },
      {
        "id": "1beaa3d1-3d0c-4ac3-a0e8-7b36fd791695",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "ca86bb71-0e1c-4a82-b224-3265b90ad598",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a784e85c-6eff-4cad-a2bf-0964ac2698b3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "72e1b5fa-53c2-4e22-95bd-03301dc791e7",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "301275fd-e413-492e-b674-d8118bb7fa4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "179e4ec4-8748-4040-b2d2-2fa5f65e272e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ab16ffa-90e3-47db-9f3b-a55b9d1a57c4",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d015ac73-d62f-465d-9a0f-1b089d427be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bfbf4e2a-eaf5-4795-9b96-f93a076a7d80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3124e44-722f-4e6d-b267-f6059fbf2445",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d55320fd-34ae-4c35-900c-49d54b27b1fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f00bd312-eae7-4c3e-b511-5f84da877d6d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "aead4a71-a210-4e13-9430-97f799f34afc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "345051ce-9258-4251-ad3e-6565cdd1c51c",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aae0c3f-8c81-40af-8bde-c317e8720942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "388f9154-894e-401e-9017-d3e484188da7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "194313e2-e812-4bed-a43c-a2310f66e64e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "885b2ed6-9e9a-4322-a650-e5ec1d8237b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd540b5e-1b96-4a3e-bf05-bdd068799df3",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1272cbb-ed46-48f9-86e8-21985f886261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b1340e71-962e-46fb-a1f8-aff0b9667225"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9588e5a-b353-4c2e-bd47-612c3eeb5822",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "f6b1db0c-3a66-4631-b672-130d3f26faf6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "453aa153-0cd0-4596-afbc-89bd13fcfc01",
            "name": "Positive Testing",
            "item": [
              {
                "id": "576117ba-271b-4f0b-8520-c7a4af8c2146",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c4bbfde-7a3c-4e36-b38b-d8a407fc19e2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f05c0e7b-3f24-4cd7-88cb-69aafb85c96e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eeecf4b0-252c-4892-9bf3-e18bd09b8549",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "9d785f93-33df-4f79-8cf1-1afdff6e7e7c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "576f8cd7-0d17-4c97-814f-440882f17a5d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "70829ddc-5650-4817-aaa3-c5f1262eacd9"
            }
          }
        ]
      },
      {
        "id": "026ec011-0e13-46d5-97c5-8f93efd06962",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "1128ccd5-a5b1-429f-9f6a-c7e349e9fc81",
            "name": "Negative Testing",
            "item": [
              {
                "id": "68ce8357-2127-42b9-8c01-d4119726ddb0",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "ccc31ecf-72f8-4e8d-957e-a3fcbda4e898",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7989378d-b774-4b3d-aa2e-5fb48c7e904d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "281a2968-0c08-40ef-bb29-1407195ca53d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4e1b323-e679-48ce-942a-09798d9e1bdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "13b0ada3-a6e3-4f28-88c2-3eb16d772e86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f8fa555-bf99-41f7-b5c0-db26554d2d4d",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "480c0d61-6c3c-4546-b8b6-f23b7e94ce68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60fcf8b7-ed34-413b-91dc-677210452f75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83d89ef8-f1f4-46de-ad3a-54c9e0618114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9efa4862-b432-49f4-bf05-c9c0e1cab1ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e441660d-8596-432d-9db5-42fe9ca2b84b",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1c55281-797d-4b0f-a76e-a27a9ead9d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e317a085-934e-427f-88b2-d486f5278caf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9e6157f-35b2-4ee6-9719-a64ab812bf0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d3bf6a8d-b83c-4a7c-bd67-8cbde5d7c23b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58aac140-9c8f-4cad-88a4-a32169721d05",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "443a25c9-513f-49a0-834d-ae3253b84732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "563722d3-e929-4891-87d5-b0abd8f533d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5ae7eda-f62b-4b27-9a5a-16a178901e31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7a35cab2-0540-470a-a673-71baacbe76d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d40a688-1196-4b1c-b4af-b91bca4af00c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a211795e-642e-40bd-8b38-73b273502b5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc4eca09-1313-4a21-90cb-aefeac37ef45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8276ba78-d889-47c3-b9a5-10ff1fec3656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "160ccb90-dd2a-467b-abe4-1c1abf627e55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8742c535-55d5-47cc-9e0f-7a61d6c1baa3",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7019904-3704-4624-9624-14d49c91fac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67fd8740-0645-43bb-9181-e39b8e7de597"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd8514c8-241b-4b1c-ab70-004de8cd1941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2fedf8a6-2a1c-4ae0-8b49-490902023ea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfc3a86a-5bad-402e-824e-a44613dfb4b7",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd5a9f0a-dc34-4f2d-8b8e-1534ab21853c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dffa459d-5899-4325-a686-9c17bacb9de0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eadece5-781b-43bc-b832-dce236fc9946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "42137662-1a0b-4284-9046-b2f8f5f777e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b23f49b-fc30-45f3-bb83-08f188b1bdb5",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f4aaa5a-726c-4b08-9d19-7352d615d6b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe812476-fd9e-4cdf-a25d-1e0ece5d7ff3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f9fd627-58b3-47c8-80cf-c1368ca8eb55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "09e2c5aa-1f07-45a0-b24c-6a3d00de0774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57759713-1ec6-4d0e-9f36-c0dacd258714",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7785725f-c2ea-48a5-99cd-eb3e3fea6f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c56cbd6-5219-4ba5-8da3-0ef6eef9038e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b069096-9baf-46d1-8c10-c839b3d4b98e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e0faf363-1d6a-4cee-b68b-2f4c4ac2e707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95c39a60-b369-4c2c-af02-38335935b13c",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb39ff79-1541-4878-b7b8-b1f474d0cc98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8c9d34f-cc15-4332-b411-89a3b0730488"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff11b0bb-70dd-4bac-beb3-19b059c36803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d9cb215-30c7-4f51-a1f7-d58a31ef13d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c148bb35-07ad-4aae-8464-df7d9ea55df2",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f45b5aa2-aaff-4557-8c4e-001d3ffb04c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95053074-27bd-4cbd-bcd1-d1dedce22efd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb03b37f-9f01-49c3-af8e-bec0bf29e986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7c35eec4-25a8-4715-b3f0-2549ff5711b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "049ec9e2-1c7e-4a2b-9dbe-9cbce2e9816c",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6888b695-3511-41f2-a9bf-b81001e5a70a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0999df4e-823a-4224-871b-4f7d8d4420a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ee8bf92-40b0-4ace-882d-df2f28655ff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bc386794-fa68-42a3-aefd-67c3276f0544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "226c169b-6f27-48dc-94fa-66eec91158f3",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2a22490-8073-4fed-a86c-69b1fccff77e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f18f052b-431d-4c4b-b612-04689235cc9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f413a601-2292-4645-80a3-247654674b2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "54b37e1a-f735-4484-9fd8-cb59220b65d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d67bf75b-f44a-411a-af23-a493f92a752f",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2efb5444-c6b8-43e6-84ce-5ec4e7fc4c28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2575fa0-cb49-471c-9149-b0e4f6a61a1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a07a242-c3ed-40ec-ad8d-29ed545626cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "3eb62850-3a1f-47a6-9eac-59f7da5985fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15d9e726-5fc1-40ba-8473-21498eb6141b",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6614247-325b-471e-af42-53aacc7621de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad2ddd39-4ca8-4701-86f0-05049c37e158"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c61ba8e-6e6c-40b7-871c-7c2f8b43b868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f4ccc3cb-cec0-4429-a910-938bf75d8961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "686e26c9-b5d9-4375-935f-76af7a09110c",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21d7dd83-3041-4b8b-883d-14dc6411701f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58329cec-ca5e-41b2-95ec-b2fda8d9f3ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3638eea-b8cc-412e-ba54-fe65fe5ad9d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a553c2c5-61ae-4b20-afbf-c8e35dc276b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d044a459-86bf-4078-96ca-cd8710b641d9",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6b45a0f-33fe-4d4b-b77c-dfe0e6a3c7c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbdbfa9a-2620-47bb-b5bf-c624ead643a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7ab49fd-31a3-44cd-93f9-3d033a74a0ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "63978711-ac1d-474f-b244-176e83b537ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dfb995b-1f1e-4017-961c-ea0bb7068df8",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4507fc93-6fac-48ee-af93-0b9147afcdc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "050f699d-3f14-4c05-99e2-6055df32c0c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2cc6d16-00e7-466b-8c28-94fb7bcf5c62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d34f1b5-59f3-41f1-a97b-f1554d5f5723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5637d1dd-1e2b-44b1-87cc-d466c43104ba",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41b52b32-4851-4fe5-9743-7f00da32c9e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "108fd946-6a23-4ff8-a000-80540c653895"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00fa850a-a37a-4d65-90b2-ccad6f061bd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a2a99a21-3745-4d6d-b4c9-d8c2a5514c77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd05e5b3-a06a-4f3d-972e-c184fdda1d62",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4505e7ae-dd28-4bdc-8ee3-f859fa3509ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7f73a1c-cebf-467e-bf88-f9f0b77ee39c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29e06d52-7bb3-490e-9803-3e0c2b5c09a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf57595e-f789-46b8-9d50-9710328ed747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7181a4b4-0567-4629-908a-ff9272d71945",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f035a8ec-b916-4cb9-a292-9071b472f8d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "779e5580-1a49-4935-9537-8fc492ccfa62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "117de785-392d-4d08-93e6-cc30385e99a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "34f1a2ad-37fd-4a58-b8e1-289297fd4398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "459cdfb8-4e8f-4219-8b5c-c463d07ccc5f",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82da9e51-a420-4930-a1a7-e98e0b5e4248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f329a80d-b40d-430b-92fb-d91aa270a218"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4f82a05-8fc7-4ae6-93bf-0fcc7e711b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8088d7c-98c9-4fa5-b226-d72bdb4754e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d62ba1c9-4371-42ee-ba65-1e6b3e5bbff7",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69344514-9175-4d82-a631-b557b95a88f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0245300f-f54e-4b18-bfe4-62f22f82db74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0b319f2-1403-404f-9fc0-cff9c206b292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "68723ca0-7b28-4605-801e-4539b2668438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89f40445-3067-43b8-ace7-ea406557eb49",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c022f40-1c45-445f-99c6-a605f3fbd664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c7c5fae-d587-4919-ba1e-8622bba68aa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17c08498-ec07-4240-b90b-4f49f41b58ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "97720ea8-715a-4009-a62c-418dab01897c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5bb43f5-9499-4d26-8280-9bf4d0a6a1ba",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ccb38c-9892-443f-b32c-3edf89502fd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a93f63e-3417-4361-a768-3ca5c4e76683"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f68e2424-0602-4ad5-b922-f6324d6b0535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "64cfa076-3249-42a1-8c61-fd042086c8ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6f6c40d-3454-4ea6-aa60-8ff89665eb2d",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33dbe923-d275-4b68-9ca0-b634e943e904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73d6d70b-906e-4a26-bd19-d58bfc840ddd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09499c8a-bfda-46a0-86be-770c4e1ebcae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8255abaa-9788-4412-9167-1a0861f4ce05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d24663d8-9807-4693-bd4d-8d1957f0b732",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dff64c9b-61c4-474f-926c-93f14c2f44aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2759b178-07cd-4bae-af21-9dd2519978ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dbee91d-a5df-42af-8c23-043822c8fbda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "47512b8e-6bc3-45b7-a2e0-b7e9e637111e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a319a8a6-9b87-4f80-87be-9effef5166f9",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bcd0f11-738a-483a-89af-07b7ffea70ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4360f4d2-e20c-4fc7-b4a0-09f16e4406a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5bd6af1-57bc-4fd0-a03d-111c150075d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b4b0c57-2bb5-4848-8c40-ff5121dc1bfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80e879b6-6696-4912-82b8-cbc023f5fa60",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc3174cf-6287-4599-8b2d-1895f2d7901e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44125b95-8083-4d4b-b7ad-92f73a2eaad1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14518bc4-670a-4ab0-867c-46d7afce13f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "955b4af0-bdb8-4959-bfe1-d5bdda5cb3eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d81410f-9222-4c29-a133-0262c8da17e5",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab50d93e-98c7-4fff-8fe3-afaebaaa15aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1c97b06-a1ca-4e9d-9069-0c3946b8ee2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92dc18f3-d8ce-48cc-8034-bb0dd0fc75a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6c504c0-07a5-458d-bb42-29f1fe5c3692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b517164a-701f-4b89-bedb-9965fa77bb8d",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16ab565b-2e9b-4fad-b21f-f50e34f183f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a523f4da-77eb-411b-b97e-72fc852b41af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39789f69-75e9-499e-bc16-ad19bcbccad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0e9e4e0-3767-45d4-a64f-561ce650901a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2972cae1-3bf7-4855-ad65-8f44f670bf78",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "093c7bb2-d963-4735-8f4d-bf7cdd91397b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdff958e-87ab-4a1d-b914-dac11e884ca8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "300126a2-7499-46d5-9770-fa7a20a6d271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3e62286-3c84-4bf7-8209-a9e70517796c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d68bb414-6209-4ee0-8eea-ae11f1a43159",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18c1f749-78c2-4e07-bb50-8549cd948e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03ae0f55-7acd-41af-8399-649fc0dd9a48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "825ba9bb-39f1-463b-8015-b96c1baec3f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bd15b35-55e9-4bcd-b7fd-d2802c908e0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6d28ae1-3167-4edc-9382-3760ee27d134",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaca3036-39f2-4e6c-9056-674d1a0dd322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ba604cc-10b9-4c9c-8a83-b6989267b0c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bde600c2-baa7-42d1-9e0a-46afd4aa13d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "88f8587d-20e1-4648-907f-0b13970444a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "028a899f-898e-48ad-be0c-9c123564823d",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c50de4a5-3b29-41f2-a47a-0ce8c85abd58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45b44376-26f2-4d00-87ae-7ae569dce926"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e7df611-f70b-4bf1-a055-2d27581e0ba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d841991-6178-400e-8efd-67bace56ee37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e2448cd-23da-4960-938f-6da9149a2141",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6494f341-8d87-4026-b4db-3371bfb08aee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f361fc2e-3c4e-4510-922e-a077670775f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de80b538-38eb-40c4-8292-f58927dddf2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c00ad48e-e635-4b5f-ac0b-7a0150f493ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0436182-8fa2-40d8-a17a-5097e1eb5648",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "076647f4-9a0a-4258-9b95-80522f3fb805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "027df94f-0f50-4ba9-b6e7-7fbb91ddd93d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd73d9d6-097e-422e-a953-3d742fee9c84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "3da77012-0c49-4b17-9842-e46d45928d0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5ed4ef4-bbdc-465e-8674-29ec710e3933",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dce09d1-2f9e-47aa-ba6e-238012c69adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1ff76f8e-6672-4779-9d95-44a9d1cd7bd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0023406-05ed-4b70-9a68-132216600df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "815f008d-e505-4347-9cdf-fdb6cfe34996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a282e18-bb16-4851-9f07-d0cd94db9044",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "116f8577-151c-41bb-b1e6-058c84512981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45637c28-cd69-4827-8691-bd38ed864bd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c9b0883-6d2a-4231-87f4-ce1e4dfaa38d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "58f08f9f-3366-43c6-ad05-eea5a58d434a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21a3a777-53d3-41bb-8c40-33b8d0d477ec",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0867bcd8-100d-454e-8360-749b71e9bd5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cbaebd6-a0d4-4bab-9211-d406e511950a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2ade719-054c-48d3-98e3-94746db55abc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3ee37972-12e6-4043-ad69-ce874aaf6caf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e650ee1f-38e1-418b-96ca-c435e115e884",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f18b2188-ae1d-4abb-a429-cbf20d3ff616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af7aa4fe-28f1-433f-ba95-dccbabcb60f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "483f7762-ee19-4aeb-989b-8816f0fb4cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "69bc2a2c-61f4-48e6-aa85-51934295e92d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1da5666-ed55-4452-8fe6-a7f8ad157f5b",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a794a7d-c8cf-458e-b330-358f3f0b1859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2f034e7-efae-49df-b510-5b8b0c2960c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2a0ee47-9487-4b2f-9a08-b65898033737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b0a8b0a8-a803-4972-a460-c9f93dc1e5b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80450936-661c-4012-b3ee-4e9d62c572d8",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ce5ecaf-e8ca-49a0-99ef-1c5d21e59298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf4a19bf-a9ca-4b94-8c8d-b5bd52cfd60a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec879d68-1a95-4be1-b07f-fa3703d2d776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "23577e66-2fa4-43f0-a949-3fc64b68b309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c70eb91f-cae9-4e1b-8c3f-95ca6040f322",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52fb9d46-e521-4277-9175-5d8ca049aaf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e41e64ff-333e-4ea0-805e-f5367aff923b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aed54b3e-1606-4820-96bd-4baa371e77cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "6c4a09c4-38fd-4e0c-828a-d269c7e73d69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "292ddeee-38b4-46a3-9138-2d847fb544a0",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfec0f32-9879-40f9-befe-0e1028bf58bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7343303-93bf-4a8e-a178-1135c53110ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d7c2093-ebd1-42f7-9a78-ad4c4a6fe734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "09733fe0-b5a7-4254-a3a0-d962da760649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f92f21ca-f3ad-44b1-a9b2-9daf9f8a3a1d",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f9b7a64-53e4-4906-bc0f-eaeb164096c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19c4fc29-2c19-423b-a5a5-82a0a80f3021"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56d0e6a9-67c2-4185-a58f-8eb251167bf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "fca88339-e59a-45f0-8c45-39a87057175e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "395620da-49f6-416b-bd91-fc4be8174c6d",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fce1006-50b1-41ae-a326-36e62a2fecef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "177ae3a9-8c7a-4280-ba16-f2868868be6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a14d657c-adb9-4244-921f-5179ceb7f3cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8fbee9d-7e69-43ab-8265-603a37945912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc06941-7cac-43ca-b3bc-1e272011cc21",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c336471-cfca-44ad-814d-f2401df4394b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ec4bd25-48a0-4ca0-a0f5-fc51d1384a2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e5a001e-ffc0-44ed-8e93-735b81017991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c534f27-2266-42bd-bc33-35d16c3cc564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9959a29-8f13-49a7-b38b-f1694c1c1ff8",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d81a423-09df-4225-9749-28b8cb0667c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca1ad6be-7d04-40fe-bc9e-9bc467c8478f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "595faad4-d535-4e68-bf4f-6adaf6ed375e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf891f60-f430-4d0c-9c41-7a2cb670c904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8c7975d-7ec3-42ad-ac30-e401de334f5f",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd705d58-8a7a-4b69-85d0-1ebaa3c126d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d314f9ff-4a05-46d7-9239-6a95b462b803"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c999226f-1feb-4b36-9201-7bb5c63af167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "49ae9fd3-2a9d-4eed-a995-6befe830f70f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab8cc5d8-f7f6-4e0b-8af5-753abd656d23",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7199dc96-8a3f-4b59-bc24-73cb9436b677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b8eccc6-2d3a-4009-9cc6-40b8fc55fe25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2671cb34-00fd-4286-aae4-5b9a5f05848d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fbfa8eaa-a51a-4c16-9089-4b398163d499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fa28a3f-7bfd-48fc-9c64-e24df7fcbbcc",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceef2f6f-b10d-40d7-866a-236bb07c3ff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7f5d77a-918f-4f0b-a7e5-b0ecf030a416"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "217c0a13-482a-4e73-ad14-886c94a06387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ed6cd776-59c7-4407-8251-2caf0b510521"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7330d923-f925-4197-86ce-95c066704d3a",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f94b8664-b49b-4167-b415-6f1fc95e6523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73a482b5-b99e-4696-8bf1-5937f255d603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37af5725-f7c9-445b-9cac-a1048d1caad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0af8fd9-42e9-4e52-b4b2-e2a0153ef8b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fab74f3-01a5-46b3-a605-8fd658b11247",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "363e2b29-7c4d-4e1c-b646-3bb9acb0ffb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8daffebf-0bde-411e-ae55-0c2f6e829d6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0cf0de4-b34b-4931-bd83-0585a7dfc4ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "78aef580-5363-4fbe-93c2-0d181d8e12e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9e4e6b7-95ad-40b6-a165-11b3bf4c941a",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf185b8-732f-4fb5-a688-3b371c545e77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71fe66af-2a81-4046-ba0b-042bd0b66686"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba0c05c7-3e4b-4754-9f15-37ef50decc66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee8bdbcb-bc7b-466d-a3ff-5078f45e1cc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c344737f-f422-4d6a-949b-10ca901be8af",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9297fc64-341e-4c49-9510-43e2d3c03496",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e566e52-3fab-440a-8f5b-4acdbe7b2f16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d82266a-93e8-4579-8143-dff593b9f15b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5af2400f-9054-4200-a7c3-3e4822dc4a55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d1c743a-02a2-4d7a-aaac-fd302365bd50",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32ec02a0-7bb9-4438-95c5-83335e9f100c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "359793c1-7d27-40ad-b14f-5882c38886a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16a21c0f-a22b-4d70-a229-6332a37d28ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a38484be-6640-4d43-8213-c16de2cee3c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34d4cda5-0d09-49eb-8096-9bb669f41d03",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0d5a414-700d-49bd-877f-482c374f092a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab7edd38-75a1-40b4-8736-e450932b9c96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcea59d3-9dc8-4f19-bb22-aeb44d12c3a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "56fe0699-c701-4312-aee5-d06cdbe48feb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b2521d1-8111-40f6-ad35-3ad4b49e6e7b",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e91e3a9e-a980-418a-a842-69b355de3db0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce39f2c4-6e6b-4825-abc1-0c2d5f8456a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bee070c-4938-4d17-8145-e7d71f846698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d7336ad-f83e-4886-b2c0-7bdd5243f28b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0acc468-e971-4792-9501-c75ce7f999f5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6befb550-618f-4531-8294-ecff0eb79eac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cc71163-8562-44aa-9216-2c757bd71b31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5184dce3-30fd-404f-907c-c943f23e2cc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab987d97-e935-4b2d-bea2-c426be71d1f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58c6fde1-2749-4b9b-bb50-9d66d2e4dc9d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57a507f1-e077-4936-bc45-d81122e1269a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f88a3d12-2be9-4c53-9e10-6970ae323d4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13a81f67-2792-4ebf-acb5-9b3bc5c6d8d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "77b4f927-e9df-4be8-9df2-71be4f0fe36f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98fa69a8-9be0-486d-9c40-144a61343280",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e8c9779-c963-420f-acc6-edc2465a2206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5eee2a5d-8fb5-4b26-8d09-cb090d5a2adb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "990b0bed-9f3d-4525-aafa-e3623332c56f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "82349e63-5f34-40cf-8a88-51e9a1416b2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df74b93c-dbec-46d4-893c-d51ba68f39dd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "509b857c-163f-4b42-ab9a-35872b0e4833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d237aab9-7452-4be2-b284-0ad22b7b9961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec7b4ad9-0654-4e83-bb5f-6a9cdc04ea9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef421cc3-1c73-406e-8d49-a65c07953b92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e020a1b-68a8-42d1-a276-15a393421e39",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d52623a-e655-4dd9-b418-1a37e23e0bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99072a17-05a9-4768-bac9-017c890418ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4757f405-8ccd-4cd6-8c0a-5f2dffa1c910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb43a234-c372-4423-8c1e-35dec395604a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab02d0f4-bd5b-4208-9805-d7386771e928",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "427147ae-9944-41bb-9873-46db75638812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a01584d2-6712-41d3-a9b3-f002e423ab61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cd9a9ec-34e4-42cf-8b84-663f80988211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a31812a-49d5-46ff-a73c-54bbda65e5e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c0d7038-8aba-40a6-b225-50783e2344a4",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85886bf2-2734-4171-9347-711bb4ce5a2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21a76401-eab3-423d-b7ae-5ecc7e45a8d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7a5a14f-2dc0-4bf5-9947-909d5887388c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dfb79e7a-1840-4020-83b4-27ec2f8290d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5026b965-4ee9-45e3-b22d-3070c3b38a06",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee2de1b5-a1e7-47b7-9f22-9e02f26afae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c6e5f0c-62fe-4c0e-be77-b41963356eb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36a72459-9047-4afb-87cb-403378c47d02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "161b2c05-3133-4208-a923-29936dc5031b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30fd0d5f-a225-4c52-b062-1f9113a5d8de",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf29d3ef-c41d-44e7-8387-4cc9b1162833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0ef39d7-6cdf-4753-914a-ea5c4294e5ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9501e33a-6373-4b65-a4e3-5bea37217bf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a43c46c0-d11d-48b6-b046-61e5de92ab2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bfcdb9a-e1fc-4934-abbc-b9b375c6f92c",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "607f8962-facc-48b5-8de2-54d0604d3653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14d25088-481f-41c8-ab78-90a8dbc5dd60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b4f814d-348d-40af-b19a-6f4c7f14a0aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "87d82818-d0c6-49fa-9a6b-b35bd145620a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec85f0a3-00a9-4b03-9fca-036445364df1",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fa91d31-0a07-489c-9e45-a73b83cb5953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22507f95-b5aa-42ac-bd53-b595224d7d9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "082da7e5-fbeb-49d4-a4f6-126fedcf074b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f6fbc03-548e-4276-b820-e54cb280a95a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31a45d4e-668c-437d-a8fa-c4a11a878d2c",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ad9fb74-73ec-4283-83fc-753a98db86c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fab8bf10-4dff-4418-9404-1335223134a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bcb0260-908f-439d-b14b-ab95869b356f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a11d9ba9-7372-44c1-be12-a4287c5edfa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04cd9bcf-ad78-47a2-948a-fc0d06cdd98e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30929c00-a992-42b5-a75d-6ee1d372890b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3f351e7-6968-42b3-845b-92f9aeef76c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48d9ae96-5d20-4a2f-9751-56adea5b23ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "30cec976-3acc-4a47-905e-200b849cdeb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09957a56-70d0-4e46-b1d7-a3e2c0fade0f",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da1cb883-b1a5-4e30-871d-ad69a1ed4720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7658c35b-9102-4a6a-806b-3ace58a06068"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5516904b-5bbd-460d-ad84-3cdb1b8d425f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "98072488-7b1f-453a-afc6-e3e8a2c38465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "490ec2e1-1d84-48e2-babf-a21fd40a51c2",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec6cbb71-5199-4417-ad64-6461eb3d8adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "408d535d-58b9-425f-9996-0093a5f52810"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e88fa29-f90a-43b0-a1d7-8666f3907528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "680fa61e-0328-478d-8c32-bad70c16ccc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87162084-9b8a-413e-a500-985b8714c927",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c83451b-4c51-46d1-9531-6b6e47f32e41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cd3b89b-8d5e-4090-86e3-634865dffae0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "479268f5-11d4-43a7-8ee3-5a4fd4bbe211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "88cdedff-28f9-42e6-a969-7d56a5ae0ea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57e0517c-fb7a-4a9a-9061-9b0fe1ca8526",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5edb6943-d195-43d4-ace8-7b595f050ede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fc659dd-a848-456d-b6f3-ce771defca23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6d7722b-33d9-4d2f-bfcc-6a6737035320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a8df659b-7f80-4b73-bd13-264f46389d97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea2125db-88da-4e62-91e3-7d9586913776",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b184d7bd-6293-48ad-859b-43bf23855bd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ff55aeb-2e43-4ca2-8cba-3304b72647cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96b6acec-8a68-4bd0-8fa8-48bf5eb03333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "12591611-d41c-4010-89ee-30975052a045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7913dbad-7c9b-4b7a-a62b-3657524faeec",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34fae802-a510-4927-bc81-231708bc2d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31531707-ec1a-4c70-b9fc-510e08ae2f2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43469829-82e3-48d1-89bd-0221d23920e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd69ea05-59a2-4a73-91f6-e2dfbe184c6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "564c8a1b-6a89-4e74-81a6-bdc788f3e27c",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55b1f484-1499-4f92-9ca2-cc9b8349f821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65084e42-bf5b-422e-9d85-7b69267f5c7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2428c299-a785-46d4-9e24-e37f63670015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "20d87f57-eaeb-48e7-b766-926b821246d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f21aca5-ab6c-4284-9b1a-5b8452a4bf8a",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69bef2e8-64af-47c5-a9c6-ef66451c2dfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6533aaf-d656-4de0-b3ee-a4df9284be36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f5fd375-6b4d-45b0-9bd9-bdaddd18c855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa8a759d-b028-4b5a-be18-df4397337ef8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e783cd8-a28b-47ff-98df-74b2116aad93",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dc5ce47-9997-4045-afc1-4b21fe3d2527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5606f2d3-e1ed-4d6f-9444-625b6fa9cf3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28613853-9d63-4124-bc3a-a17949dd8e6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a35f1a0c-5811-48d3-90b3-4f715786029a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7dc63ec-53ab-41e3-b424-b3a074ecc25a",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cabe2b6-8253-4475-aead-a60abaad0d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18afad20-0de9-4a78-9b70-0342c8d2d7ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0669b50c-d6c6-44a0-a28c-8b6bbe29f6e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "58641091-4481-4635-8421-c7218a883274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a881b5e-2056-4850-b841-9554f12bca80",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6dd72c8-440f-42af-8716-da7355d9b47f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6cc3668-0a80-4791-99c0-d2d37301dffc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "214e5449-00d6-4b5a-8f8b-a9f9ad22afcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "02600ee2-c877-4787-906f-bb215af65223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eced37a-c766-4cf9-a2c1-f397f79564fa",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8219efc1-44d3-4fe3-bab3-77564e8f7a1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d802821-b8db-44df-a80c-0807446fbd3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29fb3844-4541-461b-924e-ffe887139c52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f33a7af-61f3-4fb1-bb38-00ae087a383a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4f92104-b8e0-4b23-8761-436e6e506f5d",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d5fd272-05bc-4311-af9c-100fbdeae7a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72f2c544-a574-4177-9361-2e381a1f4c1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5cff612-cfd3-41db-8b7a-7e967ce988bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "336e9bd5-8e1a-4f63-ad07-0553f2265fa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7587f6c7-b368-4d33-b183-a468b35ed949",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d6d90be-a8d4-4327-9f1e-a2ff921fa024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3de0f41e-0ca8-4624-89f8-f2df966594cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48fc57dc-f4f7-489c-ab87-1a0281c045b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce36bc81-c1e7-4f5c-83f7-77cdce22de4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc40e782-ac3e-4b57-9e4e-e6916ca38701",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd1b7806-0189-4283-b7cd-9707e37b5241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c16f8812-c7da-409a-8276-39622a12fdda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "824087d2-d704-4b1f-af72-11e8ad9fe329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c42c69b1-2a08-43d1-b9cd-b56c43acc943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6b2ef1b-a58c-46fe-b412-1aa437250cc5",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2d3e957-acf6-4f8f-9dde-2bcad02eb858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "574aae0e-3deb-4288-afd8-5b1422c05633"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ff075c1-3c9c-42b0-a809-8abc18e5c1d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a163c597-0fa1-49c1-8d17-c15809abc3bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b57e917c-2191-41a2-992d-135e3abd4315",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79670a1a-d015-4aff-82f0-fe081f161f5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d27ee155-3bc3-4137-bf34-c30bdc7058b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab14b7d2-71ca-4ebd-a1fb-846b7b23c138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ca15f84-9788-4c53-becb-1e1fd913dec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc89cf33-7f6b-4feb-b1e9-4af4cce3ff26",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7f13477-967a-4e85-bcff-5b7ae05350fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3af5cd74-9b8c-4a15-8dd2-b4ea8855b81d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6299252d-9e58-4660-9fca-d6bcf3182981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6d47a1a4-6dbf-4630-b788-913398115dfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8aa065e-0e2a-452c-80e6-1a3e82e4a84f",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7d98ba7-fac0-4b00-b55a-7088dedfd445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b81d2caa-62d6-462e-adcc-5d737113c3b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9faa069-1bee-4b57-85fe-abb0812bde07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9798e1e7-cbf2-405d-a339-af10386ce908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc362b8-af4f-47ac-955e-e13c4bd7eee6",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7536a5a-9bc0-4793-a6cb-e9cd941f3fac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b707fd2-ff6a-433e-90c8-b0c72808d135"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a8dac40-5fcc-495a-a310-2ff99b974735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2c96e6f-ae79-407e-8a72-7390118c6a6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59ddb74f-a6ec-478e-834f-828ddc14b5f3",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "117abd54-8737-407e-aeca-db9c1a9d4f9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "989dfc46-209a-4d38-bac2-113c8879b761"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5817f0e1-447e-435c-a3fe-b281821b6fac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c97179a9-2000-4422-8319-7131f6bb44b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08472d25-01d4-4604-ad40-3b9438f88b74",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5cd1bd4-b358-403a-8fdc-834c2226c00b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "9e02dcd4-2407-4890-a0a8-a5f54c3ca581"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff658074-9071-4bda-bc44-c71b20e6e762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "abc96af4-97e2-4dbc-829e-7505aaeb02bd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b4a9864e-ab96-463d-9cf8-519a4f40170a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "170af5bd-af6d-45e7-9ab3-ae1af903cfab",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "619a59c4-b2cd-4567-865c-535e153fcb00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b56bb172-e14b-469b-9851-2d56a0d62785"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c63b57e5-00d4-49cd-8ce4-a227c71dd968",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "5b33f422-3866-494b-843b-b61325797333"
                        }
                      }
                    ]
                  },
                  {
                    "id": "418fb2ff-6938-4bec-8d9d-207cf3317e83",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c50e454-1678-4dec-9433-7675cd992e6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "468d704c-a06d-40f1-ad58-f734679df3c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ee2c9d6-8457-4610-9ff8-fa1a0c84962f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "6f4a06e1-8f23-4a95-99a1-247852468e10"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2c764f2b-91f7-4801-a237-b650d03c6806",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3edc96c4-7a64-472a-a7fa-34799679d62a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a4cc76b1-c8a7-44d4-8894-c7098a280fe7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79544ae4-10a2-4903-9a63-f0254865eba8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5f261f6c-d1fd-4907-a117-0b993038f785",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5e989dd0-bd11-4948-95a3-8b47e5979aab"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d7c48ae8-1611-4830-83dc-7514c1aecffa",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5c06d60b-3808-4e90-8c0e-73b7560e9592"
                }
              }
            ]
          },
          {
            "id": "ed584f3f-4c51-4b44-bd2b-c5d2ec97ca80",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6787eb58-30dd-4552-a4cc-a4125ea94038",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7883e348-c764-4ab5-865a-a7ae17d81492",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e4a69c28-9d2b-47aa-a7bc-074abab93027"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b1bc4010-f156-4dda-ab71-b23c22d4219c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3f577610-72ff-4309-bbf4-96838183d9fd"
                    }
                  }
                ]
              },
              {
                "id": "af54efba-db02-4619-9bd4-f7d701ff6a5f",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bb0b5cd8-9e08-412d-b97f-1126baeeaf10",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2860edf1-ebe5-4ec4-b9b4-c128335eb5e7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "351ca64a-0cdc-4f64-912c-3e1e8982f725",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "58b91509-001a-41bf-b026-a001e76dbd16"
                    }
                  }
                ]
              },
              {
                "id": "b0fef5f9-4bb9-48b8-8056-403a64cd6ab2",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fcb32a70-cb04-4cfb-9540-e57ad43be55f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "03250c09-8ee3-4acc-a278-14ded90982d3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc080e24-b1ff-47f5-9564-f60dafb2aa92",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "9734169f-e8f3-4f0b-a2a5-cdb73cf30291"
                    }
                  }
                ]
              },
              {
                "id": "5378e64b-d5d0-4a7b-adc5-54994b76f5a6",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d622740c-14d9-423d-bd81-6f99ddadebe8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f17e5a58-62c4-4561-9cfd-b538c0533bdb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5179126d-c418-4f1b-8ca7-edccf002ed9c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "bd566bea-d97c-48f4-b3cb-d232090cc0c9"
                    }
                  }
                ]
              },
              {
                "id": "b3c6a2e2-6d70-4363-af64-55c578fa3ca7",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5666ccd2-539a-43ee-ac9b-f1dad51b5bab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e7c2ecaf-3300-4c53-80dc-fad41854ceb1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7f42e70c-d308-4f5c-aa46-09697a1f2685",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "261342d7-fe11-4dc6-91f1-81f155909de3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9fc44ee6-4605-4020-9908-e2de76f33e6f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6a2f4fe1-6946-4f57-b5b0-192b64f5e8c6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "25166baa-de8f-431b-b9a9-89cf63e4ce8e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0063b9fd-6ff4-438d-910c-86932357040a"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5ec8be8f-af65-4049-a257-1a8fd54271c0",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "a82988d5-8085-49ee-a106-f8ccb3a61ac8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e57088bb-7930-4ca6-be3b-9587c932e488",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "38d4c68f-a426-4e83-8fb9-32ee383b39ae"
            }
          }
        ]
      },
      {
        "id": "bc90c586-ba8e-4b9d-8c6d-2f28c8dfe266",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "f1e9a735-7ad3-413b-a3da-a2d6bacc7426",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fe5f3e45-a952-472a-8836-7c55fd6cccd9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "902a8ca0-dd31-477c-a3d1-f09c7b28a379",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e4c871a-5c64-4992-a384-965441e23682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a74d6d27-ead2-422f-8d4d-1bd868be2be9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e072fa6-421c-4c36-8ee2-8cf57b8e67f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6d98d0c-cacf-4ca8-a8c9-be5380e15da7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d13bd604-b65c-420b-af9f-62aaf2350117",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53a867e5-cafa-4757-a19f-d5387e98172f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81abbe54-ba00-4ea4-991b-2aedf9ca0599"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0301fe91-c4e8-4204-9150-1c951eeb0dbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2102e2a1-44b3-4bc7-9a9e-c20ee4070539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f95d8179-91cf-436b-ac6f-c982afdbd08e",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9a4b8c6-d7cc-4d52-86c4-530197a0281c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df7f5871-b4ec-4f97-8fe3-fd2c2fa8b851"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82675756-c532-4fc8-a089-25f689a0b89b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7e7017f-aca0-4d2e-83c5-73074a8db6a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f39649e9-978e-405c-aaa6-3757831db64f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76bb3fe4-9350-4988-bbee-e113578f44dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bcfc8bc-33c1-4123-9668-71ecf650e6da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c32119e-764e-4099-876d-15a6de8333ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bee02f9b-5e7c-4a06-9649-9a836b491cc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7d768f5-bc07-4a6b-86be-2fd32dc7be34",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a724ed1-b438-41e8-b3a7-2347b13cadce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bbd6ad1-d203-42e6-98ab-33a3d588977b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53d3f926-aa56-4b3c-b345-b7842ff186c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "769f44ef-21b7-40bd-857d-99da1de6fb28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "460d60f2-5a1b-4a73-b16a-ddb834c87059",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "517db00a-cd72-47c1-b6c5-5c1d4aa1bcbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "140f924d-8c17-4ecb-8cee-25f0943c2438"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7a0ebbe-a18c-48be-8e95-73be1eb38e06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1341b2ac-8639-4036-9abd-cc93cc82e184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da1d70ca-13b2-4cdc-8a8d-5d869f98f165",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10db1dd1-bff2-4cd6-ab1f-cd2277be8a30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60322b30-1d97-45ac-b500-2f5cedb6990a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0ef9ca2-76c9-4a57-bddb-25ff0dfda345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3e7c95f-252d-4015-a07f-5db5c7e134d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e71b8c71-e513-4e32-a5df-152b7f9ac905",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa114226-d5c7-4887-b4f4-6f3fcbd8d647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1d58cb6-9ff2-4c3c-a950-7ebb6562337d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16a8539c-8ccd-4a6d-8cc9-884f61e014c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b495eff-e1c1-4d9a-84fe-29ecec972c99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "418d65a0-9977-4d85-9fb9-b4db8f45d12f",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb30e82-6646-4a04-bc85-645d8a34b5a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80244e5f-54f3-4ed5-b723-11d4442ff763"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b99555a0-231d-43a9-83b7-50fef5458414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6c038a4-d996-4a66-8a9d-24334be73787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09775f40-5ec4-4f84-8a56-8a2ad5c95603",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adc364e6-28e6-46cf-a625-aaa22763810a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "085e3663-6935-4882-a63a-a74b0c3c5271"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24681a00-062d-4d4d-9007-e4bba7eaeea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab25cbfc-e2cd-4d85-98fe-9317ded2f3d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd783175-1333-4389-aca2-d461be678e4e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc4fbe7f-81ea-40d1-a484-0dae29d6177c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b474eb5-04e9-4c66-9233-3c6085bc4a45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dc1ef23-c8bc-4437-b93c-8ecdd6e4ac68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a4959a3b-4620-4195-bec9-90add72d657d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1436ed27-dcc9-4c44-94cd-0e86995512ec",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa7051e-fb19-435f-a1ef-2fe5555f6452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d562124-ed3f-400f-8df8-8fb117003a24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de9dc3b7-4796-4083-bd20-a810901d7956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5de73a3a-2a11-48eb-a031-e6e7357259db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08effa2f-04a2-47ab-9e08-a2be6338d64c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43889553-21cc-44bf-980d-e9b08f4261d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d70b17b-83ac-4ed0-b648-70f34837b17f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b012ea-4828-406b-9b24-9b96ff2a1726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c153ed5-74e2-4a27-8bbb-72a66d622c97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ff2b6fe-1e6a-4257-adc5-19f2993136c3",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6be43a99-8eb8-48a4-90b8-7be2acbfadcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29ceed66-1091-4652-962a-f56a773ab9a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66fda2ac-8e03-472f-b1c5-59400ed2a6fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "98ef5ecf-4ab3-45a2-a423-7c4c144a69e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a5c09d7-92a1-4f8e-8eef-c968af1617f2",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a57e8b45-3059-49d9-be79-f31114e7a0b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "569416a7-b9d3-4aaa-9321-d4de7c3c6e76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f827451c-b038-40dc-b1dc-f260bc69ddb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "be5c1aa3-60bc-4ffc-a8a9-eed53fdfbcac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0234e9b4-76e4-4e64-97a4-0215918d9656",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a084f844-b849-4ee5-b857-66d14149f7e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41c7930b-3319-487c-bae6-72f491074167"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68a06864-8ed0-41b9-863b-3baa227c5762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e4e06bb-8c52-4584-a7bc-d27be4a9aff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "131533a7-9e1b-4919-9297-8560ac472997",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46026add-3c23-4aff-9df5-88b67aa7c6ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a3732bb-03b0-43af-8e60-7dd5da0d9fa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c146bf12-2e14-4c5d-9d0c-5baf174ac38d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "5eeea662-35d7-4708-8d62-474cae30cc00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51aec905-da1e-4cce-9289-97e4bdd57e36",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7fda9fb-57ae-4fe8-8826-ced220727412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0e657a6-541c-4d7a-86fb-08440155c365"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a575448d-7d4a-4441-bd0d-85819ae19f93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f30ecc86-7b87-4532-8a21-b67b1437d7f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28ae4990-0f52-47e3-9340-40b91401ec48",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "051af66a-0dda-4fc5-ac6a-406faef9c0da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7081ef8a-0f09-443c-8d57-7855d8d3a279"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "934fbed6-0a0c-48e0-85ae-687dfb068fec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a81e9290-086f-4c10-9c08-ed9e7bea66e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61a6e2aa-c9ee-4b8e-bcc1-dc8bd3e895a4",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0c0a835-0f7c-4c0e-8494-fb8724713d1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b49e372c-0db0-4f38-9367-deef593ed241"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb9b24f0-61e9-49ff-af72-a9ccf6126722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "31b8d540-2448-4fbd-9a7c-2429c4c8b00e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92ba648c-3b74-491c-be22-a101e913b868",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33822d4b-d691-427f-9083-9a983349238c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7258ad0d-4780-49f6-8e2c-b75145838175"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89f0819f-62c0-4585-abbb-08a1bbec3c95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef250ca4-404e-491e-b643-51ddc0705302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48b57841-f02e-4dab-9a5c-ae8f47260c00",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c509fc95-242a-4dcb-a1dd-3985c9e026b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67797a3d-581f-42fb-b6f0-7917ee44129b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2a92a18-d3a4-406d-917a-46b5735d8954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2bf4527-bdc2-4858-9004-8f94ddde28ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ee87116-0d1c-46fb-a032-7cbc06fdb52f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36cb6e32-bf91-4e7f-ae12-2764959aa258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c2480d6-5637-44d0-af13-78b765668cb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8f59213-02d8-40ad-9289-62765dbd69a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7d1db46-0763-42e7-a2f3-522f0a86ce37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6eade43-bacd-4029-b0a9-e0576c7b2ddb",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "390f0bdb-d25b-438b-8543-40e88f4016b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58ec2f2a-0180-484d-93c9-2369bfe3a1a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42049721-8164-4c77-9b19-360db9b10e55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f933fa0e-d33a-4f47-8d83-f4199b41855b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db758cbe-9a8d-4f30-a906-da2b54989371",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "634b6065-dbd3-4452-b210-56a7a8a2fc21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54742536-b123-46b0-8897-a7919f1aa6e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0396314f-b189-4609-afbf-f82e3c65f081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdd6d433-411a-4fec-8e11-6307d4bd0a4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad4deddb-a382-4ebe-85bc-289aac6d811e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5af3fdf8-8fe1-449f-a43a-06e68ff92eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13e4269e-b3ca-41a3-8ce9-66868f5acf6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b3ba586-d460-4cc4-aa58-bb8ddec711b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e2174f5-5f21-4cc0-81f3-18e30f3970bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67b8b4c4-6880-4009-9d1a-0f49d937d5df",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7567daad-bcd4-4a25-b660-68aa87979b03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3de559d-82c5-4b25-b7ac-56386c2c8d72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfada7f3-a3b5-47a3-a756-e50ddd2db1e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca12c231-0f2f-4a7e-90a3-37062b5cac2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8726b513-baba-4797-ae97-eced11b6d244",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12f6c469-fb8a-431d-a752-f4b0837b5f40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a93c77a1-1baa-4519-8c0c-a5ada43c16e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e5e7a1a-861a-458b-a70e-ecf834f4d0ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0768cc4-4c41-4cfc-911c-ee1e9966dcc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95dcd6b3-8214-4adb-9af7-e6236830da5e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19e876a9-58bf-4433-bba1-8ff31f7bd9e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c702a75-7c6e-4821-afee-085840551348"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c312fd62-9f91-4846-9455-ee9951bf3764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d1330f8-b182-4c65-bcd2-bf8035a8dee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63000408-7f26-4933-844f-5cbaf3714a09",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d536ff8d-f887-46ea-baba-c20c0f21d79c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "641e96b4-b624-4a3d-bd08-3e65691e102c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a527bb91-7f6e-4c20-a773-c117e916abf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2416fa02-21ca-452b-b80c-d034bbbb772a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31e9b07d-2ab5-47de-bcc8-2e35cec3e6d3",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7f0f083-aa6e-4494-9a6d-2b0a4dd3de17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d26d537f-1217-44b3-a49d-946eb7ad8cd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44770539-3846-4c8e-bc70-a4edcdecc927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f74043c-cb71-4b2e-9e3d-c2ee523db0c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63ca0a32-e5f3-43d5-9f89-5e85d5fd350f",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e96c87aa-6340-4f0e-b279-35e2b8c018d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "306f7a3d-f47d-4d2c-917a-ead8574de50f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9c58ea4-d158-4862-b1d5-a2261b7bba1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "77f2f4d6-fa70-4806-9d81-fcdd7f5cf082"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "66089de0-e2cb-44c0-8f49-95b0b612d3fa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cb817cf9-e276-4429-a19d-7be92c7f2c8e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1272a2c-ee7c-4618-a31a-9a8bcafa3fd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6dc3cde-5880-457d-b2c5-74b3e05a2f6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "040df5b1-31bc-4920-b1fe-d1c1eaa97661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "02cfa6a7-5739-47b6-93d7-d89e39d3c61e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c179c57-b641-4208-a6e7-f9087e047009",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bc98f2d-9f3a-4b3b-90af-2406f692da8c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "a64afe0e-4f23-41f9-8dea-d65d8f07fb71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b6e325-04e3-4877-80fd-a5566db35142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6cc42e91-95eb-4ff0-821a-440f48100bf2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "412d3cf1-da04-496f-9180-24019b8c82fa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "265e6bde-5cf1-4c74-a813-93b251bb3d95"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae1c7b5b-6bc7-40ba-8ed9-3fd2e2db6a67",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "acce64c2-95a3-4c0d-bcd7-9660386ffb42"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8706e5c0-82f6-4a89-a88c-2f6c5f4571f4",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "87fe0435-81c7-4851-9e03-f0602821271a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3553cd8c-fde3-43aa-a7db-12a6eb53a616",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3b674ebf-849f-40b6-a409-69bf470c83a0"
            }
          }
        ]
      },
      {
        "id": "dc7f01bb-18fd-4e87-af98-4e42fead168d",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "7fec733c-129c-4fbf-8dd4-788302d73507",
            "name": "Negative Testing",
            "item": [
              {
                "id": "148137e1-f144-4d6a-9b19-89efe9e09ee3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e684fa0e-ea3a-4fca-a223-0790cc6205bc",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1750c45d-663b-4348-8669-7e18cb81d181",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9350fc7-62f3-4791-8c66-6bcb09a9e1a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4f21eb1-71ae-41fc-854f-ed123c70cb10",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2736558a-26e3-4b8c-b26b-9b184ca7b070",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c62f205b-8680-45ae-b1d5-53f075825c68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be5226ff-2d32-425c-827a-a884a5b7c170",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f60e790-38fb-44ba-bd95-12007a73e762",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ab57461-06c2-4b55-a3da-46c9d0176e46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9088b4c-885c-4cf7-a327-49c86f1f50c6",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdad43a2-1c7e-424a-aefa-6d747047a0be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6a48838-44a8-436d-952f-15a1b790538b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8af364f-0183-40d8-a4ff-f1ece7231f0a",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5b1c649-d892-4472-9bf6-034a6e85fe59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a5477f6-f89f-4a79-94e3-7b52446f3844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1577e59-2f27-42ee-8d22-fafbaef31d2f",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d643aea-5e4c-47e3-bdcf-e3ebe7e02c7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edd5ddb2-4008-4cdc-834f-f84ff1775108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c20b74d0-b5fc-43b3-b50c-865d6a97fc31",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9da19407-6562-4071-a239-e297f324006b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffb60353-2273-4a25-8a0d-cc78c411b19d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aff36ca8-1451-4dec-9f69-bc50bf484160",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1735ed03-963f-4555-8f7e-1c79c94d0284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0644c503-9e07-4a94-82e1-70e7bb358780",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07ca86da-8822-42d4-a2f7-524be2d65e00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7c7d65f-71ac-41cc-8537-71c4cc06ae06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4d8b580-f4f8-4fed-ac68-f541e366a8f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c2b7f15-2fc3-4701-a30a-64bc06297058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "999f7efa-bd90-4f4d-b57f-37a83874444a",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c6c815b-1c82-47cf-8832-69b552d1b696",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a857412-7325-4f78-88a0-1dce7b18f437"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "384da879-0fce-44ae-81de-1bf949bda83b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a19f6f16-6c82-4e95-abe4-46bcc241bd16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "746c93e6-0eb2-4740-8ad2-5cd8ea21d3ea",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20a402fd-5803-4fcd-9b6e-66f6b378c502",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e2e019b-18a8-470f-a2a0-3989eda48c8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c907b2c-37e9-4b58-a30e-6f694e5dd8f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a86bfc3-1d4f-4ddb-86d5-e7eb708e8a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eec2d65e-2771-48dd-a409-cc06ff8cb0a3",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3de79860-bd04-4fed-aada-398652d35b2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f467fc2-88f2-4213-94b1-7a59c40e53db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffb040d0-dd30-4a47-b3c5-947a85d108a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6610e32-d353-4e77-bf48-c63a96686578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1a82f8c-e54e-467a-8aad-f94d5353dcc9",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d708998-52e4-41f7-a8c3-f909754b1a7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f32613c-1afa-4087-b5c0-7496c7dd803a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cd9624f-a25c-49d6-be11-a365ebe1f7e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b82b0fa5-e3b0-4878-8686-878b024084d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fae2d1b-2b89-40c1-b842-78fcb9b58f97",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1a6e5de-efe9-44ab-a485-1ef585653da1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c4b4f19-fad0-454c-9a9c-9c48008e1bac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cfea060-1ef1-4ddb-a619-208dd2f0a838",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "545d0891-726c-4be7-ab5f-112fc18f3119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b7f39d7-0f17-4eb3-b3f2-8e5547d90220",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9739da62-c8c0-40fd-916d-05d7854ee45b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2c868dd-1ce5-4d10-8a0d-917e846dd506"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00983be9-db3d-42aa-a41c-9c7154b4749d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa79088c-b774-4be4-84e0-0002e91fd50a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fa9cd4e-b570-486a-a467-d0c5a68812c7",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d75a4d3-9e38-4a85-8b82-124227b418dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2d7de12-5f35-4193-9f0b-ebed231c873d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c7583e4-e2b3-45c8-a9e2-e91c991ddc2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f68a7fd0-4181-417b-b6dc-315aba9bd162"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e24c0bb-fd93-41e3-91a5-5486ac19adce",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8f774ca-4390-4519-941b-f864066f3bd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d6d0258-1ec7-4099-acea-d6cd5275c172"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd90a661-34f2-4f24-a42f-b300364f0ad1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e2287d8-fcdc-4065-8daa-ad5f6489e812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb22752f-784e-48fa-82dd-9996f5632723",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f45f8450-b506-4fb0-9060-00eb4ceb2ff9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5efe31ae-da4a-433f-a646-9b698700e3dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb975bed-a26c-4247-9336-8a1064448c06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e640cd92-2c5f-4631-af95-9a3ce58886d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "267240b8-31bc-4f8d-9610-7b72c5866336",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82d1a612-93f6-4d11-a0e8-2a3f50d3097f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc58404b-b5c7-42fe-9f55-7620b03ae5b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "327c8926-aa6c-430e-ba91-942cd391aecf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f74c2807-84df-4cf5-bb22-c4b6bf977d3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f556f901-8ace-49d1-92bf-3c91b2b68dba",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3199ab1b-6657-4381-9aa1-d5f8c1886c05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "073da8c4-d3eb-4d3d-ae4a-35983f127a55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dfd5e60-bf04-45e3-ac44-9aa23f7a60ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eed1fc00-e103-4c42-b1a8-dd69dcbaa047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f9191c4-9e9d-423f-8b7e-5fa0b628aa27",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17038f3c-b0c7-4f2c-99ea-783f05b2f76f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d59c3cca-8607-4ee2-a4a0-4815a6d5abf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75001980-c6f0-4f31-a0c4-c4c10d5d1e3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdf98998-428a-460f-ad8a-2ef74795f728"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7530851-ef80-46f7-9580-9dfa1aed0add",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea9c9ce6-751b-4bbb-8f81-35ace0a65b64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1e20d4e-051a-46a6-ab1e-1bf572ec3b5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dbb2705-dd16-4323-856e-3e4876a51c1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "760be9b4-d132-4873-b142-2697467b7207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f2b57db-ec40-4868-8aa2-3fc1ee11d877",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "951340a9-1c8d-4a52-b07b-a3d47b4b891f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cfa5ad5-c6d4-449b-8df7-0b3f95c8b0d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35815f6d-4c17-48f8-8ed3-733112efb23a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a77c7e4a-1da8-4bd4-899d-0f8649696f33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cec64265-0650-4a99-981b-6f7d279988a4",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f67f26f0-c100-423f-997b-e7b0a46f4f2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "714bb497-3d9a-46b5-a141-d4b1c39bde8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b34070ac-6615-47ca-9183-64a71e836fc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39e9f520-ff69-41c9-9f5c-b512ead5be2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "014702cf-7bea-482d-865c-e33039fe9fab",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dab41cf9-d48b-4ee8-9318-23e964bd8ca7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fc8838e-3fc9-4691-85cc-a5c34e507be7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbdd4166-3c73-4547-a33d-5d774b848207",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "215ab575-2ef4-40ee-b6ae-b57a80e87cfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "461b9112-f93e-48f7-8a75-0602b0b078bc",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c77d95e9-9446-489b-8af3-dcad6b521d6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd53f541-3af6-454d-9339-a815b081d3b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04b962c9-97f3-433a-9035-cd7b8c8755d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85a518e3-71aa-4427-a5c7-76afda6750c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bd5e8b3-670c-4c18-8229-3a0b4a5c0567",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a217767c-f911-4f7d-aaf2-bee091338c49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "823c7c39-5739-4183-967c-54d268b43862"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c3e1c0a-7af7-4416-8708-6f92f3d15f9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86a23da7-02c9-4e0f-9229-4e1f15cda714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14ab4b81-b327-421c-ab44-471ea8896141",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70f994dc-44fc-4815-af41-4252bbd6fafc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bf12d3e-4d7c-486a-bbe8-53dcc895db4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "627b24b7-f797-49d6-a96f-9b689f2da535",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb164038-0d54-463c-9ebe-1b377f08ecd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdbba43d-ee05-400b-ba85-347390fc0987",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c1a0c9e-4a24-4b84-9cc0-7b90e2cbe937",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "291885e3-9f58-4661-a37b-18d10f30b77f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b334fed-0e4d-41ed-bdf4-f2472de0097b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c46078d5-cda3-4503-8949-4426d029c4a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c766cbc-5b3e-413a-b6d4-8bcfcad8c7ef",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13ea06f9-5479-4818-a303-94d9660b75fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96f7c3c1-a77a-4e1e-8464-6f2c1e68c284"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7694b979-b4f6-40e7-b33f-93f86e9871e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a3cef8d-3ce5-4943-a035-dd9d2ce05bbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6276d88-4544-40c1-bbdd-1c008f6c425c",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "926b42ec-eb4d-4a80-aa78-4da8051542fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40ab7be8-5237-4287-9f4b-1447ca6c20db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea23b83d-5356-481e-a6fa-42b8301a4448",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f8af79a-754a-4cba-83ca-b58580980817"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e6f51b9-4eee-4e09-bc38-e39f54b503c3",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e582e7a-564d-4cda-9784-74e39ca89b64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94105611-ef54-40ea-8680-c3659044ff0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d955ba-a3dd-46b4-9af3-cfa7d8be00c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65150038-6ce2-4710-804c-5f375b55021b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbb53d09-4501-464f-b4b7-44dfd17ffbfe",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8924c8f3-ffe6-4611-876e-b161e115be57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6be4741-f3bd-47a0-8e9f-436772479bd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83735c32-516d-4f48-9bf4-7b8d2e291f06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4e10cc9-f88b-48fe-b903-52953ed1989d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cc9d53f-4959-4751-bffa-632ebdb3a43b",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "869d46ff-9a38-4ae6-9523-17a11361b4e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "842d38b7-4e9e-4069-aa8e-0a79582e2086"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e39aadf2-e17f-4a69-9e84-f4ee59dec77c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb120725-8c90-4670-847b-f9cc801a13d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbc08c7c-fcb6-4820-9c6e-7840899a0ed4",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20cb9871-df97-4cfc-ace4-2f7fcb781e7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ce0630a-5460-4e75-aeba-6d8b571bf84f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31bad6a9-724e-4832-8638-3f9f657f2f8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d122d814-d367-49eb-bcb4-7667f3f8d7b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3640aec6-3934-41f4-b706-674b103502e6",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c02ebc93-7478-43eb-b11c-5e00f0b6d27a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2a90383-b062-409a-ab7a-77fcb58bd678"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dc0eb40-7358-48d2-92ad-a16b1371cd90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11059d62-53d0-4829-9b32-71da92478ef8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c8c49cb-09a4-4a4f-a8f7-4c8c0fe09fb1",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42cd4a2c-f485-42bb-9761-345a81584bfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "898b927d-30c0-4529-9277-8f1648105af5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4782386f-597d-4e9b-9fda-0b12b695648d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0762848-98df-433a-8bb4-58a5815976af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a193e83-b96d-4c12-a5e1-bb9d674aa898",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a67f9070-7d6d-4992-ba64-1e87ddf470c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c545eebb-973b-48f9-b4f4-ea7056325253"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "878da6bb-225a-4cb1-8211-f5a32683b0c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed5f4820-9981-4459-87ed-77c968e9230e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "636d96d3-c1b6-4fb6-9b16-cf6a07176be8",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8987e997-32bc-4d29-9d5a-6a579ce39e88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c35e73b5-1643-4b63-96af-f96e2d962c51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d790c83-0c28-4dc7-977e-fa556d97dbfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53e5e458-34aa-49c9-9d54-b4fbfa9d7a81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c36abfe5-a75e-4235-b429-6d360c3e3c6f",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bda8174-61f6-4d43-9758-17ea212c4cbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "016e2849-20dc-4705-b57c-d8e24740891b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcf4eb67-c255-4471-a5d9-6fc35c2e3f2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ea48198-58b3-4012-93af-92cec8707948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9818a31-a3b5-42db-b1e9-5d81cd37ee94",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e531cea-df53-43ba-b229-cb61c3b49ef6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ffc376d-44ae-4ee3-8289-d3f2f1bb2a38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e26a83ac-8979-4e90-a341-060b30a0aa03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "553e7fed-6915-4a4d-b03b-dce7cefdf5df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba0eda2b-6849-4618-bdd7-770b36fdd840",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e582dcfb-5b10-461e-b294-6844e17002aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68e2ab46-d8f7-4cf2-a7ea-57c5f7d0897c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1d14051-059f-48f8-9ae8-5e1f8587425c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3522c5c-f5ed-4275-8679-3a2f1aa7d6e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00ceae39-8390-4c5f-b5b9-55a46004b06e",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eed91bd-3daf-4c13-8bd0-f79acd2a149b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e9f425e-9233-4c96-bab6-24c239b4bb74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67ce488e-1e42-41d1-b280-0f34e6386b02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22511847-102e-4d21-96f1-8d2010618f9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fc531d7-e009-4671-8d81-94bcccb8cd77",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d9e623e-9745-409d-a218-d43b21d4ab4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4852cabd-7533-43c9-ab83-eb8a2c708d7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7334409-9b97-4058-ab9a-0cfcbeb2b4a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5510ea5-0d29-4520-9b17-82880c43257d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9012907c-bdc6-4199-9d51-cfb080f40c10",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "999a8303-5987-4d92-96a9-6e5f90b5b290",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4483e35-e198-479c-a40f-f57b8cead330"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "808c9760-b245-4df4-8670-7d36efac7e9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc998646-01b0-4144-b80f-df446cbf179f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c93c1d81-7ba0-4622-b237-49e54eff8ce0",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2bb3dcf-a03f-4fe8-901a-a724cb44a556",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39b2ff31-1e37-4f23-b18e-ed23ea3b5270"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c61dd1d5-685c-4a31-9aaa-b2ab73ba0209",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31ac412e-cd3f-4123-9f9e-3985f68895fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6edaea7-1c8c-4468-a746-1931c177b6c7",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "024fc274-dda6-45b2-b28d-01653b8daaca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "267fb303-233c-475e-b97b-0f2672810ee5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e811dee7-619d-41b2-90da-85ec7ab1d8e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db153632-d8f8-4ceb-887f-6d07fe45f5b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15841ccd-866a-4820-947a-8ce68a561559",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de9b13a0-2c68-4220-bc5c-0b6da9841442",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e26beb37-d630-456d-a56b-6d173f3168cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0515111b-d578-4c5e-8aa3-47576ad3fb2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4b95f02-9146-423b-920b-6a586012996a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0112b88b-d0a3-4ccc-9f2e-c4eba414a6cb",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b006b6d-95f5-45b4-89e3-a197771fb385",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbb27dc7-a1a6-4784-9920-22322cfd3d1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f797ce5-5305-4b3f-a7b7-45e77e89aa88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b10b3ae7-8e6f-4e55-bb70-cfd9d26c0a4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6e7f4b2-8162-4ec7-ac85-d727d635bb86",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "346c9b39-1b24-4f77-b3cc-e2ec12835c8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79fe6929-663a-4980-b4fe-75c9299b74df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb3204a1-33ff-4b9c-aae4-0165b173fde4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ae5aea8-c69b-4294-9004-81b6248d2a40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30b35059-fe42-4f11-a390-d94e5a887474",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f66a2ff3-d53f-413d-857b-f4425369cf21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35f432b8-afc4-49a6-b37a-507c97d560ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31b67122-23ba-4305-9300-20ae08449c08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32340b04-3018-4491-b10b-1096aeac5e93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6969b17-a54c-43e8-bcab-d09b8ead3e12",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3f39eeb-a233-497d-8a5c-7764252742b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b42916b-2bfb-49bb-a1dc-7ffc35ff27a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1b11fcf-4c59-4b60-a746-40fe890cd365",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "516e4a72-e49f-4b63-a009-4e5b21a4953e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a14924f-1657-4d6c-a4d0-d67a1965f448",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9eb6d3e-fa97-4780-acdc-1a014792247d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "391ec8be-1aa6-4104-9ec8-d7f1b6884797"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d6c22a3-7a0a-4169-8a1f-f6cddf0c6880",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6d550cb-4e85-43f4-84f8-1e111a482952"
                        }
                      }
                    ]
                  },
                  {
                    "id": "487d62e5-9a8a-44ca-abda-93db5abf6482",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b2dd4c3-617c-4102-b3ef-4d2cbeabcba9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87526c17-398e-4fb6-8627-36fca1d4d511"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13c8690b-ca4a-494a-bbc7-8d094007bbce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c300d14a-a28c-423d-b5c7-629119f15cb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "162a7760-2c83-4543-bd28-224bb176a723",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64ec6d08-cfb4-4962-b95b-2567173e4ada",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5742a903-f331-4367-a3c5-9e37e401f06f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a21c0f0f-7897-4a50-b10e-207106be908d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d511cee8-23e2-4777-ac74-dc7e5a69a27c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5c0a87c-5181-41c2-b18f-b464724bfc3c",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5df3e721-4bac-45d7-bf00-69eb9b56897f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95edb937-2f78-47ca-85a0-960c30636a15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78dcf91f-4ffd-4151-b841-edf57f569fe9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00f20a6d-7efd-44c9-86ae-264f16291b02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10abe5d5-cb7e-4be2-8100-def062edef89",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c26a4f7d-f9df-47f6-8658-31638c1fce8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a34c8469-b86c-4096-96fb-ea997ec2bd06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16ada838-27ee-4698-9e29-d17d56fc3c07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "465db010-de40-4620-9437-8f47442fa384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3fb17f7-0c80-4dae-bf6c-e647adad3ebf",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4df03a5a-763d-4e37-a6c0-9c2db96cead3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32d90a50-8b02-4894-86fb-6b5855b50817"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fe7cb6d-195c-4e86-a6d0-160379f451ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f452586-655b-4a5d-be98-abbc24c8c269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a2fd60f-d0d2-4309-8575-212462dd771a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec006c95-bcb0-479c-a2b9-3ee366f838b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d64d11fd-7a3f-45eb-999b-481a97e9bac1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6165712f-c35c-4f47-b406-bd6610a1dd57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaf33dde-01bf-4687-b375-335dfb3d6e91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da7f85d9-8820-4739-8540-d8edc7b3f004",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "251b39ce-4eac-42c6-8a5e-52fa7dd6c1bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "900dd096-ae5a-42c9-ad79-06d4f6dad9de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07fbd67b-bf49-4e86-84bb-7073031e890a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d40e969-d88b-48f9-96ee-b5e95c2d41d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c23cc43b-0df2-410f-8b61-3706b5ce825c",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b36e5940-9acc-4b0d-ad04-6367be719897",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b72631e-a1e7-40f9-823f-3f8f94ff56bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ef5e40a-41a1-4ce3-b39d-d718b10d4362",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b067598-4321-4da6-83a3-c0c6337fa474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e7956af-7fbd-4814-a539-65182a48462c",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52d2bb11-c545-4934-bc96-f8f2dffc55d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8892e5d-f8c4-468a-bba0-c595ab42eb82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eff5e50-0780-4a36-8871-b9a773963419",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78ab2945-c263-4b25-9a3b-565b7c9a2950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c72fb4e-d7bb-483c-ab53-f69ef600ee60",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37ff311d-9bc3-45c8-8fde-1c02723192a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43e62a9f-7c6e-479f-8a76-ffd8cb26d312"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acb43ec0-233d-4c4d-b7b0-24e3f8a81441",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b56d5b5-24d0-4d81-83ea-d48140ffc87e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15b2e1e8-efd2-464c-b534-d46da074f9e4",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdd024f9-0bc1-421e-b544-bfe863545e2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b12e2ff9-6dab-4b73-8eb4-e3ae732a13e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf3664bd-fc2f-4f89-bdec-b6a64bfac856",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e76c2477-1b1c-40f2-bce0-9a7709e051f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4eb782f-11c2-41cc-8b78-0e6c98bcb5f8",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11157f75-68d1-49e1-842f-97011388d3d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59c09eda-38f9-47db-a526-8962617dd890"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fbb548e-9f05-43ed-9370-89a6ffe64235",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0345cfb-636f-4dd3-9a48-33d8f6c3014e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a70c6a13-02fe-43c0-97d1-482c4d5eaaf3",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a136d11-7d1f-4bbf-9d65-1bcf4c0e50d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d456ed0c-43fd-4df5-bf4e-3ecfce2b45a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca11431f-34c4-454b-8e3b-6632dbca2ac9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eab8398-2330-4f1b-9cdb-74eaa7df4c4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f987004f-7354-4569-bebf-8dc5fd7930f6",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fc49103-1399-46b5-85f5-74c42555e2fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75cfa94d-86a7-4f67-b501-06cd6af86983"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd6188c6-d76d-41ec-82ca-c95ece3f89d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b5d24df-18a8-4b05-95e1-a2961003603b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae7518e0-b033-4fb3-be32-f9358c09be71",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48f37cbb-5f85-4f71-a4de-4b8efe07c317",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f9cce20-a803-42f4-be66-d639aea1426d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea7f4e69-0fd3-4aed-8d79-ac3e88dee1d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9390657a-0b9f-465e-bcc4-25cab365b8e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "151dfb14-8ba7-4eeb-940c-8a3b9b7acc50",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c4bf417-c642-4ad0-a563-e6cd3a6bcde9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aad3e5f6-bf86-4bbc-b11a-bc75d9ceea4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a217de4b-bb05-4dc8-b211-b59dbe92960e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bba73c06-64ee-4f36-bed9-fb4b25f0dbbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "307209a3-dfef-4190-92bb-b8b94cfbb4c8",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b8db82c-5482-44fb-b297-95155090b3d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0477870-7922-45eb-814c-bc54c083e9d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2bd4ab1-4529-4318-a76e-8dbadd3c1111",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34df6d89-d243-441a-b6fd-c17d93ecfab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1b28303-cf50-4aa6-85d1-eea4c2bde09b",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fd841f1-3cc5-4116-bec1-89538a31803c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7099b2cc-d47f-42f6-87ad-6f46a42120e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95d1327f-9c65-43b8-a7d7-e8c8e21633ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0c0aa5d-dfc2-41e8-a46a-3fd9df89e43d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "867b64a1-56c1-49d8-9ea9-c7e854196419",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e187cba4-001b-4121-9921-902111943913",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0dcd3ff3-971e-4dee-90df-7c4dd4a217de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ed6bc79-8dc8-4ea3-8e96-19d0cd3e0fb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42c75ea3-6f5c-481e-8a7b-cf2663fc8c1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b09b9e1-0ab0-40a4-b8b8-a796e0222148",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dedb681f-2297-4412-b742-43a65b88d0e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16ef80ef-7f4d-437f-abd6-1ac37213e576"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08cf15a8-2450-4cee-9d0d-ef3cd60f092f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3159d5f3-8513-4251-955f-8f7ae8915965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89063bf0-9901-4047-b8e7-8d9eb5afd0fd",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c67a1480-fdb7-480b-90d4-caa12581f05a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef383f4f-aa23-4616-85e7-8ef3cd455440"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fec38f69-2c1c-4ee4-8992-6ef4889f6b28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93c9879a-303f-498c-9536-b487256157d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3968ead8-eb6d-4527-8eea-8a0d642642f8",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d51697f-d99b-4c86-b7db-ed542314532c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e18ce0c-ffe2-48ec-9f92-e045e1691ac2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2e3b625-34b8-4971-bbf2-d1791ff60f26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96dc8725-a867-4b48-b057-a41fbc3084d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99db0e2e-890e-4094-9b2c-b2b05a78c811",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4e2998a-0bfb-4caa-a028-c0826a9e9d8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0afede31-aa48-4255-8238-482504dfcafa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6076573e-8bc6-43b4-8255-cffd1370fc75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0583884-c61d-487b-9eb7-e401650f1ee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "358f5cc3-6ca9-4f23-b7cb-c6fa502be014",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "721ee704-848b-4344-bc8c-68867dadc9b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1d3ee0a-7d16-49c5-8f85-e9d33a550872"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b67bc03e-943f-451b-8759-5abd5937b4ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27b1a201-0587-49e8-89c0-cc6aff4b6a0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94f37bfb-c406-4fa2-821d-7561afd9a2a2",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81f832d4-dfca-4a9d-8c73-4f822db38540",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "208cd6a0-5a8b-4930-af66-748b9f12eaad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94227885-9510-44dd-993e-b99f30cad340",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26a3e19f-88be-434e-8ce1-20c7fce6ec8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c00f9554-9d12-4dee-b8f7-2ecb547cb5a5",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcf1e4a3-3430-42c4-b0c2-d45132db53a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ced25089-1570-4437-a0c0-702ae1b9a4b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c726761a-04d7-4872-aac5-fc238fb389c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e79503a3-fba4-4360-b2c1-d923e8219a56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85ad70cd-67ff-470b-8879-9c4ab4ed9fbf",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41727cc9-b161-4136-ad6a-a40de534b4a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c905eb3f-6e26-42c3-8107-9498076ddb2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d19c63be-049c-4c8c-97a6-00e5305f23df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff8b1815-c152-434c-b7b4-10beaa1fbae8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d439b03-3eb2-4a3f-b77b-a785ea637e8a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e37a58f1-962b-407d-bcb4-393f9a0fcacd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb7e12af-3047-4353-b382-1cdaf4ac3731"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e478482-99ce-4078-974c-145efe8ad699",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "115eb438-631f-4ba5-9e93-c040c7628b18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa3b5967-3c29-4bd4-bcb0-1c986ffa61a4",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7afae2ba-2790-433c-819f-7bfff3c552a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad683a94-532d-4b01-8514-7475748e14ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bcea50f-682d-4ccc-817e-e1e8335e6ac2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c1c2da3-fd6d-415d-9b22-f691c5f9d4eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af314f22-4f62-438f-9bc7-ea1a225b558e",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75edb8bd-4e3a-45b4-9229-f09a51a46ec5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18d52652-f3a4-4d65-b44b-d52950e30b2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "895c992c-7f99-4f7a-8520-64ef5e806e09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba493bef-c69f-46a2-b3b7-0f900ccb1c37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7da640da-af25-4922-9b92-dea9ef28f2ad",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24fcdfaf-9d28-4662-acd2-6a495fbab9c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e252a3bd-6ef4-4d84-8050-2256d6ab9c86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "824de2b1-4b65-4f46-b25b-96b081ad3ff6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4349ed2d-8e2d-464d-a493-7b444bb7c6c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c63dc4f-be5c-481c-b581-66701e7b3568",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68a9fcf5-f0c6-4037-abc3-04753beb8c48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0821b31c-4017-44b6-b84a-e99a7a7a58fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ee1f5e0-1f36-419c-8664-6586c9090d4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "813ecf72-ce3e-4f34-b5f3-e2e41594d34b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ea7d855-81f2-4819-b1ff-7482028b4be6",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca0dc618-c8c4-40f1-8088-e211f7b3fb1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1775d169-9356-424f-b88b-23d89fe37814"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6908ff89-0412-438b-ac88-5c83ae1d4391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f5ce4fb-9cea-43cd-9c68-d97b215272e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d939292-ec06-4e7e-af23-6029962f4e2c",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7e5d6de-d3dd-4f4b-ab13-6bc37159b7a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef7ff238-30ac-450d-b537-f3934702dbb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f38ba3fc-252a-40cd-8e8b-15fda98cd0e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "507a4a99-776b-4fb3-81ea-77c2d850ed9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a36498e-9992-4d69-ba43-c2a4359fc70f",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8355301d-ed57-4c0a-a576-77098f778b8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6527bf6e-e071-4c87-9efb-824a133a0702"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eed00c8-c88e-4319-bccd-d52a93702c3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b979453-8205-4af8-bb6d-33e34439ffe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f98d5884-9e32-4f9c-8b90-03aa1c38142f",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dc687a4-16f6-46a7-9af8-e433a7691e69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d49a83b-3f75-49cf-a307-08e43057cdc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e080d58d-4d46-480b-8cd7-139dc405bcd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8445b03b-8369-4e77-ba37-b988ed56ba61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc7fe544-c9af-41c0-bd47-e33c8981d557",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42356f14-f275-4770-9cc5-abddaef777f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a59c405-bdda-486f-a390-be9494e7bdc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0935e9d2-e7f2-4679-92ff-b1b6c2800350",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1642b8a8-a930-441b-b4f9-59c091dd33cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc980111-39ae-47eb-9d8d-f31f9220273e",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af1511b-049b-42ab-9eb2-f7b4812814e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "213c662c-e737-4b35-a6cb-f52dd856973d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0093438-82f1-4d0a-8c63-0af67978d897",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83838584-2838-42f4-bb72-974f44d454d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bf8646c-17ea-4ae6-a648-5a4aeb543be5",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06e4e531-5f8e-4f01-9c34-ba2e24e2c25b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dae7373f-9c51-42d6-9923-f4f916cc5031"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9118e462-1b54-47b3-95ff-b10c61308dad",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70cfebf9-14c0-459e-92b1-00b7adc8cd78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54c386fe-49eb-4012-b823-d3ec78a522f6",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82cbbf3b-9d84-4b7f-87ce-c5d0cd4983d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efb67f6b-701a-4da4-ace9-fe6b26b94163"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f143c41-e679-4a49-ab56-adaa5b6c98a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cdb89a3-3051-4d37-9653-cf33947b0acd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ea0602-a016-4e5a-a85c-2eba8bb07ee3",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b84b5b4-a400-4b8b-9ab7-054e03af3bcf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c16a0856-3b34-4c94-94f9-16c04948483a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25d83874-e53e-40d9-afb5-9f69f579b806",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "967b8a8c-d672-47c9-9eb7-64902cdff8c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3b49ea8-f55d-49f3-ae2e-9bd2ddeccf0c",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dad93e7e-fd77-4b2e-914f-6b59ccd38179",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70bc6688-05ae-4777-951e-23b96358eb24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43094835-f958-4de9-9df3-521a7fcdba3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d16c476-1ae5-4ba8-9c1a-aae91a65f361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d15b119-e9e2-428c-9ea5-c66718bee1eb",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b75261c2-ae95-4671-af25-77e9e4518abf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e04eb6d-9c87-48b8-bcbe-321c152c4e6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f8f7638-aaaf-4ac9-b9d9-e3c6f0608e99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca4461a9-5c95-461d-8fa6-5e7a540ebd24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8df512b2-47b3-460f-869f-50970b5f9bda",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35ea13ea-42e6-40b6-810c-958892a8e683",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c6c2a2e-8f04-40f0-b6b6-b7b9d0d90732"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b1892bd-010d-45a7-8668-177868383233",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "177f5604-66ed-4452-8f11-eaf1fc550ae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a8c4bfb-e08a-444d-9875-a46f8da1846a",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9f86106-47c0-4b62-98bd-c32dd33b79fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2b7c8cb-1bb9-457a-8c4d-fb0d56890d10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff4ab9b3-3fef-4bf0-b39f-98ac4b050faa",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c3815e2-9903-4c99-8bd5-edbfbbd3c4d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47d19064-8388-486a-af5d-256f11d15624",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34358c35-544a-4fb0-8a27-7992d74149ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "332772b9-6d49-4813-83c3-0e647481be73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b00f689-f1a1-4ea9-b395-a2b9da32206b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d14e8d1-2cca-4e15-a344-7302a62307f5"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e74018d9-1cdf-4979-a1d8-f1c93669a366",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5c590ca1-db17-4f28-928e-351c44741246"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6cb195b1-5ba1-4637-917d-6e9fe7ca8e88",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bca734e0-17b1-4c5f-8def-593b2ca313dd"
                    }
                  }
                ]
              },
              {
                "id": "327d325e-9348-4bd3-9d3f-41a9ce41bf8a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a20b7ace-b483-4693-8142-b1a1b518e70e",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f848ebbc-4109-4ed4-97f1-ba9ca5546eb7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "d05dc8d7-6691-4b91-8cb6-e375dcbafd00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d1d323a-fd53-4d08-a267-be65b48d37b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cc016afa-c081-4b9d-bbb7-bd70df9eb37d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44ae4b9c-6d93-4a9e-aa83-cb47bb86d03e",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eecd6cd-3cb3-4e2a-867a-3d1a75641621",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "cfd2b605-7131-4aa6-8fe5-ef4e7719fed4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5958bdd2-8ef5-4095-b13f-25e36c32a6ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "58eeb95e-f149-47d3-89b1-34f3a70784c7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "20620c7b-4ff8-4f54-824e-bfa848b71609",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "47694c45-ae62-4e15-bd47-c3370abc0805"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "947454c3-bde3-4212-9e8b-df5d38cef5bf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e96051c9-5f1a-47f7-ac06-7a14e5bbe84a"
                    }
                  }
                ]
              },
              {
                "id": "24445307-64b7-4c2b-a134-9b8e7dde327a",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "12e0f235-a911-4669-b966-4ead0693f7cb",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "242be9a6-895c-4349-8bee-a7aa7d204b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "59100621-82ff-4ebe-93f2-65945e7a4fc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e261784e-e05e-4692-b4dc-28bd3c8ed6db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68117f0c-b78a-4749-9880-93e7930b1be6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f92803fe-e2fd-42a4-b342-3442661337c7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a5bfed70-d8f4-48d2-9fed-a37989ed2051",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "41de7657-f16b-4e54-9397-4c22b5a18c30",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "21c73b47-4c17-4703-b467-2134676b6af8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e9845e1a-eaac-46bf-8d08-00d94c6a73e0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9e54d195-21ea-4392-8944-6e932748be86"
                    }
                  }
                ]
              },
              {
                "id": "b2c2e08a-bea4-49bb-9641-551f6e51e486",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "492010f2-1ba0-4d2b-8f18-3cb029ae2ae5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9e72978d-95f9-4461-ae7b-82b242e5b3d2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "569236f8-277c-49f9-a315-9d0db33b8d96",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "67c4af28-9205-447a-96f9-5bf36cc0d1d0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "97db1db2-ab69-4afa-8185-856e41322410",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "1a31304d-67c1-4c02-a9ec-2959cf3c14ed"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b994ef73-98be-4369-9d40-1b3aa7c303e3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4a5fd017-fff7-4f62-a5ed-a730abcf5f92"
            }
          }
        ]
      },
      {
        "id": "7b7f3721-2444-41ca-8911-91493fe1f412",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c6264ecb-ffe1-45c1-abba-8693c3f3c939",
            "name": "Negative Testing",
            "item": [
              {
                "id": "80e83e40-a359-41c1-aad9-3310bdd33398",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "75994d22-92e1-415d-80f0-d41c3b295efd",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1c1f123-35cf-4069-9b3e-3ba7a54b5fea",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "54a57bbe-11fa-4688-b320-bac3d96871b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aea12c8-85a6-48a6-8e4d-8a6c6747b506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "77c91842-55f6-4ad9-9b93-16e5cb3f2a4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14b59a95-ec9a-4b3a-9c4e-1fa653866ae8",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99fea745-7ae5-41b9-b966-3079332e98e8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "38de9a57-539a-4fab-9928-3f59a75cea2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93aaff5b-99cc-44b9-b831-6b6c037b9045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b85b1558-8345-45d5-82fa-efa0cabcbc67"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7dff4328-f72f-4cfd-bff8-e828d7e96320",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4d24c05a-8462-462a-b069-f489e84ed67b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "16053c26-0d3a-41cb-a13c-9801d720a766",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ac6302f1-fba5-4810-8d4a-dc23398c2925"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "02aaadb4-cbbe-4b7c-91ce-8b2cace9bbd1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "bb194b56-f843-4aee-a164-01f1c11a7cdd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "220b8d98-19a9-4e37-bba2-e830a1d2c3f5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6915dda0-89f5-48b4-af90-2f03d7487a12"
            }
          }
        ]
      },
      {
        "id": "ee6cc9ae-0be9-4683-91ff-5390308b7029",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "4497da78-9694-49f0-a8c6-bdaa159e01a0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "caeae918-89e3-435a-902f-5792b7fc5e4b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fd35b17a-664a-42e1-a72c-d6ad065a93a9",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94493a4b-6a74-45b0-8752-2f8b2f4e06f9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8aa0ae26-fa2d-4517-9547-b1a4da006e69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe5cdea3-14e8-4d61-9ba4-66df0efdc3c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "69514722-1de5-4dee-b08f-5de450a3ab91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc96f265-d70b-4db4-9835-085712d9c303",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43437687-40e1-408d-9f52-5ec53619b617",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b1c2daec-0878-418d-965e-7188a26f88cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1453794a-e7ef-49f7-80cc-61d704b53451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4feb4785-24bf-471c-947e-02d12d49b31c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3ac80f46-ac67-47cd-aa99-0e52d300124a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "576560bb-ce8a-4662-bb7e-8119d68b22e2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cfabcc26-d6c0-4756-bddc-38ab1e305257",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6883f153-0576-439b-b3bc-9d13f63a93ab"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ff1602ea-b141-4a5a-a432-7200375451f9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "2dc346d4-e922-463e-9e05-8499af00326f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1a853b41-8741-4597-9287-d1195184b7a5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f6d4c489-7497-46c7-9c25-fcd4c30a180f"
            }
          }
        ]
      },
      {
        "id": "c53ee39f-2c91-401e-85c5-6cff9061c56a",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "a83c9d03-c1f1-497a-a5d2-98263f26384d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c2a0ddc3-2069-4133-bda5-8ab8a5c1be7c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3afbfbd8-7f81-4d7b-8b47-616c8e17ad86",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfc0010e-a857-418e-b166-a8514c3c5aa6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "687ee4c6-5408-4010-81bb-7873d43beb27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34fcf8f8-8bbf-4697-b62f-92ee453d1782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "66cc5900-b723-4253-8577-f12e9cf8ac96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3334c09d-aea6-4404-9419-8fa9f7e282cf",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d33ba1fb-450d-4453-ace2-2ac3fa996b3f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "26c2f404-4eab-4a44-8f3e-d04539c29f2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93630a0a-0f2e-43a3-a1e0-49b0968772aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8c2b8042-012a-4ada-82a3-911bc5ce04a2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9cd549e8-580a-4ecb-9ea8-de1d1148cc2f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e68a80f3-3b56-4422-bf0c-6ef8eb1acff1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "224d97a5-4f7d-4e03-b08b-490d73df5385",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f435d99d-a8de-4eae-b52a-416246daba69"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0b20be2b-1fb2-4c8a-a4b7-e46e1a8c4edf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "101dd851-e1f1-4212-b60c-2c7b9d6b7b3e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1d0cb928-5079-4d8f-9e87-ff8dbf6fb817",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "143212f0-4fdb-420f-8664-9985f98ad4cb"
            }
          }
        ]
      },
      {
        "id": "b11fed9f-50ee-4c87-8c13-fb5ce63f1b56",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0598d6d7-cf79-4be6-a11b-6922e4610ce7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "be0ffeed-8743-49db-8d9a-4d2ee96909fb",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "9806e0e8-aedf-4c97-9f48-f890585eb17d",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2d5d521b-0de7-47df-a366-fa5049906af4",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "80610f38-0e41-4810-ba1f-d4130dd2da55",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 87.31297709923662,
      "responseMin": 3,
      "responseMax": 868,
      "responseSd": 174.42998043877003,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1671755783466,
      "completed": 1671755817460
    },
    "executions": [
      {
        "id": "eb7052eb-1558-4f52-9f34-f96666d148d5",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a38f8c68-ac99-4f11-9c71-13ab948c9fe3",
          "httpRequestId": "44ce83d2-1eaf-4494-918d-ffbb367cbc0a"
        },
        "item": {
          "id": "eb7052eb-1558-4f52-9f34-f96666d148d5",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "b9cafbed-ab23-456e-9637-065366853da6",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 0
        }
      },
      {
        "id": "f6b4da6a-45f8-4a9f-a608-b228d1ed1265",
        "cursor": {
          "ref": "8d47e756-3132-4f42-8aa2-324bd3fcf1df",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d3a57c76-ccb7-49a2-9fc8-c103eb1ff6ea"
        },
        "item": {
          "id": "f6b4da6a-45f8-4a9f-a608-b228d1ed1265",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "f3a4da9e-5fa1-49a1-b8d5-e54571dfdd55",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "dd5a8df9-3415-4847-9597-5d6a1df04ddb",
        "cursor": {
          "ref": "3874e818-976f-4b6e-a0f6-289ca55694ec",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "05d5319a-5cc5-4ea3-b26d-4d4a3ac06ff1"
        },
        "item": {
          "id": "dd5a8df9-3415-4847-9597-5d6a1df04ddb",
          "name": "did_json"
        },
        "response": {
          "id": "ab95e4ad-ffc7-4291-a461-b7f5b42beb64",
          "status": "OK",
          "code": 200,
          "responseTime": 57,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72e1b5fa-53c2-4e22-95bd-03301dc791e7",
        "cursor": {
          "ref": "eefad316-960f-45e4-aaa9-1e588cede73f",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ae382a47-2cb6-4238-95af-86b7c52bf569"
        },
        "item": {
          "id": "72e1b5fa-53c2-4e22-95bd-03301dc791e7",
          "name": "did:invalid"
        },
        "response": {
          "id": "53643d2c-f63b-4fe9-ada6-09d519621100",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72e1b5fa-53c2-4e22-95bd-03301dc791e7",
        "cursor": {
          "ref": "eefad316-960f-45e4-aaa9-1e588cede73f",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ae382a47-2cb6-4238-95af-86b7c52bf569"
        },
        "item": {
          "id": "72e1b5fa-53c2-4e22-95bd-03301dc791e7",
          "name": "did:invalid"
        },
        "response": {
          "id": "53643d2c-f63b-4fe9-ada6-09d519621100",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ab16ffa-90e3-47db-9f3b-a55b9d1a57c4",
        "cursor": {
          "ref": "62f4db82-5246-4419-b18c-f9d6c952b33a",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "d80f8b67-dca1-416c-80c2-5559d0258e64"
        },
        "item": {
          "id": "5ab16ffa-90e3-47db-9f3b-a55b9d1a57c4",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "d0d3c65f-eb2f-47e8-a383-1b690e658c27",
          "status": "Not Found",
          "code": 404,
          "responseTime": 50,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3124e44-722f-4e6d-b267-f6059fbf2445",
        "cursor": {
          "ref": "df5d8d04-ade8-4ddb-b998-cd1317182184",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a39c200a-c9f4-4ecf-891d-8ea3ae03c8ba"
        },
        "item": {
          "id": "d3124e44-722f-4e6d-b267-f6059fbf2445",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "392f1926-f4ac-4afd-9555-8c0ed53b74ef",
          "status": "Not Found",
          "code": 404,
          "responseTime": 5,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "345051ce-9258-4251-ad3e-6565cdd1c51c",
        "cursor": {
          "ref": "b94137a9-7d3b-48b5-a180-a2205a60d356",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "98256b9b-ea3b-41af-b6da-db3411c6563b"
        },
        "item": {
          "id": "345051ce-9258-4251-ad3e-6565cdd1c51c",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "40a49e7d-27c4-4d61-abb9-f3b4c046087e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd540b5e-1b96-4a3e-bf05-bdd068799df3",
        "cursor": {
          "ref": "044f2822-6992-448d-a925-ad30d9aa6c72",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3b73214d-9242-46da-acf5-4184c5ba84c6"
        },
        "item": {
          "id": "fd540b5e-1b96-4a3e-bf05-bdd068799df3",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "d0483721-86e2-4278-b168-b2f6eb738e6e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd540b5e-1b96-4a3e-bf05-bdd068799df3",
        "cursor": {
          "ref": "044f2822-6992-448d-a925-ad30d9aa6c72",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3b73214d-9242-46da-acf5-4184c5ba84c6"
        },
        "item": {
          "id": "fd540b5e-1b96-4a3e-bf05-bdd068799df3",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "d0483721-86e2-4278-b168-b2f6eb738e6e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "576117ba-271b-4f0b-8520-c7a4af8c2146",
        "cursor": {
          "ref": "c897d542-c8ea-4169-880c-3a7922d51ea3",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f4ef8ebd-ed7a-43bc-9dcf-83d7526d4805"
        },
        "item": {
          "id": "576117ba-271b-4f0b-8520-c7a4af8c2146",
          "name": "identifiers"
        },
        "response": {
          "id": "cdbaa139-14ad-43ee-866c-862dc3d76972",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccc31ecf-72f8-4e8d-957e-a3fcbda4e898",
        "cursor": {
          "ref": "ccac3a6b-afe1-4e15-b266-a979b0ffa351",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "43df7971-e320-43d3-a665-d453cb4473b9"
        },
        "item": {
          "id": "ccc31ecf-72f8-4e8d-957e-a3fcbda4e898",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5a8332f0-a7e7-4e6c-8172-61a1d61a4756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccc31ecf-72f8-4e8d-957e-a3fcbda4e898",
        "cursor": {
          "ref": "ccac3a6b-afe1-4e15-b266-a979b0ffa351",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "43df7971-e320-43d3-a665-d453cb4473b9"
        },
        "item": {
          "id": "ccc31ecf-72f8-4e8d-957e-a3fcbda4e898",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5a8332f0-a7e7-4e6c-8172-61a1d61a4756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f8fa555-bf99-41f7-b5c0-db26554d2d4d",
        "cursor": {
          "ref": "3c3bdfe2-7f5a-4f9d-9e84-dbfdef2491a6",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2adf2df0-3282-4b76-9bdd-3011e49758d1"
        },
        "item": {
          "id": "0f8fa555-bf99-41f7-b5c0-db26554d2d4d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "82d086fb-be7a-4888-aebf-929ee6f8355b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e441660d-8596-432d-9db5-42fe9ca2b84b",
        "cursor": {
          "ref": "a3b27e24-1df1-4218-a58e-32d5c94614bb",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "f0034497-9d37-48fe-a3f3-8158aa1cc7df"
        },
        "item": {
          "id": "e441660d-8596-432d-9db5-42fe9ca2b84b",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "3249eb61-b659-44f6-8da4-11254fd132e0",
          "status": "Created",
          "code": 201,
          "responseTime": 654,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "58aac140-9c8f-4cad-88a4-a32169721d05",
        "cursor": {
          "ref": "c7778f8e-d688-4659-a3f0-dacbc944ded6",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "35012f99-8233-434d-8cff-fd7083654e8d"
        },
        "item": {
          "id": "58aac140-9c8f-4cad-88a4-a32169721d05",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "9c7d2b59-3918-412a-8b49-43550dc854e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d40a688-1196-4b1c-b4af-b91bca4af00c",
        "cursor": {
          "ref": "15f8cac8-ae9d-4be0-95a4-69f5dad350da",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "1581eec2-297d-4050-adc2-b3c0720fb8df"
        },
        "item": {
          "id": "6d40a688-1196-4b1c-b4af-b91bca4af00c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "f9b01811-0430-49e0-aee4-00e0b8d6bd0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8742c535-55d5-47cc-9e0f-7a61d6c1baa3",
        "cursor": {
          "ref": "ae2c6719-bb8b-4089-b3b7-d3352bbed122",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a1e0708c-139d-40fe-86ad-e2f61abac96b"
        },
        "item": {
          "id": "8742c535-55d5-47cc-9e0f-7a61d6c1baa3",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "5abad83e-a410-4e18-8187-436883940553",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfc3a86a-5bad-402e-824e-a44613dfb4b7",
        "cursor": {
          "ref": "ded9d437-0637-4ff8-8a0f-33d48e758a2b",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "60863ca7-92dd-4943-8adf-fd33c1e97648"
        },
        "item": {
          "id": "bfc3a86a-5bad-402e-824e-a44613dfb4b7",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "c02da6a3-3b45-439c-b3be-a63271369e0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b23f49b-fc30-45f3-bb83-08f188b1bdb5",
        "cursor": {
          "ref": "e5720959-3603-4c2e-91e7-490183e051ed",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "f853d9bd-445b-4f35-b6f6-34c1965eb8bf"
        },
        "item": {
          "id": "3b23f49b-fc30-45f3-bb83-08f188b1bdb5",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "8f35ab76-a779-46a5-914f-3a7388d38bb8",
          "status": "Created",
          "code": 201,
          "responseTime": 501,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "57759713-1ec6-4d0e-9f36-c0dacd258714",
        "cursor": {
          "ref": "fcc0d6f4-ac56-458e-bdfd-99db23616b78",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "85a0c5a9-b4a6-4312-b4c7-34c167eed6f8"
        },
        "item": {
          "id": "57759713-1ec6-4d0e-9f36-c0dacd258714",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "c93d8d29-96b1-4ff5-80c8-c7ed0a70692d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95c39a60-b369-4c2c-af02-38335935b13c",
        "cursor": {
          "ref": "c75a2eb1-9910-4694-bc1f-bd90347cca99",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "b021b9d0-7f5c-4af7-9b87-f1b30418fa2a"
        },
        "item": {
          "id": "95c39a60-b369-4c2c-af02-38335935b13c",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "f54a7981-6837-4e18-a073-944af78d2565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c148bb35-07ad-4aae-8464-df7d9ea55df2",
        "cursor": {
          "ref": "24a29a35-ca2d-40ff-b77f-c55d7cae6d02",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "be2df826-6026-4ca2-bd6c-4c79b79c41b3"
        },
        "item": {
          "id": "c148bb35-07ad-4aae-8464-df7d9ea55df2",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "744556df-24ba-4aa4-9143-e9156a8611ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "049ec9e2-1c7e-4a2b-9dbe-9cbce2e9816c",
        "cursor": {
          "ref": "02d3f037-f232-4c55-81bf-5dc603860111",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "907f7574-04dd-45b2-bb13-9f860d376244"
        },
        "item": {
          "id": "049ec9e2-1c7e-4a2b-9dbe-9cbce2e9816c",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "9e03061a-8096-4543-8a52-4677d0d3b872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "226c169b-6f27-48dc-94fa-66eec91158f3",
        "cursor": {
          "ref": "4b022ae4-7d89-497a-88ed-314bf615e057",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "0dfafc8e-b0e9-42db-8d37-9336886eb6f1"
        },
        "item": {
          "id": "226c169b-6f27-48dc-94fa-66eec91158f3",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "6c6129c1-1e35-4a1f-b61d-2de9a3b46f8d",
          "status": "Created",
          "code": 201,
          "responseTime": 500,
          "responseSize": 736
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "d67bf75b-f44a-411a-af23-a493f92a752f",
        "cursor": {
          "ref": "e125b71c-470f-40dd-afde-ab745f42c794",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "8934cc62-bf66-4fa1-b9d5-98f91100e416"
        },
        "item": {
          "id": "d67bf75b-f44a-411a-af23-a493f92a752f",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "41b2027b-1441-47a2-89ff-39297a18e77d",
          "status": "Created",
          "code": 201,
          "responseTime": 868,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "15d9e726-5fc1-40ba-8473-21498eb6141b",
        "cursor": {
          "ref": "49c22311-233c-425c-8913-3dde8caa44a8",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "644e5950-2689-4ca0-91c3-20666873a499"
        },
        "item": {
          "id": "15d9e726-5fc1-40ba-8473-21498eb6141b",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "5b7467d5-cd8f-4cc0-bdc8-df12275b086e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "686e26c9-b5d9-4375-935f-76af7a09110c",
        "cursor": {
          "ref": "22658c54-5a7f-4007-bf48-59ad613aef84",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "b7b0208d-551f-4042-aba4-6d734b66f129"
        },
        "item": {
          "id": "686e26c9-b5d9-4375-935f-76af7a09110c",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "5038c636-60d4-4792-8480-c54efa88a0e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d044a459-86bf-4078-96ca-cd8710b641d9",
        "cursor": {
          "ref": "7dc19f53-56f5-4064-8590-6a353ba93220",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "d610f4a9-5bad-4610-929b-ed2d8bd7eda8"
        },
        "item": {
          "id": "d044a459-86bf-4078-96ca-cd8710b641d9",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "a6dcd4bd-a8d4-4682-a06a-b3f8a7f76143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dfb995b-1f1e-4017-961c-ea0bb7068df8",
        "cursor": {
          "ref": "20edc1a0-d635-4a90-a494-7f89154ab56a",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "352d35eb-4170-4183-9ced-cc5ff9d96b8e"
        },
        "item": {
          "id": "3dfb995b-1f1e-4017-961c-ea0bb7068df8",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "38c40602-6be4-4428-ba9e-fd2107337618",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5637d1dd-1e2b-44b1-87cc-d466c43104ba",
        "cursor": {
          "ref": "6e5e8e65-1200-470f-af84-98443dedaa08",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a411ae69-faa0-49a3-9eda-fe1098ad117d"
        },
        "item": {
          "id": "5637d1dd-1e2b-44b1-87cc-d466c43104ba",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "20ce5abd-fd34-4715-91c9-629c6c7bedbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd05e5b3-a06a-4f3d-972e-c184fdda1d62",
        "cursor": {
          "ref": "2002b8ad-5371-4e97-b187-73328fa3e86e",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d2ef1db0-6ee0-4b2b-8ddd-552b9a79443e"
        },
        "item": {
          "id": "bd05e5b3-a06a-4f3d-972e-c184fdda1d62",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "d636d0fd-db50-4a96-9cf3-2c442d1e665c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7181a4b4-0567-4629-908a-ff9272d71945",
        "cursor": {
          "ref": "7ad121a7-f5b0-4263-b2e6-293110eea09a",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "2a6d3263-cac8-4904-81fa-45e61447b5e6"
        },
        "item": {
          "id": "7181a4b4-0567-4629-908a-ff9272d71945",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c87d8827-2a6b-4a15-97e0-99c0e00a76e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "459cdfb8-4e8f-4219-8b5c-c463d07ccc5f",
        "cursor": {
          "ref": "33935855-c19e-43fe-ad20-ce9c5b458aa0",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "87ec5e11-bbc5-4931-9600-00c41145d111"
        },
        "item": {
          "id": "459cdfb8-4e8f-4219-8b5c-c463d07ccc5f",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "289a95d4-d42c-47c5-8756-79c0689d9a35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d62ba1c9-4371-42ee-ba65-1e6b3e5bbff7",
        "cursor": {
          "ref": "66d843f6-e8bf-48ab-9769-a8d4c8a8f0c5",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "a8f33d86-95b8-4851-acce-e89119ab8b0a"
        },
        "item": {
          "id": "d62ba1c9-4371-42ee-ba65-1e6b3e5bbff7",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "1e2ccd54-d85d-4297-a413-617da0e4adf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89f40445-3067-43b8-ace7-ea406557eb49",
        "cursor": {
          "ref": "7d07e3d3-c818-41bb-b54e-a9a7b53326ef",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "16d0937e-9cac-420e-9d44-a4544e57f9c7"
        },
        "item": {
          "id": "89f40445-3067-43b8-ace7-ea406557eb49",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "788c9f50-f4fb-4d8a-b00b-42e8767f1a49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5bb43f5-9499-4d26-8280-9bf4d0a6a1ba",
        "cursor": {
          "ref": "0d5a64e1-36b0-4f42-971c-5b6f62846937",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "08312653-09fc-4d09-8272-51f35990374e"
        },
        "item": {
          "id": "b5bb43f5-9499-4d26-8280-9bf4d0a6a1ba",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "3ca522b4-3ffd-4a3b-ba39-e595484045b1",
          "status": "Created",
          "code": 201,
          "responseTime": 702,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "d6f6c40d-3454-4ea6-aa60-8ff89665eb2d",
        "cursor": {
          "ref": "35dfe83b-fc21-4b03-ad89-8f3f2238e93e",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "ab9d1143-78b5-4dc4-b6d0-0413dd1c5abf"
        },
        "item": {
          "id": "d6f6c40d-3454-4ea6-aa60-8ff89665eb2d",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "c960d461-ae9c-4d8f-8b79-629b6f85b3b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d24663d8-9807-4693-bd4d-8d1957f0b732",
        "cursor": {
          "ref": "91d7e6c6-c2b9-401c-a228-77f85c71c1b3",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "4d7391fe-a8bb-4be3-944b-9ac3cb6e9fad"
        },
        "item": {
          "id": "d24663d8-9807-4693-bd4d-8d1957f0b732",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "14bce308-9076-4a16-b472-d132f4df22fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a319a8a6-9b87-4f80-87be-9effef5166f9",
        "cursor": {
          "ref": "d09456b7-4815-4cbf-8b58-03bfc67be00d",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "e4af0a96-ff53-4b0c-b8b5-871f5c5237f5"
        },
        "item": {
          "id": "a319a8a6-9b87-4f80-87be-9effef5166f9",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "1fed7f08-2386-4543-a6d2-c4f55273a1e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80e879b6-6696-4912-82b8-cbc023f5fa60",
        "cursor": {
          "ref": "7fea60c5-5866-4b07-ab21-7feb0cb9aeb7",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "de013f71-255a-41e8-9716-753a13e969d7"
        },
        "item": {
          "id": "80e879b6-6696-4912-82b8-cbc023f5fa60",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "f66d56e8-a6cc-4523-b4df-157d564828b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d81410f-9222-4c29-a133-0262c8da17e5",
        "cursor": {
          "ref": "a7dd9f55-2c59-410e-af1f-0d667103c262",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "008a7a83-2c43-4426-b73d-2243ad28b7e1"
        },
        "item": {
          "id": "0d81410f-9222-4c29-a133-0262c8da17e5",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "ec7a5ac7-2af1-4476-942b-3a28fe721508",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b517164a-701f-4b89-bedb-9965fa77bb8d",
        "cursor": {
          "ref": "c62e20f3-5755-421f-aa7d-2344eec34ac7",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "d0877f89-bb3f-4717-a04d-bac11ae64e53"
        },
        "item": {
          "id": "b517164a-701f-4b89-bedb-9965fa77bb8d",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "85483d78-b14e-4232-8442-1ca18d7d1dd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2972cae1-3bf7-4855-ad65-8f44f670bf78",
        "cursor": {
          "ref": "7a59cd4f-d617-4635-8dc6-b52eeebb18fa",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "e3c13bfb-0211-4ef2-b91d-eaebfea630d9"
        },
        "item": {
          "id": "2972cae1-3bf7-4855-ad65-8f44f670bf78",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "d206a815-580d-4931-95fd-b3fc1f79f661",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d68bb414-6209-4ee0-8eea-ae11f1a43159",
        "cursor": {
          "ref": "34a10a05-815c-46ec-870e-712c89260ba5",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "7ffd2ed3-da92-4c30-89ac-94c744ee437a"
        },
        "item": {
          "id": "d68bb414-6209-4ee0-8eea-ae11f1a43159",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "28fee8a4-de07-4381-ab2f-660f1bea18b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6d28ae1-3167-4edc-9382-3760ee27d134",
        "cursor": {
          "ref": "003bfa31-e90e-4c14-9db6-af9962626557",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d223285d-517a-44b6-85fd-2f8a30a697ff"
        },
        "item": {
          "id": "a6d28ae1-3167-4edc-9382-3760ee27d134",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b23b94aa-c308-4c48-be65-9d45c3194fbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "028a899f-898e-48ad-be0c-9c123564823d",
        "cursor": {
          "ref": "711b4124-1bd6-4ba5-9960-8119f3ae9add",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "1e62b6e8-9bd8-4c10-a665-25c1b7b72de3"
        },
        "item": {
          "id": "028a899f-898e-48ad-be0c-9c123564823d",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "7ab7cfaa-ad95-4ee8-8125-27b3c7ebcfe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e2448cd-23da-4960-938f-6da9149a2141",
        "cursor": {
          "ref": "09aab9d8-d977-4792-b52f-084ca4ccc438",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "6c9de16e-30ec-4943-b942-a6a8d589d6ea"
        },
        "item": {
          "id": "7e2448cd-23da-4960-938f-6da9149a2141",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "2cb19f92-f2ad-4e53-91ad-a70eb5da8c26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0436182-8fa2-40d8-a17a-5097e1eb5648",
        "cursor": {
          "ref": "2e8fd29a-2f61-4302-9815-a1d143c42494",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "57882faf-8fd6-4511-aacb-af4e67337f71"
        },
        "item": {
          "id": "e0436182-8fa2-40d8-a17a-5097e1eb5648",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "995ac6a3-0eef-499b-b3c5-2cf7c50b0606",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5ed4ef4-bbdc-465e-8674-29ec710e3933",
        "cursor": {
          "ref": "3210388c-b5ce-4b66-b177-28aa2bbb5780",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "78b4cd92-daec-42fa-842a-c28c9c59271f"
        },
        "item": {
          "id": "e5ed4ef4-bbdc-465e-8674-29ec710e3933",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "14547f9e-4c69-4464-9b34-e20eda798c08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 352,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "8a282e18-bb16-4851-9f07-d0cd94db9044",
        "cursor": {
          "ref": "bed5d911-ade2-4cde-abfd-9806e536dcd5",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "feab29ba-8087-4449-85fc-59dd7c27f000"
        },
        "item": {
          "id": "8a282e18-bb16-4851-9f07-d0cd94db9044",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "9b4b4c57-905c-414e-b281-1ecb7f52b475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21a3a777-53d3-41bb-8c40-33b8d0d477ec",
        "cursor": {
          "ref": "887f2344-609d-47e5-bba5-0a3553d021ac",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "3e55e745-6640-4809-b455-266963e1dc37"
        },
        "item": {
          "id": "21a3a777-53d3-41bb-8c40-33b8d0d477ec",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "2dbef7f4-621a-4728-a392-973131d7c69a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e650ee1f-38e1-418b-96ca-c435e115e884",
        "cursor": {
          "ref": "96a4d8fa-3bfe-4e5b-8f58-966b4697489a",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "961e4caf-7b52-4ac0-92e9-2cd188a4d4ff"
        },
        "item": {
          "id": "e650ee1f-38e1-418b-96ca-c435e115e884",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "7b9023fd-3621-420b-a7c8-40c626a2a6fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1da5666-ed55-4452-8fe6-a7f8ad157f5b",
        "cursor": {
          "ref": "6d4a75bf-9a15-4dcd-b099-e6af0b57089b",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "a3cedd38-a015-498c-aebe-40c7cd54dd37"
        },
        "item": {
          "id": "a1da5666-ed55-4452-8fe6-a7f8ad157f5b",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "2a656467-c237-4d00-99eb-6ba6d1cdc298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80450936-661c-4012-b3ee-4e9d62c572d8",
        "cursor": {
          "ref": "f05dc375-a2ee-4c5e-b0e5-86bc5db7ab1d",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "efbada35-dd65-42e4-aaf8-d9e96edc2c92"
        },
        "item": {
          "id": "80450936-661c-4012-b3ee-4e9d62c572d8",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "4e1f39d0-0181-4373-8101-4c9b3ebbbc84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c70eb91f-cae9-4e1b-8c3f-95ca6040f322",
        "cursor": {
          "ref": "f94c2600-85a2-43b8-a823-b9f5cd07d988",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "f066fde9-d28e-47d2-99f1-040193f7324a"
        },
        "item": {
          "id": "c70eb91f-cae9-4e1b-8c3f-95ca6040f322",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "277eaffc-edc4-4c31-8b2a-a3f0ae59a482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "292ddeee-38b4-46a3-9138-2d847fb544a0",
        "cursor": {
          "ref": "51073255-52e9-4183-b3a1-43f8888f1eb0",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "62ce0e80-a684-4f2c-8e81-1bae92d67d30"
        },
        "item": {
          "id": "292ddeee-38b4-46a3-9138-2d847fb544a0",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "d0e89d3a-8f3a-4a3f-b395-7e36da42cd17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 328,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "f92f21ca-f3ad-44b1-a9b2-9daf9f8a3a1d",
        "cursor": {
          "ref": "acf2559c-ed9e-4776-8560-fb7fbbd7459c",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "51fe6b12-7ac5-40ce-96de-d60bfb26a337"
        },
        "item": {
          "id": "f92f21ca-f3ad-44b1-a9b2-9daf9f8a3a1d",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "6ef547b1-848c-42d1-bd39-47eca7099a25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "395620da-49f6-416b-bd91-fc4be8174c6d",
        "cursor": {
          "ref": "7668492b-0ca0-4f06-9b9c-cc1e211ad96a",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "2879f766-5754-4b60-8057-d763c97f1d84"
        },
        "item": {
          "id": "395620da-49f6-416b-bd91-fc4be8174c6d",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "a25942ae-9d3b-4adb-b41e-2982eadb2415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc06941-7cac-43ca-b3bc-1e272011cc21",
        "cursor": {
          "ref": "61d749b8-6e4a-4a5a-8bdc-97838c6ef1fa",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "a32f641e-398b-4195-b035-11693690f339"
        },
        "item": {
          "id": "9cc06941-7cac-43ca-b3bc-1e272011cc21",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "48a6624b-86b4-408e-a2d0-22315ad40ce7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9959a29-8f13-49a7-b38b-f1694c1c1ff8",
        "cursor": {
          "ref": "02a68d22-8649-4f79-8ea3-0269271185bf",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "bd456315-e257-4cc5-9deb-5c53b5ab5b17"
        },
        "item": {
          "id": "e9959a29-8f13-49a7-b38b-f1694c1c1ff8",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "9910f90b-8283-4fd3-b968-965bf24284d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8c7975d-7ec3-42ad-ac30-e401de334f5f",
        "cursor": {
          "ref": "2783c9f4-783f-403c-83dd-cdc02f35abd5",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "ce5a1d3f-fb63-4d5e-93a4-22489a4a0662"
        },
        "item": {
          "id": "f8c7975d-7ec3-42ad-ac30-e401de334f5f",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "04848414-3fb4-4bc2-be98-e741cb5af06f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab8cc5d8-f7f6-4e0b-8af5-753abd656d23",
        "cursor": {
          "ref": "c93ff77b-3425-4ce8-a2c6-c3faaa0742c2",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "20f15053-cc41-41f7-987b-06a37d1a9577"
        },
        "item": {
          "id": "ab8cc5d8-f7f6-4e0b-8af5-753abd656d23",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "6ead0154-cb36-4d73-8676-d3b1780477e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fa28a3f-7bfd-48fc-9c64-e24df7fcbbcc",
        "cursor": {
          "ref": "8d19e6c0-04de-4365-9224-7bdeab56e20b",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "047a5ed6-ece8-4b50-9479-c8d2127327e1"
        },
        "item": {
          "id": "2fa28a3f-7bfd-48fc-9c64-e24df7fcbbcc",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "53b9cc5b-92c3-4781-9776-810bf4fe6c94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7330d923-f925-4197-86ce-95c066704d3a",
        "cursor": {
          "ref": "efb9bcd0-c9f0-484e-9c7f-269cc160c859",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "d738f3a4-464d-41e8-a5eb-7b949499ce4e"
        },
        "item": {
          "id": "7330d923-f925-4197-86ce-95c066704d3a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "bfbf4429-9d42-4b78-a7c8-9f8481ed54a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fab74f3-01a5-46b3-a605-8fd658b11247",
        "cursor": {
          "ref": "79f271d3-57e9-4ad3-8a55-ead9b6c9a1a5",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "3408f393-cfef-414e-888b-5af219e4dc40"
        },
        "item": {
          "id": "2fab74f3-01a5-46b3-a605-8fd658b11247",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "0f32949d-0334-43d5-8055-4e55f98c037a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9e4e6b7-95ad-40b6-a165-11b3bf4c941a",
        "cursor": {
          "ref": "b782f38e-136f-4c04-882d-b6e64637ff3e",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "dfb90404-ee96-4f9b-8b52-c8d339a0288b"
        },
        "item": {
          "id": "a9e4e6b7-95ad-40b6-a165-11b3bf4c941a",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "c08cfcb0-7912-4744-a2b3-53a78c81b73c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c344737f-f422-4d6a-949b-10ca901be8af",
        "cursor": {
          "ref": "61fe3c7d-0d65-4654-8857-160e55c0184a",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "55cc71f8-0489-4f2a-b8c0-002ea73d0f3c"
        },
        "item": {
          "id": "c344737f-f422-4d6a-949b-10ca901be8af",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "9533d578-0afc-46d8-b8a7-f166a755ad60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d1c743a-02a2-4d7a-aaac-fd302365bd50",
        "cursor": {
          "ref": "b9844aa0-b25c-4fb6-a6c1-b9a2b532fdc9",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "d2243742-0cf9-43b7-b5f0-5b2af6ad1387"
        },
        "item": {
          "id": "1d1c743a-02a2-4d7a-aaac-fd302365bd50",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "f8e6bd06-71aa-4088-a499-19077b2b3d98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34d4cda5-0d09-49eb-8096-9bb669f41d03",
        "cursor": {
          "ref": "6c700ef0-56b8-4258-804a-95477d929d32",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "815a8fce-f8cb-4c75-8d59-cb5f5cc8bfc1"
        },
        "item": {
          "id": "34d4cda5-0d09-49eb-8096-9bb669f41d03",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "d86c9841-869a-4e00-af9a-5f38abee3e91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b2521d1-8111-40f6-ad35-3ad4b49e6e7b",
        "cursor": {
          "ref": "03e1ca06-6dfc-4582-b548-046c292aa575",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "cfef8903-28e6-47fe-8a09-312b5667b672"
        },
        "item": {
          "id": "2b2521d1-8111-40f6-ad35-3ad4b49e6e7b",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "163f548d-b501-4970-80a6-7c7b2bc87e12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0acc468-e971-4792-9501-c75ce7f999f5",
        "cursor": {
          "ref": "d7498427-2c21-4fc6-8ec1-1d6b3e969d69",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "6db244e9-2bc3-443c-9d69-927e4ec95150"
        },
        "item": {
          "id": "d0acc468-e971-4792-9501-c75ce7f999f5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "7bbfb7a3-961b-41d7-9f78-7867e2236fe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58c6fde1-2749-4b9b-bb50-9d66d2e4dc9d",
        "cursor": {
          "ref": "a60471be-166f-4309-9f56-13562701ea93",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c4acc835-d6b8-4fbd-b31b-6e7f252449cd"
        },
        "item": {
          "id": "58c6fde1-2749-4b9b-bb50-9d66d2e4dc9d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "8075beaa-4697-41f4-9280-dbcaead217ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98fa69a8-9be0-486d-9c40-144a61343280",
        "cursor": {
          "ref": "3429249d-843b-4619-9b10-d0e08e2abd27",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "b96b1503-528c-44e0-bf95-9f8ced488e34"
        },
        "item": {
          "id": "98fa69a8-9be0-486d-9c40-144a61343280",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "b4b5c521-9941-4e5e-b8fe-d929fcc4dba8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 182,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df74b93c-dbec-46d4-893c-d51ba68f39dd",
        "cursor": {
          "ref": "2946d451-558d-4e57-b0ee-df1d3f522571",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "a0433cb9-6989-4e8d-b538-b4da0e8d6053"
        },
        "item": {
          "id": "df74b93c-dbec-46d4-893c-d51ba68f39dd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "ffcdf144-5a79-47c7-962c-d93be392ebff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e020a1b-68a8-42d1-a276-15a393421e39",
        "cursor": {
          "ref": "5a693d42-1185-430a-983e-cde188b17580",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "43c2c834-1ea3-48f6-964e-f7726b5c9fbd"
        },
        "item": {
          "id": "3e020a1b-68a8-42d1-a276-15a393421e39",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "936cf072-893f-414d-8676-88f439e6064e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab02d0f4-bd5b-4208-9805-d7386771e928",
        "cursor": {
          "ref": "f62744e6-5c0b-461a-952c-4eaa303f1470",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "163cd39b-5d0d-4427-ba54-c7957c19ab54"
        },
        "item": {
          "id": "ab02d0f4-bd5b-4208-9805-d7386771e928",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "dd2bbf56-83f5-4422-92b9-4d3b4ee1794d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c0d7038-8aba-40a6-b225-50783e2344a4",
        "cursor": {
          "ref": "46ea9b82-fac1-4200-8075-9a6b3bd37a0a",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "18f56aab-32d2-4b80-86fa-acd8457b4a0e"
        },
        "item": {
          "id": "0c0d7038-8aba-40a6-b225-50783e2344a4",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "7fd7b5ba-a714-47d3-81ac-11dd64ffc037",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5026b965-4ee9-45e3-b22d-3070c3b38a06",
        "cursor": {
          "ref": "1bd5a95d-f7a5-4603-ae6b-7f7a8b8b47bc",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "5b1927a2-0607-462b-9218-cb88548311aa"
        },
        "item": {
          "id": "5026b965-4ee9-45e3-b22d-3070c3b38a06",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "52a2b52c-ff37-4c95-86d8-3de0185f1f6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30fd0d5f-a225-4c52-b062-1f9113a5d8de",
        "cursor": {
          "ref": "61345269-9c4a-4371-a59f-895167cbec3e",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "7cda3b83-98ae-4028-a397-266365cfa219"
        },
        "item": {
          "id": "30fd0d5f-a225-4c52-b062-1f9113a5d8de",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "2f15de39-66af-4816-9ad0-ac0cbfdb11bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bfcdb9a-e1fc-4934-abbc-b9b375c6f92c",
        "cursor": {
          "ref": "f235cb02-3933-4eae-a88d-4c516d22d8c2",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "a5096254-f19e-4970-9bb2-74094eef8187"
        },
        "item": {
          "id": "6bfcdb9a-e1fc-4934-abbc-b9b375c6f92c",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "e5e3496e-c674-405e-836a-cf8562d9adbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec85f0a3-00a9-4b03-9fca-036445364df1",
        "cursor": {
          "ref": "c4034727-8e59-4042-904e-67b1223cec20",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "381f54d5-40d7-47de-930c-7e343ba2b326"
        },
        "item": {
          "id": "ec85f0a3-00a9-4b03-9fca-036445364df1",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "47489c7a-4163-4687-a8a4-8929f1ac46f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31a45d4e-668c-437d-a8fa-c4a11a878d2c",
        "cursor": {
          "ref": "7256a77c-8bc0-4fd7-a10a-cc7efca1a653",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "8290bd1e-1a53-4faa-9a8f-c04bcf2101df"
        },
        "item": {
          "id": "31a45d4e-668c-437d-a8fa-c4a11a878d2c",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "c16b13e0-2576-4c87-813b-db118bf23586",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04cd9bcf-ad78-47a2-948a-fc0d06cdd98e",
        "cursor": {
          "ref": "fe4e0024-af8f-4ea1-b21b-97ca7b57aa9a",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "60d07b85-066d-4122-8bb0-e352b862e230"
        },
        "item": {
          "id": "04cd9bcf-ad78-47a2-948a-fc0d06cdd98e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "f4049e4c-d054-46e8-a1eb-5342abc4fbef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09957a56-70d0-4e46-b1d7-a3e2c0fade0f",
        "cursor": {
          "ref": "4c9b74b9-d266-49dc-a1ea-8b8a2db14dbd",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "4801b03a-5050-4830-94ee-b24eb6664dfe"
        },
        "item": {
          "id": "09957a56-70d0-4e46-b1d7-a3e2c0fade0f",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "aa7ccabe-57c7-4cbe-b492-0d1a9fbe7417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "490ec2e1-1d84-48e2-babf-a21fd40a51c2",
        "cursor": {
          "ref": "d6e159a1-dfda-4223-8640-c1f30bc5b0d0",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "9c5717d4-bd3d-4731-ac26-7d549630bd76"
        },
        "item": {
          "id": "490ec2e1-1d84-48e2-babf-a21fd40a51c2",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "c8303781-787f-4247-86bf-223ec2a1bd68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87162084-9b8a-413e-a500-985b8714c927",
        "cursor": {
          "ref": "7f4788a4-0062-4dc3-88a0-58c1a76b754f",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "991dd73a-a186-47f0-b486-c80a370559a7"
        },
        "item": {
          "id": "87162084-9b8a-413e-a500-985b8714c927",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "cf1faee8-3e8a-4c41-b37c-6acd4a8ea86d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57e0517c-fb7a-4a9a-9061-9b0fe1ca8526",
        "cursor": {
          "ref": "8f835ae6-b1a9-403a-b1b5-24237da71c39",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "d2ea2df2-b9d3-4d93-bf36-4d944fe11cc0"
        },
        "item": {
          "id": "57e0517c-fb7a-4a9a-9061-9b0fe1ca8526",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "14533ed1-c74a-4ba8-b9c7-32b8c0e38c3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 423,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea2125db-88da-4e62-91e3-7d9586913776",
        "cursor": {
          "ref": "426539ed-5f08-4ec3-8296-63323e72c519",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "65109b78-fcd4-47c7-a8b3-2ea302f12b08"
        },
        "item": {
          "id": "ea2125db-88da-4e62-91e3-7d9586913776",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "58628cc1-198b-46cc-98ff-6dae105dfa9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7913dbad-7c9b-4b7a-a62b-3657524faeec",
        "cursor": {
          "ref": "e0bc65ce-2157-4582-9b0e-84e8f6f1af84",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "bed10cf5-a575-4766-8ae7-63859069a275"
        },
        "item": {
          "id": "7913dbad-7c9b-4b7a-a62b-3657524faeec",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "d2272795-fc30-43b4-b729-444605fa945b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "564c8a1b-6a89-4e74-81a6-bdc788f3e27c",
        "cursor": {
          "ref": "b85f4213-a3bf-4208-bf41-2b88c3c7b8e3",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "65b2062f-fee1-4743-b0b2-cbd8764a6f6f"
        },
        "item": {
          "id": "564c8a1b-6a89-4e74-81a6-bdc788f3e27c",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "a7011c75-5c53-4eb8-9250-a188abbb13d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f21aca5-ab6c-4284-9b1a-5b8452a4bf8a",
        "cursor": {
          "ref": "9e8fe0cd-099e-410d-84d1-53a4e091dbf8",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "c543d4d4-da5e-40b8-831e-2140dfee012d"
        },
        "item": {
          "id": "0f21aca5-ab6c-4284-9b1a-5b8452a4bf8a",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "5e647308-7e80-4543-ae3e-2c32b70d125f",
          "status": "Created",
          "code": 201,
          "responseTime": 646,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "1e783cd8-a28b-47ff-98df-74b2116aad93",
        "cursor": {
          "ref": "d2cdbb96-30e5-4eec-a578-c80c6fd59c2d",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "5a44f95c-0044-4618-9426-dbeb288de729"
        },
        "item": {
          "id": "1e783cd8-a28b-47ff-98df-74b2116aad93",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "8526fa34-1931-46d0-ad51-40cf7faa8610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7dc63ec-53ab-41e3-b424-b3a074ecc25a",
        "cursor": {
          "ref": "3edbfaa3-a25b-40c5-a30d-cf3f6c398eac",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "5278286d-76a2-49db-ae79-21e4aa7bb104"
        },
        "item": {
          "id": "c7dc63ec-53ab-41e3-b424-b3a074ecc25a",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "9125593d-63ad-4d5d-a948-a6958a624cb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a881b5e-2056-4850-b841-9554f12bca80",
        "cursor": {
          "ref": "a0c7893b-a705-463f-b7b8-455030ae9043",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5d299f22-5554-45ee-b678-15de7ca3f32c"
        },
        "item": {
          "id": "3a881b5e-2056-4850-b841-9554f12bca80",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "1d014ee6-137e-46a7-99c3-fc93358f5815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eced37a-c766-4cf9-a2c1-f397f79564fa",
        "cursor": {
          "ref": "9f9c581c-086b-4f3a-a68c-4f2d39eebc22",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "85a55d3e-7b33-44c0-8296-367b76907c15"
        },
        "item": {
          "id": "0eced37a-c766-4cf9-a2c1-f397f79564fa",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "a905861b-1ea1-4e3a-bedc-8172357cabed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4f92104-b8e0-4b23-8761-436e6e506f5d",
        "cursor": {
          "ref": "5f770b20-70ba-4e53-a386-4d77484655b5",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "3f11474e-f62b-4356-8447-bcfca31ea523"
        },
        "item": {
          "id": "a4f92104-b8e0-4b23-8761-436e6e506f5d",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "b6ace9f5-ffd2-470b-a036-a16cfb7b464d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7587f6c7-b368-4d33-b183-a468b35ed949",
        "cursor": {
          "ref": "6f6ce186-781a-4b97-8d99-65d352a9b0c1",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "fa9df8e5-6003-4d81-8a07-ff115c6addaf"
        },
        "item": {
          "id": "7587f6c7-b368-4d33-b183-a468b35ed949",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "64212fe2-a30c-4479-8907-3e03b6866281",
          "status": "Created",
          "code": 201,
          "responseTime": 668,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "bc40e782-ac3e-4b57-9e4e-e6916ca38701",
        "cursor": {
          "ref": "157d745f-ea48-42d5-b454-b0192ad8a028",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "93bdca90-f515-4e83-8b84-6edc0513c4db"
        },
        "item": {
          "id": "bc40e782-ac3e-4b57-9e4e-e6916ca38701",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "c243927d-d7ae-4eff-9831-43b44c2c6ed1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6b2ef1b-a58c-46fe-b412-1aa437250cc5",
        "cursor": {
          "ref": "0172c61d-f898-4228-90e6-363b87c1da24",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a35b98c3-62b4-4af2-94ca-6a556595a4c7"
        },
        "item": {
          "id": "e6b2ef1b-a58c-46fe-b412-1aa437250cc5",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "46f0e972-30ab-4ec9-b001-edeefbdb8afe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b57e917c-2191-41a2-992d-135e3abd4315",
        "cursor": {
          "ref": "ed07ac14-6cc5-48a1-bd5a-1d7510fcf59c",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "5deb2331-1129-4405-bc41-a8e4bbc15f51"
        },
        "item": {
          "id": "b57e917c-2191-41a2-992d-135e3abd4315",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "8614e065-8783-4e49-b042-7f86ead19b89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc89cf33-7f6b-4feb-b1e9-4af4cce3ff26",
        "cursor": {
          "ref": "5eddce1b-8cd4-41e4-81f1-afa9c72714ee",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "dfddc7c5-d0ae-4e0e-ac9e-e40edd0dff1a"
        },
        "item": {
          "id": "dc89cf33-7f6b-4feb-b1e9-4af4cce3ff26",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "3b5758a6-3628-4be3-84ed-44f658c2d688",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8aa065e-0e2a-452c-80e6-1a3e82e4a84f",
        "cursor": {
          "ref": "7b76a490-15e5-496a-8383-d7793f5c0955",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "70924269-00fd-4053-b9f7-7fc6517234b8"
        },
        "item": {
          "id": "e8aa065e-0e2a-452c-80e6-1a3e82e4a84f",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "474e9087-7039-4236-9919-438d7123beb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cc362b8-af4f-47ac-955e-e13c4bd7eee6",
        "cursor": {
          "ref": "9a77bb09-8b59-4d8e-a8ea-463f0b13c444",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "d2b18cb3-a61e-4ae9-98a6-2e759396195e"
        },
        "item": {
          "id": "0cc362b8-af4f-47ac-955e-e13c4bd7eee6",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "10044d54-87ed-446e-accc-1ec3d82b1ccf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59ddb74f-a6ec-478e-834f-828ddc14b5f3",
        "cursor": {
          "ref": "5f3cc128-ea66-485c-8c3c-8da5f91e3df3",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "db97f035-6df1-4b89-81f1-5f1b1f4c9b0a"
        },
        "item": {
          "id": "59ddb74f-a6ec-478e-834f-828ddc14b5f3",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "e9319383-e558-4a0f-b4ce-fa487036f800",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08472d25-01d4-4604-ad40-3b9438f88b74",
        "cursor": {
          "ref": "46fac19e-7972-4081-b246-0935302ac049",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "b05752c0-c630-43d8-9204-dff3e07d3e1c"
        },
        "item": {
          "id": "08472d25-01d4-4604-ad40-3b9438f88b74",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "b65e63ec-8626-45ba-b8a2-0e9e1a39a16f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "170af5bd-af6d-45e7-9ab3-ae1af903cfab",
        "cursor": {
          "ref": "861a9f30-e60e-4cc4-970b-b1adc7b5edf3",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "63820ec5-6c11-4bf8-83f1-152f08df9dac"
        },
        "item": {
          "id": "170af5bd-af6d-45e7-9ab3-ae1af903cfab",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "49cb48e6-1a5f-416f-871e-5b6364718d9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "418fb2ff-6938-4bec-8d9d-207cf3317e83",
        "cursor": {
          "ref": "b83fedfe-d186-4f0c-831d-44f39ebf88d0",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "29007d88-51c7-4869-b303-629a8f766db1"
        },
        "item": {
          "id": "418fb2ff-6938-4bec-8d9d-207cf3317e83",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "1832bd7b-d4c8-4961-9dee-8f1b20402eae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "6787eb58-30dd-4552-a4cc-a4125ea94038",
        "cursor": {
          "ref": "6b6c07d0-df57-491a-aa4f-39c3e2a097e6",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "1709706f-ee3a-4b5f-af0f-fde338c2e4cb"
        },
        "item": {
          "id": "6787eb58-30dd-4552-a4cc-a4125ea94038",
          "name": "credentials_issue"
        },
        "response": {
          "id": "78c3b56d-261a-4e82-a4eb-1531abec82ad",
          "status": "Created",
          "code": 201,
          "responseTime": 680,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "af54efba-db02-4619-9bd4-f7d701ff6a5f",
        "cursor": {
          "ref": "404c0152-1fdd-4fa0-aece-316814d218fe",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "f544ff8e-63b5-4e7f-8238-0ce45f9f5087"
        },
        "item": {
          "id": "af54efba-db02-4619-9bd4-f7d701ff6a5f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "271bab78-405f-40b3-a605-c0c8a0e83e2c",
          "status": "Created",
          "code": 201,
          "responseTime": 650,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0fef5f9-4bb9-48b8-8056-403a64cd6ab2",
        "cursor": {
          "ref": "361eb693-a0cd-4c04-a7e1-e2da6e7830c1",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "c13275b7-d0ff-4f9d-bf1f-d5f8e097d795"
        },
        "item": {
          "id": "b0fef5f9-4bb9-48b8-8056-403a64cd6ab2",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1d24bb72-a5ad-4a22-ac5d-eeac361e2591",
          "status": "Created",
          "code": 201,
          "responseTime": 692,
          "responseSize": 747
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5378e64b-d5d0-4a7b-adc5-54994b76f5a6",
        "cursor": {
          "ref": "628a3b6f-4582-4734-a5fa-abb2bc4a2c75",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "47452458-5c84-4c3e-b43f-2d3a061db4a8"
        },
        "item": {
          "id": "5378e64b-d5d0-4a7b-adc5-54994b76f5a6",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "269d5538-96d9-4216-ad30-a6d7bc963cfd",
          "status": "Created",
          "code": 201,
          "responseTime": 657,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3c6a2e2-6d70-4363-af64-55c578fa3ca7",
        "cursor": {
          "ref": "b82be78b-1f5d-436c-a822-56b10754e08e",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "6651f521-d222-45c1-82f4-1b8edf6dafad"
        },
        "item": {
          "id": "b3c6a2e2-6d70-4363-af64-55c578fa3ca7",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f6139019-0603-4225-aa0f-7d94badf25f0",
          "status": "Created",
          "code": 201,
          "responseTime": 703,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "902a8ca0-dd31-477c-a3d1-f09c7b28a379",
        "cursor": {
          "ref": "8600f984-954f-4b93-9e1c-a429fd0c72fc",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "889585f1-163b-436a-a08a-1a6cdad12adc"
        },
        "item": {
          "id": "902a8ca0-dd31-477c-a3d1-f09c7b28a379",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "938c2646-c4aa-4e42-a99f-3b8841da27cd",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "902a8ca0-dd31-477c-a3d1-f09c7b28a379",
        "cursor": {
          "ref": "8600f984-954f-4b93-9e1c-a429fd0c72fc",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "889585f1-163b-436a-a08a-1a6cdad12adc"
        },
        "item": {
          "id": "902a8ca0-dd31-477c-a3d1-f09c7b28a379",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "938c2646-c4aa-4e42-a99f-3b8841da27cd",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "d13bd604-b65c-420b-af9f-62aaf2350117",
        "cursor": {
          "ref": "838c9b18-06f7-4e1c-a590-49efd4fee9dc",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "421fbcdb-e385-4792-bc15-36ed906799a0"
        },
        "item": {
          "id": "d13bd604-b65c-420b-af9f-62aaf2350117",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f18d2e57-2412-4657-bd38-4b8cd8e20cb0",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "f95d8179-91cf-436b-ac6f-c982afdbd08e",
        "cursor": {
          "ref": "5db98d4d-fe34-4f9a-937e-efd168eeece5",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "b3e5695b-8254-4e33-a7a2-6702ad34fb1c"
        },
        "item": {
          "id": "f95d8179-91cf-436b-ac6f-c982afdbd08e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "544f1c10-2852-4af8-8b82-824f5944ebd0",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "f39649e9-978e-405c-aaa6-3757831db64f",
        "cursor": {
          "ref": "b450d6b0-0940-4ec1-817c-cf7252a60828",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "cfdbd1a8-aefe-456f-a2f7-d420f11c87ff"
        },
        "item": {
          "id": "f39649e9-978e-405c-aaa6-3757831db64f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "dc46fdb2-17a3-4ef9-a6ec-6384c9ef4754",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "d7d768f5-bc07-4a6b-86be-2fd32dc7be34",
        "cursor": {
          "ref": "a6e2224a-2178-48fc-a110-edfcc9cde5bd",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "3f6a43c3-9698-4380-b519-4eda89f251a5"
        },
        "item": {
          "id": "d7d768f5-bc07-4a6b-86be-2fd32dc7be34",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "d0a7d743-7815-428c-abe2-d1960a5b9a44",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "460d60f2-5a1b-4a73-b16a-ddb834c87059",
        "cursor": {
          "ref": "ab2ab5af-c53f-45ff-9659-9994fa526aef",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "f7604321-5120-4b8e-a94d-b661fbfc232a"
        },
        "item": {
          "id": "460d60f2-5a1b-4a73-b16a-ddb834c87059",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "4b2f5f88-3281-4151-b874-a25818145117",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "da1d70ca-13b2-4cdc-8a8d-5d869f98f165",
        "cursor": {
          "ref": "c542c49a-7ae2-410b-8dc4-6b865c3562bd",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "8bde22f1-95ac-4d46-9cae-7717bc87dedb"
        },
        "item": {
          "id": "da1d70ca-13b2-4cdc-8a8d-5d869f98f165",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "84b044e0-d6ea-4a21-9afe-c52f30ad27d1",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "e71b8c71-e513-4e32-a5df-152b7f9ac905",
        "cursor": {
          "ref": "0ec61876-2bf8-41d5-8a1a-e78d422df81e",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "e51dfea7-5939-415a-9e39-0e5f64099225"
        },
        "item": {
          "id": "e71b8c71-e513-4e32-a5df-152b7f9ac905",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ed05c391-528b-4085-8b20-72df89036f10",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "418d65a0-9977-4d85-9fb9-b4db8f45d12f",
        "cursor": {
          "ref": "0af25503-42eb-4a4d-a0ac-7d639b910a9d",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "0482859d-4bc2-4c32-b30e-424abfefb537"
        },
        "item": {
          "id": "418d65a0-9977-4d85-9fb9-b4db8f45d12f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "55726360-6276-46f4-892b-8a2fecfdb1af",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "09775f40-5ec4-4f84-8a56-8a2ad5c95603",
        "cursor": {
          "ref": "72f3b65b-3225-4bc0-85d2-22d3fed4e568",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "6990bff5-33b8-43a5-8362-3171660ef698"
        },
        "item": {
          "id": "09775f40-5ec4-4f84-8a56-8a2ad5c95603",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "9a3535f3-3d3e-411d-8dff-933dbdda96e8",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "bd783175-1333-4389-aca2-d461be678e4e",
        "cursor": {
          "ref": "06d7c55a-7e58-4b0b-9087-6024db0bb2aa",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "2b01424c-80b4-42f5-9af0-ea7224a5c07a"
        },
        "item": {
          "id": "bd783175-1333-4389-aca2-d461be678e4e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "adf6e245-e745-4674-8d3d-14eb69c58802",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "1436ed27-dcc9-4c44-94cd-0e86995512ec",
        "cursor": {
          "ref": "41b18ffd-41d7-4607-b23a-4a748cd2c175",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b9876e9e-eafb-403c-87bb-9e7242c16bf0"
        },
        "item": {
          "id": "1436ed27-dcc9-4c44-94cd-0e86995512ec",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2e038833-c919-4b22-8606-a78bfaab2775",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "08effa2f-04a2-47ab-9e08-a2be6338d64c",
        "cursor": {
          "ref": "bb4a8513-762e-41cc-989f-47045e259f16",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "7612ac81-2b37-4e5b-b0f7-abc4ef120ed9"
        },
        "item": {
          "id": "08effa2f-04a2-47ab-9e08-a2be6338d64c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "190367ce-cb79-4549-b255-40329c801ab4",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "7ff2b6fe-1e6a-4257-adc5-19f2993136c3",
        "cursor": {
          "ref": "38baf713-f6fc-44e5-a2bb-451586f9cf17",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "bb3351d2-1882-448d-826a-45caea1c12aa"
        },
        "item": {
          "id": "7ff2b6fe-1e6a-4257-adc5-19f2993136c3",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "233f826e-f701-41fe-ba16-b57131fbeab8",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "4a5c09d7-92a1-4f8e-8eef-c968af1617f2",
        "cursor": {
          "ref": "b2d1d561-6afc-4df4-b212-c3534489677b",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "6cadafbe-7ae2-4b25-9c84-80ecd89f4d49"
        },
        "item": {
          "id": "4a5c09d7-92a1-4f8e-8eef-c968af1617f2",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "6cd3bbec-435c-4fe9-82e2-464fffbf251c",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "0234e9b4-76e4-4e64-97a4-0215918d9656",
        "cursor": {
          "ref": "21c3fa06-12e2-4f82-82f1-e30a8f1902e1",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "203388d0-fa8a-4123-b2e4-d5ed947ab2f4"
        },
        "item": {
          "id": "0234e9b4-76e4-4e64-97a4-0215918d9656",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "7107ce16-634f-4787-936c-a01c26f79155",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "131533a7-9e1b-4919-9297-8560ac472997",
        "cursor": {
          "ref": "f4b34da7-893d-4b51-95ad-25dfb05384db",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "67cdd781-61ba-433b-b8ae-362406fd87dd"
        },
        "item": {
          "id": "131533a7-9e1b-4919-9297-8560ac472997",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "cc4e10fe-4904-4bfe-8aea-ac7e6557bf44",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "51aec905-da1e-4cce-9289-97e4bdd57e36",
        "cursor": {
          "ref": "906bd599-45ed-44c9-bbce-5e557d8ac4e1",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "782e3d4c-97a6-410a-8dc6-04919a5c275d"
        },
        "item": {
          "id": "51aec905-da1e-4cce-9289-97e4bdd57e36",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c52fba6f-f613-4d8a-a0c6-17ba24c62f4c",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "28ae4990-0f52-47e3-9340-40b91401ec48",
        "cursor": {
          "ref": "5096c6bf-ab06-4ee5-8e73-41892644f1d6",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "deb15de2-51e4-4cfe-a1b3-a9b732f3dffd"
        },
        "item": {
          "id": "28ae4990-0f52-47e3-9340-40b91401ec48",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ef0a790b-9ab7-4f0a-b420-1b57896dee1b",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "61a6e2aa-c9ee-4b8e-bcc1-dc8bd3e895a4",
        "cursor": {
          "ref": "f6f98f50-fff0-4440-bb6d-82966b3d8516",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "732080eb-0dbf-42ae-9c0f-3848d5935fb8"
        },
        "item": {
          "id": "61a6e2aa-c9ee-4b8e-bcc1-dc8bd3e895a4",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "3e8352e9-f0eb-44ec-abf9-0898b4b2ccd0",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "92ba648c-3b74-491c-be22-a101e913b868",
        "cursor": {
          "ref": "a2d74fa7-33a1-49c6-bbc4-542679b0f620",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "53769392-a20e-4276-befe-3f70e0b1b897"
        },
        "item": {
          "id": "92ba648c-3b74-491c-be22-a101e913b868",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ff027eae-a3ad-4910-bc37-f829cb18587c",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "48b57841-f02e-4dab-9a5c-ae8f47260c00",
        "cursor": {
          "ref": "9fe9fb59-fb86-41a3-bc6b-0415ab4e3ef6",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "2bf0fb6e-9aa1-43ad-8c81-9b550eae61e8"
        },
        "item": {
          "id": "48b57841-f02e-4dab-9a5c-ae8f47260c00",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "b016fe93-c28e-40c8-9522-04284e59ddd5",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "9ee87116-0d1c-46fb-a032-7cbc06fdb52f",
        "cursor": {
          "ref": "602983c4-3790-44fa-bafb-833ddb449b42",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "97e99fc6-d05f-4aa7-8fc4-7a1dc22bc6fb"
        },
        "item": {
          "id": "9ee87116-0d1c-46fb-a032-7cbc06fdb52f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "dd3b0df0-771f-4236-bb1b-ec9596fc6f80",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "a6eade43-bacd-4029-b0a9-e0576c7b2ddb",
        "cursor": {
          "ref": "60ea4ab1-0806-49ae-b0f7-61417cfe546a",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "bd735745-2dad-4e57-82f2-d8259ba1c84e"
        },
        "item": {
          "id": "a6eade43-bacd-4029-b0a9-e0576c7b2ddb",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "f868b69a-3664-4a16-a823-70aa0665b19c",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "db758cbe-9a8d-4f30-a906-da2b54989371",
        "cursor": {
          "ref": "189bedb6-215d-4e5a-8e05-386bc5bbda56",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "2c5c89fd-e411-4274-9eac-7f7ade4eb7f7"
        },
        "item": {
          "id": "db758cbe-9a8d-4f30-a906-da2b54989371",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ba220c2a-be88-478d-b117-44690f0768a7",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "ad4deddb-a382-4ebe-85bc-289aac6d811e",
        "cursor": {
          "ref": "b28f8bf6-0fe8-402d-b135-77097e25801c",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "c7647194-f8f5-434e-9a2c-a0caf4987262"
        },
        "item": {
          "id": "ad4deddb-a382-4ebe-85bc-289aac6d811e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "44781251-8f26-4368-a639-20be0f75e272",
          "status": "OK",
          "code": 200,
          "responseTime": 3,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "67b8b4c4-6880-4009-9d1a-0f49d937d5df",
        "cursor": {
          "ref": "cad823e6-dca7-4bb6-8559-a81456b07d40",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e7061dbb-c87a-489a-80b5-4afe896e9a66"
        },
        "item": {
          "id": "67b8b4c4-6880-4009-9d1a-0f49d937d5df",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "bb3a9b4e-1fa1-4df4-9058-f9850d12f6c4",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "8726b513-baba-4797-ae97-eced11b6d244",
        "cursor": {
          "ref": "148bcba8-2520-4bad-8924-109fa710e297",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "38f4fd3f-9be4-4cc8-9f1e-5af1ba372fe1"
        },
        "item": {
          "id": "8726b513-baba-4797-ae97-eced11b6d244",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "d88947c4-0dbb-4e14-aae7-0c0345bf7b4c",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "95dcd6b3-8214-4adb-9af7-e6236830da5e",
        "cursor": {
          "ref": "3f28c896-ec00-4f99-964f-e913d8a69b5e",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "e8e9cf37-d674-46d8-b9c3-e40b592140ad"
        },
        "item": {
          "id": "95dcd6b3-8214-4adb-9af7-e6236830da5e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b3aff088-da1a-4c35-985b-b3fc13c064b2",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "63000408-7f26-4933-844f-5cbaf3714a09",
        "cursor": {
          "ref": "b4c80cfc-ddac-4d78-83f6-2196079fc7aa",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "5e33a73a-468f-47f6-bd66-aa3f64825e1a"
        },
        "item": {
          "id": "63000408-7f26-4933-844f-5cbaf3714a09",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1b7d3202-9574-4825-bbe9-2b4f25e898f0",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "31e9b07d-2ab5-47de-bcc8-2e35cec3e6d3",
        "cursor": {
          "ref": "00c133e6-68ea-4d70-b82f-06b923a9e612",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "af4f14c7-6d14-4a6b-80d2-659b5f990d07"
        },
        "item": {
          "id": "31e9b07d-2ab5-47de-bcc8-2e35cec3e6d3",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "290731d5-0d4e-4091-9e46-6299a79f1efd",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "63ca0a32-e5f3-43d5-9f89-5e85d5fd350f",
        "cursor": {
          "ref": "55cc71a6-acf7-4a08-b389-5122e989cd46",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "79f56724-a4c1-4afe-8b0b-d78c074875a0"
        },
        "item": {
          "id": "63ca0a32-e5f3-43d5-9f89-5e85d5fd350f",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "af79554a-9bd6-4cc3-a8b4-529d51fbf09f",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "cb817cf9-e276-4429-a19d-7be92c7f2c8e",
        "cursor": {
          "ref": "59dd0464-b315-4c44-b637-d9586391320d",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "0ceb2563-cca9-4986-b51e-60d52dc75772"
        },
        "item": {
          "id": "cb817cf9-e276-4429-a19d-7be92c7f2c8e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b305b3ea-015b-464e-8af9-e33e764c4675",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c179c57-b641-4208-a6e7-f9087e047009",
        "cursor": {
          "ref": "7bac282a-dae4-4cf9-9a1a-6627fb7fd805",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9fc2ded2-325f-4cee-8c39-5741741ea332"
        },
        "item": {
          "id": "5c179c57-b641-4208-a6e7-f9087e047009",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "55236578-9d4a-4cd6-84e3-aa1c85e91170",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e684fa0e-ea3a-4fca-a223-0790cc6205bc",
        "cursor": {
          "ref": "2b725213-6b7c-44ca-95a6-1dab75f379cd",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "41dee6f6-d75d-4901-9ad8-5b9943fc46bc"
        },
        "item": {
          "id": "e684fa0e-ea3a-4fca-a223-0790cc6205bc",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "6e66de8d-53e8-421b-b3df-43b257d03652",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e684fa0e-ea3a-4fca-a223-0790cc6205bc",
        "cursor": {
          "ref": "2b725213-6b7c-44ca-95a6-1dab75f379cd",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "41dee6f6-d75d-4901-9ad8-5b9943fc46bc"
        },
        "item": {
          "id": "e684fa0e-ea3a-4fca-a223-0790cc6205bc",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "6e66de8d-53e8-421b-b3df-43b257d03652",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4f21eb1-71ae-41fc-854f-ed123c70cb10",
        "cursor": {
          "ref": "819d225d-67d5-4686-9051-2b5d8d6e2f53",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f3fc44c3-d09b-4e4c-9092-103a713b6f06"
        },
        "item": {
          "id": "e4f21eb1-71ae-41fc-854f-ed123c70cb10",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "b3bc676f-dd25-4d84-8eb0-c1b97b876a60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be5226ff-2d32-425c-827a-a884a5b7c170",
        "cursor": {
          "ref": "e9d2476f-88dc-4ff3-98f8-6c457dee8f27",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "36f4dd29-0f0f-422e-8544-6ac9ec8ef13a"
        },
        "item": {
          "id": "be5226ff-2d32-425c-827a-a884a5b7c170",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "2bfb86ab-c70d-476f-a1d2-57d8611bf234",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9088b4c-885c-4cf7-a327-49c86f1f50c6",
        "cursor": {
          "ref": "e69c7640-c746-4d6c-a2ba-2d10a2564aeb",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "3181cde8-50bc-4fe9-80c2-167f031f8cb8"
        },
        "item": {
          "id": "b9088b4c-885c-4cf7-a327-49c86f1f50c6",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "2c1ba635-ca36-457b-bd06-c95b2b62e3d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8af364f-0183-40d8-a4ff-f1ece7231f0a",
        "cursor": {
          "ref": "758e4dfa-808b-4d8a-8a66-b6c09be1caba",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "311970cd-aee0-47d6-ae12-59b1b36875b4"
        },
        "item": {
          "id": "f8af364f-0183-40d8-a4ff-f1ece7231f0a",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "e2754a0c-f4d8-4c5d-9489-6d9a2e729a4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1577e59-2f27-42ee-8d22-fafbaef31d2f",
        "cursor": {
          "ref": "0e469161-d610-41e6-b8c8-eae99330023f",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "f46eb6a3-430f-46b3-8d70-3e7f9fa4628c"
        },
        "item": {
          "id": "e1577e59-2f27-42ee-8d22-fafbaef31d2f",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "b52656d3-c7ab-4bb6-932a-7074a69b3ef1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c20b74d0-b5fc-43b3-b50c-865d6a97fc31",
        "cursor": {
          "ref": "563a4ceb-f40e-45d1-a31e-4bfb61b03e6c",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "16c14073-f98b-449a-9c39-d4726b966cb2"
        },
        "item": {
          "id": "c20b74d0-b5fc-43b3-b50c-865d6a97fc31",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "9f0fdee8-c24c-4e17-9482-55b1f54cebdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0644c503-9e07-4a94-82e1-70e7bb358780",
        "cursor": {
          "ref": "00290bad-e84e-4323-9110-22383418c3cc",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "953fe7df-c69b-41c3-9530-965b3bd21ac6"
        },
        "item": {
          "id": "0644c503-9e07-4a94-82e1-70e7bb358780",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "cd547197-6959-45ec-a093-58223a0f792e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "999f7efa-bd90-4f4d-b57f-37a83874444a",
        "cursor": {
          "ref": "26f67af9-84c6-449a-897b-86b6deb03c65",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "98551650-9021-47c7-9a34-4e39917d4e9a"
        },
        "item": {
          "id": "999f7efa-bd90-4f4d-b57f-37a83874444a",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "199e129d-4e64-46b9-8141-c10f94474735",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "746c93e6-0eb2-4740-8ad2-5cd8ea21d3ea",
        "cursor": {
          "ref": "51be25e9-de4c-418a-998c-e1cfdaa00e4f",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "6bcfc0ec-ff16-4c20-b9a4-780c4023b042"
        },
        "item": {
          "id": "746c93e6-0eb2-4740-8ad2-5cd8ea21d3ea",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "5293d32a-38f8-4997-9135-bb124a3b285e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eec2d65e-2771-48dd-a409-cc06ff8cb0a3",
        "cursor": {
          "ref": "8f884059-8676-4c8d-bc98-b217cac274c0",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "8f6bb7ac-f468-420c-91a2-97fde571d725"
        },
        "item": {
          "id": "eec2d65e-2771-48dd-a409-cc06ff8cb0a3",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "34be64ed-1e7e-47a9-acac-6e7436b362e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1a82f8c-e54e-467a-8aad-f94d5353dcc9",
        "cursor": {
          "ref": "f3ce56f5-ba26-4172-9f04-6e7bd25822ae",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "503893c4-3267-41fb-baa3-d80635fff3b1"
        },
        "item": {
          "id": "c1a82f8c-e54e-467a-8aad-f94d5353dcc9",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "f47fd53f-6093-40a6-8055-b23236d8b9a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fae2d1b-2b89-40c1-b842-78fcb9b58f97",
        "cursor": {
          "ref": "cfdc65f0-a9e1-4f18-8d01-5af2a3420d72",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "e8ed5769-d1f8-4ee0-a84b-e02155362b01"
        },
        "item": {
          "id": "8fae2d1b-2b89-40c1-b842-78fcb9b58f97",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "5bdc9933-d38e-4063-8d41-96ab7d9438b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b7f39d7-0f17-4eb3-b3f2-8e5547d90220",
        "cursor": {
          "ref": "6e83136e-7e4d-4cd6-8605-ca1552894570",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "98b36a4e-1783-437d-8d45-d9d2d769c1b1"
        },
        "item": {
          "id": "2b7f39d7-0f17-4eb3-b3f2-8e5547d90220",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "c7d4681c-910f-49f2-871e-5bce915966fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fa9cd4e-b570-486a-a467-d0c5a68812c7",
        "cursor": {
          "ref": "d27d7329-c701-4697-8f1f-83ddf9e28b0f",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "dbf9c697-17cf-4934-aaa0-07ff760be2be"
        },
        "item": {
          "id": "9fa9cd4e-b570-486a-a467-d0c5a68812c7",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "3afb79f0-8252-45d3-a0c7-b4941d07c379",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e24c0bb-fd93-41e3-91a5-5486ac19adce",
        "cursor": {
          "ref": "da541234-fcd1-464d-8bcd-2f87f56e96d7",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "66f77b40-a849-4693-80fa-7971e5e8f55f"
        },
        "item": {
          "id": "4e24c0bb-fd93-41e3-91a5-5486ac19adce",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "2a4faf07-d65e-4089-bbff-7ce9d25e3877",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb22752f-784e-48fa-82dd-9996f5632723",
        "cursor": {
          "ref": "339ac4d5-891f-42f9-a5ac-2f2504124a27",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "0614ae17-65ca-40aa-b297-6c15ca0054bf"
        },
        "item": {
          "id": "cb22752f-784e-48fa-82dd-9996f5632723",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "0a30bc94-b719-4504-a764-50ea7993a443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "267240b8-31bc-4f8d-9610-7b72c5866336",
        "cursor": {
          "ref": "ec731524-2779-4ed2-9420-7a6421c3a613",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "e270824f-f8b5-4b39-ab90-de69e19cdd95"
        },
        "item": {
          "id": "267240b8-31bc-4f8d-9610-7b72c5866336",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "fcfdbd5b-a56d-4ada-8627-b0a623008101",
          "status": "OK",
          "code": 200,
          "responseTime": 680,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "f556f901-8ace-49d1-92bf-3c91b2b68dba",
        "cursor": {
          "ref": "1e43e257-8ecc-4abb-9a00-56a3f88fe90d",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "bd463531-4ffa-4db1-a6db-84ca6c6bd6ac"
        },
        "item": {
          "id": "f556f901-8ace-49d1-92bf-3c91b2b68dba",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "8b798607-d309-4f85-9de8-c591cc0bf2f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 269,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f9191c4-9e9d-423f-8b7e-5fa0b628aa27",
        "cursor": {
          "ref": "40a3a8b7-fd6b-49f8-ab87-6c1363127307",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "dbd07a73-0497-4e4f-9482-5f0b14134023"
        },
        "item": {
          "id": "8f9191c4-9e9d-423f-8b7e-5fa0b628aa27",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "b74e116f-8a73-491b-8b83-f2544bbaecf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 269,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7530851-ef80-46f7-9580-9dfa1aed0add",
        "cursor": {
          "ref": "35c7e281-4209-48f5-9783-6fd9c9390618",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "59301384-9cdc-45c3-9525-0717ba2011a3"
        },
        "item": {
          "id": "b7530851-ef80-46f7-9580-9dfa1aed0add",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "c0883bfb-c21f-45d0-be94-c9b6cfe23d51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 288,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f2b57db-ec40-4868-8aa2-3fc1ee11d877",
        "cursor": {
          "ref": "25cff6f7-6991-4e4f-8cf8-14fdccb89cc9",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "e6620f1c-75db-4ae6-ab08-75fe4fd66a10"
        },
        "item": {
          "id": "6f2b57db-ec40-4868-8aa2-3fc1ee11d877",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "9a56bb08-e810-42ef-9623-a1719260a380",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 273,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cec64265-0650-4a99-981b-6f7d279988a4",
        "cursor": {
          "ref": "29515188-15be-47b4-a859-c1a3fdabb08d",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ed57057f-bbf0-4004-b9b2-886a113d2682"
        },
        "item": {
          "id": "cec64265-0650-4a99-981b-6f7d279988a4",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "ebbb16b8-2919-4e27-b859-0d0793f59107",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 275,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "014702cf-7bea-482d-865c-e33039fe9fab",
        "cursor": {
          "ref": "f7758545-e2d3-4bdb-88d7-7ea45803ae2f",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "ab0754c8-ea3c-4027-8267-e1853935171c"
        },
        "item": {
          "id": "014702cf-7bea-482d-865c-e33039fe9fab",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "30c0064e-8374-4c2d-b2fe-b94aecd6f599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 270,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "461b9112-f93e-48f7-8a75-0602b0b078bc",
        "cursor": {
          "ref": "ba2c8104-8ff8-4c58-a95c-b6fbec12ce0b",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "8ff60864-eae5-412a-ac0d-fb0a36bb497d"
        },
        "item": {
          "id": "461b9112-f93e-48f7-8a75-0602b0b078bc",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "ba5a2eff-5469-449a-9316-018da725b0f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bd5e8b3-670c-4c18-8229-3a0b4a5c0567",
        "cursor": {
          "ref": "a6be8b28-57c8-43d1-98b7-9c15bcb8eec5",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "c10a9b83-1007-4ad8-aba3-0dad23167215"
        },
        "item": {
          "id": "9bd5e8b3-670c-4c18-8229-3a0b4a5c0567",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "dcf92f58-75a2-4d9c-8252-92898f186539",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14ab4b81-b327-421c-ab44-471ea8896141",
        "cursor": {
          "ref": "bb2b257f-dc8e-40c8-8b28-5c46c87d5abc",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e2915270-d50d-484e-be10-87949274eefb"
        },
        "item": {
          "id": "14ab4b81-b327-421c-ab44-471ea8896141",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "3cf24fe4-57a6-4a15-83bf-528794d624c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 245,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdbba43d-ee05-400b-ba85-347390fc0987",
        "cursor": {
          "ref": "455701fa-b8db-4e6a-9e6f-050e10fa38ba",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "545e03ae-5af7-4c5e-8404-f8fa83c42494"
        },
        "item": {
          "id": "cdbba43d-ee05-400b-ba85-347390fc0987",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "59687026-0c35-476a-9de0-b526ff8270a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c766cbc-5b3e-413a-b6d4-8bcfcad8c7ef",
        "cursor": {
          "ref": "63767c1b-1702-4bad-a77d-dd8eff72ceda",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "025a7ba2-8ca7-48c7-8a5c-39742609205b"
        },
        "item": {
          "id": "5c766cbc-5b3e-413a-b6d4-8bcfcad8c7ef",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "c52fe790-7b63-48dc-9adc-ab38935d4cf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6276d88-4544-40c1-bbdd-1c008f6c425c",
        "cursor": {
          "ref": "9fe207a1-ae17-42af-8bdb-68559e549710",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "691e3bbb-3273-4da5-a8e9-ee3a359d1b1d"
        },
        "item": {
          "id": "f6276d88-4544-40c1-bbdd-1c008f6c425c",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "d04ac598-8092-45e0-9380-7bae57358491",
          "status": "OK",
          "code": 200,
          "responseTime": 246,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "1e6f51b9-4eee-4e09-bc38-e39f54b503c3",
        "cursor": {
          "ref": "3435544d-f59b-484b-8a1a-295301b22eb4",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "d64b6884-4f60-4b6e-9c02-5058b6e57f84"
        },
        "item": {
          "id": "1e6f51b9-4eee-4e09-bc38-e39f54b503c3",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "c127aa7c-f606-4060-9b7c-46cb1e774f01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbb53d09-4501-464f-b4b7-44dfd17ffbfe",
        "cursor": {
          "ref": "788c221e-7580-44db-8c30-687c9a640cfb",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "4c98be3f-ccc3-452f-8227-ed1efe333b92"
        },
        "item": {
          "id": "fbb53d09-4501-464f-b4b7-44dfd17ffbfe",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "6fc1133f-32eb-4ecd-a1b7-967cda37dcb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cc9d53f-4959-4751-bffa-632ebdb3a43b",
        "cursor": {
          "ref": "d7be9d1e-5174-4949-b00a-b910a65bd938",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "9815c64b-bca2-4465-9960-d48960aea338"
        },
        "item": {
          "id": "3cc9d53f-4959-4751-bffa-632ebdb3a43b",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "80749670-7e9a-4ffb-ab71-8e792259bf59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbc08c7c-fcb6-4820-9c6e-7840899a0ed4",
        "cursor": {
          "ref": "ff6e0c20-3f93-45c1-8b41-b5b90af1b571",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "664cf16d-d026-4049-b8a1-21f77ef5b980"
        },
        "item": {
          "id": "dbc08c7c-fcb6-4820-9c6e-7840899a0ed4",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "1cd42237-e20d-484b-8f77-590674adca9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 233,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3640aec6-3934-41f4-b706-674b103502e6",
        "cursor": {
          "ref": "1caccb29-19e5-43f0-9bbc-c3986743447c",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "514803da-0b43-48a2-ae01-a0f0de251bd6"
        },
        "item": {
          "id": "3640aec6-3934-41f4-b706-674b103502e6",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "ac8e15cb-f683-4a60-bb3b-e4fb46c1ad4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c8c49cb-09a4-4a4f-a8f7-4c8c0fe09fb1",
        "cursor": {
          "ref": "146cef0e-fc1b-436e-9a1b-4691f80edadf",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "340941d2-363b-4c2a-b7fc-afff5b415f76"
        },
        "item": {
          "id": "3c8c49cb-09a4-4a4f-a8f7-4c8c0fe09fb1",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "eb9caebc-b173-4eef-8aef-798cad942b14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 270,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a193e83-b96d-4c12-a5e1-bb9d674aa898",
        "cursor": {
          "ref": "1e471876-843a-4a92-ae41-372eeaaadb6c",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "fad45cd3-27bb-4d69-b45d-c4d97bad62bb"
        },
        "item": {
          "id": "3a193e83-b96d-4c12-a5e1-bb9d674aa898",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "0ac328f6-9707-47c8-ac21-f6a70185b8a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 283,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "636d96d3-c1b6-4fb6-9b16-cf6a07176be8",
        "cursor": {
          "ref": "a8eab4a3-786a-4925-bf65-83db1f14d3f2",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "f9c4d043-94f4-4568-964a-812dc56cc9d3"
        },
        "item": {
          "id": "636d96d3-c1b6-4fb6-9b16-cf6a07176be8",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "18904bdd-1584-4383-903a-239e2b7c3e1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 272,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c36abfe5-a75e-4235-b429-6d360c3e3c6f",
        "cursor": {
          "ref": "0168b845-c438-4cb7-8b8f-92072fb2820d",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "3d15f536-ef30-4935-8363-234b65b75f66"
        },
        "item": {
          "id": "c36abfe5-a75e-4235-b429-6d360c3e3c6f",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "93f6ce67-b92b-4b14-914d-9c500a2e9f54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 269,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9818a31-a3b5-42db-b1e9-5d81cd37ee94",
        "cursor": {
          "ref": "753c9d89-e5c9-4064-96c8-5b51aed2000a",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "a3ceb00b-44ea-4ae0-b419-ee76aede0d8c"
        },
        "item": {
          "id": "f9818a31-a3b5-42db-b1e9-5d81cd37ee94",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "4b0c5635-e20e-4666-bccd-33e7f8fe13ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 535,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba0eda2b-6849-4618-bdd7-770b36fdd840",
        "cursor": {
          "ref": "45e918e6-b18b-428a-85d8-9361ae5c3ea2",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "4bc757d1-ec83-46c4-9458-1fdeb9c71367"
        },
        "item": {
          "id": "ba0eda2b-6849-4618-bdd7-770b36fdd840",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "f863fbc9-ee00-4854-aff9-97f7554ff598",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 263,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00ceae39-8390-4c5f-b5b9-55a46004b06e",
        "cursor": {
          "ref": "0ffa857d-f1d8-472f-8e57-d5a82e0fa02c",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "b578a2c9-c668-4e3a-a73b-fe5d590ab232"
        },
        "item": {
          "id": "00ceae39-8390-4c5f-b5b9-55a46004b06e",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "1c35c1fd-a7d4-42d5-a187-6d48ff033e8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 302,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fc531d7-e009-4671-8d81-94bcccb8cd77",
        "cursor": {
          "ref": "f79b1315-58a4-4078-96a4-29393c5659cc",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "e2f7a9ce-fc99-47c3-ae38-9f977277f005"
        },
        "item": {
          "id": "2fc531d7-e009-4671-8d81-94bcccb8cd77",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "c4b9b5ad-da15-4803-b40e-f6882da3890f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 273,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9012907c-bdc6-4199-9d51-cfb080f40c10",
        "cursor": {
          "ref": "6819f7b0-ce9d-4769-a63c-00cebb3c5d0a",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "fbaf6618-4a60-4c50-9c2a-6d2235273bf5"
        },
        "item": {
          "id": "9012907c-bdc6-4199-9d51-cfb080f40c10",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "a879df78-2109-4c97-869a-ef344b6fd44e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 274,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c93c1d81-7ba0-4622-b237-49e54eff8ce0",
        "cursor": {
          "ref": "88e124cc-035e-470d-92c4-fe2d762658a6",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "857116f0-74f1-4d36-8b15-88fb4c5f1611"
        },
        "item": {
          "id": "c93c1d81-7ba0-4622-b237-49e54eff8ce0",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "092a8feb-b023-4b79-8a1e-ef47419bb6aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 264,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6edaea7-1c8c-4468-a746-1931c177b6c7",
        "cursor": {
          "ref": "2e27f27f-4382-4d35-b016-6ab86a16802a",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "a9fcccac-9732-4955-ac1d-aa4fa2abee5d"
        },
        "item": {
          "id": "c6edaea7-1c8c-4468-a746-1931c177b6c7",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "c5890e41-f05e-4db5-b7d6-fe11e5213f2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 296,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15841ccd-866a-4820-947a-8ce68a561559",
        "cursor": {
          "ref": "fe6273d1-7ea7-45cd-93b2-3334bf2b3b77",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "c769bbae-5f63-473a-bfeb-7e1ce166b47d"
        },
        "item": {
          "id": "15841ccd-866a-4820-947a-8ce68a561559",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "f0aa0b48-9c09-4200-98e7-6eeac216539b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 272,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0112b88b-d0a3-4ccc-9f2e-c4eba414a6cb",
        "cursor": {
          "ref": "a8b3f0ea-73c4-480e-a4c5-6be8c2d76138",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "8901ee41-dc62-43c0-994e-7d1b5fafc8d2"
        },
        "item": {
          "id": "0112b88b-d0a3-4ccc-9f2e-c4eba414a6cb",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "019d8433-02e0-4913-b35c-e25e3f46f03f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 303,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6e7f4b2-8162-4ec7-ac85-d727d635bb86",
        "cursor": {
          "ref": "918933e2-d9e1-40b4-9341-74697016a305",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "8f8d3e56-0966-4e2d-b7ba-e2001f1996f8"
        },
        "item": {
          "id": "b6e7f4b2-8162-4ec7-ac85-d727d635bb86",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d5158501-b614-48a1-a49f-9cbae6c37e74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 285,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30b35059-fe42-4f11-a390-d94e5a887474",
        "cursor": {
          "ref": "a063178b-ed71-4fed-81dc-0d810e79be56",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "851d7d34-e40b-47e0-a90a-c198874d5586"
        },
        "item": {
          "id": "30b35059-fe42-4f11-a390-d94e5a887474",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "931e8e9b-8919-4622-b568-e0885d630202",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 308,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6969b17-a54c-43e8-bcab-d09b8ead3e12",
        "cursor": {
          "ref": "98645b3a-0036-46e3-a111-6651f09e7e20",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "debcae2d-3da8-449b-a0e5-42c9780b4245"
        },
        "item": {
          "id": "f6969b17-a54c-43e8-bcab-d09b8ead3e12",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "a661382e-eff4-4723-8c05-7dfd8fc729ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 281,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a14924f-1657-4d6c-a4d0-d67a1965f448",
        "cursor": {
          "ref": "97b89a7d-5aca-48fb-b0f4-098f3ab08c14",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "2c6492a4-1270-4dd6-bad4-96b483ea6e08"
        },
        "item": {
          "id": "1a14924f-1657-4d6c-a4d0-d67a1965f448",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "11deab6e-71ac-4be1-889f-a29419bdf94a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 271,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "487d62e5-9a8a-44ca-abda-93db5abf6482",
        "cursor": {
          "ref": "2ff9d0b7-c00b-4e98-98e6-e992e2d7475f",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "c402fd7a-858e-4565-9c6b-de121c1b97f2"
        },
        "item": {
          "id": "487d62e5-9a8a-44ca-abda-93db5abf6482",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "adb5e28c-f3db-499b-af3a-42e2dcc38b08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 257,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "162a7760-2c83-4543-bd28-224bb176a723",
        "cursor": {
          "ref": "e8aaafce-9231-4954-a29e-be19471d271c",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "b1b003a6-2204-46c4-81b2-1a4d9d10e2bc"
        },
        "item": {
          "id": "162a7760-2c83-4543-bd28-224bb176a723",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "914d9f19-ebf4-4e00-b6b9-98746105294f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 270,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5c0a87c-5181-41c2-b18f-b464724bfc3c",
        "cursor": {
          "ref": "ef6f9db9-9494-40a7-b6ca-02648389558d",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "706a1bfa-47fe-43f4-9072-1688a8369c62"
        },
        "item": {
          "id": "b5c0a87c-5181-41c2-b18f-b464724bfc3c",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "c4cee839-3149-4b2f-b778-257022c67933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10abe5d5-cb7e-4be2-8100-def062edef89",
        "cursor": {
          "ref": "83662418-5c5f-4c17-aedf-1e2474f08acf",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "b936db9c-ad21-46cc-9c15-26e0605f3655"
        },
        "item": {
          "id": "10abe5d5-cb7e-4be2-8100-def062edef89",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "560b3798-8831-4e2a-8da6-f14472c519b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3fb17f7-0c80-4dae-bf6c-e647adad3ebf",
        "cursor": {
          "ref": "2c10dbd7-31a8-4896-81ff-53f4714c3680",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "07a05a44-edf3-42f3-9cbd-f7d87aa46b51"
        },
        "item": {
          "id": "c3fb17f7-0c80-4dae-bf6c-e647adad3ebf",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b2ee5512-e805-4820-8ccd-fb629d094c67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a2fd60f-d0d2-4309-8575-212462dd771a",
        "cursor": {
          "ref": "56f688ca-9670-4086-9c45-3211c395fe89",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "f0223ba5-3f96-4d6f-b793-a2139fce8256"
        },
        "item": {
          "id": "9a2fd60f-d0d2-4309-8575-212462dd771a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "336232e6-e430-4b89-8cb2-fa397ec60d00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 286,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da7f85d9-8820-4739-8540-d8edc7b3f004",
        "cursor": {
          "ref": "58827071-6bb0-4914-ad2f-c61a55cb89d3",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "21487bd7-f32c-42e3-8732-a4dbb7933bca"
        },
        "item": {
          "id": "da7f85d9-8820-4739-8540-d8edc7b3f004",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "839a71da-e032-4c67-bd61-ec4e0570190b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c23cc43b-0df2-410f-8b61-3706b5ce825c",
        "cursor": {
          "ref": "3bc08e84-1d80-4e8d-bba5-15333304b293",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "d6225f8b-6dda-4d7a-825c-7f891fc77f7a"
        },
        "item": {
          "id": "c23cc43b-0df2-410f-8b61-3706b5ce825c",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "3ae114ec-6de8-4058-8f9b-15c8be8900d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e7956af-7fbd-4814-a539-65182a48462c",
        "cursor": {
          "ref": "ff6c25fb-17f3-45be-9458-0603fc4fa60a",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "a19bf547-347a-4aaf-9103-7b10cc14eb89"
        },
        "item": {
          "id": "6e7956af-7fbd-4814-a539-65182a48462c",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "3a948716-2c3e-4c5b-b189-a8b6aad89109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c72fb4e-d7bb-483c-ab53-f69ef600ee60",
        "cursor": {
          "ref": "559bb284-514e-493a-8961-acd511715701",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "4def016a-73e8-47fd-b277-cca4bb7f3725"
        },
        "item": {
          "id": "9c72fb4e-d7bb-483c-ab53-f69ef600ee60",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "ac494bd0-960d-45fd-b594-00733033dd46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15b2e1e8-efd2-464c-b534-d46da074f9e4",
        "cursor": {
          "ref": "c46d3aaa-eb08-4418-9871-56b24c2c1374",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "1a5c3810-f81a-43e9-928b-22287886312c"
        },
        "item": {
          "id": "15b2e1e8-efd2-464c-b534-d46da074f9e4",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "1298f0a4-4ac7-4b50-b11e-450f6a7bdde8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 284,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4eb782f-11c2-41cc-8b78-0e6c98bcb5f8",
        "cursor": {
          "ref": "07ff4c85-a07a-4b25-bda3-e7087c446400",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "bc119604-ba98-4d7e-9992-8e314dbc8879"
        },
        "item": {
          "id": "c4eb782f-11c2-41cc-8b78-0e6c98bcb5f8",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "69fdc9ba-6f79-48c5-bc31-b50881faf5f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a70c6a13-02fe-43c0-97d1-482c4d5eaaf3",
        "cursor": {
          "ref": "4ffc8dc2-00e0-4776-af7e-af874adcd5e0",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "9fd62278-b4c9-403b-8743-51d5bff3bcb8"
        },
        "item": {
          "id": "a70c6a13-02fe-43c0-97d1-482c4d5eaaf3",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "dac301b7-a0f3-43f4-a98e-edf40e9874d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f987004f-7354-4569-bebf-8dc5fd7930f6",
        "cursor": {
          "ref": "ec505ba5-b439-48b9-8964-30ed26dcd756",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "55f11634-0992-4896-8557-d22be667bd9f"
        },
        "item": {
          "id": "f987004f-7354-4569-bebf-8dc5fd7930f6",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "fdf7002c-3462-471e-8520-7df85c543a8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae7518e0-b033-4fb3-be32-f9358c09be71",
        "cursor": {
          "ref": "31bca019-1660-422a-8003-391d1da87aeb",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "2b44e2ee-8e93-4861-b82b-f7afa04555ed"
        },
        "item": {
          "id": "ae7518e0-b033-4fb3-be32-f9358c09be71",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "6e0883e8-c2e3-439b-9b80-03a93db3f9c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "151dfb14-8ba7-4eeb-940c-8a3b9b7acc50",
        "cursor": {
          "ref": "4182cbed-5086-4da1-84d4-7ca2b8ae33ab",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "4b527731-25fa-482d-8927-24c3d5cba55e"
        },
        "item": {
          "id": "151dfb14-8ba7-4eeb-940c-8a3b9b7acc50",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "324bb7be-9950-4365-9191-18da185e7eae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "307209a3-dfef-4190-92bb-b8b94cfbb4c8",
        "cursor": {
          "ref": "847deb4e-e6cb-405f-9098-77cfacd99d11",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "a1c69b7d-59ea-4555-bbd6-34cf4fbf9860"
        },
        "item": {
          "id": "307209a3-dfef-4190-92bb-b8b94cfbb4c8",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "08d7720c-6163-483a-8627-ce824f2f8e7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1b28303-cf50-4aa6-85d1-eea4c2bde09b",
        "cursor": {
          "ref": "b5b29254-a0c8-4452-94b1-61a902ac0643",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "d2711cbd-da19-464e-a365-3760e66a12ac"
        },
        "item": {
          "id": "b1b28303-cf50-4aa6-85d1-eea4c2bde09b",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "4f0eaac8-3d4f-4fae-a756-808c568b0361",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "867b64a1-56c1-49d8-9ea9-c7e854196419",
        "cursor": {
          "ref": "fd9c0a39-e68e-471a-b257-33d65e31c828",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "0ead0c64-cb4e-446a-b84b-70e08cafb10c"
        },
        "item": {
          "id": "867b64a1-56c1-49d8-9ea9-c7e854196419",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "57be2df9-c293-4e82-923b-713b0034e06b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b09b9e1-0ab0-40a4-b8b8-a796e0222148",
        "cursor": {
          "ref": "bfa09c61-2e1c-49fd-b674-5e365a99794c",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "60e21a02-9bf2-4509-9541-3767afe854db"
        },
        "item": {
          "id": "3b09b9e1-0ab0-40a4-b8b8-a796e0222148",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "757420f3-2fa8-4ed5-8e6c-8f865322df52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89063bf0-9901-4047-b8e7-8d9eb5afd0fd",
        "cursor": {
          "ref": "69801085-381e-4b89-89cc-2291d7b3f0a3",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "7157c63d-ac63-4391-a3f6-8281d86c9bd7"
        },
        "item": {
          "id": "89063bf0-9901-4047-b8e7-8d9eb5afd0fd",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "609efa50-243d-4fd5-9aaa-2f990baecaf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3968ead8-eb6d-4527-8eea-8a0d642642f8",
        "cursor": {
          "ref": "6eef9cf2-2d11-4ccd-94ee-4dd9a15cee35",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ce5bd55d-e6c0-4b72-81bf-737ba8c37050"
        },
        "item": {
          "id": "3968ead8-eb6d-4527-8eea-8a0d642642f8",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "c1193837-65ba-42e7-921b-ae39eb151cb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99db0e2e-890e-4094-9b2c-b2b05a78c811",
        "cursor": {
          "ref": "cdb9190b-7010-4480-baac-34c191b0b872",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "42574c9d-5167-416b-91d8-f1e0211303a8"
        },
        "item": {
          "id": "99db0e2e-890e-4094-9b2c-b2b05a78c811",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "dbb9094e-75a6-4ae0-8aa9-3b512b3296b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "358f5cc3-6ca9-4f23-b7cb-c6fa502be014",
        "cursor": {
          "ref": "ec64c55d-b54c-4ece-9f90-205f9f06d680",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "dcf7ae31-94cd-4061-97a6-e06bff6668c1"
        },
        "item": {
          "id": "358f5cc3-6ca9-4f23-b7cb-c6fa502be014",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "8e3c0f1d-3013-4e18-932c-bc71f58e4b89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94f37bfb-c406-4fa2-821d-7561afd9a2a2",
        "cursor": {
          "ref": "a3f1137b-36c2-4a49-94fe-b1b2e7147dfe",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "fa195f9c-877f-4436-b29e-a65b541978f0"
        },
        "item": {
          "id": "94f37bfb-c406-4fa2-821d-7561afd9a2a2",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "9bcd5a4c-d425-447f-9b1c-c7a995bae7c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c00f9554-9d12-4dee-b8f7-2ecb547cb5a5",
        "cursor": {
          "ref": "5c929818-6bb7-4e7d-b30a-f892e09380d3",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "def3e796-5f63-4225-9009-4056d5c3aa13"
        },
        "item": {
          "id": "c00f9554-9d12-4dee-b8f7-2ecb547cb5a5",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "68d63bda-1ef9-4f1a-87d0-6918fa900122",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85ad70cd-67ff-470b-8879-9c4ab4ed9fbf",
        "cursor": {
          "ref": "264a10c8-744f-4102-904a-e5edb5ed4a12",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "f390a523-653b-4e2d-85e7-549af7b59ae9"
        },
        "item": {
          "id": "85ad70cd-67ff-470b-8879-9c4ab4ed9fbf",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "4d68f647-faca-415d-9101-d68c50421959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d439b03-3eb2-4a3f-b77b-a785ea637e8a",
        "cursor": {
          "ref": "c5add29c-562f-479c-b6ac-95f60c3ba09b",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "9b0e57f7-0e77-4651-8c39-d709374516c5"
        },
        "item": {
          "id": "2d439b03-3eb2-4a3f-b77b-a785ea637e8a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "0c70c319-c3dc-4803-bae6-256f52aaaf30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa3b5967-3c29-4bd4-bcb0-1c986ffa61a4",
        "cursor": {
          "ref": "93d49ed7-db17-4502-9fb5-32585eae178f",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "26343221-1ee7-4090-9151-9c2c7efd3e52"
        },
        "item": {
          "id": "aa3b5967-3c29-4bd4-bcb0-1c986ffa61a4",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "8d286b28-ed19-4850-bda0-1238cd4dbfb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af314f22-4f62-438f-9bc7-ea1a225b558e",
        "cursor": {
          "ref": "2e1b024d-eeed-4e70-8afd-fa37c76b49a1",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "4cfd042a-000a-4d75-bf44-07a38a03e9d8"
        },
        "item": {
          "id": "af314f22-4f62-438f-9bc7-ea1a225b558e",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "2b04601c-7373-4a5f-afa7-ae3f47116a4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7da640da-af25-4922-9b92-dea9ef28f2ad",
        "cursor": {
          "ref": "08b8219e-5df0-4d21-9b45-be8f96086902",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "3cedcac1-29c8-4fd3-af07-462830ef70e8"
        },
        "item": {
          "id": "7da640da-af25-4922-9b92-dea9ef28f2ad",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "b4c10463-34ec-41ba-be41-e4aa922fcfb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c63dc4f-be5c-481c-b581-66701e7b3568",
        "cursor": {
          "ref": "1b469ad7-4bd1-4c57-a2d2-b70ad36538e8",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "ca923c60-6e19-4553-9a8e-ffb2b153317d"
        },
        "item": {
          "id": "8c63dc4f-be5c-481c-b581-66701e7b3568",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "75bde4de-35a2-4537-bede-c6f23764fd98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ea7d855-81f2-4819-b1ff-7482028b4be6",
        "cursor": {
          "ref": "42ae1838-a480-4244-b189-9f4194f51510",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "91f93c40-acb2-4527-9821-aefe815c1f11"
        },
        "item": {
          "id": "4ea7d855-81f2-4819-b1ff-7482028b4be6",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "63db42bb-0a4e-4d60-a7bb-c114b73f183f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d939292-ec06-4e7e-af23-6029962f4e2c",
        "cursor": {
          "ref": "3349fb9b-756f-4fa4-9278-1f626d4bd109",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "8fa0b47a-bdd5-4227-a4dd-ae0600255eab"
        },
        "item": {
          "id": "2d939292-ec06-4e7e-af23-6029962f4e2c",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "ca8e1291-0e02-4378-b00f-b676ea3c8be9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a36498e-9992-4d69-ba43-c2a4359fc70f",
        "cursor": {
          "ref": "8f4e7070-0f1b-4c11-a4fb-1daabca979d8",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c6e33f2e-6bc8-47fc-a521-003c8777d03e"
        },
        "item": {
          "id": "7a36498e-9992-4d69-ba43-c2a4359fc70f",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "a432218b-e2dc-40d1-8728-7eeed93b992c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f98d5884-9e32-4f9c-8b90-03aa1c38142f",
        "cursor": {
          "ref": "f09282ae-8cb5-4b86-acbc-076c41482c49",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "89b94d45-c28d-4b38-ba13-2c421a0fef41"
        },
        "item": {
          "id": "f98d5884-9e32-4f9c-8b90-03aa1c38142f",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "208d96b8-e8bf-4dc7-a22d-7780689b8e25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc7fe544-c9af-41c0-bd47-e33c8981d557",
        "cursor": {
          "ref": "b3fd4dd7-9494-4cc3-b965-a227810fffba",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "e9b5e744-af00-4d02-80f1-7a18e0ed11e8"
        },
        "item": {
          "id": "dc7fe544-c9af-41c0-bd47-e33c8981d557",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "97f4d728-0d2e-4718-885b-df5fe60a8938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc980111-39ae-47eb-9d8d-f31f9220273e",
        "cursor": {
          "ref": "eb78a321-e209-4b58-aedd-3573ed81ac7d",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "90950bce-d7d9-46ba-8fba-228b456a341f"
        },
        "item": {
          "id": "dc980111-39ae-47eb-9d8d-f31f9220273e",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "17b58163-6724-4f5e-ae3d-1054a3ce6e76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bf8646c-17ea-4ae6-a648-5a4aeb543be5",
        "cursor": {
          "ref": "165ae250-31ed-4472-ba73-f21f01d28e33",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "d138213e-65b8-4707-825d-a0ab1d05fde4"
        },
        "item": {
          "id": "4bf8646c-17ea-4ae6-a648-5a4aeb543be5",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "cf696292-d066-4e78-b221-4bb0d56d3990",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54c386fe-49eb-4012-b823-d3ec78a522f6",
        "cursor": {
          "ref": "c5abcf3c-703e-42df-8428-9f9328c53c79",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "25673761-1525-4acc-a24f-fdce0d84a467"
        },
        "item": {
          "id": "54c386fe-49eb-4012-b823-d3ec78a522f6",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "077314c1-c69a-4b9e-be4f-f7dd261f2d06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05ea0602-a016-4e5a-a85c-2eba8bb07ee3",
        "cursor": {
          "ref": "fd5dde38-ffa5-41e0-9b43-3293669e3386",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "fc730f76-adf1-468d-a655-c7c4e24f7c03"
        },
        "item": {
          "id": "05ea0602-a016-4e5a-a85c-2eba8bb07ee3",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "55766381-1b73-4fdf-8e75-3713a3557951",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3b49ea8-f55d-49f3-ae2e-9bd2ddeccf0c",
        "cursor": {
          "ref": "ef14d282-6075-4a3d-9545-1af9adde9002",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "542e882c-dcbc-446a-9f6c-1c3222dd933f"
        },
        "item": {
          "id": "e3b49ea8-f55d-49f3-ae2e-9bd2ddeccf0c",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "037906d0-95c4-40e1-a878-5b49ce887a43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d15b119-e9e2-428c-9ea5-c66718bee1eb",
        "cursor": {
          "ref": "61b08d35-677d-4578-bc60-577704fdabd0",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "4be4a9e2-2f9b-421f-9069-a36532c522aa"
        },
        "item": {
          "id": "4d15b119-e9e2-428c-9ea5-c66718bee1eb",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "021f26ed-72e7-4a8b-9516-54ee61278d18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8df512b2-47b3-460f-869f-50970b5f9bda",
        "cursor": {
          "ref": "81721d61-74dd-41dd-b7ae-7086913e7fd5",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "42cfeb64-fd30-4a0e-9c5e-d19554d4e33b"
        },
        "item": {
          "id": "8df512b2-47b3-460f-869f-50970b5f9bda",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "2c3bd830-987a-48e6-8e87-c55858e1cae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a8c4bfb-e08a-444d-9875-a46f8da1846a",
        "cursor": {
          "ref": "2a8108e4-3ca4-4f99-a6f9-ed3af1a95b36",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "8e6fd9cb-c2aa-4364-8479-05281d2ca472"
        },
        "item": {
          "id": "9a8c4bfb-e08a-444d-9875-a46f8da1846a",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "94f896df-b08e-430c-9dfe-9efb19a04a17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47d19064-8388-486a-af5d-256f11d15624",
        "cursor": {
          "ref": "1002e3de-d6b0-40d4-a4b8-4200f3af80af",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "2000b88d-4421-4ba1-b9fb-9e7065bae5a8"
        },
        "item": {
          "id": "47d19064-8388-486a-af5d-256f11d15624",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "43f2cbad-2d8d-4092-a7e0-f8bcd1fb5e8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a20b7ace-b483-4693-8142-b1a1b518e70e",
        "cursor": {
          "ref": "963b33a8-a7fc-44e6-b361-8ba57e82e40a",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "c58ddd03-8367-461b-8ef9-ba8c7ed37922"
        },
        "item": {
          "id": "a20b7ace-b483-4693-8142-b1a1b518e70e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "7131397d-a7c2-46ac-b5d0-51f6937d3141",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44ae4b9c-6d93-4a9e-aa83-cb47bb86d03e",
        "cursor": {
          "ref": "c0a0e368-33f5-4fff-b62d-01dca11aefd0",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "aa4c8f30-821b-432b-8a9a-4294a954cec4"
        },
        "item": {
          "id": "44ae4b9c-6d93-4a9e-aa83-cb47bb86d03e",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "d01f7669-9d87-4166-a317-108bf5e8e537",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 4,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12e0f235-a911-4669-b966-4ead0693f7cb",
        "cursor": {
          "ref": "bd6d33cc-e5a1-42f9-83bc-daedba2963de",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "3c6f0553-dfa9-4b3b-ac2b-3c3e8a63f22e"
        },
        "item": {
          "id": "12e0f235-a911-4669-b966-4ead0693f7cb",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "e2855d78-f318-43d4-9f64-f5734b9a222d",
          "status": "OK",
          "code": 200,
          "responseTime": 227,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5bfed70-d8f4-48d2-9fed-a37989ed2051",
        "cursor": {
          "ref": "6ad0fb54-c568-4fc2-9df9-d738bb0553ed",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "572286d0-fff0-4838-b620-c1a63e3bc04f"
        },
        "item": {
          "id": "a5bfed70-d8f4-48d2-9fed-a37989ed2051",
          "name": "credentials_verify"
        },
        "response": {
          "id": "160e3201-28e1-4102-9098-ac9ce949de36",
          "status": "OK",
          "code": 200,
          "responseTime": 670,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2c2e08a-bea4-49bb-9641-551f6e51e486",
        "cursor": {
          "ref": "8794a090-e25e-4c33-b063-c6775faf0799",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a55ffc51-285f-40ad-aa30-f080bcdb2c49"
        },
        "item": {
          "id": "b2c2e08a-bea4-49bb-9641-551f6e51e486",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "0d3a3561-15c4-4a2f-b60a-dd9016f247ce",
          "status": "OK",
          "code": 200,
          "responseTime": 587,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "75994d22-92e1-415d-80f0-d41c3b295efd",
        "cursor": {
          "ref": "6b30d3f0-baf9-43cf-bd96-02e89fac549b",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "626a2030-db23-4413-97da-cba2856743cf"
        },
        "item": {
          "id": "75994d22-92e1-415d-80f0-d41c3b295efd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0b1a3622-1905-4f6f-b84e-979ef3a7507d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75994d22-92e1-415d-80f0-d41c3b295efd",
        "cursor": {
          "ref": "6b30d3f0-baf9-43cf-bd96-02e89fac549b",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "626a2030-db23-4413-97da-cba2856743cf"
        },
        "item": {
          "id": "75994d22-92e1-415d-80f0-d41c3b295efd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0b1a3622-1905-4f6f-b84e-979ef3a7507d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75994d22-92e1-415d-80f0-d41c3b295efd",
        "cursor": {
          "ref": "6b30d3f0-baf9-43cf-bd96-02e89fac549b",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "626a2030-db23-4413-97da-cba2856743cf"
        },
        "item": {
          "id": "75994d22-92e1-415d-80f0-d41c3b295efd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0b1a3622-1905-4f6f-b84e-979ef3a7507d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14b59a95-ec9a-4b3a-9c4e-1fa653866ae8",
        "cursor": {
          "ref": "e3ab0571-f4bf-471d-8998-739dfc231d9c",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "d67aa9bc-d4d2-4138-8dd7-99168e255d15"
        },
        "item": {
          "id": "14b59a95-ec9a-4b3a-9c4e-1fa653866ae8",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "51d90197-ee2f-41ae-b492-f129eaf6b30a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd35b17a-664a-42e1-a72c-d6ad065a93a9",
        "cursor": {
          "ref": "e4912773-96fc-4955-b315-9ff7efe5bd7f",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "64c4c47d-6e48-4e46-9e88-5f2cc9950486"
        },
        "item": {
          "id": "fd35b17a-664a-42e1-a72c-d6ad065a93a9",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "20e520ba-0be1-435b-98e0-361a5a2bba91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "fd35b17a-664a-42e1-a72c-d6ad065a93a9",
        "cursor": {
          "ref": "e4912773-96fc-4955-b315-9ff7efe5bd7f",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "64c4c47d-6e48-4e46-9e88-5f2cc9950486"
        },
        "item": {
          "id": "fd35b17a-664a-42e1-a72c-d6ad065a93a9",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "20e520ba-0be1-435b-98e0-361a5a2bba91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "bc96f265-d70b-4db4-9835-085712d9c303",
        "cursor": {
          "ref": "7aaba4d2-984b-4cbf-92f9-a0c012205503",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "8bdc51ae-9e5f-4fa6-9e00-c3d77c32de04"
        },
        "item": {
          "id": "bc96f265-d70b-4db4-9835-085712d9c303",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "f8cb4c6e-7bf9-4f58-ab21-f1d72d59f971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "3afbfbd8-7f81-4d7b-8b47-616c8e17ad86",
        "cursor": {
          "ref": "a3b78ebe-23e1-428b-b3d2-48b13b9c6e38",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "8d5c1142-aea7-446f-aa53-7c7961407948"
        },
        "item": {
          "id": "3afbfbd8-7f81-4d7b-8b47-616c8e17ad86",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "7e80b009-fab3-48ac-99a6-0cf648c6dc73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "3afbfbd8-7f81-4d7b-8b47-616c8e17ad86",
        "cursor": {
          "ref": "a3b78ebe-23e1-428b-b3d2-48b13b9c6e38",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "8d5c1142-aea7-446f-aa53-7c7961407948"
        },
        "item": {
          "id": "3afbfbd8-7f81-4d7b-8b47-616c8e17ad86",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "7e80b009-fab3-48ac-99a6-0cf648c6dc73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "3334c09d-aea6-4404-9419-8fa9f7e282cf",
        "cursor": {
          "ref": "123952be-ec71-411c-bbce-a42735f10f4c",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "de6d2949-b165-45e3-973e-f03305b93dc6"
        },
        "item": {
          "id": "3334c09d-aea6-4404-9419-8fa9f7e282cf",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "5d334127-5d0d-481d-8da4-4cf8909073ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}