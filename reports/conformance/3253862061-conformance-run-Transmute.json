{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "53760578-4180-4e99-a366-caffa9901163",
        "name": "Clear Cache",
        "item": [
          {
            "id": "4ccbcc7c-23b8-40b6-8fda-05f1d864882c",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3040f394-9174-4b0b-8864-e8282dbadbfa",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b8c3b2ee-7140-4225-a607-d321837f9064"
                }
              }
            ]
          },
          {
            "id": "a4d29b7a-f976-45b5-a4c3-f88d7d12cf84",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f9ac5b8e-dd97-4833-88c2-6a2009cf309b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d603cc9f-1414-4ad8-a545-0010f9cc2eb3"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "57b67eaa-37d2-4cfc-bc2a-6c5a37a82e26",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "e6fc4ba5-2ac1-4b50-af8a-d129374ef723",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cff83af5-abff-4dbe-aa7b-807bd5f9b0c6",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "efdb3d49-0fc6-4233-85cd-66d8269721e9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e68b287d-2c3f-4cce-879b-d0955e5d777a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "141fd706-d029-4f4c-ada9-86addbb2193d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5655583e-af0d-4e6b-a944-0a8c7913d46e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "897ffdc6-a64e-4305-b9ce-e2e559978c93",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ae49d470-a4e2-4cf7-8164-0d46b191d7ca"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "00756086-28a9-4634-9568-3a13d0dfb4bf",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "d5257a6c-d1d2-4d4b-a77e-67756b6c0107"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "878291f6-23c3-42ad-98ae-6f2ccb52bb46",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8e53168a-5859-4f4b-bef1-28fe1bc5a284"
            }
          }
        ]
      },
      {
        "id": "52a54f5c-9d17-4c2c-89db-cff06b6fe6ad",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "b3574918-ef3b-4227-9b30-9f67a390c340",
            "name": "Negative Testing",
            "item": [
              {
                "id": "323cb8ba-04ba-4eb7-9606-c1c55598d063",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "88569912-a000-4988-a9eb-307069ace24c",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db1a91e-d2da-4da8-a66d-5b27d85848c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "895a041a-81cf-456d-9a8d-eb728a17c686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1f08f75-ae76-4dd6-882f-394039c725a0",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "305afc26-92f3-40cc-8cdd-df82a9ac4488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d30d3796-9794-4c57-9754-f255a72a4bcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8572df8a-cc0d-4d6c-951b-3d009cbb038e",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc395576-c9c7-4765-91c7-08045aa1703d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b79e9e1c-b1b1-4a56-b86c-17990f862e26"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "829708a5-c398-4530-93ac-4823687eaf8f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "893048c4-fd79-4b4f-a7b9-c141f65d9eb8",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2080337-80d6-4292-817d-7b1d79114e01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7c7c0e8a-a195-4839-b2bc-016ffa07b961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a58aac8-e6d4-4d0b-aa08-1e95cc7b264e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b86f4675-a735-43df-b658-f6fa97b75fce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4f36454-cb82-47b1-b297-a9a65501fcd1",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61485f30-6dfd-4826-a9af-69240438876a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "43639cb9-1639-4bd5-b1f2-6dbcc7f4c087"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "191a3d18-b71c-4294-a502-d19870f74eb5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "0884bc97-f9aa-4594-93be-016fb910b90a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6f281a7e-0cfe-40ed-9fdf-96c57a3841bd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ebc7c797-d15b-4f1c-b926-de1329f43e2b",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "867a434b-fbf6-42cf-9ead-60697994aa87",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "abf39eb2-fdb3-430a-9b5c-134ddfe94716"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "adbfa1c2-64f5-42b6-be75-dee36e77c968",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "4f3eeac8-90bd-4407-a8d1-0d7b474114b8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1bcd9ef3-1636-4d96-9b08-f78d92c51a90",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "13c32dd7-c14b-41a5-bb47-1ea879e33f1f"
            }
          }
        ]
      },
      {
        "id": "0c53caa4-7157-423b-8a22-8b6c3730a05e",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "c4df138e-1ee2-499f-a280-e6ecc19a3469",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1ad53691-f4d6-4184-9b9d-fda6e1f9f39e",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "252912f5-797e-4da0-928f-2c852e04c9ef",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91d8d91c-c5c3-4012-99f3-cb2663c49bb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f763990c-49b3-4c7b-89ee-39fb403c2d01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f0e8e8d-9a62-44e6-9be9-9abb3eee53aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "784032ba-2422-4e4f-9d5a-ac8d77cdf2ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d742eb0-2c7d-4c0c-9f5f-fc93917f7142",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9ed03c7-c6c6-47e6-abc0-3e24d1ade7fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e584f41-49fa-4240-9044-9bfb589afb77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c3e10d7-4fdb-4d10-ac7a-b168fa3b8116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5eee3c3c-9a26-4275-a4e4-6f8a4b079014"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98846a51-c2ef-42d2-aa06-c69d36ee98a6",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61216fe6-2886-4e48-9cd9-29021bd09ce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8600e9ff-107a-4a48-aaff-09fb11c3596a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7cbec19-440e-410a-bb8d-9513a03e14e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e471b7a8-80be-4ff9-b2d7-4e8f945c46dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71e3592f-c84c-4527-86c2-8a6715e4055a",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68ec07db-2650-4f38-9a28-19e4e2b8e4d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ca98503-ebbc-486d-b866-615408e3731a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "383cd5bc-a151-437a-8ac9-48a49f4c4cf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "59f1ea88-5b60-46c9-8217-38a0c4ac5530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92a2a4d2-291a-4723-b16f-3f77b4b6e234",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e55b300-1cb7-4cd2-8314-5e663907255d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2317487f-614d-40e8-a10e-d3663dfa7cac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19a05005-5671-4840-b864-d58b29b7740c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "76186121-466c-48ae-b2a6-d4774b4d425b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a2f3f07-e949-455c-89c1-8d5da9364f51",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87bb7e73-c15a-4120-9c63-fca5cba9f005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "becf9290-79b0-4d99-a3c8-1c05dbcc27ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27565b0d-a9f2-4715-9d0e-7178a22ea324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "651a7f4c-2dfc-463c-b955-efa3c9ca21ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46677d2e-2f37-4f91-ab21-8bb3b88f3745",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca6c0a0b-c102-46ed-bf78-34ba5471cedf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4460aa0c-df0a-403f-95dc-f3decf93d54f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9011c377-823c-412c-b786-7afd4b761212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7655a87b-9593-45c7-ab83-36dce52df681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f29a3ec-a568-4515-affe-cb6ef270ebc6",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8374b8a8-1133-40c2-8c70-188d06659f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "919a8589-3948-47b7-9d2c-d9a09fc1be0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a31ece5-795c-4730-b44a-6a03ee8ad040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "08d65d75-62af-47e4-9227-249913f0f827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "637929e3-9603-469d-bd27-0df15d22190d",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dcddf00-6eb4-40cc-aa16-d04dbc939623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44d7896e-d65f-46bd-a145-32c816d85b33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ad1598b-ce8e-4833-930c-7b152c6f8c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c9ea34c7-6fe4-497b-9fce-d7600cb583bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d24a3583-23f2-4af8-9052-aa7f9e79d460",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5501e6b6-805c-438b-90ae-dbc5ede0921d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "096b0b8f-d88e-4b88-a981-cc4c58084e7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f99f740a-169d-4c8c-be07-6ef521a695b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "483ac6bf-86da-4f1d-a660-d52963290205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f17d0fec-45e4-41da-b575-a909f692b0dc",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "304f864c-0af4-47b4-91f4-352e53655efd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b58168c-8716-4493-952c-c55b18353525"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75b88f5c-c1c7-4357-885b-d9761bffd884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa591141-fa43-4a2b-823c-9160c069070c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b64fe1a1-7e52-478e-aaa6-5ea5bc2e877f",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5db5800-c2f6-410c-9cfa-47ed846bc522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff9deba4-dbff-4961-a692-f5de6cbc936d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "649d49c7-d745-45ec-af53-46e374f01a1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8e66685b-34ae-4a3b-8171-2214c0c8b67d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d91ee7d8-fb76-484f-9c28-bfcb026ae51b",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9571ec6f-4143-4855-8489-be0b4a2fadad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "612632bf-7528-4447-a16d-a043f1e5e940"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f19889af-0b7f-49b4-b1dd-511e4946db62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e932b072-4ad1-446b-bb97-ac3d5202d5f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47bdeb2e-3c3c-40bf-bc97-653ad3d52082",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef804a58-2828-4694-9a13-e2eb57ca14e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01bfae39-e7dc-4d1a-b570-a0f6b2e602d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80d6d7c5-2af4-49a3-88a2-0f6532cd8ecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "25431e9a-0e44-49d7-81fc-10f390a3a506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2fd7df6-ad13-4b9e-84cb-e8ce6fa7e49b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e50de5d-0578-4ccf-aad8-ad711dd9e11b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13d12217-8434-4254-9ec0-d95dc703f768"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "082c70a0-bcab-4e7d-906b-717f70fbbf27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1987be2-d94f-4f83-bf31-f4a9ed9d9736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4327ea22-ab80-4bc4-bffd-11cedec1afbb",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "052153e1-61c7-4db0-95ea-80540cea855d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e0904f4-6102-4ca8-a6e0-df77153b3a01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60507e0c-9338-4dcc-9ea3-8dcb852b3adb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "419f5d7d-f900-4c98-8924-45f84d0e3baf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7035f5e5-efeb-40eb-8c22-2cb6b994ccf0",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0afdfa1c-fe48-4ce1-90f6-9fda8651fa73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57529dae-27f8-4723-be34-45873f6cbaca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4974b87d-9b61-4eff-93df-9e0966b7ba5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b30cdf4-9d13-4a81-9ff5-78b0970466c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "916a3db3-bdf7-4218-93b5-bb8ffd71e1d7",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fb61099-34ab-4de4-aea4-6438f26dc185",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61ac0143-36b1-4fdc-ae7f-99369509b37a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af08581-0b61-4568-909d-80d021831703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "09962276-f018-4683-be67-d38f5a896462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "280d4bb2-ca37-403b-9619-78fcbf8cf0d6",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6641737-c44e-430a-af4f-735b3cf176dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7adefc44-2f3a-409d-9a95-309b59117a1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25d872f5-69ae-4da2-ace5-d8dd3987fcb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6de24977-7dd1-42d8-bb7d-625c68b59366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79dea6b8-2212-4ef3-8088-51f3b8c7634d",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f34c40c-f884-4280-a18e-b7376a16f6f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a3703c8-0f4c-4807-81ab-d1546e2c21f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c0c9fcf-fa72-4ae6-bf16-f34d31c855e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "524d918a-d0df-4751-8690-9cf795a70449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3122b368-512a-45bd-b8b3-f2ff8d422ed4",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91fb75cd-a3d3-4d30-ba4b-6b61d57290c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeef9b99-632e-46b8-b875-ec5e06c3f34e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "182a5c30-f6bc-4358-9fb7-227f8b9fcd15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0539530f-d463-45ff-89f7-7c0ffc25a7df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6f1d0e2-e2bb-4901-a792-ee473fe6d905",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea38cc91-0741-46e7-9dba-674d64863b2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a509ff49-247a-4fd7-8e93-cf7a8b4b3dee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "444f2963-5ced-4b6e-a1a2-e50219dee8ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e64f3fa-819c-4b9c-82c6-119b8fcc2c5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be115cd0-8986-4a4a-831e-875865a8d5d4",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83a8feb5-bab9-458f-be29-2600c5f29529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ff110fa-895b-47fb-a644-ff4645f02789"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2d398c9-16ec-4904-8278-7403bf68271b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "46c7abe0-2c44-4119-a1ba-7167bf368efa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3689027b-e234-4067-b4ba-8c143201f137",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c94938f8-121a-4135-9f38-f1e53075b444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc75c645-6c27-499a-a307-0ced670d3f47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bde5d10-2c23-480d-82ac-cf16ca3168e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "edb3ab4c-8e17-4f2e-a3a7-1d697a90f9a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92aa602b-dce5-4476-959b-d3ae319d7f37",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d50b158f-9639-4cf3-9afb-f80fa4fefe85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5e1ef4c-fe28-48e8-8015-d817f20933ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13dca460-85b8-4e62-b0bc-717c2dc30f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8eac9582-cf2a-4dd6-8893-3d4709940da3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1787fe4-484c-4d8d-a46e-c0628057f0a8",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1e270f8-098d-4bc6-b25a-e9bc78987080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "278b7754-a589-4cb5-847e-2dfcec4e0323"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36fad98d-b4f5-4170-a46b-06fb17c44390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "47a62c5a-419a-4b9d-9702-01a17d2d7864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f263e1f-c5b8-4030-9119-cdeade010e4a",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b702b602-225a-4ed0-bc53-f0f08b7c052a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dee4c1e1-c27b-4edb-a4c6-72c03d2cd0c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbf63a58-1c73-4963-a04f-525df8c4fb72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "980f3a1d-ee40-4388-b0e4-4b36dbd7df35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f174974e-f01e-4822-b406-2bc2efb59263",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "782119c1-f658-43e2-ba8c-7a025573e646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c8cdd16-c9ff-4a42-b8a9-c0a57d01c6df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1811c9e-398a-4e11-9188-d9c8b0b2bf65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd208369-757e-4cd9-8199-af3f7e8b849e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "421a6a9a-0807-4bdc-8309-4e5c7f6eb391",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce8619aa-0887-4635-94a1-d5849399ceba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dec2e7b3-7f3b-4d99-9a25-5a0915e850f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77f90fc5-f918-4878-b460-d75e339657c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f68bf15b-52c8-4013-8284-a92c0d9ebc1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "437aebad-d65e-4384-a162-bae7fbeec8df",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4716382-453b-45f2-93e7-cfd881f7726e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9526918e-9830-42be-8048-b86b4531dbef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02955175-6246-4052-b672-d302411d67d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bfad73b-2f83-456d-9958-5bce9d20bbfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db1d64df-3ff5-4ec9-b2c4-fcb95996c764",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "310fd314-23e1-4330-bfb2-08f30fed50d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fec96c7-7e08-434c-93f0-80a03ef8c30d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "debc2169-ac39-4510-976e-11ba41977091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1625a00-7fd6-4066-935c-ffdfa5fb4f72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8a5e0e2-3b49-42bb-a660-1e3d2d672577",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9c9e971-4b89-4516-9056-f6c80da977b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75c20d5d-641a-4bd5-9bd5-bf9a6dca69d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fea95a0-b353-4f0f-a613-2969d5a9ec87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5d9dd10-67e7-4f6f-9228-f0615371c66d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d9f9ed0-48a5-416c-b9c5-fa549788b51e",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "743e966b-86cb-4225-a70a-c287ea2205a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65a761f3-5ffc-4ddc-ba22-a5350cbb503a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d720624-a698-4e90-af5d-2b79c3878d90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "02102336-2496-4e50-9fcb-145300b959f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91212e4b-efb5-4a10-9619-b8447dbc981d",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95c6d044-3627-4d7b-875f-10a89e0a8f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe2e1636-036c-465e-b032-7365a0c4649b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1a237b7-ab9d-4c2f-820c-9a969c3bccd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f54b84f1-980f-498e-a649-b4ee08ee484d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2192b000-e9ad-4a44-8d72-2c95df310528",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea8debe0-48db-4b8f-bd5b-62b3ed2bce24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6320f3aa-a8fd-4a84-aa8b-0e80f4dd9839"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73951fb4-2a3c-4564-a5d9-c7a9cc0f37d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "6909367a-b035-4436-9c10-cba763cbb732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e2c8835-273c-4b75-b3d0-092f3a4164ae",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fc880c7-a6cc-47c3-b14e-035ff4804f6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9153b3d5-47ba-4700-922f-b023c05a7399"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eacd9ac-820d-4ff1-aa56-95e125eb99d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8de0cd4b-ede1-400b-9501-33344d447301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6c8a6af-482c-47fd-8f4a-980728bb3fa4",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2058f91-48b6-4a86-a947-cefd5180a0ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fc41f75-77b8-4384-8d84-3e833b8b19f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5434ee37-a8fc-4b73-b0d6-65d1eae00153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "527b2a7b-a62f-46cf-a096-1b5a0505464a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acd72018-160c-4b6e-9375-6621220c69d8",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e4a0ce1-75cf-492c-bb35-8fde62e156b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4c49ca8-4e7a-4e04-8cb3-6835e1259039"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2972327e-e424-42ff-9026-0cafcf0a305c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e9df71a-a4e8-4ff1-acc5-eaccb894acf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e432ddb6-4a60-4a12-a2a3-b54b5409e1db",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db00d555-7048-4a79-b40d-7d657544da10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3439af2c-2a9a-414e-bc2e-1161d11869d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f63ced47-8d35-44f9-9044-9f780ffc3e20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "81a3d49f-d63c-4c13-a38e-f453c1b20bba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c5d5d5c-bd5a-45fb-84a9-4e5a1335e6b2",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c558f373-421b-463a-b086-24d56472449d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b7938c4-a4a0-46ec-b088-a3a15ca20779"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e06baecc-7959-4bd3-8896-2b204e49f84c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f800f031-b2e0-421c-9814-c9f2c7de54a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4bef268-32c1-4b6c-b772-68dd427cfba2",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79e86913-6636-4d1b-8149-349b20820212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ec71ae7-2023-4512-aab9-8257edef4d16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f73fc7bd-7826-4f2a-b30d-080f6b7ac3e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef4ceeda-b077-47fe-ac91-05b9db6a7501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f698a0e3-c915-498d-b8f8-b23aeacc9b64",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f911f2-0dfa-463f-9d5f-163f16fc256c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6645c41-4a73-42a1-b581-01703685c0d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12654e51-1419-41f3-bb84-1d1e542d8bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "b8f3358e-8c55-47ef-8e87-c56a9ed83f65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "525da47d-fa10-47ad-909a-e89805ffa082",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "214f6a99-13d5-4e65-9113-62ea1a2ec66e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62ddcbf3-d455-423f-af2e-13aea7c5730f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87086ee8-df03-4140-b151-324d1492aa39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f76aa8e-20ff-4e8d-9680-5f6b630a8b01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d51ae9e-01b8-497a-b2d7-5dab0dae9f61",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b09a0eca-6d93-4ef6-aefa-07b2f104ebab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b28d578a-d3ca-4c95-aefb-79932a17d473"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ebd1728-146a-4483-ae54-67beba08ecea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f743b64-0550-4348-be65-ce1853f2b8f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "426c23ad-8f4a-486c-8c95-e9ad8922e8c1",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cefde43a-a28c-40b2-8b7b-961fa1e472d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cafee43f-21ea-4a7f-b3d9-5e3cb6e5ea28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fc475fd-8fd1-4f8f-aaf1-ffb3443fcbd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5344ca14-25be-4a37-8804-0e7ed89876bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed5561e5-6c08-45ac-b934-59dfeb1ce51b",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40af1c70-70ae-4af3-a471-5babe47921f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cae1d063-ba89-429c-9b7e-2e1ede84d43d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9091918-32f2-4adf-b465-f30c761ea632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "528b72c7-13dc-4193-9d77-00088f083d38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b55d52b-b506-42d4-9219-2f834cc457b8",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6748063-ebef-4f3e-bcca-ac188955e1ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c55b4725-ef8b-4ee3-b621-d38384f2d3e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56a92131-40cc-47e0-a0d5-31a148662c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec1c79aa-d166-4729-b472-3cf6cc09460a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b24e5570-d6a1-49c6-b71a-ab7546574509",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29e6f454-381c-437d-88c7-0f26a88aee4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "040ba5d7-1cf4-4035-8862-d49135ac9bad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71f05773-3f68-4891-9f34-c6487be5392e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "656e6402-01a7-4491-b759-58b05d8903f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "465d8f05-9259-4480-9426-80ecbf8fa7c0",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08f4bf4a-833d-43dc-9e3f-68dc84a811e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b00445db-3a4a-4c6b-9243-08cff38c1c03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c138223-fbfc-4fe4-b47a-d01b6869812f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b72e8bbc-af9c-4ed2-b4c4-9e9b4778eafe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e0485c5-8de7-46b7-b699-719a15b010ae",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "179ba077-1a9c-417b-bdf0-9791e557d431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "206768c7-e13d-4f9a-8829-139636e7c4dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "121f3199-f93f-43ad-a7a0-c3a30a320ec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "36a6bdac-3cf2-43a5-a8af-4c2201111496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e48e5043-68cd-428b-a4a9-149e8e9e2e09",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fd8e01a-7ab3-4d8c-a0ef-975720c714de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99cbaf04-b1db-427b-8b37-5a5fc34302c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b1fab5c-30b9-4914-b876-3983837d0e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "4034b9a1-9af2-41f2-a0b0-850014ed19e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85cdceca-0eb7-4f06-a3c6-998a0e10ea60",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8600324d-2ab1-4a5c-bcb2-c706c10b12a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78d9dd44-b55e-46c0-89f7-1a6a739d8182"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a70bfb96-b213-4bb0-b442-f1cd1f251d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ef37387-3d55-4d55-8300-30384aadc093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d0f3477-2f90-4282-a522-f5a74d4c5822",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0534a31-21d9-46af-b92c-e5f3ef07c57a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22fed198-3be6-416a-a980-81f13681f443"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10e2b61d-234c-4fd9-9c0c-56212a3b5710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "448a550f-e798-40b6-8b07-8a27e037d396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1a87a54-eaf0-4e5a-80b8-2d43dffaeb70",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba288c64-c5f7-4387-967e-4c21532dbd61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39f80161-2179-4ce0-a1a2-1f219e8513aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c68b42c2-d9cb-434e-8717-1f35dea376fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4ab878b-c83f-4b03-91fb-1c44f4f8d47f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44cfd3ff-fd55-4078-8512-1fe0ac739754",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8bf9aa5-5042-4b74-b4b1-163e66863357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5750d9f1-b169-455f-ab00-936af236ed79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad314484-528b-4d56-835a-c84e0fe6851e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "48414be4-c6ee-4b2e-bdd1-f4ace3b1603f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2e7bf31-f106-44b5-871c-bcc1c8c95df0",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f27889f0-9e1d-4c4e-a2ad-f81f1811b6c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58a4cc44-427c-4f06-8dbf-8678de1133e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8986e6fa-1c32-4db2-84ff-370d5d1cc231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "c64ec776-bf84-4f27-b67b-81f86a458ee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4344881f-7c1e-4f31-afed-ade99593974f",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77b6bb8d-30cf-40e1-bb61-cfdacf8fca75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5ed195d-f13c-4f94-9fb3-ba7f43acc478"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3468486-0034-4694-93f8-cf419b8ab511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c9fd8cda-b12d-4157-a011-501deff284a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea932ccc-23c1-4b63-a8f8-89aa201cfc79",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5388e6a4-13c0-4e9b-b9bc-54942c0e57a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38daac7f-5c25-498b-9b5a-988b82eedad3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fbe15ac-5be4-4961-bdad-6274506ad2f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "93007b3d-0cdb-4f82-a4c6-1c5fca71372d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6345eb7b-0498-4ebe-9c20-6e2e396206e8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a51f8abd-3b00-4ad3-823c-54d26ba5b51d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a548194-5910-4005-bc4c-7710c6a1813f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a27ed32-b8f3-44d7-9276-c63afe70d73b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f621a333-acf8-4adf-8619-38c40b7d8065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de42e5af-6f5c-4071-a20d-083436d3949f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91a9c56a-87f1-4a9a-9604-a526efc84779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fe86bb9-8900-4d78-a7a8-876be6449f41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a053af2-97e8-4c93-954b-3d96af31b1b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "51e77dcb-d843-4c0b-8617-d2e7b91510a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecfcf202-266a-4b02-8e91-5827db2ba77b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a44f7288-23ae-4b7e-b942-9cf5afd6b2d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a659324-a507-4707-ab87-591e9e433c36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10bfe821-d23e-47d9-afd7-31390586df62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec10b3c8-9ebe-4dd9-93bb-1657a8f75562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caf959db-6477-432f-becd-6a3d0bbd92e6",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d53d1150-46ba-4146-ade5-ab8ad9d3c26c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c68e4bb1-1ebc-4f8f-8494-b69fc4dc706a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e88de75-7ab0-47f2-b60e-a296a1efb15a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "610eae28-059b-43d0-bc9c-0bc3870938b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf48407c-2c69-4680-aa21-a679fc6adff0",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce0b64a2-0d44-4d4d-8d9b-0f36e12ea60d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71b29186-145e-43da-a0b7-d0b43b8f443c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75790c5b-41d1-4d9a-84d6-9bf938e46b76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1c911c1-126d-449d-8966-8e7b7813e102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caf066c2-9a6f-472a-9a4b-4a3660b2edbd",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adc8b2ef-c703-47eb-bd74-31772bad1514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40cc1598-78aa-455e-aeef-00afc84e76d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28ccee7d-9af6-4a71-a104-d286631b2d2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8faff4b7-d1f0-46df-bbda-62d33206a8af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb527d6f-8c88-4426-8e6b-b765e7d37b24",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9479db97-a155-46fd-8145-9bc6401bfa25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e86a93b-0c8d-459d-af90-edc6e0d179c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f748302-3cc7-429a-b260-70945d126364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0159dd9-de09-43ff-9b71-ce0c892a3dbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83c3e0e2-1c69-4468-a397-df699f6c2ac9",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba523e5a-cce2-4817-b087-36560bb12286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c8adfb6-486f-4411-b0e2-d7e5ff686771"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "520d9c5a-dcbf-436b-8c4c-6fe85cd510b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0712bd1-a7e5-45b6-a6c8-407d6e747bd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebee46e2-8484-43c1-9b15-dd7e1f559ccf",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5870229f-81b6-4a36-a4a0-9c9cbca7384f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "185def67-b3cb-4ecf-9509-d0b8f79fc3e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50b72064-69c0-4912-aece-66ed0c43c2d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "95801c5e-09a6-4e0f-acc6-700c8b431a59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c010d73-b3dc-44dc-97b5-6066fc5eb656",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc1ced4-cb85-4307-afa5-746a02b97eac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e41b397f-4427-4489-ade9-5aca18144857"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ee7348a-e0bb-4c3f-828e-9576d5b3fa8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd3efd9e-696a-44d7-ac11-9382e051fc0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b16274f-ccca-4c25-a70b-4cfcc729ff8a",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa3a42cf-5bb5-4c6a-87ac-fe554f29adb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcf95c9e-a562-4c31-a43c-e713db764839"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68498d84-4432-471d-8861-f66dab8c3f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "61c30eae-a7f0-46a0-9d76-275b0848bb06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d85aa2e4-af42-4699-a420-46b093622d66",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2172b754-2ec3-4e72-9eb4-14009fab6345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc1979fc-8eea-4c11-a6c5-1b7bfd86d7f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83bdd716-6372-4a20-b0c7-c76582904c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbf5045f-905c-4e07-a31e-8c3e9f454ea2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ac1d989-b40d-42a8-acbe-4947f81ed391",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bea41703-a08b-4e63-a8f3-c295fd5a183f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "146a97be-5f6b-40f8-8d4e-9cd99b20cb6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f02de3b-5a6d-44c4-b5ca-171ed9c0abb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6331ab9c-7d37-4bb1-bd65-48108f6f798d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c002969-696a-4fd7-a853-d721fdee180c",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17fc38c3-61c5-4647-bb65-50044b2328dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "636fedf0-2fb3-46f6-90d7-09d815a28130"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67dc2ed3-7b8d-4369-b926-b5e94e6e1b99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8302752-da5d-42b1-b96b-b3f21b0bdb3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "726bd348-af51-4f15-8c34-73cd0bdff52f",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97de781b-ab0d-4f04-9c5e-d814b986b5a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a78b5720-0332-4d49-963a-1f2f695db11b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a465e0d-0b95-40ef-94b8-f683b41a93b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9daf0136-8be8-4eda-93f9-477d28524e30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "510028ba-7f2e-4ab2-8c70-3a8d385f3c82",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc292fa0-1a1b-4e55-af0d-e09ca426450e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da108d7b-a0d0-4929-afd5-5fa89b9cf35a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65504104-a949-42f0-9ffd-a9571f929102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bfb7c23a-7e55-41c5-ab5b-deb75485ee83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "671ea801-da4f-4919-9a0d-58c7fedad8fd",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a18486eb-d920-46dc-a972-fb30bc41d2cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bd0e69a-8d1b-4976-a881-3b0a6db448da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52ef2a3e-7432-4374-9ea9-4e235fdc182b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "73929ea9-c820-419f-8d52-968633715f1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85251b0d-5a60-49fa-870f-d61b645345e3",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4d30597-ef78-4f15-845c-82eba7f118bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5225c6ff-252f-4d6f-a82f-fa075022988d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8f4f0d5-d04b-49f4-aaa1-f8a093f0c245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "80c9d9d5-6271-4371-9831-efd8dffd88f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09a03d07-d53c-4455-a230-dcdcbcca6009",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea042bf4-6f57-4213-974a-e19f19d3f687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfa757cf-8ab4-4119-b642-b3e80a95213d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2921167-51e2-4b0d-b864-8582d5b30616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b378c847-73ff-4d6d-8f45-d66ad3273b8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3969abb8-685f-4e9c-b3b9-033d630779c6",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fc3c841-c374-4b1e-ac6a-a8b2f4ab0930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b24630eb-fc27-46fe-8745-0ca7c5d18d79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49033baa-e080-42f3-a15a-3a2c0e4b0e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3f9102b-1962-4736-b86a-75063448dd99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad7b79de-8d84-4661-91b3-1d89729306ad",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b42e1a17-4a3e-4064-a4e9-041966212fc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "552cc1ad-3a7c-4146-8adf-a256bc271001"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19be9c10-b765-4af9-8178-aa8cc743e16b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a9098bf9-79d9-420b-a990-7bcb65e454c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32e5161d-5712-4929-8458-f997119e14e2",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1257b258-d23b-457a-99d0-0c7da81431b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e95bef0-8a35-4acb-b096-d0b82c84d24f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "113a6396-b61c-4048-8328-3018e8c7d66b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "df0903f7-0246-4925-b5d1-d0f2dcf4684d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28ea1bdf-487c-4592-bd41-d797de3b293a",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b727df9d-9a6c-4111-a7b5-5740d398a196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6622c642-5597-4367-a01a-279e80af9b57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b699a039-80ed-4424-9027-93026d2d38d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "32e586e6-4d36-4aa4-b3c3-464e0c60aac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a389991d-57e9-437a-8130-13f00477b500",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c01cc4f1-f544-4e06-ad13-dc3905a4418e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18830dbd-06a5-4f1d-9da9-9f74b43bda39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb9fbd6e-c198-4507-a2f0-acf43b225500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8c58f7e-2f19-4e88-83b9-ee401cb46514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "256fbc18-9ecd-400e-b24c-3e6c98e4c17f",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "361d727f-0412-48b1-b988-9cc5da690d0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a4aa0e7-203a-4e1d-a017-5ea9608023a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02871f83-e2de-4bc0-8bd0-8b917e8d9d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "533947c6-440d-457f-900e-d1a3e7d15361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e25c98d2-6567-425c-be2e-5827fe0b70ff",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41b79bec-1bf8-433f-bbd4-baae00b1cba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0d0a284-0c4b-43ee-bd79-63d351fe3b2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d53db72-34f2-46b7-b459-f9b6b6f7d227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d575ba5-634a-455e-8e05-0180177baed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "898842f8-3729-4eaf-b457-8599bd19aa48",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ae17c0f-cb6f-407a-8956-3a24a6ad0d70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86b50269-b52f-4a42-bc34-0b9733c76e3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26be8be3-0ee5-4ab0-ae09-b1d7870aac2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9d75bc8a-2414-476a-890c-5947b034d90f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19f9a9ef-805b-49e7-bf91-5bf3f0c26ae6",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fe4bc6f-6db9-452a-8f28-b504473355c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21804e7e-3cc3-4786-bec3-05641c0b7789"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5236dbf3-b462-46d7-9e19-2ce63cf0bb5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9385daf3-4f7d-4f43-a19f-78a5d576b8e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0f300f9-2d44-4e82-bf61-51609bb4e5c4",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "191a8ceb-1b48-4e33-8a23-07606501a1ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b97d0db5-4a2c-4139-a74b-5c470149f63d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beb47df1-a227-44c1-b33c-fa3c8be87d62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c384af03-d307-45df-b632-2ca089fb4716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b9c21a3-04f7-401f-906e-fd3df922e2b8",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82cbea2f-a499-4378-a8c2-787d47a5b9d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4662964-f925-4894-8a2d-9a4d0e0ad902"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5976edf2-e2c5-4596-9763-2716cc3e1b39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "19714590-b2f1-45b9-a7f1-146a5eae815c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1437054a-6137-4d9d-aa7f-5aa13646bb70",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e04a052-6a3e-46b1-a72b-4ea2d6a4dbb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d36a7821-26a9-478f-9876-8ed7f61747dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8befb836-c895-4bd0-a76f-c2a07ac56e5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e9e95b61-679a-4a41-ba92-30ad08b3dcb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21e7e8a0-ea61-4f4a-8cc6-8cd24ca9f66f",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c43f0433-4980-49e0-b5d8-9d8951c03706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef85e3ca-c417-4bc8-9724-a2e3fecd50e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d787cb6c-ab7e-4a34-a9eb-b58235e5bbda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4beda5d1-6978-4af1-8b45-b13c847aa3cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a00dc00-2efa-43ac-8781-3b31f908eed5",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c0d9748-01e1-4f23-a0e9-3dfa8afb004b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d374b088-1e3e-4ffc-a5bd-c7499f592e30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adbbb87f-3b66-4795-9fc6-5a5f21aa7392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8cf31a17-02fa-4e8e-aadb-a925ac711f8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0ad129f-d9dd-4d55-8890-7e8b509d8ff6",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6136c2c-31ce-4679-80b0-51863cacb229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f9afee90-23d1-4f4a-9b52-861e54877e0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2bff67e-8a08-42cd-85ad-2f9bf7110b70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "153ae2ee-4b5b-4011-8c0f-15a2ab0bd11d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9764743a-0a96-4f89-a1d6-2325e8051775",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f1b5cbb8-7246-4d34-b594-1bd16fbcd87d",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b62337ae-2429-4957-8989-7026aa4b3f7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4ba07fed-07f7-4108-946b-56f0cdd3681f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b762ff7-b263-4b5b-a246-773ae32cd454",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "4dae85a0-10ff-4ec7-869a-7b0cd2c73ec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cbaf791-5135-489c-9c35-c45f60c54ac0",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6827db8c-fb8a-4244-83f1-023a3f21201b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e05b7166-2a38-4fd8-a395-77a724590869"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baab2f84-e7aa-4bed-ac45-a2d9e763b881",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "bc5ff7d2-b6ed-499b-a4c4-e30b4ace4673"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "83a00d23-a12e-4240-8e4c-115f5a18479c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "48516fdb-74a2-42c5-a578-b6a2f8c55bdb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "00879723-842a-4ce9-b739-394bac483dd8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8f3d2b5c-2086-4ebf-9d14-70483885904a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2c5ee821-16a3-4116-866e-7c7070614cd6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "116966d1-38d4-4e2e-a798-b8193c5f97c0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "768c5a14-c97d-4da1-8738-27e07b277522",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b30c42a7-cfc8-4b79-8cd7-8acae55c9dbc"
                }
              }
            ]
          },
          {
            "id": "a5a61b80-1df7-4991-ba25-aac683e4d8ad",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1e16876b-eadc-4912-ab17-53b1f8ca298a",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5887adb3-e9bd-427f-bcfc-6e70ae25a53e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bbe056ee-933f-44e1-b937-dd4b44043941"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ea6356d-b205-425e-9bc5-51c55a9338d4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "37969631-4f2d-436b-9fcd-f004030ef57f"
                    }
                  }
                ]
              },
              {
                "id": "774b4a7f-be24-4c37-9c35-4687cb654c89",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1a5d25e0-b548-4926-9a3e-ba608e04e9f6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "de7ea92b-5512-49d1-a2be-fe23740c8766"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7b48ca7b-c1ed-4cae-aa79-3b148c3297c8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3bd4b112-bd71-4a7f-a9d2-e68f6674353b"
                    }
                  }
                ]
              },
              {
                "id": "b1b1092b-518f-4039-91ae-30bde513d357",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ca8c0792-bd7a-445a-9bb3-92342ee13dd0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dea0de85-0607-46ff-ba2c-2df7127ac563"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "63b255ae-e607-452f-85ff-798aedb7b85d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0ab7d3d6-7a37-4535-bbf0-e7021eaf42ea"
                    }
                  }
                ]
              },
              {
                "id": "f9f1db2d-3f9c-42ac-b419-efdb9f27e9a2",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f590ae8a-a521-4b13-8ea2-2e1a511925d1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7c00f8ce-c365-4b42-88b7-2607c3dcf34d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9f004228-5919-4916-b3cd-f673c085a8e2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "fdf5307f-2b34-46b2-ba1d-9e8d85862836"
                    }
                  }
                ]
              },
              {
                "id": "d14b9fb1-fd72-4806-a625-ad01a228257a",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4267022e-621e-479a-a17f-58663ac3c6c4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "19898ade-ad48-4d01-b09a-51b78d380b99"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2c6c04fe-3c29-4dc2-b3ca-1cd9d82bec19",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "d917f914-c031-4eb9-9ad8-609c63f7052f"
                    }
                  }
                ]
              },
              {
                "id": "30e0fa44-0c19-4c53-b3fe-8936b65af443",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ed91f87-a8eb-4db9-9969-32b2b50c337f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a118ceb9-6a8b-4e80-9299-6045f38a7890"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1d9300bd-5d74-4886-89be-2e6fbc19c1ab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "97c06991-dde9-4fbf-8eea-d276db54f71f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e7139eeb-a342-42aa-8a30-3f9dc2988a1a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f8a89259-ee29-435c-b4dd-7673fdd32d8a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b64134f6-c1bf-40d0-8544-886aba210ab5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5a502e19-d909-445a-8c56-213fbe9e9385"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "36d90854-d973-485d-a74c-823cfdfa51e6",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "b05f0e28-c0d2-437b-bd67-2909929c32d2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5cf375de-f629-4180-a368-66c5a76b4819",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d097e037-e657-42d4-be6a-2414d619cba4"
            }
          }
        ]
      },
      {
        "id": "90c049dc-2b4d-4459-8a2c-ec7092817c3b",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "8c97fd88-422f-410c-97e7-5b41f90fb1e2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2f365f24-108b-44c4-9b13-d2b2f9395deb",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f07592f2-ccb6-4873-b4ee-4c16052df943",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c700dcd7-f58c-469a-9691-804424c6dfed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9ad11c0-3c0e-4b43-ac56-609814c4d8ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6c88bf6-655d-4b22-a3fc-86f1ffaf969f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "081645eb-2eb8-4e5f-a405-6d515006df36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10f035b4-3f61-4d2f-bd86-5b00fce7f8c9",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90e2e02c-0985-45dc-ac1c-07380149e628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a5e1ecd-ea4d-414a-9297-e14aea842c65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "039d5558-c740-4317-a571-98a8152c34bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee03fa16-2af3-47d4-b853-10b687739403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58467a6f-7b73-4f7e-910c-8391697b7152",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14608bce-651a-4775-bec2-cb4093e609f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a917027-1c9f-4f17-b1b5-405e2d57f6df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93e1e4ca-5125-4752-8a4a-091a2ec41fc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c733add1-a0e1-49d8-9451-3b76297dd475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c8e39a3-6f6c-4b97-bde2-3f9dca21f675",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c933f7fc-9090-42a7-8be3-ca1f794ea862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7585916a-586d-442b-bc12-765c21e9124f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56ad0159-2cff-44c3-a0d3-8a815569961c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "75f523f5-0bda-4fd2-9fd6-bcc8d87a2cac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "881a46a9-b969-4c78-aa9c-fe716052c0a3",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5501b8b1-a83c-406f-ac31-ebfe39604436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cea8616-4cb4-4f92-ae5c-a7d3e2d65eb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a78e79b-54b1-4f74-9a70-887f582289d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0d47ceb-6eb1-46df-9fd6-b06e286048b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70817657-f90d-4fb8-9f47-243ff6a1b7d4",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee018e3f-3817-4d17-8972-6ee2e4cd62c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5684a803-7a3b-4249-a071-49d7bf90c229"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d71a5e68-b0a9-4e73-b34e-d72f682f0b8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c15b378-e8ba-477b-a1d7-60fe2cff0d43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "add0b224-ebe7-40ca-96f7-f81a7b25ab83",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee631ec1-4f9d-4c82-8b19-e4453d759f33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d566ddf-1aff-4f85-aa21-a10b70dd8882"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d30d1246-e0ad-46ec-9f12-3301952666af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c14452ec-6281-4850-a34f-11c6ef9495b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39c5ebc0-e445-4a09-b43c-62806d37c028",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cd19d8a-0f06-4f3b-b5e2-d8ae174ee9dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c970f10-82ac-4eec-94d8-0f9c34761736"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7332a4ec-9e2b-49df-b89c-2954ed35c9fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "44449101-8125-428e-98b0-bc52b1dc944e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b3b8b30-de11-47f7-8605-0b9a9f00cb0a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f23e6c3e-ab1f-4430-a68f-c14a7ef6d044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aedf1f82-48dc-4360-b6c1-ef38cfa07262"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fed8d1ab-6009-4d57-b14c-23f24ce80aea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "601d585e-aca8-4284-bcf8-85f339104b25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e48354f-4416-4e56-ae8f-33696d65ff78",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46f4a6d1-8b92-4038-a89b-37151e52377c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44e93a1c-05cf-45cd-8e57-1424a76dc27f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f80f0b1e-8c51-4c69-a3b6-0a2fac372200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5def8f19-1d9c-43c6-9dfa-2025a6f0551e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8af90bf-94eb-4949-a21b-b41173db88fb",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bd652aa-e977-4d6e-ad4a-133cbbb0a055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0186aaa-7b71-4fe8-b6bb-12f72f1a079a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3397dd23-c5a6-4fcd-87fd-72153c23d9e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "74177121-9beb-49ed-a3a2-bb3bf6206f13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f104e13-21ff-4b0c-8e56-d9ca68652cf8",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f10a581-9c83-4dbf-ac99-a547ec574fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55a59217-e554-4755-a857-13b614f82ce9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "618f6613-cc8d-401b-a931-493e5a7142bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3388707e-eea7-43ec-b546-cee271155f3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dd14203-82d2-4b61-81e0-71437cca01b4",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "320e439a-b66b-4142-a441-c71b0fc62f6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df6f2c0b-d06b-41f4-9097-4c221f8a93b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3aa5bee-1529-4e20-85d7-82bdb6fdf122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ca97827-4571-4b81-94be-dd1b8acaf549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e95d5f87-4720-4281-8c48-d0c09836c928",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f3fa167-573e-4ac4-811c-16b6c5e0af86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a73c7a5e-a7ec-4f36-b248-5f632aaa4176"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f145b76f-28d9-40a9-828b-56dc347292c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bfcce5b-a494-4122-bc6d-07481da05d8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3758eb18-6755-4046-b1fc-4cd2968dd478",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "622e3971-982f-4040-a9d9-5efa2330eba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86f402c6-b303-487f-8d6e-0a0f3dc5632b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f24c3fe1-f0c6-454c-b1a0-a4bd902df235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa3e0b79-84e6-4a17-8d91-70994c6d1562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73627ba9-33a1-4389-bb39-d77f24b68b23",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a5ca0f4-3547-4308-b751-cab9568b8da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4112ff63-7420-40a6-9d5a-949e12664c94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80181537-8dce-4ee6-92c8-65a30b9881fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "acd5e466-4894-4f03-bfb3-345eadfabafd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62c2e8db-4849-4d39-850a-b429757b1e07",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1592ba8-4eea-4591-9402-256ea032ffd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2228f594-324b-4959-b0ec-2722098c1070"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8080c582-a31b-41d3-b585-90914649c4c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "89e28b24-d183-4e17-9060-a5efbb213a5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a45da86e-c55c-408b-a876-1c5b8dd8f6a4",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c420aeca-2e33-4e8c-a8d1-0277588f4c00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6ffd689-7fd2-4deb-9035-dc81e7cb4c72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da53118c-6d69-463a-ba6f-af2076b80646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "04bd13a9-da67-4c22-b357-5ef1cc455869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff29363e-4653-4cdb-ac1e-2d7fb3e5647c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73205768-775a-460a-9cd1-9cad5ff4570e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec62f70d-8d45-4a2c-b2b1-0c054bfc78c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56924133-16fc-4a4c-8487-e947ef548b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36671240-8271-4b0f-8702-2e0f66a2175c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91ee0dbe-0aee-4943-8294-90a2d14f4d00",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f19af43-00e6-448c-8b02-4f76483ab2cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a6df391-9dc0-4358-bf2e-5c31d01b45f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ea153e0-08c1-47f0-a94b-128f5b941356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f35e9f40-0dac-43f2-a935-3e091ea5da20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "756f50e8-cf6c-4eac-8de1-40951136e44d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e086a856-8bcb-4544-92b6-6fb91aaaaa94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e76a0d1-9922-4a38-bf54-92872a46f12a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1db96d13-9f8b-4e90-94d3-23cc5fd6d7ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a80ca1e-eb58-4982-b0cf-3eb11df3150f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ad9d366-0eae-4994-b790-1adcb65c9070",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d8a8b35-e2a7-4d03-99ac-5f0f7e9b465d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ceaef39e-df2b-48b4-ab91-054079b90f19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba8a8bb0-c326-46f7-ab8d-d4c237b5fdd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "473bb76e-bac4-470e-8814-444362aa1dc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93abc0eb-cbc4-4b4c-b7d5-b4f845078a57",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee76b543-e415-4397-b56b-6c8187fa8afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5e2034a-3417-43b2-b22a-6756982eac2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75642e32-d96a-4be2-832f-596c432529d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d702867-39a2-4689-a058-bbd49a959cb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d770ee-5e9b-444a-9301-1fda765d1fb6",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39373755-7225-4d6f-abd5-8bdc17a23706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4194752-247f-4ac7-8a67-9e7c82f9d355"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4645294f-22d0-447a-a9b9-5d2e12e5c741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eac972c5-4f3c-48c9-8815-07b7f27054b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a58991-4ec5-4070-a2ca-0e24a57a9f6b",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "854423fb-52e4-44e7-9f47-1193fa0de297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c7b95da-ac2a-4db7-ba0c-516abdc8c123"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88fc5c6b-57ae-4f96-953b-526aee61d3cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d2d5248-cda0-4f97-a062-3314628e5349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68078e1e-86bd-4542-942d-bf1c8da784fc",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab8524f5-8a1b-417d-a801-643d915d14f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cda53b5c-7028-4b04-9fdd-491307336431"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3a6e26a-7625-4054-97fa-53b30d719e79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3361ac26-16e8-4b1e-b670-9f55dd47f3b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "010e9bee-f3cb-4377-a101-71aee4078479",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c146d50-cad7-42a3-8918-30d0ae949696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5146d31d-92d3-47a0-8667-6911adb8bebf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42dce383-c29b-4348-9b00-3676fc6520a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4645245a-0f7a-44ec-8464-002ab9700e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86e61d10-d6f9-4f01-8c0a-ce3406ec2357",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b7e31f6-7767-49bc-a77d-0e6d85e6f1c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86100b0e-8ded-4842-b4ca-6c4b3f8bc338"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51aa5912-0b51-4562-9b94-8f968f238174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d62e8937-d39f-444c-b25a-1bf2ca47eede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e110afca-fddf-4d83-8a66-a159bf0bfdb2",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5329834b-e0c6-4244-96ae-17f5d6d5bfc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f5c4451-49d7-4a17-8ff0-fc40f031cd3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3573b991-edce-4dfc-b842-88cfd9de6afb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6b2ea40-2e29-46c2-98da-435ae5c4ea58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b60ae47-67fe-4e4d-9668-6db65a2a0c1f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0593841-fc0e-4569-b0c3-12567b1adba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17141692-6847-42d6-8dd7-12856c34c677"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b84245e-6206-4984-aa02-98e46ce248cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "234afde0-aeda-418b-b5b7-35079453dc32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15fb2979-e8ef-44a5-8101-629d7261b52c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e22d8ac-ac86-473f-ba7f-76beef4da862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c3f54ef-5133-4fa6-abb3-7e765f01ab65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d588e1e1-9568-4174-974d-d671a455ffd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68395437-929c-483b-b329-fc09eeebd5df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80b61cfb-fe97-46fc-977e-df511dda4783",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7424872-b1e2-42f2-8e7c-0d2617f8d8bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0686e7b-9af7-4ef3-80fd-e3575bc844c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4f8f451-472f-4e5c-8099-de3ca78634b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2bcea566-8ca5-441f-8738-83581dc6faf8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0e60f055-b251-4404-8f19-b3ee54e528ec",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "10cec30b-7922-464a-89c4-1d8c574a17d3",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd123e38-3279-415d-a079-e9c1c04bd8c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4648628-afb3-422f-ada1-e0b26982e030"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fe8c97a-baae-428a-83d3-2ced77c57518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "66526a22-fe28-4b37-9b0d-eefdf7467c64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd6cc67e-6495-4ad7-b56f-641177fc4e1b",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "374b1efd-c1ce-4b72-ad3c-d67ad491c83b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "22badf97-d1b1-4f9c-9663-3885a524e483"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25f0f797-393d-44c7-a532-83ffd0c9b177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bd2cc755-e424-4e01-a4f5-74c9ab62293a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2b766364-17a5-4986-8ae9-64a939e172eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f323f4ad-84d1-47b3-b0cc-8bb3d6d7c5fe"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1a2d5963-710b-4c25-8fde-822a25ecba79",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5627322a-a6d3-4e51-bf5c-2417a6ebe155"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dfa4d3d3-c714-4209-b321-5495a28ebc09",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "49547c4a-f50e-493d-9ad0-80d0f7447af8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e4ee6486-0f59-404b-be06-0f14f2893783",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8fdcb09a-8978-4007-96bd-c103e95dcb52"
            }
          }
        ]
      },
      {
        "id": "6ae5a66b-9048-447f-941b-0eeea4493afd",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "6738d7f4-37fc-4f32-a36e-371ae2ec3fc1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9ca4a7ed-7e2b-4516-adaf-77dc21648885",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c1c27686-4366-4df9-ab8f-4593a9658055",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4015ac83-8c77-4187-8555-727050c0bce5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81cd7c1b-10f9-43ec-98dd-bc38105b4925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b895cf2-571d-46c2-880c-df4a7f4524e9",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d462324-425d-402a-a21c-d21396ddf2bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16747548-7cc1-47a4-8abd-da6d9980bfdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4489079-0764-4959-8c39-ebb7b614e725",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95957c45-8d27-4d59-8858-3cecc002a94e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7f7841e-6a95-4a89-8ba6-9ac47c0db942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0752388a-a9be-4ad5-8e53-b782492a0cfe",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68e3f995-e9b8-4a5f-98bf-67385ed0892c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "195feb4a-0a85-4db9-bb99-dc31038d9503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15770f7b-b35f-46bd-9e5d-9ffffac74fac",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1289112f-f419-457b-821f-9fe6eadf53f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d09fdf4-7483-43d4-be20-28b020fae126"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08324885-6ecf-4f96-81bd-44f13174c796",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06fd794f-07a4-427e-b80a-b19b38e91257",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d78cebf-5bd1-4ff0-8c00-4a8baabe4547"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24227fe3-4561-4324-8fb8-89de314b445c",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdf3e64b-e2db-455d-877d-4ce148a25827",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "317db672-2739-4533-9257-2cb6304252a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b198c7d2-5a76-4b7d-9ba5-1f4d58d40d6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2d24e63-843c-4ed8-b2d3-fb73bff42ab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d89a1799-1ec8-4f47-960e-98a6b65ee3ba",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24599fca-99a7-46dd-9b74-eac6741d5bc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1d844ec-0f52-41df-9319-2ed8edd473e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13fedcd0-22ad-424a-ac7e-b1369355238f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "013a0b9b-c72e-426b-85c1-126770f65db1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e365e80-1353-4dbc-9d0e-2c8047daf325",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16cedadc-0b96-4632-ab61-f813afe44406",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3b9b8ff-daf0-4670-b57b-d42557f15e63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fde70a6-5746-4749-a5a3-b7d79f732b93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef5a1908-d810-4b29-bc74-9ecd050226e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2009f37f-f6ee-41ba-beae-c4b26913d5bd",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2da7e825-11ba-422a-879c-9224e0c4dd97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe5cde76-2ba0-43b1-9bee-00cc72f96b64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d105cf6-df3a-4f2e-83e6-7ccbf859812a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7c706f6-976b-4fb7-9787-90a7dc56fe23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bff77cef-2b0d-4e57-b4fb-412e2a395e4a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e28f845-972b-43a1-a896-3c93125e6526",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c812eee-591d-4774-8b1a-2700a901ddbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22096f21-7b9c-4b49-8447-39813188ea38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f762a45b-4064-4304-a4bb-2ba4984b719c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a3e0f9b-c425-47b2-8df7-a02c790ea681",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfe1039a-0fbc-4b35-8d5c-5db517549288",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "add899b4-cca0-488b-8eeb-ccd642a6dea4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ac950f0-f982-42a7-b19b-a16ca7f15378",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0f2a759-022c-43b6-a69c-757a5ef6c5d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61ec08b4-8402-4473-a928-5438c37fca47",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c27db0b-815b-4fd3-be2c-7c999b15e29e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50e90d33-0451-43ba-945d-ee375698557a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25dad959-b8d8-41d4-a901-c17e75bb78a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5c53ba2-881c-427d-b41f-54457cfb0223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c6825a7-9bcc-4606-a70b-c5224698c1ae",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad29a148-006e-4caf-b8cc-b1b53fbc047b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de471e5d-75e6-435b-8738-6aee69b19c2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e50bc393-01ae-4384-ab26-a3a7481dd6aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a294b27-1e78-4112-80e4-e620f226c3af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "906abefd-0cb2-4526-8300-8dc06b1541f0",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c09082d8-7252-4106-9708-67e0ded39e83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91b85174-cc4e-4167-8eac-94ea73061563"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ace5b1e-c75f-4087-baac-25d07ef9e551",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d1b3c58-973c-489d-ad8f-012af9c58e57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5779cf70-860a-4383-a1eb-29122ff7cbfe",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "213b80ab-6ed0-4168-a60e-7fcf03df85d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef27f592-9745-400c-bf64-d0ea2623585d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe80f2a3-ae26-4868-adde-e73d665ce0d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00a4c7da-16bf-4b48-8abc-9caf6aaad21a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f37102b-a969-469d-8b05-2b968de9103d",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bf626bf-e850-4d22-b592-75fcea107293",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7394d0ec-47ae-49a1-9d7d-edccd3bab688"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b92aacf-2de7-4090-80f5-3f2fc2036391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b7a7eb7-9414-4bf7-b7d2-7b9b0cdbf69d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41c5f6f6-1fb1-4949-86a5-4e50d8f9eead",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "057fe31c-5458-484d-b3af-a5dd0e6d7ef4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c0b545f-7c6c-4250-ac33-176d2b57aa27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "055c45bb-e4f7-4cfd-a764-ac8076dc953a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cb5ee73-271b-4515-8538-9afe0684f2a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eb84c72-e55f-40c0-991b-c756a98426cc",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b43794c8-fdae-4f2f-b6ee-d6d273f6c516",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dbd408e-a111-4391-ad2a-cca2b06730ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c44c602-bef5-40ce-bdef-d0bbff209337",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "348eebe4-ec8e-40d0-92aa-88862324bd9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a54b50c-bd76-4b4e-9252-9c9a8d4c9eef",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e29fdf7-ee44-494c-936c-e4f950889dbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53ce4dfd-3672-4d3f-b953-719985cff79d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf8f6f5f-b263-4f07-832b-f15cbf4f9fe4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e1833f8-9430-4821-be1b-48cfb1ae6a27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c2b136-52c7-4acf-93b8-3995722038dc",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcced856-c902-43a4-bac3-74c9a8a05c50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80a260e4-3f3e-4196-823c-b87e18ac7258"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edb1620d-ff0c-4bd5-bf35-b15af72a09f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d14b3d4-0d1d-4958-ac89-38d475ad2f66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df15441c-7f55-4556-a2b6-69bad3d1afb6",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a42d6b3-4a8d-4068-8724-4ce7a7d662ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cc1c7f0-34f8-456d-8432-d86c73e6dedd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f2bc39a-ed4e-4df7-84c3-1316b4b39caf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3ff0f9d-4a0e-4bec-b28f-a00b0c1323e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08d18842-bdd2-40bf-a920-b7c2513d569a",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfb19b02-36c3-46bf-bc8d-bdcf85ec59c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02cef8ba-ca36-4c6f-831d-9cd1a3aa7cad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3817be0b-df42-430e-9f15-06782bfd800f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12d1e63b-6190-4d62-b4c6-c84a1452cdc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaa8aabb-3a31-45eb-9195-d3e2c1c55d35",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "183c71c9-1cd8-4964-a3cb-3ed9746d0d12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4533b011-a155-45a8-a7f8-e96a468a359d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e509ece0-1ff8-43cf-8d04-2de83ca08bd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60af439d-0562-4fa6-9b52-0d4b21da134f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d86932e2-3f69-400a-90b2-64c4010c031a",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da5e27a7-4274-4471-81c9-9cf8ba8d3ef7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63779a8f-c519-4b5d-8cf0-9ab0c00f5aff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8cc22c8-69e9-48e9-b6f6-91bbdfd8a807",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "706d1e8e-4584-4253-97b1-09df0bc5f48f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c91455b1-ffb0-484c-9931-92954f184e0d",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40fc7ba5-8981-47f8-8cc6-a6974d4053ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb1702c5-3484-4072-bd11-b7eb88b9e494"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3725a47-b12a-4677-b125-4e1a8c79bb8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acc8e87a-04db-4684-ab4f-ddf2e54e9a6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b54df97-945e-4e8f-adb6-3c07580699f0",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa7eef18-a182-46b6-8699-869f6a0f5bba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a885c4a-6255-4009-9099-b349488b66d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec81548e-320a-4ca2-b89b-e62d27718ca7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e36c5bc9-e965-4254-903a-f1fa94c41de0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5d90941-e550-4632-97a1-780829627e17",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a55822a-6331-4226-a5c2-ae6b50fbdba2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cf72c24-217a-4925-920a-b7f2c35340dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b30e109e-88c7-4973-bf80-2df2832405d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e80b7e5-2731-4b37-bdb7-76d310e7744c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6952de7-dd2b-4b56-88e5-37dcc5c224f4",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "349f5e5a-8cb2-478e-8f25-5e3972c483ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7aa53c36-64a0-4198-a1f4-53ce4d3bfdfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a696c15b-0f12-4296-ac09-29edb5540d3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87791958-55d9-404f-a747-2d3c54b9bbcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f23c83f3-6e9a-4af5-9414-25e249b63ac9",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b659065c-acbc-429d-93ff-a847e5e5004b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a24793d4-8781-4b8d-821c-429eeb15e0e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ae1b061-6eb8-4b84-9f88-2ad830c74e0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec5e1bc9-dc08-4eab-9af6-05296cd781f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72137dfe-d6f6-4bcf-a604-889f85642829",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a711d2ef-5c30-4399-b247-3908e88a5820",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e371ee4-e982-494d-bc2f-a948b8fd9d93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45f831c2-0d30-49da-a47d-4c164ea10b31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3244025-cf3b-4135-8d2b-456437ca88ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79c2e4ef-3c95-4e10-84be-44ee04444845",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f58c1fb-62ef-4d47-8645-d5ad3f1a97ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af64564e-30e3-42a9-9b10-0bdee6420d77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0539fae5-4e11-4483-914f-162a42ba612b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e97ad352-2f7d-4ee0-9fe9-94ddd9134ca9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "688f7be7-b4e6-4ce3-844a-b8147111c1a2",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b44692f-69b0-4799-ab90-74d5f81efd20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9927fae5-b45a-48b7-82fd-1f53046e6b33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae516a7c-0003-4427-b027-89b75698a8a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96483ac3-bafc-4bd6-a308-9546c56b94fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03ceae7c-f2a7-40e7-af57-784b611bc02c",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f184a8d2-e0ba-4100-9fb8-ff18e04a5a15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57f5d73c-c293-4b5e-88a3-cf437f265889"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36f55e0f-9b5d-440a-9000-b60a7b41ce1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13a355e6-4f42-4c6e-81e0-15450b2fb1aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a794535f-2753-4760-9698-8412983bca0c",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb2a17ab-44f6-4819-b148-cb5738ecdcb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11b76d45-db9e-4442-a75d-3e1736c07650"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d8d1e4d-cd6a-4691-867c-38e5370608ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68a76b5f-f8b5-4a60-b0d6-1c9f642c53b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44f1de95-62b7-44c6-9dfa-b0b86322cb9b",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a63d2aef-2111-4b07-8e82-7a9a7aa46b3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d327d5ed-dcb9-44f5-a906-4e0786767067"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad9d83cb-9355-46b7-9313-87cf011f68c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d0373cb-d064-4ee3-98c8-2314d6eaae00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1d0b8f0-a288-4060-b518-075b2034a067",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27425e28-35fa-4e55-8d40-ed39ae3c41bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e61d605-d603-4a59-b92c-73b26051f037"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "111ecff0-b9d8-404a-a53d-ba7978719acf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0839cef-e2c0-46d1-8245-110386a7198b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d154de46-c0ee-4acc-aa2d-b0d07190f31c",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ec01e39-5d81-4bcb-b7bc-bd01dd1a4b1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ec63caa-dcbd-44a3-9ef4-be6800e4ae73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff23d38c-d514-40b5-85d5-6c7c2a679839",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39368cbc-e1f3-467b-96ce-6a9fd89fdf34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1d892eb-9edb-4bfd-baee-cb986faeac13",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3994b067-9a8a-4c5e-82d7-019352ed103b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9df2af50-42c9-4338-b815-ef446e04c572"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d791612-1002-4dbd-991c-af591b576aa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "453f3ff2-fe3d-4b31-885a-29ca64e77241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11b086ce-4f13-4192-95c4-6712d33f8908",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70382421-06b7-4003-a2ed-79ea214ea5e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef5409ba-c085-410e-a9ef-64f55b3d0696"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "222312d2-0adc-4fa6-ac76-3397874eabdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad1a956a-8b61-42e8-ad4d-6177cb75cfdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff9982a6-dee5-4890-8c50-753fddb38b83",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "238a817f-b202-4b73-b253-00810c474926",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ce406c7-f49f-40ad-933d-b52b207276cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccda862f-a081-422f-8cfe-43ce03cbb6ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18b0c3c6-4bb8-44e4-83e6-c9f037ecb081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cecad471-5325-4805-8062-3729cd625d7a",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6f34102-7116-4773-93c5-23b6c5b6ffc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de90d27d-f133-45c4-aac5-d31049316495"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d592ff4-a478-4ffa-aa12-11d4ccd5e496",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0e34e6f-53b0-416d-a127-5f07473ab1ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6358155-6565-48b3-b152-c68448e579f1",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "121e6c11-465e-4df9-b478-33679afa14fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "404eab16-8a1b-44d1-a39d-0cad37da0168"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2be23415-fcf2-4976-a227-f4e2d8e51971",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a17b0cd-c204-4b09-b83f-b073a2a38b14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc3c92a8-e464-4014-8eaa-6abcb691f1d6",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6375fe75-1102-4132-b7b4-52647360c20b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d5d309f-e80f-4586-a40e-16e3b42a8899"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0db858f-921f-4dce-87a9-4651e86de45e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "796e6503-e6c5-48a7-b629-317323d8dc05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8191b6d5-c789-401f-a83f-735320c6b723",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e20e69f-6c31-4304-8726-36cecefd348a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "894c97cc-36db-42ba-89a1-293c9a0f3548"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3322026c-3f6a-4c52-b5ad-7a6b76fe0021",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd2d0610-ca4a-4245-b4f6-33885807405a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69ada940-a754-4cfc-b037-a6da1b3ab289",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9466c4d5-3d4c-4577-ab3e-1863a325e5ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "219fd1bf-9a6f-49d8-ab1a-31fb6bbb0709"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03ba82fa-ae5a-44e6-8973-f24feb25fa88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7710e1c4-75fc-48ab-b8b9-4e4ba5d3d916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99b05f7f-4ef7-4fd9-9b10-4df183897a4b",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc6ea4a-a031-4629-b2a4-0cd5fd27ec6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6759d174-937d-48e5-86ce-f5e763cca4ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a098d342-5b49-4fc1-a7a7-782a74c033ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad107bce-f29e-4499-a27c-f8c5a38d2d96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5456e2d7-75bc-4950-bc19-ebd53153d3cd",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea62eb83-1496-4b9c-8fcb-e068d1b66933",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0f9e104-2d64-4b9a-afa4-4a3232904bf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19e984d9-b47a-444c-8a8e-4fe3a9e90f10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df7a7dfd-4a5d-4410-af5a-fdcc3f687351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7a850b7-ecc5-4484-b355-c446a236ea6e",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a92b760-84d1-4943-a0fc-7a7cd979c7ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9441c5f8-a3d6-4203-b2f3-c55b653a178b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3167ba13-01f9-402a-b243-094df1103d46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7954423b-3377-4598-acc6-08d34e68c731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8734edad-833e-40ba-91f8-2d66ad6012d4",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a90c82a-6d65-48aa-bb56-8cfd88082ef8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0139c5a7-86b8-4831-9394-41b4607eeed5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6c2e26f-fa02-44c2-8498-d94688db1a41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c298c46e-c0d4-4514-a26d-ee350d57d323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb76c94f-6167-44cf-8021-ec6303552df2",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7e19143-9e7d-47e7-a6b7-2ebc9598b3f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4e72a8c-7fd0-405f-84f8-12f4dec7d4f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e19ab2ad-ef6a-45fe-b87c-543978290391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "864465cb-0090-43df-a169-3fb1d74c2686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8823fcfb-584e-4efa-a233-7a9ec07e4bf5",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5440b4f5-c681-43e5-9e94-b7623a636062",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93eae824-5f18-48d0-bb07-621889308d45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be011c3a-26ab-4482-b6ad-2ef5e9f9ddf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "859bcc98-b825-4b41-825e-92be0b37973a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78b5afac-69ae-46a5-98ec-7d960a856732",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbe39e19-c6fd-48d4-91ac-0d8ca3a4556e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "945f4647-8e62-479b-91a3-17eb23eae968"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2150b23-e447-463b-afe8-05006fa2962a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d71bde77-7842-4264-95ee-a2ee40348848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5079a7c4-a503-4d12-a6ea-2f3908cf1df4",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "918a17cb-c4d4-4d2b-9ba6-653bb3bd695f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e741d91-2adf-4d58-9ea9-89f7858825fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec944fb3-3d18-43b3-b108-18b09d9d70de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1534199-cea4-4ce7-a2e8-ead5726c084f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bad56869-4ef6-4571-a07a-acf6d2ad1334",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "024341ce-4ab5-482e-9d19-8e107106a2bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ca15d46-af8f-4d25-bddd-4743a836933a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c655d7c1-b272-48a2-9070-ab75ae19940b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c04b2413-e973-407d-b457-5f1860e434a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d561060b-ce6a-4bd7-8fea-c2df0531aaad",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99858cbc-609a-4a5c-b1b1-fb3801e84a6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c80d59b5-2e9c-467c-ac1c-a7ba86cd0031"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9219556f-f2fd-45bb-b8f4-a901972e5573",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4cb7514-c8a3-466a-9647-f595225732f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa9e5a4d-5296-4fd2-a999-826974f0f129",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e243195-00dc-4be5-b501-b7a1d0f9ed99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcfa0b35-26ae-459f-9885-644350bf41f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "032a1672-7176-4394-9f9f-9a7c62d8ba63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78721b21-338a-4912-a5fe-57e38441f7b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "069e967c-9b81-4224-beac-fe215212ebe0",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65a7a2d8-1f78-4a78-ad9c-ff0c11cdf2d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdc95ecd-e5d9-4d39-be67-bc58e3b52aa3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90f5b538-3513-487d-9310-27defdfe1244",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb4a3c63-0f32-4c3e-a3c8-2d762b9c29d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcf87b9f-f5f6-4478-a37d-8ac34f1b1b7b",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f615ca85-e9c8-4699-9555-176e716d7f7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63cbdf92-1f93-497e-8f43-07162d5f51bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93cc4a2a-758f-434c-9d87-0917e5cf1fe1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bc6ac54-a9e9-4232-9fc9-ffdc18b278f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fd6745a-526f-4e11-ae08-027e65e73c47",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e44fdc19-869e-49ac-b6d1-db2b666cf417",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2790104-2f21-4882-b7e7-ef2ccd71024e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cda7aea-bea0-4c5b-b551-a54943d60d72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67dc9dbc-117c-4dda-81a0-cce13b7d4dd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a74483c-73db-4f62-b670-343cf4eeca7a",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec03af59-a1d9-48f0-ad70-69555547e731",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d531701-7651-4d73-80db-eacce322d476"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9699b12d-7e94-4ab2-8096-88794c4e37ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bd69960-db2c-4cbe-8991-bcdc7a643834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e3e465e-2173-4a98-a82c-6c310bd6712c",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a85542de-2568-49d9-a163-853a8f19843f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3379aa2e-141b-4a97-810e-b16397d1e3c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fa630b0-2e08-4c73-9b98-5ce6fc09fc1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "380dbd9b-8f89-4fce-aed1-19f14627f8ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bccbbf5-c230-49bb-aa28-b02149ef9cca",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73bc80a4-4551-4732-9051-0fa27b3629dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae76c416-c660-4b3e-b4d4-483de8a26bb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92a5a38b-afed-49ac-a7fe-6ad00850298c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a2e32d8-27f0-479c-b47b-62182d419800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22e41aaf-5c05-4c37-95d3-dd747d69d1d3",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8727f2be-c50d-4edb-9989-65bb227911f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "913bcfa9-612d-4f19-a4b1-0494256e07f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6421711f-cd51-4e04-9268-4c91df3d58b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a87bec9d-e8f2-4c0c-ac1b-09b57cfc6629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "285521e0-190c-405a-88cc-34091992ae59",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d57907d1-791e-4660-a0ca-a89aa22476ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30cbd070-2cc2-40f3-9a40-de88d0b78321"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "306f050b-a5b1-44fd-bd24-bc226bbc741c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c01958c2-8474-49af-af19-fb5a0c0f3f69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd91c543-10d3-4978-b55c-cf9769ca23b8",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab76c2e3-b269-4363-b833-bca61570d074",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "794f0489-775d-4495-9565-53c0ae9542b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5973325b-fa8b-48c8-8b79-8d8cb57f0f3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9231151f-87b1-4e0d-9d20-0e48775c488c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a2f93fe-9be4-46d4-bbee-51d45ac71c8c",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c372278-f0c0-4c3b-9d2c-7283895c5d2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1c33d09-581c-4c4f-a3b6-2591678e28a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a31efc7-f9a5-4f78-a6bf-f7d03427a6b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc29c377-631e-473e-a442-ec2d9434d3e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bafcfd2-cf16-4b69-88fc-ad150dde0106",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "129fee95-9011-4df1-96e5-6ca214c594fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d93d5d5-4f53-49a8-9367-73fe459e4831"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bcc0929-4614-49ad-8e36-4e15ce222d5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35946c4f-fb7b-4d70-89ef-34462863fbc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "119a8d57-26ac-45c5-bc11-db2e5a6939a9",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f5421f9-786d-4f65-90ae-781f6b99eab2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0662f869-dfa1-442a-93e1-c927e70c44b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a622847-1a1c-49a3-8b7b-6bdb78ca0bfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88c0f0c5-bb6e-4d4e-be54-23ff9ff38755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75b49d31-44d3-45a3-886f-e1753dec9b79",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dffb56b-57a7-4459-be89-b23ab215fbea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6d6b916-5180-4140-a301-c1a9cd4cbf5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "163ae354-4176-443c-a48e-9b4a81ae8d5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f239413d-ead6-46e3-8b0c-da55748c295d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "877009b9-fa78-44e0-a001-c3683fe16792",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad3c7639-b425-444f-b7f8-2200708f802a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0055cbfb-5da1-4078-a102-d1d58b1b716c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8390935a-ae75-4977-9a2a-71e4f9881204",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49fa9800-9d32-46a7-ab57-1097ee3a291e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8d29491-1b07-4e66-a85a-ed80437c6525",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b7913fc-c1ea-483f-93a9-2acf88be5eca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c1e2056-9fb7-45ce-954c-f7e252e01207"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e958f400-3db6-4911-96b4-b4d646b41024",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc8d7fe5-fc65-4df7-b6dc-0148c1ae7a97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71b378f1-6955-4e10-afff-1ce07f2770bd",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8867e4d-3c3d-4dd2-9337-c5ce29d53ace",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6d7f07b-1228-4591-8eb1-6ea86f235669"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aebcd6ad-38d8-4c8d-b064-17d3397edbc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ae8d593-3f3a-44e1-a8fe-0526f8068ffd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f46eff2-6666-4ebf-9fb9-1610136e85d7",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e41c850f-d409-4864-b136-7dd9e7c0912c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4555318-07b5-4abb-b9cb-13ac0b371431"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48908e5d-d814-4c71-931d-f59fc5715843",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb8e8276-49f4-4c91-a09d-c0cb171406dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e36a5e28-d75f-4cb9-9b7c-bc4c86d19c1e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bac5cd6-5fc2-4f37-b6de-ac1ec5462249",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "662cf77d-8555-4287-ab56-40b5d21b9004"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "400629ee-281b-4e24-ae44-0f6b45ac3b34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d1de358-5dd5-45d7-aefe-a359b5ac28e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c68f8b32-8e20-4709-9c87-2ad1a979f21b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05779ee5-074a-4282-8d23-644f0b83c1ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e831beb0-1bd5-4a29-9447-7a233bc7908a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe9adc8a-78c5-49ca-925b-40280bc7b0b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa74557c-6b0d-4666-bc72-c2ac94814238"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fc3e92c-f5c0-40dc-a576-e4645cc7ede4",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dd55397-282c-463d-b83f-1710dab7282e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f463af3e-ff2c-4d19-ac14-4a0e4d816998"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62b65607-b3a8-496b-aaff-dfe362a079d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fc21d90-7be5-46cd-9275-d87f64c38578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60312a51-b44a-483d-9871-fe687e274f4a",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b64b58fb-609d-409b-a806-becc060191a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d16099b-5cad-46f2-8f4c-844960f4d631"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b1e2948-a356-4725-b649-81879dd4cc78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bda0449-9566-464a-8a20-66f6522a8976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e8dc32b-6990-41e0-ac2c-c56c0d5ad157",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0025f6c1-c4eb-4bbd-b0ac-3eb4233f1c79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc879510-d014-4808-b047-b68fd842861f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b65f60-7436-4fed-8ae9-d9ec78756de1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2221aa4-ad3e-405b-b9d9-39d83cea2832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5285102-3291-43c1-91d0-5febe1a360a8",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a42832b5-6837-4d39-90b0-9d61dce3d63f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2c20f8c-a58d-4ac4-bfd2-9613360a2a21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "446d69ed-952d-42f2-b503-cf9b879da387",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2b0ef46-2c5d-48ed-9513-926a25bb2e89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74dacde5-2062-41cd-b465-16c512ea86c5",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b772319-c869-4d35-9bc7-d56fd865281c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19897796-9244-4e8d-8e05-2015b8ce970b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43d3cb13-9624-4da8-8916-d1ecfa98a931",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c24b356-619b-492c-b986-583e047264c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aa3d94d-f9f2-49d1-bda9-50f234efa5a1",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80ecb77a-7136-4c0d-99cb-8b656e26e909",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ea2f24c-7232-4d10-8e3d-f896e01faec5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e83dbf42-1e2b-4e7a-8cff-c49f57a3cce7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c855a964-7da2-4508-b6a1-0cc8994af5d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a214a64e-9b9b-4311-9e19-0011581bcfac",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66fe7197-d4ad-484f-b63c-735319978d68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71159071-5e73-441b-901c-8b35d6b35b10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e9e73b2-ce4b-4587-b29d-1ae4914d988d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "144878a3-4812-4ab5-993d-84df474e7910"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dcbd492-9190-40da-b537-38178e944416",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41c843ca-9bbf-44d4-8c18-913b5004012c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36bb51f9-8e4e-4be8-b374-d5ef9ce1b3e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db88a33f-4ca5-4ce8-b948-2373ebd64b91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edf44664-4844-47a8-8195-5def8f60dc74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "179278ff-e331-4c9b-83e8-63e9cac5da5d",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b71dd7e0-cb96-41b9-9aea-5cc90ad473bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "701aeb44-d129-4e4b-a53b-ee4774e5f407"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d97853a-28b6-495e-962f-97f7ac3b2d35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c18d7b9-7621-4e5f-88ba-a695173dc992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b5234da-01ed-4e2e-a4b2-4bec8aee42e7",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aebc6546-285c-4a47-b579-cf5e96282108",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "083171a0-9ef4-4c8e-97ab-b97686108465"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34d22164-8d41-460b-b192-fee377d4d5e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2eb9b95-8d7d-4966-8829-a8519144f7ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35e58c10-3cea-47d9-871a-7462294a6072",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc894487-46df-4d5c-810d-91dc2779dc9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eda26d62-219b-43db-88b8-9bdec3a6cb67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63e23948-ce15-49d8-afb9-758116c4d4b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9170adc-4ef4-4559-ab7a-be8da6c7900c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6596cb8-0c57-4c9a-a201-8c5d8223e54d",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3d2828d-2006-4fbe-97ad-c1f52a619521",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c27d7a0-29d6-45e7-be3d-59c0c3e49d24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbb0379b-7df9-413c-8f0c-6077e2ee39f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7835c473-6dc1-4871-b248-a53e9fac106d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8848dd90-d9e1-4e0f-b69c-af5c2f04dbd0",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fee2c79-d901-414d-b646-6c7e98e9a29d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f097278a-e75b-4800-8825-7e9165a586e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2f810a5-efd3-4877-afe8-77062c780a59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b504a051-7002-4fcb-8dc2-b20358230dbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "559e518b-a72c-4c5a-9b06-a73f75f69077",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ff3c00b-f0eb-45c0-8bac-8e90ffeea0f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15d58c61-8f94-41bd-bb1a-328fd5463a13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03180ea5-7f0f-44de-a9a3-a21272cea7ff",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5c8c778-ed31-4c3a-a777-8ede463fad33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d109f568-d14f-468c-abac-43d1c2175820",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed6cf010-92bb-4568-a6f2-a17f176d0eb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de20e9a7-b670-4261-862c-86d7461b0b64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8810dcb5-da16-4bb6-aa6d-f93bcc793fb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc098526-9b31-4a44-99d8-c90da554ad8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14b9369e-04a7-45a9-9a3e-a59d8a113842",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4817ddfd-7271-455b-8c79-74e261f62ac5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e939423f-ecd3-4c31-834e-bb5449a26610"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b750d01e-3822-41bc-a691-779116f5690b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8c05ddd-0e6a-4352-bec2-b07e028bfdd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54aa4eef-266b-4e81-a40d-01c22b6e783b",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ee4ae5b-e6dd-4fbf-b21e-af7f2feb7258",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da0a7d82-bfd4-4c59-8c92-0acb3efe7e5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcc9f621-7225-4083-9c84-008d220c3554",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c4a33c9-7d6b-4f74-b8c9-d1a5f42cfee5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "badfa84e-b448-45e3-8b7b-bbe6ea29d81d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc048fe-13b5-496c-a81d-45215edcd53e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6379d6e-611a-4046-a9fb-17343d51f030"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98fd2356-c7cf-4378-a899-d2ce75621cd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f456118-1ca3-47d1-b28a-c9c5082795dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0dfd8cc-9e4d-44d3-b79f-6c9c5b98d754",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bc65897-9ab8-4d15-b841-388657310187",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2524a3fa-6811-4d3b-a6d0-20d20feb5d83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c3556be-aae1-4977-9616-b5091f045988",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a5120e6-8ade-4bc5-a86a-4e68cd148e15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c99a2344-ed36-49c8-8f19-dcd4f45ee743",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "610d3ec3-3cb9-4845-8f1c-260514c882ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49ce6be6-b9bd-482c-bc1c-745e39a80b82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b2370e3-b4a7-47df-8cb3-cdf0ae913f6b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd45169e-c34c-4521-aca4-a02594a2f6f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc77e5a4-64c5-4281-939a-9c22748d056d",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38cc8295-2a92-4c55-84da-a2245147fe82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20b1e1e2-cd24-4db1-841c-7c1ffd9c322b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "718307b1-b18d-4007-aa31-5160395e5fbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e00378a-6ead-45fe-a71b-90bf4ef6144c"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "afc5db63-2e41-45cf-9790-e374c092f6c7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "28e1d7dd-2193-4c80-b309-e00b8cf0459b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4af99c32-be02-42b5-b4c5-fcd9538dfb88",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a6e6c6c6-87fe-4640-b36c-2242cf48bda6"
                    }
                  }
                ]
              },
              {
                "id": "1fbdcfe5-d838-45cd-8f61-f35a55ebc037",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9a3512f6-b7b0-4c87-a810-7dc01f065c79",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20298426-71c4-434c-8d5b-8192e5ec79b6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "87dc710a-d241-41ba-85ff-9fb882b23101"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "454192e1-c174-43d6-8638-24d0033217c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3aa14bb6-0956-41a2-b87d-560885ddb2ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "506121c4-1d0b-4ccc-a795-e8ba791cadbb",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75f9e3c8-07b3-41cf-a7b1-baa6d45679d1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "816fdff4-8c26-453f-ac81-0a72e48283d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cf1cef2-b78a-45f6-ac1a-7a3cec79e896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "79058658-eee1-457a-81db-136e3786449f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c74a7571-04a0-4a6e-840a-fdacc698d525",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "06190162-e76f-46f0-b1f3-7e24a6aefed4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0377e040-e8da-4715-80c7-8a9848229903",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "24c3e3a3-ef17-42f0-9e56-dd2b6c73b033"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "caec2af3-355b-412f-b362-7d5fdda5d7e3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9dbb5f05-1a82-45ae-8cf8-3fcad4edc212",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6d3779e1-74f0-4894-8de8-7eacda99d92a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2f6f5729-0852-42cf-bd05-9c3ae1c6678a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "60b4bce1-caf6-4037-aca8-f5914f9dbb53",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8025057-b9cf-4874-bd96-1b182f41d6e1"
                    }
                  }
                ]
              },
              {
                "id": "f145be57-5fea-4cc3-b3fd-83af6356a516",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "75b7eee5-48c4-4601-863c-8eaea106d1cf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7a23669a-ee8f-4d91-b830-fd356f1cfe69"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "36fece2d-30f7-44f1-8667-ddf3d409a6a1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3fb23dd2-60de-48a0-8d31-23e6662ccd2e"
                    }
                  }
                ]
              },
              {
                "id": "4cffaffc-b6ff-4c6d-adb9-c2333b3eafd6",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f3f10ac-6fbf-4674-ad5f-10f76cc5741f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "968a5e2b-40a5-482b-bc8a-fa457f9743a0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b1709d9-a7b9-400c-a4a2-7e958a397c86",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2d7209eb-2c1d-4250-b7d2-81b0bc53ec23"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "35071fde-1dbc-438e-b74f-cedd9d87d0a2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "34bf283b-b27d-42d5-939d-6ea7df79ef82"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fb6d3683-ae3c-49e7-94e0-b0ef4a5b7ba5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f675dcd2-50fe-4b7e-885a-63da110d3716"
            }
          }
        ]
      },
      {
        "id": "dc805e59-a39e-44f2-a788-6aa3467471dd",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "d35ef53f-57e3-4ba3-9177-a11e680d4084",
            "name": "Negative Testing",
            "item": [
              {
                "id": "47a07df1-1066-4e69-b1ff-904c895d690a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8cf95cde-b0eb-47bb-979c-4f7bb1602dc5",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "742da44d-a7dd-43c9-adde-8d8270aba88d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a4d7c08f-6acc-48b8-a786-ef4ac246ea88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eebe3b78-2d2c-458d-9301-1f4a30ca4daa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5bb744f6-d66b-47ef-b168-c27b77211f2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "376a62ed-4b42-4781-9858-80751cf115a3",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ce4003a-ba19-4580-9354-680e4b89d698",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bf4f280c-6346-4367-9501-a484d8cbca3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b357d1ad-b2c8-4327-af05-99e722d433aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "30c43fb9-af42-46db-8c62-dea2923d31bf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "72bdad81-e578-43eb-a855-a862d80daab6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "76113fc7-7c5e-490c-8d16-feba98755fa9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b0f49369-1a6f-49c7-a32c-0a7cfcb04371",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "19b57d53-1cc4-49a5-a31f-0dc0f2f51c99"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bf7d9779-2e74-4131-9a82-84350a873c61",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "97aab89d-b806-4e54-a6a7-b6f769f031c6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "207deb87-32c2-46bf-a894-c54c3297625b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5ad15afd-495d-4707-926f-213681df31c2"
            }
          }
        ]
      },
      {
        "id": "b954c75f-ee25-49a7-b1eb-a789fd48a938",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "887bc290-59d1-4b75-842e-84e304fb0dab",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c2a85779-4c13-4c01-bdc4-9c0e19d616ce",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c5633911-b865-462c-9112-93aaa196989e",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e22b5332-5525-40db-a10d-8438c72e81f6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "da946694-7df5-4f5f-ae8b-e5bc28239f90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "586377c9-f9cf-4b9a-988a-470148a59b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cad91f13-16a6-4729-80e2-fa0e715837c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73ba622f-bc3a-4a7b-bfd7-685a1338459b",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "271ef97d-2316-4b9a-9985-cf2910fd067a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6bc16978-de43-4138-b6cc-af0272d1a4f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acfc4b6a-6ac0-4d3e-9453-058741cc00c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "80cf1246-52c0-4038-86b1-a2e6e5de1ef4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aba52748-c567-4c94-888c-a5bf671995f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0d10c5d-ce58-4aed-8b9a-a6542cad0d14"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5713a60b-4e0f-42b9-8458-85bc7701287e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "60e007c5-7ae5-43c5-9f24-217a835001dd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "253a9701-38f1-4e63-bc9e-a47d8e60653c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "a8b74889-fdbf-4879-a430-878291eec3ff"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c3d41c93-c6e9-44de-ab3b-d2026d3bf8d7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3c8516ed-9489-488d-b9bd-b9d6d0885948"
            }
          }
        ]
      },
      {
        "id": "c68d3f85-989d-46bb-a398-f32001d7b1c6",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "0ea214ee-a87a-41ee-8274-75bda013f3c0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b6af5af6-bc06-458f-a30b-c3cce9afd557",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "32c437cb-afe1-45ae-9b33-4c4a15d19276",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae16d8ae-9cae-4666-ae29-8632542631ed",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0970d4e6-5145-4de3-ab45-6739dd8b124c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77a77efa-7852-4872-ab4b-1c2bd90302b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "602f9e3f-bc77-4d16-a82d-9b5f7d7d8a33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5af6131e-887c-4624-9402-a1d803868187",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45f550c6-8a97-4f24-94e3-4245d532d8d4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "abc47271-b206-4b79-8256-ed517a0021eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ca2785-7d11-4731-ab6f-e8c406f01529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f885799b-9583-40d0-948a-2f439e12ead8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0f74ed6a-e99f-4043-a8a5-4446e8480d4e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8d40cac3-c5a9-4803-9235-156ea4578930"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "17c4500a-e327-4226-902d-c25b4ce03d69",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3801490a-137c-497b-bf7e-fffe9f50224d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b5bdb487-d1b3-42f2-a3ef-a467448b0e67",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "89fe0f86-60d1-482d-9771-ede6e5e7216a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c253ede6-aa24-4868-beb2-c76d2ca1160c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eca03cce-9d72-47a7-8e39-ab332c95a806"
            }
          }
        ]
      },
      {
        "id": "c928d6c9-a27f-492b-8026-b212bcea2d07",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "efd15694-dd37-49ba-89a6-98ce1d8a8736",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e2de5695-f612-4da7-9ede-e1c811d28601",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "9e23cc66-fd09-46be-b6bb-b6395444a995",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "92abdedd-4a98-4ef7-9576-66274c7af309",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "94d98f66-6614-45d3-bb28-1ff1194e89fb",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 505,
        "pending": 0,
        "failed": 338
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 612.0346153846151,
      "responseMin": 11,
      "responseMax": 3459,
      "responseSd": 645.0548059257669,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1665795481564,
      "completed": 1665795651684
    },
    "executions": [
      {
        "id": "4ccbcc7c-23b8-40b6-8fda-05f1d864882c",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "72a9027e-7f7f-4ba2-9d2a-0664cf1c5aff",
          "httpRequestId": "856a0c19-6ffe-4be4-9fb2-8f4ad8e49eca"
        },
        "item": {
          "id": "4ccbcc7c-23b8-40b6-8fda-05f1d864882c",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "9e42840b-204a-4a2c-92a1-4f18180794ca",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 0
        }
      },
      {
        "id": "a4d29b7a-f976-45b5-a4c3-f88d7d12cf84",
        "cursor": {
          "ref": "61f75c31-9b2d-45aa-a91d-f8f7cbc40b4b",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "fec919a6-47db-4925-be1f-ed437149a37e"
        },
        "item": {
          "id": "a4d29b7a-f976-45b5-a4c3-f88d7d12cf84",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "cb63cf88-72c6-4f6a-b90a-deb86a1198b4",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 0
        }
      },
      {
        "id": "cff83af5-abff-4dbe-aa7b-807bd5f9b0c6",
        "cursor": {
          "ref": "859fd677-0d9e-4943-a663-53777fb42bc3",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "117ba737-b5c6-4832-b3bf-948463c5c1b1"
        },
        "item": {
          "id": "cff83af5-abff-4dbe-aa7b-807bd5f9b0c6",
          "name": "did_json"
        },
        "response": {
          "id": "a6ff9109-6055-428e-875b-b8431eb97ba9",
          "status": "OK",
          "code": 200,
          "responseTime": 613,
          "responseSize": 1640
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88569912-a000-4988-a9eb-307069ace24c",
        "cursor": {
          "ref": "c2f45bac-a7d9-4dda-a9f9-bb4ea582f647",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4f597c13-894d-4110-89a1-35d5c86362bc"
        },
        "item": {
          "id": "88569912-a000-4988-a9eb-307069ace24c",
          "name": "did:invalid"
        },
        "response": {
          "id": "c1d0f9aa-8cde-490a-a136-02708900797c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 570,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "88569912-a000-4988-a9eb-307069ace24c",
        "cursor": {
          "ref": "c2f45bac-a7d9-4dda-a9f9-bb4ea582f647",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4f597c13-894d-4110-89a1-35d5c86362bc"
        },
        "item": {
          "id": "88569912-a000-4988-a9eb-307069ace24c",
          "name": "did:invalid"
        },
        "response": {
          "id": "c1d0f9aa-8cde-490a-a136-02708900797c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 570,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "c1f08f75-ae76-4dd6-882f-394039c725a0",
        "cursor": {
          "ref": "8a36820c-21dd-48c6-8dad-c7c54b2bd768",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b2ae51e7-ef6c-485d-ae8d-99654f30dbc3"
        },
        "item": {
          "id": "c1f08f75-ae76-4dd6-882f-394039c725a0",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "c38bbab0-4618-48bc-9d4f-22c20f1feee6",
          "status": "Not Found",
          "code": 404,
          "responseTime": 498,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "8572df8a-cc0d-4d6c-951b-3d009cbb038e",
        "cursor": {
          "ref": "a1876a54-a789-4299-b8b5-16191c725c4c",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "1366aba5-745e-42aa-b407-c43003a4d243"
        },
        "item": {
          "id": "8572df8a-cc0d-4d6c-951b-3d009cbb038e",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "6ce41a63-e12b-4323-8918-7d655cdd0f65",
          "status": "Not Found",
          "code": 404,
          "responseTime": 474,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "893048c4-fd79-4b4f-a7b9-c141f65d9eb8",
        "cursor": {
          "ref": "d02c8602-9ddc-4ca7-b72b-5152060d7fbe",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a7ebd31c-b032-4343-96db-c2f5c0424854"
        },
        "item": {
          "id": "893048c4-fd79-4b4f-a7b9-c141f65d9eb8",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "e7e50459-fa28-4056-8c4e-d539844abbc5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "b4f36454-cb82-47b1-b297-a9a65501fcd1",
        "cursor": {
          "ref": "f1c93bfd-12d6-432c-b3fe-a6e64aced7d1",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "cbd58512-1c1d-4624-94bf-f4edc6744aef"
        },
        "item": {
          "id": "b4f36454-cb82-47b1-b297-a9a65501fcd1",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "7c59030f-ec81-4422-9b19-166a84b129a7",
          "status": "OK",
          "code": 200,
          "responseTime": 611,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "b4f36454-cb82-47b1-b297-a9a65501fcd1",
        "cursor": {
          "ref": "f1c93bfd-12d6-432c-b3fe-a6e64aced7d1",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "cbd58512-1c1d-4624-94bf-f4edc6744aef"
        },
        "item": {
          "id": "b4f36454-cb82-47b1-b297-a9a65501fcd1",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "7c59030f-ec81-4422-9b19-166a84b129a7",
          "status": "OK",
          "code": 200,
          "responseTime": 611,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "ebc7c797-d15b-4f1c-b926-de1329f43e2b",
        "cursor": {
          "ref": "850edcd0-f134-43b1-8b05-21f272359348",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "22b0678b-aca8-4a55-9d2c-ef91f0d7b299"
        },
        "item": {
          "id": "ebc7c797-d15b-4f1c-b926-de1329f43e2b",
          "name": "identifiers"
        },
        "response": {
          "id": "e6e078fa-3059-4d6b-8619-3e60d75a8135",
          "status": "OK",
          "code": 200,
          "responseTime": 1204,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "252912f5-797e-4da0-928f-2c852e04c9ef",
        "cursor": {
          "ref": "c6f827ea-9f4e-47fc-a351-262b4cacb677",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "fcb98726-4bdc-4c6f-9c78-974740052728"
        },
        "item": {
          "id": "252912f5-797e-4da0-928f-2c852e04c9ef",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2c132407-c000-480c-b019-e2cab5737a9e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 934,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "252912f5-797e-4da0-928f-2c852e04c9ef",
        "cursor": {
          "ref": "c6f827ea-9f4e-47fc-a351-262b4cacb677",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "fcb98726-4bdc-4c6f-9c78-974740052728"
        },
        "item": {
          "id": "252912f5-797e-4da0-928f-2c852e04c9ef",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2c132407-c000-480c-b019-e2cab5737a9e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 934,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "8d742eb0-2c7d-4c0c-9f5f-fc93917f7142",
        "cursor": {
          "ref": "2af1bcee-75a2-44b3-b01c-142f63878e84",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "53e65891-5fdc-423b-bd1f-40aa90d023fb"
        },
        "item": {
          "id": "8d742eb0-2c7d-4c0c-9f5f-fc93917f7142",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c15a784f-639a-48a8-b863-09bb0438b742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 558,
          "responseSize": 441
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "98846a51-c2ef-42d2-aa06-c69d36ee98a6",
        "cursor": {
          "ref": "3877c58c-6857-49c8-93e0-d4cc7b625751",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a305d69f-be75-4a64-9ce8-b4a210277818"
        },
        "item": {
          "id": "98846a51-c2ef-42d2-aa06-c69d36ee98a6",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "7e995541-0cd6-4b61-8095-102b9e96f2de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 805,
          "responseSize": 960
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "71e3592f-c84c-4527-86c2-8a6715e4055a",
        "cursor": {
          "ref": "820efe3e-2e06-43c1-a653-cf0212c64346",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "faf9b33e-31d8-4bb0-9386-e2bb0378fb0e"
        },
        "item": {
          "id": "71e3592f-c84c-4527-86c2-8a6715e4055a",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "dac3e69c-4a3f-48eb-80c3-fc8d317a12a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 691,
          "responseSize": 957
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "92a2a4d2-291a-4723-b16f-3f77b4b6e234",
        "cursor": {
          "ref": "1d3d2cf3-88b8-4c1f-9ae3-6b88ebe33c3c",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "89c148cf-3243-47cb-90cd-991a64c5a527"
        },
        "item": {
          "id": "92a2a4d2-291a-4723-b16f-3f77b4b6e234",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "2c7be379-c73a-4615-9988-f2c4c2215cd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 621,
          "responseSize": 959
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "2a2f3f07-e949-455c-89c1-8d5da9364f51",
        "cursor": {
          "ref": "b7c43eab-9c1c-4d39-ac82-60284c71c915",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "6572f12f-bc75-424a-98f3-c41bbd5fc515"
        },
        "item": {
          "id": "2a2f3f07-e949-455c-89c1-8d5da9364f51",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "fe7c4ee4-adbc-4745-96ad-0cef09bfa1e2",
          "status": "Created",
          "code": 201,
          "responseTime": 2001,
          "responseSize": 645
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "46677d2e-2f37-4f91-ab21-8bb3b88f3745",
        "cursor": {
          "ref": "e0d664c0-5cbd-4b82-acaa-45d7a6d1d886",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "787bbd8c-bd9c-4f3e-8dde-38a5bc19482c"
        },
        "item": {
          "id": "46677d2e-2f37-4f91-ab21-8bb3b88f3745",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "c3ac1f0a-2b13-4876-937f-d03ccdd0cb00",
          "status": "Created",
          "code": 201,
          "responseTime": 1454,
          "responseSize": 634
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "1f29a3ec-a568-4515-affe-cb6ef270ebc6",
        "cursor": {
          "ref": "89e9d1b0-714f-4964-80fe-5193621ed445",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1f9683b5-d02a-4824-a1ec-5adbac746605"
        },
        "item": {
          "id": "1f29a3ec-a568-4515-affe-cb6ef270ebc6",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "208a3484-3675-47a3-a56b-d5226f508626",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 423,
          "responseSize": 1448
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "637929e3-9603-469d-bd27-0df15d22190d",
        "cursor": {
          "ref": "b62e7092-4673-4b73-a05a-b9f10f79c61f",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f84ca45d-5cb4-4923-83d6-3233483b8ac6"
        },
        "item": {
          "id": "637929e3-9603-469d-bd27-0df15d22190d",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "049f1bb8-95f2-46c8-8249-89ecfb0c527a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 404,
          "responseSize": 1417
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "d24a3583-23f2-4af8-9052-aa7f9e79d460",
        "cursor": {
          "ref": "16f2717d-2122-4abe-8815-d0e623ba3bba",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "8eb86237-e031-49a7-80da-d9c56b81ee17"
        },
        "item": {
          "id": "d24a3583-23f2-4af8-9052-aa7f9e79d460",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b0a66368-9558-4e9a-be88-8ce3b8c079f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 438,
          "responseSize": 1414
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "f17d0fec-45e4-41da-b575-a909f692b0dc",
        "cursor": {
          "ref": "a5306939-b1f0-43a9-9a94-71edfa4f185b",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "cf0708ca-61dc-4679-a9e1-422ecb884a59"
        },
        "item": {
          "id": "f17d0fec-45e4-41da-b575-a909f692b0dc",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "6a7f73df-8690-469e-afed-106eb18511f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 408,
          "responseSize": 1416
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "b64fe1a1-7e52-478e-aaa6-5ea5bc2e877f",
        "cursor": {
          "ref": "76c4f7e6-189f-469e-bec1-53ad0371a2f0",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "a523493e-ff96-43de-8931-50b5ee924bf1"
        },
        "item": {
          "id": "b64fe1a1-7e52-478e-aaa6-5ea5bc2e877f",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "b3407adc-084b-4c24-9c53-aa154f238d56",
          "status": "Created",
          "code": 201,
          "responseTime": 1564,
          "responseSize": 682
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "d91ee7d8-fb76-484f-9c28-bfcb026ae51b",
        "cursor": {
          "ref": "13027899-da16-4634-b465-62d499aabde9",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "bb844842-1f81-4d47-a24b-282f28864d10"
        },
        "item": {
          "id": "d91ee7d8-fb76-484f-9c28-bfcb026ae51b",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "fb028065-0f88-4aba-86a9-ac654aa189db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 404,
          "responseSize": 522
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "47bdeb2e-3c3c-40bf-bc97-653ad3d52082",
        "cursor": {
          "ref": "26bec728-44e0-40dd-85c7-d40f836e2fca",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "564eb5d4-3c4b-4eb2-a809-15cf150824fc"
        },
        "item": {
          "id": "47bdeb2e-3c3c-40bf-bc97-653ad3d52082",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "88c4cb14-9cd1-46f4-b254-8f7e2f783b5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 405,
          "responseSize": 478
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "d2fd7df6-ad13-4b9e-84cb-e8ce6fa7e49b",
        "cursor": {
          "ref": "f26ccf63-4981-4c13-81b8-595942b38635",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "741d6ccb-a401-4521-8518-9781cfe33189"
        },
        "item": {
          "id": "d2fd7df6-ad13-4b9e-84cb-e8ce6fa7e49b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "b0db98bd-ec35-48dd-baf2-29da42120d09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 480,
          "responseSize": 475
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "4327ea22-ab80-4bc4-bffd-11cedec1afbb",
        "cursor": {
          "ref": "1e92c8ea-0ffa-4d4d-b8c7-e5d3f4dc7fba",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "2b410e54-a100-4b95-9112-bd11eb559af2"
        },
        "item": {
          "id": "4327ea22-ab80-4bc4-bffd-11cedec1afbb",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "c9e56542-f962-456c-b246-e49c53485b92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 399,
          "responseSize": 477
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "7035f5e5-efeb-40eb-8c22-2cb6b994ccf0",
        "cursor": {
          "ref": "1fcfc32b-094a-49c8-b6b1-362cc1ce8ddf",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "19007a0d-1818-4e27-8a18-5cdb69efe783"
        },
        "item": {
          "id": "7035f5e5-efeb-40eb-8c22-2cb6b994ccf0",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "137478af-12ee-43b2-8078-97db775730a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 443,
          "responseSize": 527
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "916a3db3-bdf7-4218-93b5-bb8ffd71e1d7",
        "cursor": {
          "ref": "6ef5ab33-8c6d-4320-878c-0e98046f42b4",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "a3653745-0340-43c2-8dec-5de77f2bc2d7"
        },
        "item": {
          "id": "916a3db3-bdf7-4218-93b5-bb8ffd71e1d7",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "784860c2-0044-499c-a03a-2c8209b1bd05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 415,
          "responseSize": 455
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "280d4bb2-ca37-403b-9619-78fcbf8cf0d6",
        "cursor": {
          "ref": "2764f71c-10b8-4a27-a899-f9f33d173db9",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "1a6ae51e-d607-473a-a364-93ddd54a6b29"
        },
        "item": {
          "id": "280d4bb2-ca37-403b-9619-78fcbf8cf0d6",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c6d28fa2-f881-41e2-92bf-c1494125ad09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 435,
          "responseSize": 757
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "79dea6b8-2212-4ef3-8088-51f3b8c7634d",
        "cursor": {
          "ref": "e21cbfe3-8817-480e-8941-05fa3faf7343",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "ac733c9a-3e22-4043-8a6a-d0b524ad70bf"
        },
        "item": {
          "id": "79dea6b8-2212-4ef3-8088-51f3b8c7634d",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "29dfec09-1213-4174-9c3b-364439db662d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 422,
          "responseSize": 754
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "3122b368-512a-45bd-b8b3-f2ff8d422ed4",
        "cursor": {
          "ref": "bb7bf2d9-de37-4fdb-8626-25b5c46413e3",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e74804ea-a1f7-47d2-8c65-f8d91db17ea1"
        },
        "item": {
          "id": "3122b368-512a-45bd-b8b3-f2ff8d422ed4",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "566838be-6aee-4261-a3cb-7b8c3d30d286",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 417,
          "responseSize": 756
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "d6f1d0e2-e2bb-4901-a792-ee473fe6d905",
        "cursor": {
          "ref": "47ad67a1-0eb0-419b-8630-e617338dea8b",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f51f4046-72bd-45c5-87e7-7bbe133c3f1f"
        },
        "item": {
          "id": "d6f1d0e2-e2bb-4901-a792-ee473fe6d905",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "02d7e101-e0b4-4265-b440-2c8ea9fdde87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 421,
          "responseSize": 754
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "be115cd0-8986-4a4a-831e-875865a8d5d4",
        "cursor": {
          "ref": "6d6c59dc-e700-4157-8e98-5d4076da69ed",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "7086e91d-4af6-47b7-9707-32c376dde7ca"
        },
        "item": {
          "id": "be115cd0-8986-4a4a-831e-875865a8d5d4",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "7b4517a6-6c46-401b-940f-1c89a2d41d2b",
          "status": "Created",
          "code": 201,
          "responseTime": 1794,
          "responseSize": 634
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "3689027b-e234-4067-b4ba-8c143201f137",
        "cursor": {
          "ref": "a648bf04-9cf0-4d1c-a412-db73b9e2723f",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d166f4ed-37bc-40a1-a94a-30513e915e1b"
        },
        "item": {
          "id": "3689027b-e234-4067-b4ba-8c143201f137",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "0dc062aa-197e-4142-89c5-0d0c2b5ddcd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 411,
          "responseSize": 174
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "92aa602b-dce5-4476-959b-d3ae319d7f37",
        "cursor": {
          "ref": "cfacc21e-a0d1-44b0-843d-666217c1faa7",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c8fe4bb4-0367-4412-b78e-b83dfcdfdfdf"
        },
        "item": {
          "id": "92aa602b-dce5-4476-959b-d3ae319d7f37",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "d677b623-40dd-47b7-9002-ef0f4fcb20f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 415,
          "responseSize": 802
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "f1787fe4-484c-4d8d-a46e-c0628057f0a8",
        "cursor": {
          "ref": "40389793-1724-43ad-8d1d-65a7abcac521",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "45b1114d-470d-436e-8dfd-8f734f81ba3d"
        },
        "item": {
          "id": "f1787fe4-484c-4d8d-a46e-c0628057f0a8",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "1ba0a2e9-4c88-471a-94d7-9dcc2ba2a684",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 419,
          "responseSize": 792
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "9f263e1f-c5b8-4030-9119-cdeade010e4a",
        "cursor": {
          "ref": "e62aa8e8-d2a2-4490-a868-db209b47d5e8",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "1eca0ff2-db20-4d08-b242-72829a8f4cf4"
        },
        "item": {
          "id": "9f263e1f-c5b8-4030-9119-cdeade010e4a",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "562b9c9d-9989-4f72-8ec4-2f3b051e8eb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 400,
          "responseSize": 789
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "f174974e-f01e-4822-b406-2bc2efb59263",
        "cursor": {
          "ref": "c4b81656-5a15-4b11-910f-5d9eda08c0a4",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a23e5747-fdbc-4fba-9285-690b5726b0c7"
        },
        "item": {
          "id": "f174974e-f01e-4822-b406-2bc2efb59263",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "bcd97035-d96f-4c11-a0d4-6e0b8b6829bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 411,
          "responseSize": 791
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "421a6a9a-0807-4bdc-8309-4e5c7f6eb391",
        "cursor": {
          "ref": "69f061e1-65f7-421c-8f3d-a0eb5ae41ba1",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "ab3c1aab-7e10-4619-ae1e-3afcc169348b"
        },
        "item": {
          "id": "421a6a9a-0807-4bdc-8309-4e5c7f6eb391",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "dfcfba66-2773-4fc2-8573-41bbaf83e874",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 432,
          "responseSize": 789
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "437aebad-d65e-4384-a162-bae7fbeec8df",
        "cursor": {
          "ref": "a861516f-ff55-4a05-a25f-3932368532b5",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "8fe40be3-0043-486e-bbf1-338d92a1c896"
        },
        "item": {
          "id": "437aebad-d65e-4384-a162-bae7fbeec8df",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "25221a95-b025-432c-aaf6-1b5a7814e39c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 452,
          "responseSize": 407
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "db1d64df-3ff5-4ec9-b2c4-fcb95996c764",
        "cursor": {
          "ref": "6481e5bb-6a33-4739-af73-b4f8e1ed2a9b",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ff8e1dc4-205f-45d7-9ffa-5d80d8fcb42e"
        },
        "item": {
          "id": "db1d64df-3ff5-4ec9-b2c4-fcb95996c764",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "066459e3-23fd-4b67-bf7f-149b0d6c58c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 528,
          "responseSize": 753
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "d8a5e0e2-3b49-42bb-a660-1e3d2d672577",
        "cursor": {
          "ref": "503724bb-0680-43f8-b2c5-0b10556a7bf3",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "c6f1703b-a844-4723-b7c3-0f226596515a"
        },
        "item": {
          "id": "d8a5e0e2-3b49-42bb-a660-1e3d2d672577",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "ac23e19e-cfbf-4f9d-9a33-7cd267bef509",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 446,
          "responseSize": 682
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "8d9f9ed0-48a5-416c-b9c5-fa549788b51e",
        "cursor": {
          "ref": "373f81c2-8265-4cdc-bcd6-898ec0aa5b42",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "76923af0-57a9-46d3-9905-d1262ba71faf"
        },
        "item": {
          "id": "8d9f9ed0-48a5-416c-b9c5-fa549788b51e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "b2ae4ae0-394c-4b85-958f-c9d0f75925cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 413,
          "responseSize": 679
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "91212e4b-efb5-4a10-9619-b8447dbc981d",
        "cursor": {
          "ref": "1196e9cf-e4b8-4f28-9f5b-d30c79f95ddf",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "2c45b7d6-1287-4f0b-a21b-7269dcce50ea"
        },
        "item": {
          "id": "91212e4b-efb5-4a10-9619-b8447dbc981d",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "17439869-2b0a-441f-aa2c-6566b4eac7a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 437,
          "responseSize": 681
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "2192b000-e9ad-4a44-8d72-2c95df310528",
        "cursor": {
          "ref": "c29c50b0-e241-4014-b5a9-2368a73fed37",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c4b7b7eb-f47f-4fd2-90e5-f2f621a5d005"
        },
        "item": {
          "id": "2192b000-e9ad-4a44-8d72-2c95df310528",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "1f5637cc-372f-4b35-8740-88d035fe2a3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 430,
          "responseSize": 930
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "2e2c8835-273c-4b75-b3d0-092f3a4164ae",
        "cursor": {
          "ref": "d0852b8d-e0c9-4e93-97aa-3c036f717d86",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "1d46b1e1-2228-4dc2-8b88-dd4db0fd7147"
        },
        "item": {
          "id": "2e2c8835-273c-4b75-b3d0-092f3a4164ae",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "26c0dafb-3942-449a-ad6f-6bb0744ff5f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 415,
          "responseSize": 966
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "d6c8a6af-482c-47fd-8f4a-980728bb3fa4",
        "cursor": {
          "ref": "44056d28-17cc-4b68-b4a7-63bd1fac2ad5",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a51030ee-1f5a-4df3-89f2-cfe94c324b13"
        },
        "item": {
          "id": "d6c8a6af-482c-47fd-8f4a-980728bb3fa4",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "df72dc28-16e8-4b32-99af-d15bc9761457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 455,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "acd72018-160c-4b6e-9375-6621220c69d8",
        "cursor": {
          "ref": "def096de-e750-4e67-8441-c22f2bd361f9",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "c269c7f8-e05b-4da4-9b60-df8c0dc3eef6"
        },
        "item": {
          "id": "acd72018-160c-4b6e-9375-6621220c69d8",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "976636af-dfb6-449d-8ec2-8e9d8a230629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 398,
          "responseSize": 778
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "e432ddb6-4a60-4a12-a2a3-b54b5409e1db",
        "cursor": {
          "ref": "e58f2a75-cd84-4242-adec-ae1e4f9fc0b8",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d9715610-e08d-494e-a28d-17a733cf1fdd"
        },
        "item": {
          "id": "e432ddb6-4a60-4a12-a2a3-b54b5409e1db",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "56816ad8-e666-4b76-b305-8f6fab25076b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 416,
          "responseSize": 707
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "9c5d5d5c-bd5a-45fb-84a9-4e5a1335e6b2",
        "cursor": {
          "ref": "50d0a560-e6f9-422d-8dc5-6904d9f88105",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "d7bd06d2-1677-4a9e-94d6-87056ec9c398"
        },
        "item": {
          "id": "9c5d5d5c-bd5a-45fb-84a9-4e5a1335e6b2",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "94e59cbe-6da5-4518-9e8e-eafcf244c4ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 390,
          "responseSize": 704
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "c4bef268-32c1-4b6c-b772-68dd427cfba2",
        "cursor": {
          "ref": "d9ba9e84-618b-45e5-a820-940286e85e86",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "1405beb6-5c99-494e-aa19-bd888d3359f4"
        },
        "item": {
          "id": "c4bef268-32c1-4b6c-b772-68dd427cfba2",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "37806053-c100-4625-9049-046d157a0645",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 450,
          "responseSize": 706
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "f698a0e3-c915-498d-b8f8-b23aeacc9b64",
        "cursor": {
          "ref": "cbf7c1ce-b60c-4012-919a-97b8824b9389",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "159244e4-d2cb-4a4a-8b51-91385f638c17"
        },
        "item": {
          "id": "f698a0e3-c915-498d-b8f8-b23aeacc9b64",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "49a09504-7e08-477a-bb85-a4e4567f7ec2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 412,
          "responseSize": 955
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "525da47d-fa10-47ad-909a-e89805ffa082",
        "cursor": {
          "ref": "38bd049b-78a4-4f00-a11a-188a40870ebc",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "5bce99ba-5cbc-4a71-b5f7-1f551e8e784e"
        },
        "item": {
          "id": "525da47d-fa10-47ad-909a-e89805ffa082",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "30dd1ca8-a060-40f3-9d4e-74628584e7e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 439,
          "responseSize": 991
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "5d51ae9e-01b8-497a-b2d7-5dab0dae9f61",
        "cursor": {
          "ref": "36af057a-00f9-4b81-ba8c-b43166674b95",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "0e4492e7-78a8-49bf-a70a-424cee1861c0"
        },
        "item": {
          "id": "5d51ae9e-01b8-497a-b2d7-5dab0dae9f61",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d2b9167f-2b7b-48ff-be12-266f5f957034",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 519,
          "responseSize": 465
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "426c23ad-8f4a-486c-8c95-e9ad8922e8c1",
        "cursor": {
          "ref": "36ffc660-1acc-4ca7-bc5d-6468bdffb890",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b83c3f6f-63d7-4eb7-9413-be6abafe615b"
        },
        "item": {
          "id": "426c23ad-8f4a-486c-8c95-e9ad8922e8c1",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "8dbdb030-7f65-449e-9988-1a7778afec2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 458,
          "responseSize": 489
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "ed5561e5-6c08-45ac-b934-59dfeb1ce51b",
        "cursor": {
          "ref": "06b3c201-f87e-4dc4-9e53-1aaec526f680",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "2dcfbd2f-b1a8-4bf1-b230-75f19cadd143"
        },
        "item": {
          "id": "ed5561e5-6c08-45ac-b934-59dfeb1ce51b",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "fda64007-7896-4f8e-b31c-22ef9138bb85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 727,
          "responseSize": 470
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "8b55d52b-b506-42d4-9219-2f834cc457b8",
        "cursor": {
          "ref": "0713533a-efc8-437b-a1ad-ec96f20808f8",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "e465a77b-9aae-49c1-a23c-e9b23284cb83"
        },
        "item": {
          "id": "8b55d52b-b506-42d4-9219-2f834cc457b8",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "4a336272-bb4d-4c03-b470-2b422391c638",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 689,
          "responseSize": 467
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "b24e5570-d6a1-49c6-b71a-ab7546574509",
        "cursor": {
          "ref": "878a7c1d-fefa-4365-b378-08ccc5825a89",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "c3cb661e-b108-420e-a9f7-d5ff736a489d"
        },
        "item": {
          "id": "b24e5570-d6a1-49c6-b71a-ab7546574509",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "2af38ff1-267f-4dc4-abb8-39714fd6ba40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 677,
          "responseSize": 469
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "465d8f05-9259-4480-9426-80ecbf8fa7c0",
        "cursor": {
          "ref": "70f21027-afcb-42f2-b8bb-0e38b7af251c",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "0b3372a4-5ed1-468d-9a4f-fb22e1d2021e"
        },
        "item": {
          "id": "465d8f05-9259-4480-9426-80ecbf8fa7c0",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "531cae13-c8c4-4802-930b-c36741700ef6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 663,
          "responseSize": 467
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "6e0485c5-8de7-46b7-b699-719a15b010ae",
        "cursor": {
          "ref": "c051b242-21e5-4651-8235-20f0fb6db355",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "5599ba7a-1d6c-41ad-8b87-ad4d4907b37c"
        },
        "item": {
          "id": "6e0485c5-8de7-46b7-b699-719a15b010ae",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "8e6e2940-16ca-49e9-b943-eb93cf108f0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 790,
          "responseSize": 237
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "e48e5043-68cd-428b-a4a9-149e8e9e2e09",
        "cursor": {
          "ref": "5256a277-6154-4edd-a549-cd2889b1f4bd",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "c081bcfc-c957-4a9d-b9e4-c0a71435a8f4"
        },
        "item": {
          "id": "e48e5043-68cd-428b-a4a9-149e8e9e2e09",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "aa8dc442-09f1-4e81-a994-eda0f8b0383c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 604,
          "responseSize": 490
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "85cdceca-0eb7-4f06-a3c6-998a0e10ea60",
        "cursor": {
          "ref": "58796f2b-3861-46fe-b34b-7bcef10fa322",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "f2f1d3e1-7a79-4874-9f61-80f7f888a1b7"
        },
        "item": {
          "id": "85cdceca-0eb7-4f06-a3c6-998a0e10ea60",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "99b4b132-f6fa-439a-a079-87d5d04825a8",
          "status": "Created",
          "code": 201,
          "responseTime": 2276,
          "responseSize": 653
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "7d0f3477-2f90-4282-a522-f5a74d4c5822",
        "cursor": {
          "ref": "386d71fc-b2bb-4917-a221-3cfcd9d63a80",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "94bf830d-a7a1-4c10-9aad-ab4a477f5636"
        },
        "item": {
          "id": "7d0f3477-2f90-4282-a522-f5a74d4c5822",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "31a120cb-ded7-4278-bc6d-ce5ee328d6e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 428,
          "responseSize": 935
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "a1a87a54-eaf0-4e5a-80b8-2d43dffaeb70",
        "cursor": {
          "ref": "e3db0c13-28ff-4592-90dc-42ef1ec1f049",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "976bdabf-badf-499a-9198-21ccfeb161a4"
        },
        "item": {
          "id": "a1a87a54-eaf0-4e5a-80b8-2d43dffaeb70",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "c5a5b490-8204-4405-ad45-94139fedbc99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 434,
          "responseSize": 932
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "44cfd3ff-fd55-4078-8512-1fe0ac739754",
        "cursor": {
          "ref": "6f8c8398-2147-4c6e-a5ae-950860da1f4c",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "6d4155dc-c85d-4ee2-b1db-23da04b6f76d"
        },
        "item": {
          "id": "44cfd3ff-fd55-4078-8512-1fe0ac739754",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "1c967a0e-1a3b-4b27-abe0-e51d3b430c8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 408,
          "responseSize": 934
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "a2e7bf31-f106-44b5-871c-bcc1c8c95df0",
        "cursor": {
          "ref": "1b721889-c3bf-4ca2-b694-36f1f315b52c",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "a8ed5ea5-8aef-4e1b-94c9-3f50a3f0c98c"
        },
        "item": {
          "id": "a2e7bf31-f106-44b5-871c-bcc1c8c95df0",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "cf898a31-2613-4e34-b0d1-839b6c1de9a3",
          "status": "Created",
          "code": 201,
          "responseTime": 1730,
          "responseSize": 651
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "4344881f-7c1e-4f31-afed-ade99593974f",
        "cursor": {
          "ref": "72d098f9-ea1e-4716-b29d-e3c612f6a2b5",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "00c2b718-aba5-41ff-9634-41cd4506194e"
        },
        "item": {
          "id": "4344881f-7c1e-4f31-afed-ade99593974f",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "23f8d59e-b82b-498a-897f-869d1a9ca3c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 459,
          "responseSize": 1273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "ea932ccc-23c1-4b63-a8f8-89aa201cfc79",
        "cursor": {
          "ref": "b3f6082d-3e30-4e62-a228-63f1688188a1",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "f79a37c6-4821-4a5b-854a-decce3393f91"
        },
        "item": {
          "id": "ea932ccc-23c1-4b63-a8f8-89aa201cfc79",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "096204c6-9367-45b9-a375-82dafc38802d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 472,
          "responseSize": 1259
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "6345eb7b-0498-4ebe-9c20-6e2e396206e8",
        "cursor": {
          "ref": "f32c24a2-6dbe-4196-ac90-4ce9b8a08682",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "db38958a-5900-414b-9da4-678d40b1de8a"
        },
        "item": {
          "id": "6345eb7b-0498-4ebe-9c20-6e2e396206e8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "391afbab-26d0-4f67-92b5-1295e39a3593",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 418,
          "responseSize": 1256
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "de42e5af-6f5c-4071-a20d-083436d3949f",
        "cursor": {
          "ref": "3cae2f41-e27b-4a85-9303-5249c121d957",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "84793999-4e42-4169-888d-e5d333f03275"
        },
        "item": {
          "id": "de42e5af-6f5c-4071-a20d-083436d3949f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "2f3970ab-e824-4d2f-baaf-6aaacd591e19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 461,
          "responseSize": 1258
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "ecfcf202-266a-4b02-8e91-5827db2ba77b",
        "cursor": {
          "ref": "0a3fea3b-215c-42c2-812e-c8cf10be34a8",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "dd0127f6-4ab5-413a-add0-49c53bbd1a28"
        },
        "item": {
          "id": "ecfcf202-266a-4b02-8e91-5827db2ba77b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "776434ed-94b5-49a2-bb4a-6488f9d98dba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 400,
          "responseSize": 1256
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "caf959db-6477-432f-becd-6a3d0bbd92e6",
        "cursor": {
          "ref": "2644f50d-dc2a-483d-bf10-e909e04a805e",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "620d59fe-c414-40f7-86ea-b822c98d52f1"
        },
        "item": {
          "id": "caf959db-6477-432f-becd-6a3d0bbd92e6",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "bcf1e722-686e-4264-80c5-ec5303797e4f",
          "status": "Created",
          "code": 201,
          "responseTime": 1580,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "bf48407c-2c69-4680-aa21-a679fc6adff0",
        "cursor": {
          "ref": "54ec5f10-30ba-4b92-9fe8-e617055625d9",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "d7dd95ef-b065-48d7-b857-1b8adb881d0a"
        },
        "item": {
          "id": "bf48407c-2c69-4680-aa21-a679fc6adff0",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "64b43957-213e-4c6e-94c7-29c32b5514f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 428,
          "responseSize": 460
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "caf066c2-9a6f-472a-9a4b-4a3660b2edbd",
        "cursor": {
          "ref": "68919387-b23e-4599-bc5f-d92a23b3ae84",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "48bd9389-acdf-4c3e-b2c2-55382276abe5"
        },
        "item": {
          "id": "caf066c2-9a6f-472a-9a4b-4a3660b2edbd",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "628a9a4e-00ce-4d03-9523-404103239102",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 448,
          "responseSize": 463
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "bb527d6f-8c88-4426-8e6b-b765e7d37b24",
        "cursor": {
          "ref": "b9197f45-8c66-4bcd-a0e7-68a9524cd007",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "28a0dbcd-a804-42d4-9224-9bd2a143135f"
        },
        "item": {
          "id": "bb527d6f-8c88-4426-8e6b-b765e7d37b24",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "fc098339-8a7d-4038-9042-32b9fdedcda1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 455,
          "responseSize": 460
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "83c3e0e2-1c69-4468-a397-df699f6c2ac9",
        "cursor": {
          "ref": "47483e95-c528-48e0-b91e-4e903972ed8e",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "b68ffaa0-9d0e-45b9-ab88-abc3ec39f3ec"
        },
        "item": {
          "id": "83c3e0e2-1c69-4468-a397-df699f6c2ac9",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "17f250d4-5cca-4672-80fc-10e9cc48804b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 509,
          "responseSize": 462
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "ebee46e2-8484-43c1-9b15-dd7e1f559ccf",
        "cursor": {
          "ref": "c50daf3e-c7df-45e7-adfa-3067ac9d46ce",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "8f009523-8f52-45c1-a2ba-f11cc02d0314"
        },
        "item": {
          "id": "ebee46e2-8484-43c1-9b15-dd7e1f559ccf",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "9197554e-3cfe-4072-9a6c-777172dbe598",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 595,
          "responseSize": 460
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "4c010d73-b3dc-44dc-97b5-6066fc5eb656",
        "cursor": {
          "ref": "72bfe33f-0af4-48bd-81a1-b488708a26ed",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "3e8995bb-0985-4987-87e5-b64f98e745bd"
        },
        "item": {
          "id": "4c010d73-b3dc-44dc-97b5-6066fc5eb656",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "ca40f68c-1c6d-4a2a-9c2b-ba1ac32d86c7",
          "status": "Created",
          "code": 201,
          "responseTime": 1636,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "1b16274f-ccca-4c25-a70b-4cfcc729ff8a",
        "cursor": {
          "ref": "77237392-7644-4bdf-8200-93bc6a642614",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "dd5bfd4c-cb7f-4690-aa0b-6f1a1e7d63c7"
        },
        "item": {
          "id": "1b16274f-ccca-4c25-a70b-4cfcc729ff8a",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "82897956-d793-4e58-9636-afb2717951eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 441,
          "responseSize": 512
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "d85aa2e4-af42-4699-a420-46b093622d66",
        "cursor": {
          "ref": "a86313c6-2d3b-4351-bfc6-bdbb40b0eefc",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "250a5816-e674-4dc4-a324-3e1a851b5d8e"
        },
        "item": {
          "id": "d85aa2e4-af42-4699-a420-46b093622d66",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "763f7efe-9757-458b-a0db-fd12f9cd65ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 435,
          "responseSize": 493
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "7ac1d989-b40d-42a8-acbe-4947f81ed391",
        "cursor": {
          "ref": "fb50d527-7d4c-4477-814f-16b953e48493",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "54b282ce-d06c-4a66-9b52-062a62b1647d"
        },
        "item": {
          "id": "7ac1d989-b40d-42a8-acbe-4947f81ed391",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "8bfee71e-0e4d-41bc-9d5f-98d96bf6b218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 469,
          "responseSize": 490
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "0c002969-696a-4fd7-a853-d721fdee180c",
        "cursor": {
          "ref": "6dfb427b-5136-41e4-a5be-64c19256d4da",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "9893f3b6-1f9f-48dd-b7e4-2b7e40f41757"
        },
        "item": {
          "id": "0c002969-696a-4fd7-a853-d721fdee180c",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "17ee03cb-9f12-40ee-ae79-d744ef5c724d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 459,
          "responseSize": 492
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "726bd348-af51-4f15-8c34-73cd0bdff52f",
        "cursor": {
          "ref": "b3f33bef-354d-466b-acd5-0e1c3b7e631e",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "cb978516-e5cc-42c9-a83d-cf3f61844dce"
        },
        "item": {
          "id": "726bd348-af51-4f15-8c34-73cd0bdff52f",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "b084175d-388d-4c6d-8e6c-0203d4525073",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 425,
          "responseSize": 490
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "510028ba-7f2e-4ab2-8c70-3a8d385f3c82",
        "cursor": {
          "ref": "aa661764-26c0-41e9-b377-90a1e22a6dbd",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "0e783be5-4d4f-465d-84f4-cb9a30b3adbc"
        },
        "item": {
          "id": "510028ba-7f2e-4ab2-8c70-3a8d385f3c82",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "2067b91b-e63a-40c5-80d5-8b994e4ea8e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 543,
          "responseSize": 588
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "671ea801-da4f-4919-9a0d-58c7fedad8fd",
        "cursor": {
          "ref": "9a25f790-557a-4233-bf7e-aae7d177c98d",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "e002de07-a5cb-476c-b2dd-882841569500"
        },
        "item": {
          "id": "671ea801-da4f-4919-9a0d-58c7fedad8fd",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "532fca04-dc46-439f-8d67-e2b42f5fdb5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 539,
          "responseSize": 551
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "85251b0d-5a60-49fa-870f-d61b645345e3",
        "cursor": {
          "ref": "e381b3c5-6add-4a64-b5c4-b2df4f42f90b",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "768ec2d1-fbe2-41de-86f4-a0779a9204e4"
        },
        "item": {
          "id": "85251b0d-5a60-49fa-870f-d61b645345e3",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "53654c7d-c063-4711-af74-a16108413f0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 439,
          "responseSize": 532
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "09a03d07-d53c-4455-a230-dcdcbcca6009",
        "cursor": {
          "ref": "71ce1f9a-b3ea-4a65-9ac2-ecd9bf186f8e",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "996ce0be-0dd6-4cd5-a05a-7ccccc294978"
        },
        "item": {
          "id": "09a03d07-d53c-4455-a230-dcdcbcca6009",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "76bc8448-5a2b-4fab-be3a-fdd48d30ab6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 452,
          "responseSize": 529
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "3969abb8-685f-4e9c-b3b9-033d630779c6",
        "cursor": {
          "ref": "f84bd5bd-8c08-4a9e-9d06-026ac2953130",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "9c9a86fe-bc78-42db-bf81-5832cd16c771"
        },
        "item": {
          "id": "3969abb8-685f-4e9c-b3b9-033d630779c6",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "69afbdb1-468c-4985-ab77-8881ff750523",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 518,
          "responseSize": 531
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "ad7b79de-8d84-4661-91b3-1d89729306ad",
        "cursor": {
          "ref": "65d16ba3-d2c2-4409-b1eb-0550fa8d311c",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "5d8923b9-0af1-4750-847c-01332f2c570d"
        },
        "item": {
          "id": "ad7b79de-8d84-4661-91b3-1d89729306ad",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "241a3526-b4ad-4a97-b618-49d043dda162",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 591,
          "responseSize": 529
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "32e5161d-5712-4929-8458-f997119e14e2",
        "cursor": {
          "ref": "591f987f-a0f1-4374-9e03-9eee22eba8a8",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "69619bd1-faee-44e7-999b-96c9421f6a80"
        },
        "item": {
          "id": "32e5161d-5712-4929-8458-f997119e14e2",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "e5f85e4d-8b4b-41ba-bcfb-3b4913a28301",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1195,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "28ea1bdf-487c-4592-bd41-d797de3b293a",
        "cursor": {
          "ref": "eb67b1d1-9bdf-4315-ac0d-d610774147c7",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "bbe04e4d-a0c5-4b4d-9096-96a168fcd067"
        },
        "item": {
          "id": "28ea1bdf-487c-4592-bd41-d797de3b293a",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "9808da5a-3110-429b-9c37-33ac36d5c1db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 464,
          "responseSize": 582
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "a389991d-57e9-437a-8130-13f00477b500",
        "cursor": {
          "ref": "4ea4a999-c031-4dac-a833-d1de4881278c",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "97ffda7b-3d59-411a-9ce9-2c4048b72bca"
        },
        "item": {
          "id": "a389991d-57e9-437a-8130-13f00477b500",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "c779dd46-6346-4389-862d-b8b067713653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 433,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "256fbc18-9ecd-400e-b24c-3e6c98e4c17f",
        "cursor": {
          "ref": "90045c6b-31d6-4bbf-bcd9-2f18edf02dfd",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "22518768-6fc6-4535-be0c-bce5754fef79"
        },
        "item": {
          "id": "256fbc18-9ecd-400e-b24c-3e6c98e4c17f",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "c0d86a40-dc74-4083-a710-07dce730c000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 442,
          "responseSize": 556
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "e25c98d2-6567-425c-be2e-5827fe0b70ff",
        "cursor": {
          "ref": "dcce76c2-d9b5-4362-9949-1edcf0be3058",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "c90443cb-486a-4110-bf16-b23eeaabd5e4"
        },
        "item": {
          "id": "e25c98d2-6567-425c-be2e-5827fe0b70ff",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "a763e35a-f3ec-467d-a657-5695c49b4d03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 422,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "898842f8-3729-4eaf-b457-8599bd19aa48",
        "cursor": {
          "ref": "ff1a6962-f1ae-4360-aaec-ed65f867ca5c",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "060829c8-889f-4bec-828a-f0099cdc364f"
        },
        "item": {
          "id": "898842f8-3729-4eaf-b457-8599bd19aa48",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "1f3498fb-133a-4bc0-a098-28724a2f6707",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 429,
          "responseSize": 580
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "19f9a9ef-805b-49e7-bf91-5bf3f0c26ae6",
        "cursor": {
          "ref": "e3fa01bb-61f9-4830-859b-2f762f0a8b7c",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "51037641-eeec-4f7e-915b-7467d5e47111"
        },
        "item": {
          "id": "19f9a9ef-805b-49e7-bf91-5bf3f0c26ae6",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "0254f639-7fec-41fc-90bd-f167ccb93b91",
          "status": "Created",
          "code": 201,
          "responseTime": 1972,
          "responseSize": 975
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "f0f300f9-2d44-4e82-bf61-51609bb4e5c4",
        "cursor": {
          "ref": "d79ecf4f-8b00-42b9-86a6-40d95f66e977",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "5cce41d6-7b75-4cab-9ee8-5badb8516dba"
        },
        "item": {
          "id": "f0f300f9-2d44-4e82-bf61-51609bb4e5c4",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "b13ad1b2-a0c9-471b-b123-f0c14b969f09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 434,
          "responseSize": 612
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "4b9c21a3-04f7-401f-906e-fd3df922e2b8",
        "cursor": {
          "ref": "94f3740b-1005-488d-842e-b0385f22d6d1",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "ba9abebd-2008-4438-9e9a-861b945db6d6"
        },
        "item": {
          "id": "4b9c21a3-04f7-401f-906e-fd3df922e2b8",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "a9f5b292-305b-4c0d-bb2a-66be2b3aaaae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 462,
          "responseSize": 589
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "1437054a-6137-4d9d-aa7f-5aa13646bb70",
        "cursor": {
          "ref": "443a22c0-67c7-4767-b68b-9b800ba74021",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "8f1c6a49-bd19-418f-af09-c2d53e633aa7"
        },
        "item": {
          "id": "1437054a-6137-4d9d-aa7f-5aa13646bb70",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "751ed717-f137-461c-9e4a-8c6b6ec8d271",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 521,
          "responseSize": 586
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "21e7e8a0-ea61-4f4a-8cc6-8cd24ca9f66f",
        "cursor": {
          "ref": "c65db51a-660a-4ebe-82c3-ce890ee12861",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "875854a1-4fb2-4425-9bf4-d2b6d121df31"
        },
        "item": {
          "id": "21e7e8a0-ea61-4f4a-8cc6-8cd24ca9f66f",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "fae97d23-cbf1-4cf1-acc6-eaa5c76afe77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 434,
          "responseSize": 588
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "5a00dc00-2efa-43ac-8781-3b31f908eed5",
        "cursor": {
          "ref": "450acbcb-bbcd-435e-87de-2c9d095b8104",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "e9c9778e-0c5e-4d0c-aac1-e1b9195416be"
        },
        "item": {
          "id": "5a00dc00-2efa-43ac-8781-3b31f908eed5",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "9fc5becc-bb64-45fb-a46f-fe63f3115ef0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 468,
          "responseSize": 586
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "f0ad129f-d9dd-4d55-8890-7e8b509d8ff6",
        "cursor": {
          "ref": "fe1874d0-d813-4eab-8d28-5b615ce1fa8a",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "1d7650c4-3550-4722-bb60-c6c5c130623b"
        },
        "item": {
          "id": "f0ad129f-d9dd-4d55-8890-7e8b509d8ff6",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "67f4bd4c-5322-4114-aa0c-6cd38e622307",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 420,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "f1b5cbb8-7246-4d34-b594-1bd16fbcd87d",
        "cursor": {
          "ref": "bb29fa5c-3131-45f9-8918-e26cedf0d244",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "27750345-ba7f-43db-b6ff-5e044cade748"
        },
        "item": {
          "id": "f1b5cbb8-7246-4d34-b594-1bd16fbcd87d",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "38714812-6c68-4a95-9533-00e3bb413b43",
          "status": "Not Found",
          "code": 404,
          "responseTime": 43,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "6cbaf791-5135-489c-9c35-c45f60c54ac0",
        "cursor": {
          "ref": "ed69adc0-5a05-42ca-8991-e6fdc76181e4",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "37d5207e-a4e2-4d43-922e-387bf75dc4c6"
        },
        "item": {
          "id": "6cbaf791-5135-489c-9c35-c45f60c54ac0",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "9807662c-6830-417f-837e-9d64d84d6c6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 510,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "1e16876b-eadc-4912-ab17-53b1f8ca298a",
        "cursor": {
          "ref": "b7a58126-8b3a-4407-9f50-6f778c32289a",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c05f41a4-7203-4341-b9cf-52fd076dd03c"
        },
        "item": {
          "id": "1e16876b-eadc-4912-ab17-53b1f8ca298a",
          "name": "credentials_issue"
        },
        "response": {
          "id": "7bd7738b-79a7-4cd3-88f6-a9b3ed5d01f8",
          "status": "Created",
          "code": 201,
          "responseTime": 1707,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "774b4a7f-be24-4c37-9c35-4687cb654c89",
        "cursor": {
          "ref": "ab2b65da-abb0-4eba-a2d7-791e8b43e154",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "de04f868-ec3e-4756-bc3a-c0f41bd48355"
        },
        "item": {
          "id": "774b4a7f-be24-4c37-9c35-4687cb654c89",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "35938c9c-c168-46d2-912a-a97fe681678f",
          "status": "Created",
          "code": 201,
          "responseTime": 1684,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1b1092b-518f-4039-91ae-30bde513d357",
        "cursor": {
          "ref": "cc55920e-313d-4c35-8d2a-2fdab10cd322",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "70721b8b-9d36-4d3a-89ae-00ed7aac231f"
        },
        "item": {
          "id": "b1b1092b-518f-4039-91ae-30bde513d357",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "f9936f20-7e8f-4d92-ad77-f10b66e0ac51",
          "status": "Created",
          "code": 201,
          "responseTime": 1571,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9f1db2d-3f9c-42ac-b419-efdb9f27e9a2",
        "cursor": {
          "ref": "c397d0e5-757d-465b-8c06-3b03bdc87160",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e95be8d8-267a-479e-b91b-ce14bd5d96ef"
        },
        "item": {
          "id": "f9f1db2d-3f9c-42ac-b419-efdb9f27e9a2",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "53b83164-22ee-4c8c-8026-04594398e95c",
          "status": "Created",
          "code": 201,
          "responseTime": 1521,
          "responseSize": 658
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d14b9fb1-fd72-4806-a625-ad01a228257a",
        "cursor": {
          "ref": "daf6b87b-fd19-4471-9c66-87eae2705ede",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "210b229b-854d-47f4-b261-90e72f7fa888"
        },
        "item": {
          "id": "d14b9fb1-fd72-4806-a625-ad01a228257a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "6583f3e6-ccf0-4d99-9a4b-fb98d5dedf23",
          "status": "Created",
          "code": 201,
          "responseTime": 1543,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "30e0fa44-0c19-4c53-b3fe-8936b65af443",
        "cursor": {
          "ref": "caf77183-911a-4293-b89c-3bcf4777ddc6",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "a775e229-0cf3-47a3-9f89-a40b448da68a"
        },
        "item": {
          "id": "30e0fa44-0c19-4c53-b3fe-8936b65af443",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "ef2410c0-4ba0-49cc-bfac-f8eb7f3e1b7c",
          "status": "Created",
          "code": 201,
          "responseTime": 3459,
          "responseSize": 975
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f07592f2-ccb6-4873-b4ee-4c16052df943",
        "cursor": {
          "ref": "fa2a94e7-35a2-4e2f-9e5e-f0a16daddfdb",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c55a7e2f-2702-4963-82d6-43f9330d3c4b"
        },
        "item": {
          "id": "f07592f2-ccb6-4873-b4ee-4c16052df943",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d26adf31-3d3b-4129-abc3-43563255a8ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 937,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "f07592f2-ccb6-4873-b4ee-4c16052df943",
        "cursor": {
          "ref": "fa2a94e7-35a2-4e2f-9e5e-f0a16daddfdb",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c55a7e2f-2702-4963-82d6-43f9330d3c4b"
        },
        "item": {
          "id": "f07592f2-ccb6-4873-b4ee-4c16052df943",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d26adf31-3d3b-4129-abc3-43563255a8ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 937,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "10f035b4-3f61-4d2f-bd86-5b00fce7f8c9",
        "cursor": {
          "ref": "75304bb9-12f0-4d2c-92f7-1a6fb35dc304",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "875c017c-f0ed-42da-a894-8bafa7549037"
        },
        "item": {
          "id": "10f035b4-3f61-4d2f-bd86-5b00fce7f8c9",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "822f0a04-04e6-41ba-8e90-6261130e3188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 860,
          "responseSize": 327
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "58467a6f-7b73-4f7e-910c-8391697b7152",
        "cursor": {
          "ref": "171eb71e-6a13-4744-bb75-0817ae899437",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "dc8acd03-b4fd-47f9-931f-b000b4c54638"
        },
        "item": {
          "id": "58467a6f-7b73-4f7e-910c-8391697b7152",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "7f53e33a-7f56-417f-94ec-00e5e95afa1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 957,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "4c8e39a3-6f6c-4b97-bde2-3f9dca21f675",
        "cursor": {
          "ref": "708e0f1c-8efa-4b0f-9e43-c86a575bac0c",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "dd354db3-1b9c-4cc0-9a74-f44a0bbf2b89"
        },
        "item": {
          "id": "4c8e39a3-6f6c-4b97-bde2-3f9dca21f675",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "cd7e2c5f-cb32-48a8-94a2-e47b7561a3bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 712,
          "responseSize": 280
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "881a46a9-b969-4c78-aa9c-fe716052c0a3",
        "cursor": {
          "ref": "4a6a6cd1-3866-48b9-877e-7b7b66c8bba3",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "1dc4f952-17c0-42d1-b9a9-be1d8bdf2c4b"
        },
        "item": {
          "id": "881a46a9-b969-4c78-aa9c-fe716052c0a3",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "f1460b80-4e44-4c76-a70d-d09c5cfb5b6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 528,
          "responseSize": 282
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "70817657-f90d-4fb8-9f47-243ff6a1b7d4",
        "cursor": {
          "ref": "28bc6c3e-1de4-4f60-b3f9-8c2d899ebe0b",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "8b2673be-672f-41b9-9e8b-f2e52f6311b6"
        },
        "item": {
          "id": "70817657-f90d-4fb8-9f47-243ff6a1b7d4",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "094242de-b8b4-44fa-9cf3-4abae7a5476d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 458,
          "responseSize": 280
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "add0b224-ebe7-40ca-96f7-f81a7b25ab83",
        "cursor": {
          "ref": "60466097-ad31-4885-94a4-98ceb1b927ea",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "22baf0ef-9a37-4989-add4-9a6ab7654c4b"
        },
        "item": {
          "id": "add0b224-ebe7-40ca-96f7-f81a7b25ab83",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "777b927d-50c2-4fbb-8e37-65986d74958d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 526,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "39c5ebc0-e445-4a09-b43c-62806d37c028",
        "cursor": {
          "ref": "4c46e2b8-4530-4be3-877b-1d6e84c6cca4",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "5aed6987-7d4d-4fdb-8e84-eb7345cca98e"
        },
        "item": {
          "id": "39c5ebc0-e445-4a09-b43c-62806d37c028",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "857c4dd1-f0e2-488a-ae70-a3628f2efcae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 431,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "3b3b8b30-de11-47f7-8605-0b9a9f00cb0a",
        "cursor": {
          "ref": "b6b99b60-356d-4c17-a437-f0f3d0162ba3",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "906ba17e-bbcd-46d9-a53b-c012d3637608"
        },
        "item": {
          "id": "3b3b8b30-de11-47f7-8605-0b9a9f00cb0a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "266923ac-c520-4f18-8a72-7f5e99a8edd2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 438,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "5e48354f-4416-4e56-ae8f-33696d65ff78",
        "cursor": {
          "ref": "77e830fe-7bcf-4899-8cad-afc74cd3f9dd",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "63d6d3cd-5e13-4642-9c46-505629496a16"
        },
        "item": {
          "id": "5e48354f-4416-4e56-ae8f-33696d65ff78",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c917a51c-62e8-4d21-96ea-83d38b910935",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 422,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "c8af90bf-94eb-4949-a21b-b41173db88fb",
        "cursor": {
          "ref": "9e16ea6d-b94c-4aaa-b109-199d3d2b8575",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "43cf9a19-f698-48e2-b8e4-848f0c20b413"
        },
        "item": {
          "id": "c8af90bf-94eb-4949-a21b-b41173db88fb",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "34e2962c-1816-47d8-8511-dac25d4d79bc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 458,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "8f104e13-21ff-4b0c-8e56-d9ca68652cf8",
        "cursor": {
          "ref": "4bd86500-a88e-425b-9ea2-163acbf35533",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "7ae7e57f-af9c-40e0-9af2-755818e1556f"
        },
        "item": {
          "id": "8f104e13-21ff-4b0c-8e56-d9ca68652cf8",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b13e7ffc-0f53-484e-81a3-ad37cd8c2d66",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 450,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "7dd14203-82d2-4b61-81e0-71437cca01b4",
        "cursor": {
          "ref": "f865ec77-c5a8-4b85-b368-cabbce3c63a8",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "9b6a9550-9c49-497d-ac10-8acf2eab4e2d"
        },
        "item": {
          "id": "7dd14203-82d2-4b61-81e0-71437cca01b4",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c15ac599-3fa5-4c52-be40-3aecd08a30e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 439,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "e95d5f87-4720-4281-8c48-d0c09836c928",
        "cursor": {
          "ref": "50e904ed-bcca-4c66-aabf-8ddd0b623422",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "0efd8c03-a9ea-47c2-b728-808f271438da"
        },
        "item": {
          "id": "e95d5f87-4720-4281-8c48-d0c09836c928",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f9850d76-0ee5-4489-8f24-8d9f9c0f24f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 483,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "3758eb18-6755-4046-b1fc-4cd2968dd478",
        "cursor": {
          "ref": "7861e4c3-67fa-45bc-ae4e-8e30a4266895",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "e2f7e4aa-900e-4b9d-8a1c-932d70a9a4b7"
        },
        "item": {
          "id": "3758eb18-6755-4046-b1fc-4cd2968dd478",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "710fe919-025a-4971-b7b0-efd3109f4c58",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 448,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "73627ba9-33a1-4389-bb39-d77f24b68b23",
        "cursor": {
          "ref": "8dd38356-3b0c-436f-a90b-8589b3144b9e",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "715a26ac-daab-4276-9d2e-5d2914d788f5"
        },
        "item": {
          "id": "73627ba9-33a1-4389-bb39-d77f24b68b23",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "9688a8c4-60a1-4b57-a0fb-37b3c7ed76a9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 479,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "62c2e8db-4849-4d39-850a-b429757b1e07",
        "cursor": {
          "ref": "1c87a4ab-8405-4dca-b365-a1f4799d6b5e",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "43a89239-6a8e-449a-847f-e0729e1a964d"
        },
        "item": {
          "id": "62c2e8db-4849-4d39-850a-b429757b1e07",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ea0bf84a-7cdf-420d-88d4-c4e203fcf5d7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 445,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "a45da86e-c55c-408b-a876-1c5b8dd8f6a4",
        "cursor": {
          "ref": "f69d338e-2788-4451-a6d4-663f5f422d7b",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "d0af1b85-f193-4c5b-be0f-6f8d5d43be5d"
        },
        "item": {
          "id": "a45da86e-c55c-408b-a876-1c5b8dd8f6a4",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d8d7bcfe-a149-4954-95b6-5fbc562e369e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 431,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "ff29363e-4653-4cdb-ac1e-2d7fb3e5647c",
        "cursor": {
          "ref": "9ae9ae79-5fa2-4f46-aa40-4ec8bca8f827",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "64931c2e-3444-4c72-ac8c-4f68682ae549"
        },
        "item": {
          "id": "ff29363e-4653-4cdb-ac1e-2d7fb3e5647c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "166202ae-5d40-43c2-9376-5b5a39a5b061",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 429,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "91ee0dbe-0aee-4943-8294-90a2d14f4d00",
        "cursor": {
          "ref": "bb8ba4a8-a934-47d3-939a-286fb12b8791",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "f497f9ff-e0c7-44a8-9b71-951e90b62232"
        },
        "item": {
          "id": "91ee0dbe-0aee-4943-8294-90a2d14f4d00",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "ad54c466-0943-4987-9865-5870ec2d150c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 446,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "756f50e8-cf6c-4eac-8de1-40951136e44d",
        "cursor": {
          "ref": "23a77467-dcd5-4214-8237-c3fa7408cd5f",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "9827edac-73c1-4c5b-a2c7-af0fb58b09c7"
        },
        "item": {
          "id": "756f50e8-cf6c-4eac-8de1-40951136e44d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "19455f87-bab0-4417-b6e1-99922cac14f5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 433,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "0ad9d366-0eae-4994-b790-1adcb65c9070",
        "cursor": {
          "ref": "21b1ec7a-4678-4d7a-a4a0-19832bcc2c9f",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "26f51dd4-16be-4774-9602-eefe444d3782"
        },
        "item": {
          "id": "0ad9d366-0eae-4994-b790-1adcb65c9070",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "85f99287-6d66-4290-a953-505ff90e43d5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 456,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "93abc0eb-cbc4-4b4c-b7d5-b4f845078a57",
        "cursor": {
          "ref": "e5d2e9ea-e188-4e14-9c6e-54b435deea6e",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "c42e626f-03b3-43c9-82b2-0f2048454735"
        },
        "item": {
          "id": "93abc0eb-cbc4-4b4c-b7d5-b4f845078a57",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c48d5a69-7064-4e3f-bbe6-562db87e2626",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 449,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "55d770ee-5e9b-444a-9301-1fda765d1fb6",
        "cursor": {
          "ref": "e1bf552a-e0a7-417b-b3b7-244203202fc3",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "77f938ec-1bda-498b-8784-fe2f0bde5c30"
        },
        "item": {
          "id": "55d770ee-5e9b-444a-9301-1fda765d1fb6",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "0f749911-bca6-47f1-946e-3435b7b375fc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 448,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "b2a58991-4ec5-4070-a2ca-0e24a57a9f6b",
        "cursor": {
          "ref": "90670ac6-5339-49e0-bb66-4b24a4d0f36a",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "b4a4408c-8b02-4035-91f1-5f326fc8ab05"
        },
        "item": {
          "id": "b2a58991-4ec5-4070-a2ca-0e24a57a9f6b",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "2b331d89-0586-4767-a127-e12b5c9cdddf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 456,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "68078e1e-86bd-4542-942d-bf1c8da784fc",
        "cursor": {
          "ref": "8b99c44a-d9cb-44a7-a405-1292e3cdc635",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "2a9f8d67-4585-47b3-8528-01318c3ff4dc"
        },
        "item": {
          "id": "68078e1e-86bd-4542-942d-bf1c8da784fc",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "916fd5fd-df21-4484-8c71-a64b8c75bcce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 453,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "010e9bee-f3cb-4377-a101-71aee4078479",
        "cursor": {
          "ref": "6aa989ef-023c-4053-b05d-d5af311725a6",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "5764e444-9985-482b-adcf-8fd9a33c5996"
        },
        "item": {
          "id": "010e9bee-f3cb-4377-a101-71aee4078479",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ba74f642-51fd-4dc8-8524-4adea44197c7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 453,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "86e61d10-d6f9-4f01-8c0a-ce3406ec2357",
        "cursor": {
          "ref": "187abc99-1c6b-402f-9ac8-45037f651b07",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "51b4d5e3-c80e-4846-b1ad-f74fcdc982ac"
        },
        "item": {
          "id": "86e61d10-d6f9-4f01-8c0a-ce3406ec2357",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ccce6b5f-23e1-4f2f-9509-e1233109d281",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 466,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "e110afca-fddf-4d83-8a66-a159bf0bfdb2",
        "cursor": {
          "ref": "5a5b4f4b-e731-4a78-9949-9609a30e00b2",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "34200956-76df-4b82-aa18-008c48ebe2a2"
        },
        "item": {
          "id": "e110afca-fddf-4d83-8a66-a159bf0bfdb2",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b31d17d1-6a59-4c63-a81a-06b21e128f7d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 436,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "6b60ae47-67fe-4e4d-9668-6db65a2a0c1f",
        "cursor": {
          "ref": "e3498ff5-445c-4440-8727-74300bb863af",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "2000e631-b438-4c05-bcd3-94420b4ad363"
        },
        "item": {
          "id": "6b60ae47-67fe-4e4d-9668-6db65a2a0c1f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "64ca05e0-ae91-4785-b49d-0d26b3580e5f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 431,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "15fb2979-e8ef-44a5-8101-629d7261b52c",
        "cursor": {
          "ref": "3a4bfe23-2aee-46f5-94e6-32e10623792d",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "acac8caf-8d2f-4af6-9fb5-3611eef5face"
        },
        "item": {
          "id": "15fb2979-e8ef-44a5-8101-629d7261b52c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b3a18c25-cd38-44d8-98e2-908f7f989ab9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 469,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "80b61cfb-fe97-46fc-977e-df511dda4783",
        "cursor": {
          "ref": "ab662e73-7eb6-4752-99f4-9cbef05e0938",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "505ea7bb-4869-497c-9c39-da9c875f3837"
        },
        "item": {
          "id": "80b61cfb-fe97-46fc-977e-df511dda4783",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "5e6ef85c-f16e-47a0-95b0-de2a93ba7902",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 488,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "10cec30b-7922-464a-89c4-1d8c574a17d3",
        "cursor": {
          "ref": "4e49094c-4aac-451e-82aa-4b3f31bc81e3",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "9fec741b-d49d-4eff-bd30-80836189cf19"
        },
        "item": {
          "id": "10cec30b-7922-464a-89c4-1d8c574a17d3",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "13e72b43-5505-4c7d-add9-4f3f1e6b60fc",
          "status": "Not Found",
          "code": 404,
          "responseTime": 44,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "fd6cc67e-6495-4ad7-b56f-641177fc4e1b",
        "cursor": {
          "ref": "94bbdf12-2c8e-45a0-9162-4e8736ad7a83",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "9ad6c468-011a-4518-84f8-55869f9403f2"
        },
        "item": {
          "id": "fd6cc67e-6495-4ad7-b56f-641177fc4e1b",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "0b144618-12ad-4d43-a103-dc66df3e0cce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 440,
          "responseSize": 206
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "c1c27686-4366-4df9-ab8f-4593a9658055",
        "cursor": {
          "ref": "e20fb8c2-8fb8-49f2-92d8-6454dcd7b9ad",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "35f94955-a6c9-446a-897b-aa50104e619a"
        },
        "item": {
          "id": "c1c27686-4366-4df9-ab8f-4593a9658055",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "7bcd247d-b087-430e-be53-39a54cda54e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "c1c27686-4366-4df9-ab8f-4593a9658055",
        "cursor": {
          "ref": "e20fb8c2-8fb8-49f2-92d8-6454dcd7b9ad",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "35f94955-a6c9-446a-897b-aa50104e619a"
        },
        "item": {
          "id": "c1c27686-4366-4df9-ab8f-4593a9658055",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "7bcd247d-b087-430e-be53-39a54cda54e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "9b895cf2-571d-46c2-880c-df4a7f4524e9",
        "cursor": {
          "ref": "b0525f52-082f-4df9-ab5e-91ab2eb9af06",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "80b6b87e-552e-489b-b7ad-fdc0ec56dbde"
        },
        "item": {
          "id": "9b895cf2-571d-46c2-880c-df4a7f4524e9",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "c763c1ea-cd87-4591-bf81-dfe65a30a54b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 234,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "a4489079-0764-4959-8c39-ebb7b614e725",
        "cursor": {
          "ref": "08744015-ed64-4ed4-957b-ce65de9e7a6d",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "99a97d9c-9b40-43e8-a0ac-14a21c2e157b"
        },
        "item": {
          "id": "a4489079-0764-4959-8c39-ebb7b614e725",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "4353bbcf-d2a6-4d2f-91eb-0d85a62d619a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 227,
          "responseSize": 541
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "0752388a-a9be-4ad5-8e53-b782492a0cfe",
        "cursor": {
          "ref": "524cd638-8828-4b58-b535-95a3eadfe451",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "6dba73e5-dfde-4f26-903b-76c630f87ba5"
        },
        "item": {
          "id": "0752388a-a9be-4ad5-8e53-b782492a0cfe",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "3733c82e-d291-4c5a-88f1-f464ab4f1ba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 250,
          "responseSize": 540
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "15770f7b-b35f-46bd-9e5d-9ffffac74fac",
        "cursor": {
          "ref": "fd4b6b20-c480-4230-b645-e396c6b4dcd2",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "e721f830-0fae-46f6-83cd-3f55e3e549ef"
        },
        "item": {
          "id": "15770f7b-b35f-46bd-9e5d-9ffffac74fac",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "5f880c89-5e47-4232-88a4-5a8475dc2f87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 239,
          "responseSize": 541
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "08324885-6ecf-4f96-81bd-44f13174c796",
        "cursor": {
          "ref": "2fcb4573-0886-496b-9c86-70a0cfe4af33",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "82d34c34-a4af-433c-a4d6-7ac98876dec9"
        },
        "item": {
          "id": "08324885-6ecf-4f96-81bd-44f13174c796",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "efe7e6c9-e14f-4bdb-a2a5-7a742a3da822",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 221,
          "responseSize": 539
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "24227fe3-4561-4324-8fb8-89de314b445c",
        "cursor": {
          "ref": "f6996258-081b-4ec8-a167-c0fcffc5b5be",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "574313ee-f16a-4d86-9b5d-4e712ba27a4e"
        },
        "item": {
          "id": "24227fe3-4561-4324-8fb8-89de314b445c",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "8a4d7daa-a2b7-4e4e-8fe4-80c5944f94da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 230,
          "responseSize": 1154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "d89a1799-1ec8-4f47-960e-98a6b65ee3ba",
        "cursor": {
          "ref": "d67bffe3-4885-460d-b614-690408b07d36",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "b4966392-5ca7-485b-8923-3ed9337b6394"
        },
        "item": {
          "id": "d89a1799-1ec8-4f47-960e-98a6b65ee3ba",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "93922900-8fb3-42f3-8353-aac1b331e1cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 255,
          "responseSize": 1700
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "5e365e80-1353-4dbc-9d0e-2c8047daf325",
        "cursor": {
          "ref": "4aeb853e-396e-4614-9c69-814213ca5a07",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "83d79130-8719-4504-908e-6841c50effcc"
        },
        "item": {
          "id": "5e365e80-1353-4dbc-9d0e-2c8047daf325",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "e76db7f5-9cb4-4a66-bb1c-f5b82579754a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 219,
          "responseSize": 1699
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "2009f37f-f6ee-41ba-beae-c4b26913d5bd",
        "cursor": {
          "ref": "0d9c634d-5b92-4639-b690-704b6c8fb612",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ba937079-5609-41ac-8d9c-fa3c6f8f73f1"
        },
        "item": {
          "id": "2009f37f-f6ee-41ba-beae-c4b26913d5bd",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "01c01737-a3f5-47c3-b3e1-6fcc10b6f711",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 222,
          "responseSize": 1700
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "bff77cef-2b0d-4e57-b4fb-412e2a395e4a",
        "cursor": {
          "ref": "9726f2fb-b212-485f-b537-febb3d2a538d",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "3bd180be-dce2-48ec-9e24-9b544caedd16"
        },
        "item": {
          "id": "bff77cef-2b0d-4e57-b4fb-412e2a395e4a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "596f6d52-e361-4c00-8855-20636546e3f8",
          "status": "OK",
          "code": 200,
          "responseTime": 366,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "6a3e0f9b-c425-47b2-8df7-a02c790ea681",
        "cursor": {
          "ref": "b0ce57c7-813d-410a-9970-10de170a9e29",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "0fafa75c-6415-496c-92de-4ad9f5ae12f4"
        },
        "item": {
          "id": "6a3e0f9b-c425-47b2-8df7-a02c790ea681",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "961b14ea-3240-4194-9228-c5bf5b62aae8",
          "status": "OK",
          "code": 200,
          "responseTime": 320,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "61ec08b4-8402-4473-a928-5438c37fca47",
        "cursor": {
          "ref": "42e9d569-8587-4ee7-be75-be1d4c822521",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "9bc360f1-4fe6-4b52-a76f-03d7f8795140"
        },
        "item": {
          "id": "61ec08b4-8402-4473-a928-5438c37fca47",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "b796ecd5-eb12-4b07-a17c-9496c79dfd37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 221,
          "responseSize": 2187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "2c6825a7-9bcc-4606-a70b-c5224698c1ae",
        "cursor": {
          "ref": "3f1b6a01-9aa9-4a7a-9d41-1b3d63521313",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "6350a92b-1c11-442f-980f-eb054805b663"
        },
        "item": {
          "id": "2c6825a7-9bcc-4606-a70b-c5224698c1ae",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "760c3f0a-8576-4cfd-8095-9bec1785fdaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 222,
          "responseSize": 2177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "906abefd-0cb2-4526-8300-8dc06b1541f0",
        "cursor": {
          "ref": "97bd4952-5fd2-41fc-a387-7d4c5aa79f84",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "46ea8931-a9f1-4e70-894e-12c974a3d7c4"
        },
        "item": {
          "id": "906abefd-0cb2-4526-8300-8dc06b1541f0",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "5e45caf1-4698-4993-8e7c-b1e8ff7b8d66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 286,
          "responseSize": 2176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "5779cf70-860a-4383-a1eb-29122ff7cbfe",
        "cursor": {
          "ref": "bd41790f-fb62-4d42-97e1-8310d1513498",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "fe588322-8494-4fb2-84bb-03ad28372bf8"
        },
        "item": {
          "id": "5779cf70-860a-4383-a1eb-29122ff7cbfe",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "38bd0df0-ba04-4a26-a951-c6dc1c71a354",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 232,
          "responseSize": 2177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "3f37102b-a969-469d-8b05-2b968de9103d",
        "cursor": {
          "ref": "ad00eb0b-65de-4d42-b4a2-5461e99833c2",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "45e87249-e242-4dff-9bd2-221af8f15629"
        },
        "item": {
          "id": "3f37102b-a969-469d-8b05-2b968de9103d",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "18b0142c-d4ea-4a2b-bbeb-1f50da54b49b",
          "status": "OK",
          "code": 200,
          "responseTime": 313,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "41c5f6f6-1fb1-4949-86a5-4e50d8f9eead",
        "cursor": {
          "ref": "1e1c73c6-b856-434d-b902-653edb743164",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "737f0fdf-ee0a-4422-9f1e-09d8b6bf8290"
        },
        "item": {
          "id": "41c5f6f6-1fb1-4949-86a5-4e50d8f9eead",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "9ce0a078-dff4-41c6-b7f7-f9a0c297704b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 221,
          "responseSize": 1235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "4eb84c72-e55f-40c0-991b-c756a98426cc",
        "cursor": {
          "ref": "b29ebb7e-8c54-431b-bf97-e1c6b8ef3eaa",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "2821e7fd-c5eb-4684-a3bc-6740cd5ec504"
        },
        "item": {
          "id": "4eb84c72-e55f-40c0-991b-c756a98426cc",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "153a21d8-1902-496d-86b0-81ecf7e657c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 264,
          "responseSize": 1191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "3a54b50c-bd76-4b4e-9252-9c9a8d4c9eef",
        "cursor": {
          "ref": "9469b9c0-25b8-4ae3-b559-8b8921d7f27f",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "8eed0e02-ea19-42af-95fc-a8bb4bb40e81"
        },
        "item": {
          "id": "3a54b50c-bd76-4b4e-9252-9c9a8d4c9eef",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "22872b1c-20c0-4439-8d0f-eb74933554ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 219,
          "responseSize": 1189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "66c2b136-52c7-4acf-93b8-3995722038dc",
        "cursor": {
          "ref": "f4fed193-bbb6-4660-8dfe-5e542aaf2c2f",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "cdf87ac4-5741-4bcd-85b3-cb36db0079a6"
        },
        "item": {
          "id": "66c2b136-52c7-4acf-93b8-3995722038dc",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "7a65feb2-06e7-496c-9308-c7bfdbc0a91d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 1190
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "df15441c-7f55-4556-a2b6-69bad3d1afb6",
        "cursor": {
          "ref": "4d2aa608-397d-4a02-b0c7-9df4334546d9",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "95e5052c-d19f-42a0-aa7c-8fd7070d6ee1"
        },
        "item": {
          "id": "df15441c-7f55-4556-a2b6-69bad3d1afb6",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "fd95799e-e5d6-4847-8ae7-cd235715138d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 226,
          "responseSize": 1241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "08d18842-bdd2-40bf-a920-b7c2513d569a",
        "cursor": {
          "ref": "994fe93a-beb5-45f9-8089-a60e2753e1e9",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "280ab569-6def-4855-9b0a-67d73d47589d"
        },
        "item": {
          "id": "08d18842-bdd2-40bf-a920-b7c2513d569a",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "d2d35fa1-28f3-47ec-99e5-0b315f32d304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 224,
          "responseSize": 1168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "eaa8aabb-3a31-45eb-9195-d3e2c1c55d35",
        "cursor": {
          "ref": "d92396f8-0190-4c60-90c8-08dabb3df488",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "4487953f-9bb8-4d00-833a-2449195c3f07"
        },
        "item": {
          "id": "eaa8aabb-3a31-45eb-9195-d3e2c1c55d35",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "eeb57eb0-e529-4daa-b3f5-e98cce564c36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 1489
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "d86932e2-3f69-400a-90b2-64c4010c031a",
        "cursor": {
          "ref": "39d72c3e-c249-4dfe-bcc9-e04b1e831959",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "b9b39720-0221-4331-b1f8-7f1d2d99bd78"
        },
        "item": {
          "id": "d86932e2-3f69-400a-90b2-64c4010c031a",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "79b6f080-59c2-4a26-a04c-421c845abc4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 255,
          "responseSize": 1488
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "c91455b1-ffb0-484c-9931-92954f184e0d",
        "cursor": {
          "ref": "85cb8bc7-c014-4918-a7a4-1b5917b81010",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "60603502-c4a2-4cd5-8892-a4e33ad8d42a"
        },
        "item": {
          "id": "c91455b1-ffb0-484c-9931-92954f184e0d",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "5e025b78-9627-4d53-bacc-7d84c6a56854",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 258,
          "responseSize": 1489
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "8b54df97-945e-4e8f-adb6-3c07580699f0",
        "cursor": {
          "ref": "d99e5478-1da2-4ef0-901c-8a90c19d86ce",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "791f5387-4a9a-459e-a1d4-fb08545dee92"
        },
        "item": {
          "id": "8b54df97-945e-4e8f-adb6-3c07580699f0",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "d68b4fb6-f1b6-43bc-9f20-2196eed5c295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 255,
          "responseSize": 1515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "e5d90941-e550-4632-97a1-780829627e17",
        "cursor": {
          "ref": "46753484-ffab-4f27-acbd-0213b62e2443",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e0aea091-5068-42d4-9957-d7ea09e10bb5"
        },
        "item": {
          "id": "e5d90941-e550-4632-97a1-780829627e17",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "74d4b7a2-5324-46ba-8b93-36c1f398ac9e",
          "status": "OK",
          "code": 200,
          "responseTime": 515,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "e6952de7-dd2b-4b56-88e5-37dcc5c224f4",
        "cursor": {
          "ref": "33396c59-38be-45e2-8c61-5d0908d93cd9",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "4e3fd788-0875-46bd-8f63-9b71b0b0d66e"
        },
        "item": {
          "id": "e6952de7-dd2b-4b56-88e5-37dcc5c224f4",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "38019ab5-909b-41d1-871e-d6bc1ee4f390",
          "status": "OK",
          "code": 200,
          "responseTime": 230,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "f23c83f3-6e9a-4af5-9414-25e249b63ac9",
        "cursor": {
          "ref": "a6baa8de-0307-422a-a8a4-9bae394a5fce",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "1442f9d7-ece6-496d-ac74-2fa8565e4f45"
        },
        "item": {
          "id": "f23c83f3-6e9a-4af5-9414-25e249b63ac9",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "e772993e-df4b-4d54-9d08-e2b0e6aa451f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 278,
          "responseSize": 1534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "72137dfe-d6f6-4bcf-a604-889f85642829",
        "cursor": {
          "ref": "6610e6e0-8cac-4322-afab-21f0b7beceb7",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "f428f56d-20df-4aec-b64a-78a0f9bda820"
        },
        "item": {
          "id": "72137dfe-d6f6-4bcf-a604-889f85642829",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "6c77fbe2-d4d6-4efa-810f-c3f2f6884b81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 282,
          "responseSize": 1524
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "79c2e4ef-3c95-4e10-84be-44ee04444845",
        "cursor": {
          "ref": "ce33e765-6206-46a3-a822-6096339a2ed6",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "5a664083-6726-47e9-9a9c-dcadbf6f8d96"
        },
        "item": {
          "id": "79c2e4ef-3c95-4e10-84be-44ee04444845",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "e556a6e0-7a7f-4691-9bd4-8b8e6c80ad36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 238,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "688f7be7-b4e6-4ce3-844a-b8147111c1a2",
        "cursor": {
          "ref": "232185de-dcc7-4fd6-aceb-2e76cbc7237b",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "186cea69-d93e-41ba-a20d-d6c4a4c9b920"
        },
        "item": {
          "id": "688f7be7-b4e6-4ce3-844a-b8147111c1a2",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "eb623490-3374-4ca9-a4c8-fe18697bf7d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 295,
          "responseSize": 1524
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "03ceae7c-f2a7-40e7-af57-784b611bc02c",
        "cursor": {
          "ref": "106e6cd8-199a-4ead-95ac-a772bcecb9a7",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "d87fb5e9-5b41-4857-8089-f5b7f1285741"
        },
        "item": {
          "id": "03ceae7c-f2a7-40e7-af57-784b611bc02c",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "4f603832-1f80-4f2a-9a1b-f4a69fe9b930",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 368,
          "responseSize": 1550
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "a794535f-2753-4760-9698-8412983bca0c",
        "cursor": {
          "ref": "61490c7a-12c2-4588-8cf5-aadbddeeff75",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "eb827e7e-ab61-4531-8104-d13813505a14"
        },
        "item": {
          "id": "a794535f-2753-4760-9698-8412983bca0c",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "b3e9b297-58bd-4fc3-8a87-7dab7cbf1b5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 321,
          "responseSize": 1136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "44f1de95-62b7-44c6-9dfa-b0b86322cb9b",
        "cursor": {
          "ref": "d5ef958a-79bc-4300-b66f-52211581abf3",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "5c8ac7b0-f6cc-4907-9f90-34ecd9bde8cc"
        },
        "item": {
          "id": "44f1de95-62b7-44c6-9dfa-b0b86322cb9b",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "a0c14cfd-7bc7-497f-b29a-c7b52d2bd7e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 443,
          "responseSize": 1445
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "e1d0b8f0-a288-4060-b518-075b2034a067",
        "cursor": {
          "ref": "bf9e5e99-04b0-4846-900a-0902b9da3a40",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "a7c4e2e2-6f65-4b3c-a0a3-b7fdae013e13"
        },
        "item": {
          "id": "e1d0b8f0-a288-4060-b518-075b2034a067",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "c6a9f444-65d2-49dd-942c-f995b8f729f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 671,
          "responseSize": 1431
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "d154de46-c0ee-4acc-aa2d-b0d07190f31c",
        "cursor": {
          "ref": "d0790ea4-2c0a-44db-a9bc-f69b44b186ac",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "20986641-32c3-4760-9552-ab6da4dca4fe"
        },
        "item": {
          "id": "d154de46-c0ee-4acc-aa2d-b0d07190f31c",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "0127cdbf-8b1d-42dd-a1b6-8d338d933362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 570,
          "responseSize": 1429
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "e1d892eb-9edb-4bfd-baee-cb986faeac13",
        "cursor": {
          "ref": "eb8fb480-09a9-4550-ba83-f4b540b2929d",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "a9fb7d46-5e9f-450f-b83c-d7ee9bfe445f"
        },
        "item": {
          "id": "e1d892eb-9edb-4bfd-baee-cb986faeac13",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "56c3b66d-1155-44a8-8860-6e5496d0e403",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 517,
          "responseSize": 1430
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "11b086ce-4f13-4192-95c4-6712d33f8908",
        "cursor": {
          "ref": "7a5b81c3-d916-49be-9e3e-91126c84c6b9",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "f06b5209-f4b3-48c4-b37e-9c6850c41a1d"
        },
        "item": {
          "id": "11b086ce-4f13-4192-95c4-6712d33f8908",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "42e3a839-bec6-4120-bbb5-6c0ec03cac56",
          "status": "OK",
          "code": 200,
          "responseTime": 570,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "ff9982a6-dee5-4890-8c50-753fddb38b83",
        "cursor": {
          "ref": "2f9c47d3-caf6-449e-a0be-9eac64ebffa2",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "44b85bfa-a9ae-45a3-8587-7147730878a8"
        },
        "item": {
          "id": "ff9982a6-dee5-4890-8c50-753fddb38b83",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "162a62af-09ee-43dd-a6c0-3a953ef64dd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 570,
          "responseSize": 1470
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "cecad471-5325-4805-8062-3729cd625d7a",
        "cursor": {
          "ref": "2e74aff0-4bba-4ea8-ab20-5e857574433c",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "10722d46-a6da-406e-a1b7-e11f3aec1bc9"
        },
        "item": {
          "id": "cecad471-5325-4805-8062-3729cd625d7a",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "1b1c2c63-0f68-498b-a3ec-9f60c9fce82b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 442,
          "responseSize": 1456
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "b6358155-6565-48b3-b152-c68448e579f1",
        "cursor": {
          "ref": "cb497c74-5ff7-4739-902d-dd02c06186c1",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "db2c0e6e-776c-47ad-bf22-2cd04bcd6d27"
        },
        "item": {
          "id": "b6358155-6565-48b3-b152-c68448e579f1",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "64bd18e9-86cd-47d3-8551-407d0f4c733c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 458,
          "responseSize": 1454
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "dc3c92a8-e464-4014-8eaa-6abcb691f1d6",
        "cursor": {
          "ref": "834498ee-c4f0-41ec-bab6-c917fce291c3",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "6f681d13-6402-4358-9fbd-946086d32f97"
        },
        "item": {
          "id": "dc3c92a8-e464-4014-8eaa-6abcb691f1d6",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "a9537c24-4968-492f-80da-160f784ee304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 291,
          "responseSize": 1455
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "8191b6d5-c789-401f-a83f-735320c6b723",
        "cursor": {
          "ref": "6f3b4726-10ba-4192-8bcd-296444bab983",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "e80319a6-388d-4187-b794-a3bf9b7272ba"
        },
        "item": {
          "id": "8191b6d5-c789-401f-a83f-735320c6b723",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "261f53f3-0913-4d28-93d4-6096fb5903d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 217,
          "responseSize": 1476
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "69ada940-a754-4cfc-b037-a6da1b3ab289",
        "cursor": {
          "ref": "a4f71f0a-b37c-4ec9-8868-052479c886b9",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "962bbdd4-b7b7-47fa-8f42-8ec6cd8e6709"
        },
        "item": {
          "id": "69ada940-a754-4cfc-b037-a6da1b3ab289",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "7c3534fc-acac-4a19-be46-1b5dc204909f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 191,
          "responseSize": 1178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "99b05f7f-4ef7-4fd9-9b10-4df183897a4b",
        "cursor": {
          "ref": "d55f8f4f-295a-4912-b890-89eb3eb59116",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "8cd226ad-894a-4900-b2da-5bc66dd842d0"
        },
        "item": {
          "id": "99b05f7f-4ef7-4fd9-9b10-4df183897a4b",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "1963442f-e094-4cbc-b117-257c5dbaa47d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 197,
          "responseSize": 1202
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "5456e2d7-75bc-4950-bc19-ebd53153d3cd",
        "cursor": {
          "ref": "eaa182eb-8b78-48c5-bde3-1798558e2c07",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "db943468-a3cd-4786-9813-1f35f456b320"
        },
        "item": {
          "id": "5456e2d7-75bc-4950-bc19-ebd53153d3cd",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "da796750-d25a-4006-9612-200f2f7b21c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 263,
          "responseSize": 1183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "f7a850b7-ecc5-4484-b355-c446a236ea6e",
        "cursor": {
          "ref": "b0ffecbe-789a-4413-b677-00c267d0738e",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "4dc10ecf-748c-460c-91f9-59d621b1a979"
        },
        "item": {
          "id": "f7a850b7-ecc5-4484-b355-c446a236ea6e",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "6a7d033d-31ac-43c7-96bd-8c8d669c1284",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 221,
          "responseSize": 1181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "8734edad-833e-40ba-91f8-2d66ad6012d4",
        "cursor": {
          "ref": "bf942808-c715-4eff-8f19-d71892def750",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "218e8f52-715d-4c99-980e-37c9f761a50a"
        },
        "item": {
          "id": "8734edad-833e-40ba-91f8-2d66ad6012d4",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "81af8643-039c-4f04-848d-ef74d827912c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 202,
          "responseSize": 1182
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "bb76c94f-6167-44cf-8021-ec6303552df2",
        "cursor": {
          "ref": "487124f6-1010-442b-bb49-a03eed59aa15",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "fbfb8478-ba01-4d64-87b3-9067a703750d"
        },
        "item": {
          "id": "bb76c94f-6167-44cf-8021-ec6303552df2",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "4babd08c-e0fd-4767-a0d6-44cf9047a450",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 205,
          "responseSize": 1208
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "8823fcfb-584e-4efa-a233-7a9ec07e4bf5",
        "cursor": {
          "ref": "036de904-2d28-44fc-bf6e-be8f4e8df3cc",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "ea38bdc8-10be-4578-8801-d484d35b284a"
        },
        "item": {
          "id": "8823fcfb-584e-4efa-a233-7a9ec07e4bf5",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "970eca39-befd-4033-a19d-cab3ea3fa821",
          "status": "OK",
          "code": 200,
          "responseTime": 290,
          "responseSize": 333
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "78b5afac-69ae-46a5-98ec-7d960a856732",
        "cursor": {
          "ref": "28687c43-121c-4d14-a547-b735c2fd318a",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "58d09092-8803-45e5-a8b2-f1c8507c907f"
        },
        "item": {
          "id": "78b5afac-69ae-46a5-98ec-7d960a856732",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "90d18fad-04dc-4ab2-8423-d34c4039ab02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 211,
          "responseSize": 1181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "5079a7c4-a503-4d12-a6ea-2f3908cf1df4",
        "cursor": {
          "ref": "c9edcd80-c3b9-4d80-88f8-3838701368fc",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "e1df91f7-149e-424d-89ae-1bcc125a9790"
        },
        "item": {
          "id": "5079a7c4-a503-4d12-a6ea-2f3908cf1df4",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "56d313aa-df7c-422a-a124-03c82cf1f387",
          "status": "OK",
          "code": 200,
          "responseTime": 300,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "bad56869-4ef6-4571-a07a-acf6d2ad1334",
        "cursor": {
          "ref": "7399c21b-da1c-45c2-8c02-ec43a724c0f4",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "8a35475c-2dbf-49f7-9566-7484abb8e0d7"
        },
        "item": {
          "id": "bad56869-4ef6-4571-a07a-acf6d2ad1334",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "596a826a-fcfb-44c8-8848-45060fe25695",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 199,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "d561060b-ce6a-4bd7-8fea-c2df0531aaad",
        "cursor": {
          "ref": "0760bfb8-ef14-4dcb-942a-309f7debcb64",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "93fae520-7b9d-47cd-a915-e581fb2eb7c1"
        },
        "item": {
          "id": "d561060b-ce6a-4bd7-8fea-c2df0531aaad",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "56cbbacb-1ced-4b20-8ed4-74eb10b49f93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 214,
          "responseSize": 1654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "fa9e5a4d-5296-4fd2-a999-826974f0f129",
        "cursor": {
          "ref": "754540f2-6312-43b5-9e46-bc381439f217",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "765f4f02-367a-48c9-bc5d-6cdc62cb9bb3"
        },
        "item": {
          "id": "fa9e5a4d-5296-4fd2-a999-826974f0f129",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "718a984b-b24b-4c28-b1a3-5d4a1c9db074",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 192,
          "responseSize": 1655
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "069e967c-9b81-4224-beac-fe215212ebe0",
        "cursor": {
          "ref": "3ace1936-6598-4748-bed5-6a5ac50589d0",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "c8417435-8982-44ba-850f-d29726c37f7c"
        },
        "item": {
          "id": "069e967c-9b81-4224-beac-fe215212ebe0",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "7834c9f6-15ff-4c59-957d-7d0e4e6a84e8",
          "status": "OK",
          "code": 200,
          "responseTime": 295,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "dcf87b9f-f5f6-4478-a37d-8ac34f1b1b7b",
        "cursor": {
          "ref": "ae66a63f-10ad-493d-9383-3db6febfad31",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "679d9fcc-1fad-4677-b388-7dfefdadefe1"
        },
        "item": {
          "id": "dcf87b9f-f5f6-4478-a37d-8ac34f1b1b7b",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "94d926dc-c40d-4891-af7b-f8b807083938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 213,
          "responseSize": 2014
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "3fd6745a-526f-4e11-ae08-027e65e73c47",
        "cursor": {
          "ref": "f524f262-49b5-4509-acfa-36aaa9e011f5",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "9c9b6ece-d422-4c5f-bff1-893228f6ca85"
        },
        "item": {
          "id": "3fd6745a-526f-4e11-ae08-027e65e73c47",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "17c20e80-e815-4492-8363-93cc7ead4803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 204,
          "responseSize": 2000
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "6a74483c-73db-4f62-b670-343cf4eeca7a",
        "cursor": {
          "ref": "c715feda-6cd6-4f4f-8dcb-5f7428639651",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "4fbdf7c8-9c11-4d52-a76e-db8181414da1"
        },
        "item": {
          "id": "6a74483c-73db-4f62-b670-343cf4eeca7a",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "a6e0ea7d-4f77-44bf-b1f9-1bf6bd681543",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 199,
          "responseSize": 1998
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "7e3e465e-2173-4a98-a82c-6c310bd6712c",
        "cursor": {
          "ref": "6e9f691e-d031-4309-988a-5d2be36d7637",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "ffea9fa5-2753-4309-84cb-38c6d0b2a450"
        },
        "item": {
          "id": "7e3e465e-2173-4a98-a82c-6c310bd6712c",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "c5c08368-06ff-4648-91da-7012ef7642a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 204,
          "responseSize": 1999
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "9bccbbf5-c230-49bb-aa28-b02149ef9cca",
        "cursor": {
          "ref": "4a9c2bd2-b81d-4b8f-83c0-2eeed9b8ea57",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "2eb01d76-d102-4f2c-8b9f-8f4da4ad5936"
        },
        "item": {
          "id": "9bccbbf5-c230-49bb-aa28-b02149ef9cca",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "bdeb1168-1373-430f-9be9-1a30fc9462b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 211,
          "responseSize": 2020
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "22e41aaf-5c05-4c37-95d3-dd747d69d1d3",
        "cursor": {
          "ref": "a675f77e-8d2e-450c-9a29-5aa7f1bbc4cc",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "ad6e6970-4b78-46b9-b808-c922225152b7"
        },
        "item": {
          "id": "22e41aaf-5c05-4c37-95d3-dd747d69d1d3",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "dbc6ed02-5cf6-421b-aa48-1972ed2c1e1a",
          "status": "OK",
          "code": 200,
          "responseTime": 210,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "285521e0-190c-405a-88cc-34091992ae59",
        "cursor": {
          "ref": "77b29243-2b4e-4499-be13-23690524689c",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "bf7aba24-2b12-4eff-93d6-5142547e12b1"
        },
        "item": {
          "id": "285521e0-190c-405a-88cc-34091992ae59",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "ab6f22ba-91e1-4827-b75b-bd5362cbfb90",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 227,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "fd91c543-10d3-4978-b55c-cf9769ca23b8",
        "cursor": {
          "ref": "32773e11-f5d2-4a1f-bd19-b91f46c7f16c",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "7153950d-3e98-4e46-9897-8ebc172aa128"
        },
        "item": {
          "id": "fd91c543-10d3-4978-b55c-cf9769ca23b8",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "aa8fb8b1-857f-453e-a6b5-4bb4c2b8a563",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 213,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "3a2f93fe-9be4-46d4-bbee-51d45ac71c8c",
        "cursor": {
          "ref": "fca53afd-085c-4c86-a9b5-532136f497fe",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "09c7b688-7b64-47f0-b03c-6dad1f3a8d37"
        },
        "item": {
          "id": "3a2f93fe-9be4-46d4-bbee-51d45ac71c8c",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "8fa3148c-0b2a-4738-bdf9-0c0494676fff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 230,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "5bafcfd2-cf16-4b69-88fc-ad150dde0106",
        "cursor": {
          "ref": "1294a77f-f657-4bb2-8253-46b1f3c53881",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "5009b933-4f8e-4da7-b349-d9fb8ab89057"
        },
        "item": {
          "id": "5bafcfd2-cf16-4b69-88fc-ad150dde0106",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "e6f48be4-c719-4951-88f0-c441c143129c",
          "status": "OK",
          "code": 200,
          "responseTime": 227,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "119a8d57-26ac-45c5-bc11-db2e5a6939a9",
        "cursor": {
          "ref": "6b4e8cce-f6bb-43d6-a873-0c0d6a855863",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "9b1ec749-4679-4412-a4fc-fa10297594b0"
        },
        "item": {
          "id": "119a8d57-26ac-45c5-bc11-db2e5a6939a9",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "d3b5637a-2fe4-4344-915d-e7388fe1615d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 238,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "75b49d31-44d3-45a3-886f-e1753dec9b79",
        "cursor": {
          "ref": "0cc66bf4-bf85-48d4-9abe-73d8d3d8d849",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "73ea6745-5bd1-480b-b5d7-15eb097dbe9f"
        },
        "item": {
          "id": "75b49d31-44d3-45a3-886f-e1753dec9b79",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "5f01d6be-e9fa-4bc9-94c6-990ee690f364",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 252,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "877009b9-fa78-44e0-a001-c3683fe16792",
        "cursor": {
          "ref": "49384979-1262-4937-8b7e-35ab60ea10de",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "625c236a-57f7-4111-88cd-10e1b7b08a58"
        },
        "item": {
          "id": "877009b9-fa78-44e0-a001-c3683fe16792",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "7d34d372-e1f5-4688-af08-c9ea3274190b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 213,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "e8d29491-1b07-4e66-a85a-ed80437c6525",
        "cursor": {
          "ref": "8ebba790-cb53-48fd-836f-c205d1da8e0b",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "7e17528d-3fcf-4408-9f54-e03c3301231d"
        },
        "item": {
          "id": "e8d29491-1b07-4e66-a85a-ed80437c6525",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "f602fa6a-2929-4d7b-9a14-846e5a15c8c4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 217,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "71b378f1-6955-4e10-afff-1ce07f2770bd",
        "cursor": {
          "ref": "ac1f6da6-12d0-49f4-a736-1dc9a46fee7c",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "d5b98496-3ab7-472a-adbd-842d29d477e2"
        },
        "item": {
          "id": "71b378f1-6955-4e10-afff-1ce07f2770bd",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "95e59868-9bdc-4124-9721-279fbbe5dd4a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 326,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "6f46eff2-6666-4ebf-9fb9-1610136e85d7",
        "cursor": {
          "ref": "6b744740-0cb9-4a3f-9eed-fb532c011f1f",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "d2d498bf-fcba-484c-ad26-86f313eb5bd5"
        },
        "item": {
          "id": "6f46eff2-6666-4ebf-9fb9-1610136e85d7",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "04551ac6-46bb-42c8-9a68-bb5fe62b9c99",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 238,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "e36a5e28-d75f-4cb9-9b7c-bc4c86d19c1e",
        "cursor": {
          "ref": "ef1af30d-1d9d-4179-92a7-3d80e13158d2",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "0e4c03c4-e2aa-4cad-b984-1a837fa285cf"
        },
        "item": {
          "id": "e36a5e28-d75f-4cb9-9b7c-bc4c86d19c1e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "db1c6236-f578-4dce-a829-dc83666329f4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 224,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "c68f8b32-8e20-4709-9c87-2ad1a979f21b",
        "cursor": {
          "ref": "af7a6693-a04f-4553-b00d-76cc860861ca",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "ca35c80f-0d95-444e-823c-aeef82bb378a"
        },
        "item": {
          "id": "c68f8b32-8e20-4709-9c87-2ad1a979f21b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "5c7de963-078f-4dc3-9793-86c66b5d249a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 217,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "7fc3e92c-f5c0-40dc-a576-e4645cc7ede4",
        "cursor": {
          "ref": "9839389a-525d-4609-83f0-4ce97d013084",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "2a0327bf-c2bc-476c-af0c-519200a8dbee"
        },
        "item": {
          "id": "7fc3e92c-f5c0-40dc-a576-e4645cc7ede4",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "cc26a964-9918-4a59-a2ba-8eee79d17b15",
          "status": "OK",
          "code": 200,
          "responseTime": 287,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "60312a51-b44a-483d-9871-fe687e274f4a",
        "cursor": {
          "ref": "7d5c5a26-863f-40d9-8077-b9a0f22d7da5",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "4fac243b-5ba8-4450-bac8-7dc4de7574cb"
        },
        "item": {
          "id": "60312a51-b44a-483d-9871-fe687e274f4a",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "15ba18a6-cd3e-4742-a9ac-21dfea7cb771",
          "status": "OK",
          "code": 200,
          "responseTime": 265,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "2e8dc32b-6990-41e0-ac2c-c56c0d5ad157",
        "cursor": {
          "ref": "e433710a-bfe7-4f54-9484-3f3ebdaa36ce",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6efe42d7-c92a-4f61-949e-21c74ed571ea"
        },
        "item": {
          "id": "2e8dc32b-6990-41e0-ac2c-c56c0d5ad157",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "446225b9-8294-4ab3-b908-04f632cfcaf1",
          "status": "OK",
          "code": 200,
          "responseTime": 293,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "c5285102-3291-43c1-91d0-5febe1a360a8",
        "cursor": {
          "ref": "2b4990c2-81d3-40bf-8772-2783d422a1a0",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "9b117576-a985-4675-9132-fc41d45a1b17"
        },
        "item": {
          "id": "c5285102-3291-43c1-91d0-5febe1a360a8",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "db6890e4-7648-40aa-aaf8-631beb9d5d28",
          "status": "OK",
          "code": 200,
          "responseTime": 237,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "74dacde5-2062-41cd-b465-16c512ea86c5",
        "cursor": {
          "ref": "801888cf-4b1e-41ac-90d7-36936d41747d",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "0b30446d-7e71-4f5c-ab3e-037170e18d44"
        },
        "item": {
          "id": "74dacde5-2062-41cd-b465-16c512ea86c5",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "8428083f-e589-48e8-9b25-0d323db076c9",
          "status": "OK",
          "code": 200,
          "responseTime": 221,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "1aa3d94d-f9f2-49d1-bda9-50f234efa5a1",
        "cursor": {
          "ref": "94ccb124-e268-4d0d-8db6-41e218dd007f",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "a77b0958-cd7c-497d-b90f-59f567817401"
        },
        "item": {
          "id": "1aa3d94d-f9f2-49d1-bda9-50f234efa5a1",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "8361b7c0-f818-4c29-ad77-232a3f670537",
          "status": "OK",
          "code": 200,
          "responseTime": 245,
          "responseSize": 303
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "a214a64e-9b9b-4311-9e19-0011581bcfac",
        "cursor": {
          "ref": "947ba947-c321-403d-a115-e53e3958193f",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "d347f879-cfc0-4642-9be0-bf6f71be45b4"
        },
        "item": {
          "id": "a214a64e-9b9b-4311-9e19-0011581bcfac",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "50a41a40-8572-4bff-8a64-894913bbf5b9",
          "status": "OK",
          "code": 200,
          "responseTime": 266,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "7dcbd492-9190-40da-b537-38178e944416",
        "cursor": {
          "ref": "8d593b5f-8e68-4975-b02a-12d2ce466100",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e324cb55-9e27-4e96-a361-65b5bb2b15e2"
        },
        "item": {
          "id": "7dcbd492-9190-40da-b537-38178e944416",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "c7a74946-aae6-4f82-8040-df00932550f3",
          "status": "OK",
          "code": 200,
          "responseTime": 565,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "179278ff-e331-4c9b-83e8-63e9cac5da5d",
        "cursor": {
          "ref": "41ae8884-47bf-4898-a881-69381ea17bd3",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "c1507333-f774-4890-8a6f-369bfb7a4d36"
        },
        "item": {
          "id": "179278ff-e331-4c9b-83e8-63e9cac5da5d",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "bdb32704-4c8c-4260-8deb-d180a5f1a10d",
          "status": "OK",
          "code": 200,
          "responseTime": 381,
          "responseSize": 237
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "4b5234da-01ed-4e2e-a4b2-4bec8aee42e7",
        "cursor": {
          "ref": "dca7fd98-76a8-4057-a2b6-a2730e8478f0",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "9813793a-4a4f-4c0f-9cf7-cb9ca7206c1e"
        },
        "item": {
          "id": "4b5234da-01ed-4e2e-a4b2-4bec8aee42e7",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "be33335f-c5ca-4b78-a37e-3b2d71713586",
          "status": "OK",
          "code": 200,
          "responseTime": 1093,
          "responseSize": 309
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "35e58c10-3cea-47d9-871a-7462294a6072",
        "cursor": {
          "ref": "cbffdc8d-3164-4204-8211-5a11f3890ac5",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "a6a220e3-956e-47e4-abab-dc8e78a44868"
        },
        "item": {
          "id": "35e58c10-3cea-47d9-871a-7462294a6072",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "e952a294-5e8e-4c01-ba48-bdd729a66a5b",
          "status": "OK",
          "code": 200,
          "responseTime": 3086,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "e6596cb8-0c57-4c9a-a201-8c5d8223e54d",
        "cursor": {
          "ref": "d21608cd-3e12-4532-a0a6-3356fb3c7332",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "1c57a7ca-64dc-4311-82b1-bb84de88375d"
        },
        "item": {
          "id": "e6596cb8-0c57-4c9a-a201-8c5d8223e54d",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "ec0bcafa-fd7f-4353-af71-cc3f47444253",
          "status": "OK",
          "code": 200,
          "responseTime": 2898,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "8848dd90-d9e1-4e0f-b69c-af5c2f04dbd0",
        "cursor": {
          "ref": "d5ff943f-6b29-4354-9d36-55250130d8d5",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "4bcdf1c7-cd0d-474c-a758-f68fba58d837"
        },
        "item": {
          "id": "8848dd90-d9e1-4e0f-b69c-af5c2f04dbd0",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "e4223a05-6fe6-47f8-ba2b-3b420fc0323b",
          "status": "OK",
          "code": 200,
          "responseTime": 3124,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "559e518b-a72c-4c5a-9b06-a73f75f69077",
        "cursor": {
          "ref": "20ae9f9e-3480-4e5c-b523-166151368a84",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ffaeacc0-d5de-4950-8905-60c8e6e6d9e6"
        },
        "item": {
          "id": "559e518b-a72c-4c5a-9b06-a73f75f69077",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "ad958ce7-678c-4486-b2e9-c27200e21857",
          "status": "OK",
          "code": 200,
          "responseTime": 2959,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "d109f568-d14f-468c-abac-43d1c2175820",
        "cursor": {
          "ref": "b278a5ab-235f-4cb4-8587-f29153b1963a",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "6f4b20eb-5e73-4771-a70e-b4e3160aeb54"
        },
        "item": {
          "id": "d109f568-d14f-468c-abac-43d1c2175820",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "b01baf98-e7d9-4547-9752-b482086cbe33",
          "status": "OK",
          "code": 200,
          "responseTime": 2868,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "14b9369e-04a7-45a9-9a3e-a59d8a113842",
        "cursor": {
          "ref": "ec3a81ab-140f-46d2-a36a-fb908c423686",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "1ead93de-1e5c-4cb7-b9e8-00552a057885"
        },
        "item": {
          "id": "14b9369e-04a7-45a9-9a3e-a59d8a113842",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "72cba57a-6f92-423a-af0c-3bbeb274d840",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2566,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "54aa4eef-266b-4e81-a40d-01c22b6e783b",
        "cursor": {
          "ref": "57c60598-0944-4aef-8ba1-747fbe639991",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "6fbd4435-4836-41f2-9cd7-0e54ff8682e8"
        },
        "item": {
          "id": "54aa4eef-266b-4e81-a40d-01c22b6e783b",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "829beabd-c713-4f84-9595-43192242e17d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2794,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "badfa84e-b448-45e3-8b7b-bbe6ea29d81d",
        "cursor": {
          "ref": "15f8c910-6d11-450a-9607-5545731e1bb7",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "48b42b20-83e4-4c0a-9fc5-22bdac1b556b"
        },
        "item": {
          "id": "badfa84e-b448-45e3-8b7b-bbe6ea29d81d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "61d27a9e-6d02-4388-9296-52a8cd16de83",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2548,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "f0dfd8cc-9e4d-44d3-b79f-6c9c5b98d754",
        "cursor": {
          "ref": "2794948a-8cfc-4086-8010-591510e82167",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "6011b188-4be1-4923-93d0-bc3894cbea78"
        },
        "item": {
          "id": "f0dfd8cc-9e4d-44d3-b79f-6c9c5b98d754",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "e0cc156f-1886-409a-b17d-9368f0f6587a",
          "status": "OK",
          "code": 200,
          "responseTime": 1477,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "c99a2344-ed36-49c8-8f19-dcd4f45ee743",
        "cursor": {
          "ref": "8bba751b-59fa-42b5-a9c1-1c90bfcd4589",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "516f3cba-033d-4ec3-848c-fd962d2af42f"
        },
        "item": {
          "id": "c99a2344-ed36-49c8-8f19-dcd4f45ee743",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "17aa3216-178d-4a28-abfd-ebbf0932f5b1",
          "status": "OK",
          "code": 200,
          "responseTime": 2148,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "fc77e5a4-64c5-4281-939a-9c22748d056d",
        "cursor": {
          "ref": "c3f149ec-e880-45ce-9d6a-7410c8807a85",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "4ed7606e-3b8e-4165-a7d9-e546e8c91831"
        },
        "item": {
          "id": "fc77e5a4-64c5-4281-939a-9c22748d056d",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d70e78b1-8566-45c3-b7b3-0359752e6fba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2127,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "9a3512f6-b7b0-4c87-a810-7dc01f065c79",
        "cursor": {
          "ref": "8749ed2e-c13f-4c1c-a472-3a1e379c2b1b",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "ed5493c9-7d09-4d1e-b2b9-09efe2fcf757"
        },
        "item": {
          "id": "9a3512f6-b7b0-4c87-a810-7dc01f065c79",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "979983d9-f06d-4fdc-b448-52611f71c644",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 43,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 403",
              "stack": "AssertionError: expected response to have status code 401 but got 403\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "506121c4-1d0b-4ccc-a795-e8ba791cadbb",
        "cursor": {
          "ref": "506ef2a1-8af0-4678-bb19-cdcbb50f06ae",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "92c791a6-c679-4f18-bcdf-1a92a2c20424"
        },
        "item": {
          "id": "506121c4-1d0b-4ccc-a795-e8ba791cadbb",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "2a54949c-1b1f-4833-9181-242530d6c6eb",
          "status": "OK",
          "code": 200,
          "responseTime": 2391,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "9dbb5f05-1a82-45ae-8cf8-3fcad4edc212",
        "cursor": {
          "ref": "71d96420-dc88-4aec-a2ce-ee1d052b99c7",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "579de424-b4b6-429a-a8fb-09982e9ff07f"
        },
        "item": {
          "id": "9dbb5f05-1a82-45ae-8cf8-3fcad4edc212",
          "name": "credentials_verify"
        },
        "response": {
          "id": "2d41568c-53a5-44a0-b7e8-19409ce7e7b7",
          "status": "OK",
          "code": 200,
          "responseTime": 2456,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "f145be57-5fea-4cc3-b3fd-83af6356a516",
        "cursor": {
          "ref": "b24ee4bc-4cc8-4ede-9566-d74e8fdf3b56",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "87cab2d0-b53d-49f2-bc48-31ab3279635e"
        },
        "item": {
          "id": "f145be57-5fea-4cc3-b3fd-83af6356a516",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "995e0e6c-8a46-4336-ac15-7db69f428927",
          "status": "OK",
          "code": 200,
          "responseTime": 1991,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "4cffaffc-b6ff-4c6d-adb9-c2333b3eafd6",
        "cursor": {
          "ref": "9ff279f9-ba74-4705-8efc-f41ed2f0a780",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "de1c7e8d-b040-490f-ae9f-c3ee29306627"
        },
        "item": {
          "id": "4cffaffc-b6ff-4c6d-adb9-c2333b3eafd6",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "2171af21-eb6f-4b1c-8e58-baeee65a11b7",
          "status": "OK",
          "code": 200,
          "responseTime": 2324,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "8cf95cde-b0eb-47bb-979c-4f7bb1602dc5",
        "cursor": {
          "ref": "8d698ebb-d77c-40d1-b808-969795a0fe32",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f1eb3703-0937-4335-b7b9-ed02cfb1ff57"
        },
        "item": {
          "id": "8cf95cde-b0eb-47bb-979c-4f7bb1602dc5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f49d47a2-ed9b-4f77-a822-465573abd9f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "8cf95cde-b0eb-47bb-979c-4f7bb1602dc5",
        "cursor": {
          "ref": "8d698ebb-d77c-40d1-b808-969795a0fe32",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f1eb3703-0937-4335-b7b9-ed02cfb1ff57"
        },
        "item": {
          "id": "8cf95cde-b0eb-47bb-979c-4f7bb1602dc5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f49d47a2-ed9b-4f77-a822-465573abd9f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "8cf95cde-b0eb-47bb-979c-4f7bb1602dc5",
        "cursor": {
          "ref": "8d698ebb-d77c-40d1-b808-969795a0fe32",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f1eb3703-0937-4335-b7b9-ed02cfb1ff57"
        },
        "item": {
          "id": "8cf95cde-b0eb-47bb-979c-4f7bb1602dc5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f49d47a2-ed9b-4f77-a822-465573abd9f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "376a62ed-4b42-4781-9858-80751cf115a3",
        "cursor": {
          "ref": "dc8a46f2-17f8-4631-9a8c-b86b4e1250c3",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "05ebb111-2861-4629-af5e-c874eb61058a"
        },
        "item": {
          "id": "376a62ed-4b42-4781-9858-80751cf115a3",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "7a9c09c7-7881-4188-93fb-828bc147c2bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2066,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "c5633911-b865-462c-9112-93aaa196989e",
        "cursor": {
          "ref": "ed7bf2ab-0a4d-455a-9fbd-acd9244563ff",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "551df64a-90d9-47d0-bdcd-4c8692ff502a"
        },
        "item": {
          "id": "c5633911-b865-462c-9112-93aaa196989e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e1af1bf9-2bcf-469b-851a-3fb26d816111",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "c5633911-b865-462c-9112-93aaa196989e",
        "cursor": {
          "ref": "ed7bf2ab-0a4d-455a-9fbd-acd9244563ff",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "551df64a-90d9-47d0-bdcd-4c8692ff502a"
        },
        "item": {
          "id": "c5633911-b865-462c-9112-93aaa196989e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e1af1bf9-2bcf-469b-851a-3fb26d816111",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "73ba622f-bc3a-4a7b-bfd7-685a1338459b",
        "cursor": {
          "ref": "51864e22-7de2-4515-be78-24cd7b87b6b8",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "5aaac5ab-1609-4c26-ac7b-734b3b504310"
        },
        "item": {
          "id": "73ba622f-bc3a-4a7b-bfd7-685a1338459b",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "8479c94e-7b37-41b4-9ea0-9eb8d43f0ae5",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "32c437cb-afe1-45ae-9b33-4c4a15d19276",
        "cursor": {
          "ref": "675d1463-67d6-4861-86ac-836216396c14",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "eec486b7-690b-415c-90c8-a7320682ea4b"
        },
        "item": {
          "id": "32c437cb-afe1-45ae-9b33-4c4a15d19276",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ab9c811d-aec0-451a-b80a-7e09c9706f54",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "32c437cb-afe1-45ae-9b33-4c4a15d19276",
        "cursor": {
          "ref": "675d1463-67d6-4861-86ac-836216396c14",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "eec486b7-690b-415c-90c8-a7320682ea4b"
        },
        "item": {
          "id": "32c437cb-afe1-45ae-9b33-4c4a15d19276",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ab9c811d-aec0-451a-b80a-7e09c9706f54",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "5af6131e-887c-4624-9402-a1d803868187",
        "cursor": {
          "ref": "443b3b72-c198-41bd-b448-b9b0f6d04eab",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "a0efb10b-a4e9-4a91-b9c4-afacab7f749b"
        },
        "item": {
          "id": "5af6131e-887c-4624-9402-a1d803868187",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "cda199da-0459-43ff-abc7-bfd75b6fde15",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}