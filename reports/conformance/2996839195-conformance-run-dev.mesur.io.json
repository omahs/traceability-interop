{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "bc4df4c0-d716-4969-acb3-13d58aa134b1",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "4150116a-d98b-4614-9939-2366a3fb60cc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bf36f3a5-2d2d-41bf-8296-11bca7ef4a02",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b6c5ee6a-fc73-455c-ac96-e9a7bf3037e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "77adc2c9-8570-4d22-ae6d-5fea97d2bf72"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "923ff35d-e707-4329-bcae-530b6651806c",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "c82a0b85-1d4d-42d3-9d2e-0f8a2772a4ac",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c57bdf1d-26dd-476c-8e07-25887cf7cef6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "28e31de7-34c6-4966-9b6b-ac2c9580c3fe",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4213f0b4-4b0c-4b96-afca-b63b2557e003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "03244d59-9b60-4653-a949-258414930bbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54656f7b-97e5-4976-b177-3865a6435515",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e6564e3-1cc6-472a-be66-962a06260fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e0a65128-3559-4447-891d-6d93b542264e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07d648ae-1703-43d0-8d12-208e91defcf0",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e13f20a3-b892-42c4-bdb0-983d2aef1dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4b583214-557f-4ae3-b1a9-91340b7addf4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e8d67e1e-9f1a-47a2-962e-92cd70de49fd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e4143650-6a9f-4859-8c97-4a6c5eed7db6",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d93ae84-20fd-44da-a65c-7dab8cb1e1c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "40ed9266-423f-4d47-b142-683674ab6819"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4d0935a-b22a-4232-aeeb-59e887442c5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb827187-719d-402c-a395-74e06b987f18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1a79268-3268-4ea9-9815-9ba424067119",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0dd7d3a-9821-402d-8e32-933263ed91a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1266de98-ae4a-4137-8fc4-272f7b228b09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce7452e9-e4ba-49b7-b0ee-2cbe23d2aef8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "3e03ffbe-ef5b-4e91-af10-3afef8f5acda"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "db7f601b-c268-4f58-8d2f-17a954e92b41",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0b6326a4-b6cc-4816-8b6a-57852cb7b5e2",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d06e17c0-b9be-4dc2-b53a-41f9537e036c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "0a3b655e-13ef-4129-addf-813a2700db91"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6b248ad4-a91f-4533-b81a-24e272fa1bbc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "72866bfb-43b9-4b7e-b493-f7603479a568"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5fc3b511-0267-4f50-95e5-611d1a54388d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "622d37f3-db68-4a6b-83df-ba83f99fbc10"
            }
          }
        ]
      },
      {
        "id": "bd740998-a494-4a07-9b9f-dd54c6e02334",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "0a90cf94-8833-4d08-af36-d355881a2dd5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c7e62c57-e95c-48f3-ace1-8d96e8be7170",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "adb854b3-e6c7-417a-b106-57614b763f26",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9441bea-66a3-42cf-b96e-f6cbbe950280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edebbfbe-2da0-4e41-ad58-8a25014170d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "219c8486-00a6-47de-ba12-4548437616bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd932581-7dd2-4a88-b8b5-0c0380a5b2ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e7ee5be-2da9-4f5c-af99-4089593346e5",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8db1caeb-f9c7-4d64-97bc-e28f2ccf7cb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c303bd55-391d-4517-beee-c869e34165ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91006d87-5422-4b11-b772-17f582004c40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8abd6cfe-a930-4fbb-b3dd-6055d9be6708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cebaa30-df62-4e6c-8712-6a83d7cfa1ca",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8f3be65-856c-4f8c-bc72-e8d29f686a11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b15b80b-b448-4486-9d65-c66fdeccc0b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e533ae84-15d3-4322-8041-ce2037eeeccb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e8d938c-ddcb-40e2-bac8-616bfde6878b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "183c5dbe-4a1f-49f3-8dec-99c61c9c7e1a",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd9c55ac-be29-4e3d-974f-2b362c445f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5494cbc1-1e2a-4d0b-abb1-7f9f36089b13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7105bb51-d53f-468a-8667-3d9ed84f6624",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82482b2b-4d8f-48dc-8c55-367c710679bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22a72c0e-8262-4365-8851-4a57d7aa34f6",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19860455-7d77-49cd-937a-bee3ff1d668a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "700e2fdd-c62a-46ea-9c70-bdf3abee9b58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b870265e-9d75-4cb5-880a-adc4dd0a15de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5d4aec0-e8ed-4c87-b257-cb2b91ade14f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f49ac6a-9d43-4ef8-aabd-4a4f319c7d8b",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2f088c0-5894-4c57-aa32-416f2b17f9d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12514780-9c25-4bd5-8ec0-72aafa12eeb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40796405-1f4c-4c89-a0ee-b722dcccabd0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e600e92-05b3-4b9c-93fb-8569cc25f092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9d0b4a8-993c-43dd-9533-f0486ad33094",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d0bd30a-a1aa-4cc9-9793-c97ad7778488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86725938-2614-43f8-9a4d-f8f9dd1b9f31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c93bda0-378c-4dd4-919b-72d2c97900a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "465764b4-1c61-409a-bf4e-9214c2160689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "527217e3-bbff-4fd7-a445-1145d67378f8",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6abf3c5d-13d6-460f-a2ea-16b8b4c73e66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e7e0704-4a98-4e74-8777-5964b1767206"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdb507ee-28b8-4cd6-8700-ecef36f025a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b88ea0a3-2bb1-4a7c-8548-15861963d526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "004dd4a1-eecb-4f4f-973d-8ae283aa7fee",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2a04dc1-efc0-4642-b03e-f1a0c62513d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae127322-f035-4f58-b49d-7150dd4a8526"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6762fb31-e85e-4dce-b7f9-bca0e1af6498",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db055e25-9db0-48e3-a217-27fdef0f85dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b90fb70-3659-41d9-b6d1-41dfae29d2c5",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4951d3c7-d9b2-4846-a156-132e52d06b76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "603b5bdc-2bb8-4050-9992-c756d0a3ef03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78574161-9e94-4147-9ade-f8c8fa3bdf3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4ee553e-4faa-4347-bb19-4c58b26f5afa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8548818a-a0a9-4d28-8f64-a76940ec31f7",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a96235f7-2f22-48dc-a9aa-d0a9780b7bdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1aed13a4-ed6d-48e3-8653-c297c6a047ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1beabd21-2e15-469a-9ddc-bac340cc3c9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "f617d362-d461-4a2d-bab1-172a7e10127b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28d9a387-d24e-4d40-a344-808ec679a1b3",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "613b7059-1d4e-4988-b830-e754c325071b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d18a745-4c29-43c9-8ece-836d54875f8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc8f0749-01d3-48bd-8d06-8d81504b79c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "d3b726d3-2879-419f-8c47-b1ddddbde4a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e010c22e-7338-442f-8d58-212e0a3be660",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27f20834-3e4f-437a-aadf-f0fd20d7a2c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9757e13-c987-401e-a02d-4b0abd6c2d85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdab9b8b-bba1-49ec-88c0-29245fb78aaa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7e7406f-8780-426a-872a-b1831857c3bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "063e7508-55a0-4764-bf16-7f5b81fb1eba",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee95f75a-8b32-4835-9a60-d7c93484e49f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81e2b374-beba-4720-ae80-b206f2b9dc9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "066f6c5f-4ede-4fcd-a008-1090d89deb47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d81c32a-9af3-4ad2-91f9-ca585602bb21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bba56ec5-92a3-44c9-a731-ec2aa409c447",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f13935d0-8f58-47b7-b06a-7c486a6e2cc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d6fdc90-397a-4026-a299-8fc61c9b8b53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99df4565-efee-4d50-aaee-7b1a7000c1ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "30e1314f-c86f-46b6-bef4-bc7bd6dd9138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3cdc977-89be-43ac-b216-b2b99c2b138f",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d73f60c-ce0e-4867-8a78-f545a10e2abc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4817ebab-3fe1-4c7a-bbcf-55329a16bc5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3b34050-3036-459f-b025-bf581c8cbd67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "220f8685-8d5e-4a83-a3ab-31d798307af1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e925f75-2e5e-4c66-8b56-fbcbbbe85c52",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a819078-d057-4153-88d3-a4ff855a1653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f14a7a88-81e9-4b28-bfb3-be2336ddaf6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeb788c6-8611-40a4-98cf-35cb7e4cda24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68cd93f7-49cf-443c-963e-685eb7f8663a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "265dc32f-e037-499a-b2f1-ebb2204fb70f",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9d44fb2-d0c2-4ab2-9119-28eae9fbf05a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94be75ad-0cb0-40f5-b2ec-5095f2ada64b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0abb523c-571c-4bc0-b8e1-d688650c2301",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e3c18a6-5a0a-4f5d-ad49-231a980aa93c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbf03e8e-da78-4f03-9871-7f8e260dd9a5",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b3e844d-7acd-424c-b3eb-99b42fe42c9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cee30fc-d271-41eb-8ada-e258344fc19d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0a8a0bc-99ec-4c30-9c29-e95554f4d8bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71557951-153d-47f3-b8e9-b2fa678ebdd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57ddce3b-bf6b-4e87-9b6b-ca090294af41",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d9f9222-540b-47e1-a53a-d5cc96517e2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4f4237a-79b9-4eff-8e9e-a1d098a76d94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81e76a3a-c1f5-4aae-bb23-57a317552236",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a76b2908-f04e-4df6-97bb-76638b481f67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f3fe330-af75-4ba1-9f95-83ca99fbd39f",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93e14ab6-de1a-42df-ad6b-34152aff2f06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5792cf43-fbab-4a70-84fc-48240ff4d9a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80971f09-3c82-444c-a64c-5799e6a98967",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74993985-d9d0-47fb-97ec-66246678c3a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad195010-e7ed-43a9-a138-8d70e8b631c5",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1abe9678-a871-4dcc-bd76-43d468e43593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10db6a6e-ddc7-4b73-9a59-918195271870"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48439221-c69d-4b90-9139-0e0ca201bb18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbfe6b8c-276a-491c-bc52-db84b3994ae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ca7fa09-0b62-47a2-b271-c1b27e2bc176",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "705f145c-9852-4f52-a06a-2ca84db5f1a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "634c0a60-c86c-46ce-b677-dcc804e16a7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4417147e-ff5c-4309-9648-300b8308a1b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04f1f1ba-822a-4505-ba8f-21b889adb2b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13fbbae0-4cd5-4dfc-85d8-2eae6f61b434",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "346761c0-79dc-45d2-bd8d-c5c630fb7b5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a6ca9b3-0281-487c-b56e-b712b58ef16d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b22b788a-9661-40aa-867f-fa22ba31b080",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b0da2b7-510a-4974-a407-83eab782ed58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92153e9b-f643-4f8c-b591-c8d89c9538d2",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccac2bb3-f72b-4270-8f76-6cadfcd23b3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92e25a94-904a-43c3-b191-f9abb9e7c817"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14d581b4-7fb7-49bd-af62-caf2180bc1e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "749fc649-a275-4b5c-8bfb-ca2993579040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6589562b-eb8c-40a5-9420-b1017a22fbfd",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f54fdbfd-acf6-4415-9022-baf262331e02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5d5c4b6-365e-4fb5-8475-d850e011fe02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed8665af-074b-49c9-bb76-52dab5247158",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38ae34c5-780d-43ed-b76d-bcf48de5fbfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9df58cea-4bc4-4296-a893-b792f2177ac7",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22d07c04-3455-4609-b0d5-fca27bb18507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76ac5c87-3a13-4f68-98c0-b9e9e0a026f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88c16225-54a7-4224-9ed3-c0434a362435",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71029a46-c5ae-45a7-a24e-b2dd77b50dfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92eecd1e-7eb6-4168-9b34-a30f0eb132f9",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a506192-e5ec-4f0a-9681-cff4bffc97e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e33a86d-a7bc-4011-a1b8-57a814b9b8b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e23a4ed-0a87-47a9-ac4c-49bd4966b48f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b11d2a21-fa98-4dea-879d-167187373de5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f568dbe-6f51-4010-b280-fa417b1d6ae6",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ed555a2-8a7c-4e89-b93f-7ee626cc66aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8098808a-7f19-4a96-b511-17b2cb1c7340"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53c81356-8256-4fef-bd34-6554e3763fc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74e0d038-ef1d-4cdb-9fc9-eacba5fa7a2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09e43bee-16d5-4ff2-af67-97d4beb6407b",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db62adfc-6489-4ba6-a9ce-6e8ddef0f6b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd4a2789-f300-4959-ac0b-e07757f1ef0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aed19d9-6c04-453c-b903-e9e360e01e37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "185c12c8-cebc-4513-af2c-7537e19ded70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c89aa28f-c7a0-4765-9b31-0e72f941b1d4",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afb16689-d056-4f4a-9a6f-51c9d5927463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "3d038e46-4822-400a-a2e3-90bbe9bad0b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f50e5832-d27c-4497-9285-32ca4e51ff6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "742652b9-d14c-4857-b499-7d8220e73df2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "af62e639-ac4a-4cbd-8b85-a9a618ac2ac9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "106e1f70-e27c-4fdf-8021-502eb8d251ee",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00bba345-59b2-4d9d-8ff8-a5211579262a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "984704fa-1fc3-4d1e-99ba-75a7fdf741df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "651b0ad5-d89b-495b-a03f-dd4bf9a15cb3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "62bdc6fd-c8e7-4834-a416-61574d857414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4824eb4e-7bb0-489b-897c-b69abc61d7d6",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a6768b6-a169-4f94-8393-c543ff2b3fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9163217e-16ef-4d81-88ec-8ffdef30149a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea0b19f5-0b79-46d3-95a8-823be15cf248",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "2aa08f27-6b7f-418d-b2e0-6dcd8870d401"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "67912431-570c-4613-8fa0-88aadf058483",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c5fb3a08-5e33-426f-bbac-b6a50a154f8c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cb29af48-ba1c-4b80-84c8-be892b114e2b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4e08a16f-0e93-4d15-b57d-dce45cb8543d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "13f6b724-e47d-4a68-ade6-8c6f4e28eb95",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "43708831-ee78-4265-bc71-ec65f8555262"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9118c267-de22-48dd-ad0e-2f9cb268a408",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "821b0b7b-4ad2-4bc4-8405-57a1d1b1a835"
                }
              }
            ]
          },
          {
            "id": "f91692e0-b904-497e-921b-a40b5c5a0f15",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f512d996-19ec-4634-b731-b0b0fdb67161",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1d9949cd-2ef5-4f06-b149-9fbbcb0b4ad6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "56018e53-16eb-4b1d-8a8d-7b95ce9a18f6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "60feb139-5749-4864-a135-34d2b11fd454",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "34cbd009-2fe3-4efa-8746-2b00095fb241"
                    }
                  }
                ]
              },
              {
                "id": "37996a1b-b978-4436-8391-7036a24310ec",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1c0ba942-aaa5-4f84-afeb-4d2fa1a88007",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4e73c201-472e-4742-b265-d6dfb865b7c1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c173c75d-a09a-42ea-bdc8-a0be738b9226",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "ecaa356b-bd5c-4454-9896-6b9c18a2ecee"
                    }
                  }
                ]
              },
              {
                "id": "04c34c5d-c026-4306-b382-aec35a2fbe30",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "78be75b7-1ee3-4980-991f-59421ce81161",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d89451a4-b411-43d0-a0d9-498b8001f1a8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5291b286-96cd-4268-abd6-ff7f2e29414b",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "c28394f9-8041-430e-a1bf-1772a886176c"
                    }
                  }
                ]
              },
              {
                "id": "9e300c32-dead-481c-8bca-da4e20eb0a97",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8943d9f6-9e8a-489b-a1f5-8e9f49f8baeb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8fd58715-ccc0-4677-96a0-3b0394b6f658"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "69328af0-268f-431c-9cae-bef8d0405302",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "5628c124-d6c7-4105-8e54-caf6bcbf75e5"
                    }
                  }
                ]
              },
              {
                "id": "61848ac0-1893-4de5-a8c4-4f899d7fc253",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5da8d585-804b-43a0-b343-088cc7839cc4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof credentialSubject === 'string') {",
                        "  pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        " } else {",
                        "  pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        " }",
                        "});"
                      ],
                      "_lastExecutionId": "09dc0668-6f52-4023-8f60-a319bc54bce2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b3d9e956-d6aa-40a7-a136-33d2b52050f1",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "f7e03510-d0b8-4bc5-a963-7807e354e0cb"
                    }
                  }
                ]
              },
              {
                "id": "fe16dd04-efae-4ac2-8a15-8d3b11647b5a",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "027d53f0-c6b8-40ab-b2a5-a826e9f99cd6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "07b4aed8-ec07-44cf-aab4-803870da87c0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aa338a2b-0a5f-45a7-854f-1172bcb57f97",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "1fcf8e61-da47-409b-a8a5-f0e3761c7a80"
                    }
                  }
                ]
              },
              {
                "id": "bfee97ff-5713-4ffa-a270-c2a03880beac",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ac024f2-2a47-425e-92dc-f3fbaa9facb9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dfe69acf-050c-4845-a2b2-697963286144"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c04fa2d7-a9aa-4e6d-82b0-45f46f9476fe",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "b1b2db4e-32cf-4483-9acd-23e5992ebf9c"
                    }
                  }
                ]
              },
              {
                "id": "38269e3e-9920-45d6-9738-4f8d7151dd49",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "10c3182b-091a-4004-8c39-257947b28ffb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "04565115-df46-4b41-bfb2-99735808d1f4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "57fc6f59-dc72-45a7-acd5-d0d7dbd49bdb",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "e3a783d4-3011-4c90-b6fd-9a8161aa158a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "357bfce9-295e-4a60-bdeb-19db2efa24e5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1b50df52-489a-4915-9e22-10e204bc4b99"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2babb6f6-6f0a-405f-87d3-ce3334780700",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9dcb86c6-c2ea-4b8d-b3b6-ce5bb230db0d"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ded1f946-48f8-482c-929d-3c8c1c8002a6",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "0241719f-a2d2-4694-8ea7-c1a231a7f1c3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "391777c2-5b08-4357-9726-c18befbed69c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c233c401-cac0-4897-ac6d-c8aaaefec0ea"
            }
          }
        ]
      },
      {
        "id": "c5b36d92-a0a0-4674-b58e-fd8c34c334db",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "8aff9460-4ba6-478a-bb74-7869ca4c6b42",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fe8c9632-9831-4b3b-ba3d-e0432e87d25d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "75774136-706b-40a0-bfac-a72f04e4f783",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e01b77d-56f3-4e6e-8e3d-4b7958788635",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84a62191-2735-433c-a78f-c7e1ac801ce8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2a51711-2f99-42c7-882c-3b86103d2c77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "44e1f4c0-20a2-4d8c-97fc-88fabb395645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96c07c75-ed1f-46de-8c55-cce0bb2f12d9",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73ba23e0-d7bc-465b-92af-7ae93dd1ced7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "96bf1f04-7438-4630-8ed2-702df0d3688c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a59bda4-7c32-47f6-b427-6e2b8d1ba2c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f3f937bf-4d43-4f1c-b519-374c7241a97f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a6f4ce9d-e93c-4245-8b2f-fdce4e33fc8a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "08303d83-c765-45b0-b3e7-bb19fa6c8b8b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6dae32e0-c60f-4fa5-914e-286aac7a2042",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c11528a7-0aaf-4599-a89c-0a76f6eacab0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7eb44077-1c58-4121-b92d-8ef7c76e70d1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "6f886e6f-c9ea-4933-bfe1-357fb7d2f9ac"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e999cd16-03a7-496c-9843-d0086d2890f4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e5c97161-284a-4b78-b9a7-46c0d6a18d1d"
            }
          }
        ]
      },
      {
        "id": "4967a41d-7e30-4b46-b55d-d4b22cdf9af8",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "f94fb51e-3b04-4d2a-a7f8-37b785261bed",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f6a98800-3957-4638-8735-2a765f0578a5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7be3247c-1734-4914-82f3-c74e74721d25",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c47102e-3b93-403d-a5e2-ca44b7f7abd7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "829ee59b-93bb-48ed-9ab3-47c16052c4d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1628375-a8d8-46bd-8e1b-35e60a05162e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "81cab4fc-6f17-4b5b-bca0-749cf7776883"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77897fea-9b45-4fdf-b269-b266dc67740b",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fa3aba6-ce66-406f-b9fd-f71d27f3bee1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "b4b6586d-8674-45e5-94c1-b57cd1ebaf0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27a5c3f3-58c0-4145-a1bb-6f7c1a6252e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f3c11f5e-d979-4287-8296-474dd338f625"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "842cccf0-b622-4783-a921-c708333ba897",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fa1e4b19-0ff2-4ebb-ae78-ef5355457e4b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3bf46de0-fd27-4fc9-9531-c1e62e86b518",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9671dde1-4e31-4514-96b0-8bf30741ef94"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "28cca2b9-52e7-41ac-8e4e-1e095c40828d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "41c239bb-e6f0-4f9c-9ead-43cc4d84c2ed"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "67fecdda-2d92-49c5-9f79-ae2972ae422a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5b5f8602-5368-44ff-a6b8-a91d7a98a348"
            }
          }
        ]
      },
      {
        "id": "33232c73-ed2d-4ed8-b142-1df7e82fee7a",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "3542a843-4435-411f-b57d-26374edddb69",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3176635c-62f9-445f-a95b-4e4d5f5f7736",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "491e2826-1cc1-4647-bbd2-8ed40e6dd16f",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71ba9d00-3564-4532-b14c-dc8d518ff269",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ab0a048-e415-4343-94af-630b7cb21b3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b47272d2-cee9-4e45-b540-a5aa09371489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6d8019c3-a6c5-405d-862c-db78f7131d9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e827cc88-1f42-4786-bb89-5ea405c97af0",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14889c8e-99a2-40bd-9944-56dff7b89391",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "598a67c0-2fce-456b-a35a-5cf3aa500d3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2435fbf0-a222-4d1e-844c-6571b67da34e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bee2179e-7d07-437e-b070-542f7c40e6ae"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "226d32cf-10d2-4f27-84a7-0ec0770fa19d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b98ec01e-e0a6-4abc-aa75-b70a72c619e3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c0b35e6b-d901-4150-befc-3be9fe333600",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1ea74768-a26e-4579-9945-6fc1234c5ad9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "47b7f800-8794-4516-9135-f83bd59ac790",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "6a0ca185-3815-4d97-b6be-71a24d123f5f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1cc883a9-40fc-4da6-9994-0fa770f7af42",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2e4b361f-fac6-410c-9f11-4149629e0d2e"
            }
          }
        ]
      },
      {
        "id": "bb0d5edb-b330-4d42-86c0-665c20e2a73b",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "a7ab6f9e-c134-474e-a4ff-5f6df41e2d9e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3824d9e5-fcbb-444c-ba34-32df43e00f23",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e162e6de-449f-42d7-8dd9-762d2dad0242",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f80610d8-b161-43e6-b73d-63fe7dcecb22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "906c6df1-7b74-4692-b418-0e6e8e6f9d6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb411697-af66-4297-8db7-df07e3458ab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6c3ad818-f9b8-4ecf-8e68-e62a249d24a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5aeb89f-0719-4808-8741-f58212d1c39c",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02ea6e9c-1a93-425c-8b99-8af428d54b6a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "b508b3ac-aa2c-4529-8904-4d0f7923c221"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87d9a7ff-dbe1-486b-a73b-71f537df78ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d92ec6dd-ed78-4f67-8463-7490bf37c128"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "04ae4e4a-93cf-473e-b29b-de62f2420dbc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c345858b-7a63-47c2-8343-e35546a19bb5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "47005d46-fab2-488a-ac91-90420fc1f7e9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e600f2d6-2f7a-4077-bfc8-f132024178db"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "444a83f7-c813-4e96-be09-82b03ba71d83",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "81abd1dd-93b6-4cd8-afb1-7d99afd71329"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d91b46f7-1e10-4c5d-b4f5-e5042b5e2951",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "501e480b-a535-490c-a801-21f4c9014c55"
            }
          }
        ]
      },
      {
        "id": "fc78f439-66f9-4be5-b25b-575e909fc7ce",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "cd14bae5-3b78-44d6-92dc-8aa643ca14ab",
            "name": "Negative Testing",
            "item": [
              {
                "id": "81021eb2-38b3-41ae-bc91-af9a01095ead",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b9293665-4ffb-47aa-9d21-8512ce6ea091",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64cf44a5-cf23-4a5d-8525-b87257dfdf78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0219dec9-b00d-4a22-bb36-5ae40eed1f4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2b15cb0-bab7-426f-af86-2e6e7cb4bdbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5c766ce8-4236-4c3b-9abd-8fb1b91ed028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecb740ab-b112-4b2e-aadb-d36fc4224a4f",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f405ee09-1704-4df5-9156-93ba966fc687",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "5b917528-a2bc-4d37-b862-dbf9a84461f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6234ec51-3698-41f9-9c36-12d99485164c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "190079bf-95b4-421a-8da1-4dd6d8d3dcbb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e69cfa31-1808-4ba2-99f8-649c162040e1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53d84791-9f9e-485f-9543-6ca7b044036d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2341776a-7cf1-4ed0-b057-d26cad4afd22",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "14c71430-79ca-4155-b5ad-e19314fefdc2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "15b188b9-3abd-4780-b584-512892bc21ef",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "61c27b39-4533-40ce-9198-2bfa1b38be88"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5a6dfd81-0e7c-44d1-ae91-8084afc54092",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4d0364b6-bbca-410a-9418-9e1b73b7100f"
            }
          }
        ]
      },
      {
        "id": "8f20bbf9-6c57-4775-86a8-843552f267e6",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "6e4af8dc-b018-4681-81b2-a7af5c251b60",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 447,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 107,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 121,
        "pending": 0,
        "failed": 22
      },
      "testScripts": {
        "total": 226,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 221,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 67.72897196261682,
      "responseMin": 31,
      "responseMax": 1232,
      "responseSd": 133.68721830524962,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1662425506113,
      "completed": 1662425516260
    },
    "executions": [
      {
        "id": "bf36f3a5-2d2d-41bf-8296-11bca7ef4a02",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 58,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "1aed16b3-c132-43d1-83c3-fdd242ef98bb",
          "httpRequestId": "9a019150-8fff-42b9-8493-4110f1f2f372"
        },
        "item": {
          "id": "bf36f3a5-2d2d-41bf-8296-11bca7ef4a02",
          "name": "did_json"
        },
        "response": {
          "id": "48414a3e-c8ef-47f7-8068-357aafe83689",
          "status": "OK",
          "code": 200,
          "responseTime": 247,
          "responseSize": 1002
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28e31de7-34c6-4966-9b6b-ac2c9580c3fe",
        "cursor": {
          "ref": "f8167aec-6964-450f-9fff-e980a8392b21",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "08c84422-9f3c-4f02-b194-8e0efd4d2a5b"
        },
        "item": {
          "id": "28e31de7-34c6-4966-9b6b-ac2c9580c3fe",
          "name": "did:invalid"
        },
        "response": {
          "id": "cc78bd67-4622-44e2-acad-59cfb5f2b306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28e31de7-34c6-4966-9b6b-ac2c9580c3fe",
        "cursor": {
          "ref": "f8167aec-6964-450f-9fff-e980a8392b21",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "08c84422-9f3c-4f02-b194-8e0efd4d2a5b"
        },
        "item": {
          "id": "28e31de7-34c6-4966-9b6b-ac2c9580c3fe",
          "name": "did:invalid"
        },
        "response": {
          "id": "cc78bd67-4622-44e2-acad-59cfb5f2b306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54656f7b-97e5-4976-b177-3865a6435515",
        "cursor": {
          "ref": "6214d07a-fb5d-4bbd-b90a-e72f6d235b0c",
          "length": 58,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1da6cd61-017b-41d8-a85d-1079ab148b60"
        },
        "item": {
          "id": "54656f7b-97e5-4976-b177-3865a6435515",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "daa65f37-dcb1-441a-8459-713bdee0e399",
          "status": "Not Found",
          "code": 404,
          "responseTime": 152,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07d648ae-1703-43d0-8d12-208e91defcf0",
        "cursor": {
          "ref": "5d3fa938-d36c-40c4-9b6a-a88f319d6263",
          "length": 58,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d168b835-c710-497f-abdd-086ed596e054"
        },
        "item": {
          "id": "07d648ae-1703-43d0-8d12-208e91defcf0",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "4497f84f-790d-4d27-9e2f-5ed5a7911de7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 32,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4143650-6a9f-4859-8c97-4a6c5eed7db6",
        "cursor": {
          "ref": "38a632cc-069a-461a-86ad-31b9e29c51d3",
          "length": 58,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "54595e42-d258-4c03-ae48-d00b919c01d7"
        },
        "item": {
          "id": "e4143650-6a9f-4859-8c97-4a6c5eed7db6",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "699e1fa8-608a-439b-9319-902d1fba7302",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1a79268-3268-4ea9-9815-9ba424067119",
        "cursor": {
          "ref": "4e731b9f-da0b-4a7b-81e6-38d7c6b9b535",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "082ef493-df85-45ca-8e5a-f9531d1c1a66"
        },
        "item": {
          "id": "b1a79268-3268-4ea9-9815-9ba424067119",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "56a73bb3-fcf4-4437-833a-5fc624b0de47",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1a79268-3268-4ea9-9815-9ba424067119",
        "cursor": {
          "ref": "4e731b9f-da0b-4a7b-81e6-38d7c6b9b535",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "082ef493-df85-45ca-8e5a-f9531d1c1a66"
        },
        "item": {
          "id": "b1a79268-3268-4ea9-9815-9ba424067119",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "56a73bb3-fcf4-4437-833a-5fc624b0de47",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b6326a4-b6cc-4816-8b6a-57852cb7b5e2",
        "cursor": {
          "ref": "46922ae0-0fa3-4dd3-ae32-5509c5bec0a2",
          "length": 58,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c371d273-8378-470c-8fcc-30fe91e9005b"
        },
        "item": {
          "id": "0b6326a4-b6cc-4816-8b6a-57852cb7b5e2",
          "name": "identifiers"
        },
        "response": {
          "id": "c325b90c-8c23-4f5c-92ee-120ebb89956e",
          "status": "OK",
          "code": 200,
          "responseTime": 363,
          "responseSize": 1018
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adb854b3-e6c7-417a-b106-57614b763f26",
        "cursor": {
          "ref": "2759cc27-0e72-4344-b0a2-eccb637af33d",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "d9be7e61-46a7-4882-8f94-4da2aa6405e4"
        },
        "item": {
          "id": "adb854b3-e6c7-417a-b106-57614b763f26",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5eac3a5f-4f63-4e1c-b2a8-32498c449e13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adb854b3-e6c7-417a-b106-57614b763f26",
        "cursor": {
          "ref": "2759cc27-0e72-4344-b0a2-eccb637af33d",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "d9be7e61-46a7-4882-8f94-4da2aa6405e4"
        },
        "item": {
          "id": "adb854b3-e6c7-417a-b106-57614b763f26",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5eac3a5f-4f63-4e1c-b2a8-32498c449e13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adb854b3-e6c7-417a-b106-57614b763f26",
        "cursor": {
          "ref": "2759cc27-0e72-4344-b0a2-eccb637af33d",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "d9be7e61-46a7-4882-8f94-4da2aa6405e4"
        },
        "item": {
          "id": "adb854b3-e6c7-417a-b106-57614b763f26",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5eac3a5f-4f63-4e1c-b2a8-32498c449e13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e7ee5be-2da9-4f5c-af99-4089593346e5",
        "cursor": {
          "ref": "a3b28c0b-1d65-4dc2-b893-6619005c4371",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6b2b264e-9dc6-4041-b767-5993ba21f7c0"
        },
        "item": {
          "id": "6e7ee5be-2da9-4f5c-af99-4089593346e5",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "51941ab8-d0db-4c1a-bb3b-c646be563aab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e7ee5be-2da9-4f5c-af99-4089593346e5",
        "cursor": {
          "ref": "a3b28c0b-1d65-4dc2-b893-6619005c4371",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6b2b264e-9dc6-4041-b767-5993ba21f7c0"
        },
        "item": {
          "id": "6e7ee5be-2da9-4f5c-af99-4089593346e5",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "51941ab8-d0db-4c1a-bb3b-c646be563aab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cebaa30-df62-4e6c-8712-6a83d7cfa1ca",
        "cursor": {
          "ref": "935f8b3a-d2dd-4836-a612-a4ace1e33fe6",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1eae2fe9-5941-4d01-b64a-2b71a6a4b2c4"
        },
        "item": {
          "id": "3cebaa30-df62-4e6c-8712-6a83d7cfa1ca",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "e091e974-0c4c-40d2-8115-46ffb002056e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cebaa30-df62-4e6c-8712-6a83d7cfa1ca",
        "cursor": {
          "ref": "935f8b3a-d2dd-4836-a612-a4ace1e33fe6",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1eae2fe9-5941-4d01-b64a-2b71a6a4b2c4"
        },
        "item": {
          "id": "3cebaa30-df62-4e6c-8712-6a83d7cfa1ca",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "e091e974-0c4c-40d2-8115-46ffb002056e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "183c5dbe-4a1f-49f3-8dec-99c61c9c7e1a",
        "cursor": {
          "ref": "a3b8ae53-9076-4798-ac4c-8dd6fb44015a",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a39ef5b9-7d96-4e9e-b3d3-da08fd1fd37d"
        },
        "item": {
          "id": "183c5dbe-4a1f-49f3-8dec-99c61c9c7e1a",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "93dcb8b7-aef3-46dd-b3ca-f8c87fc7abcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "183c5dbe-4a1f-49f3-8dec-99c61c9c7e1a",
        "cursor": {
          "ref": "a3b8ae53-9076-4798-ac4c-8dd6fb44015a",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a39ef5b9-7d96-4e9e-b3d3-da08fd1fd37d"
        },
        "item": {
          "id": "183c5dbe-4a1f-49f3-8dec-99c61c9c7e1a",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "93dcb8b7-aef3-46dd-b3ca-f8c87fc7abcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22a72c0e-8262-4365-8851-4a57d7aa34f6",
        "cursor": {
          "ref": "36d36d87-2b78-4c15-9dc8-578cecbed500",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "f6e8587b-f6e3-4c39-a1d9-34807f8d86e4"
        },
        "item": {
          "id": "22a72c0e-8262-4365-8851-4a57d7aa34f6",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "57f08e1f-2ca1-4ae0-ab21-cc9c62651549",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22a72c0e-8262-4365-8851-4a57d7aa34f6",
        "cursor": {
          "ref": "36d36d87-2b78-4c15-9dc8-578cecbed500",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "f6e8587b-f6e3-4c39-a1d9-34807f8d86e4"
        },
        "item": {
          "id": "22a72c0e-8262-4365-8851-4a57d7aa34f6",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "57f08e1f-2ca1-4ae0-ab21-cc9c62651549",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f49ac6a-9d43-4ef8-aabd-4a4f319c7d8b",
        "cursor": {
          "ref": "4e569c93-b258-465d-9d55-07e76a8b2336",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "93129f45-1c07-47d2-9e44-bf954935d04d"
        },
        "item": {
          "id": "9f49ac6a-9d43-4ef8-aabd-4a4f319c7d8b",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "62d6ea91-a5cf-4edd-8b94-7262dac3a43e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f49ac6a-9d43-4ef8-aabd-4a4f319c7d8b",
        "cursor": {
          "ref": "4e569c93-b258-465d-9d55-07e76a8b2336",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "93129f45-1c07-47d2-9e44-bf954935d04d"
        },
        "item": {
          "id": "9f49ac6a-9d43-4ef8-aabd-4a4f319c7d8b",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "62d6ea91-a5cf-4edd-8b94-7262dac3a43e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9d0b4a8-993c-43dd-9533-f0486ad33094",
        "cursor": {
          "ref": "4e386cf5-9d72-4a94-9d84-f9791660955c",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "79c91949-334a-4487-abbf-ba70e0305cc8"
        },
        "item": {
          "id": "e9d0b4a8-993c-43dd-9533-f0486ad33094",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "93a92178-e958-4ecf-943d-cc7af4a042e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9d0b4a8-993c-43dd-9533-f0486ad33094",
        "cursor": {
          "ref": "4e386cf5-9d72-4a94-9d84-f9791660955c",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "79c91949-334a-4487-abbf-ba70e0305cc8"
        },
        "item": {
          "id": "e9d0b4a8-993c-43dd-9533-f0486ad33094",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "93a92178-e958-4ecf-943d-cc7af4a042e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "527217e3-bbff-4fd7-a445-1145d67378f8",
        "cursor": {
          "ref": "5f7c3457-d692-42f5-a244-08d7c9997ff9",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c5faef56-a753-4b5c-8e83-5fd6638f454d"
        },
        "item": {
          "id": "527217e3-bbff-4fd7-a445-1145d67378f8",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "64c522be-8320-4124-9888-365244271859",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "527217e3-bbff-4fd7-a445-1145d67378f8",
        "cursor": {
          "ref": "5f7c3457-d692-42f5-a244-08d7c9997ff9",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c5faef56-a753-4b5c-8e83-5fd6638f454d"
        },
        "item": {
          "id": "527217e3-bbff-4fd7-a445-1145d67378f8",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "64c522be-8320-4124-9888-365244271859",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "004dd4a1-eecb-4f4f-973d-8ae283aa7fee",
        "cursor": {
          "ref": "fdb4d4dc-17c8-4eb2-9ba7-e8d96ee4790e",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c70e2062-4441-4d8e-8bf5-2b87afba360d"
        },
        "item": {
          "id": "004dd4a1-eecb-4f4f-973d-8ae283aa7fee",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "918850af-9d8c-4746-bf2d-b265d498e721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "004dd4a1-eecb-4f4f-973d-8ae283aa7fee",
        "cursor": {
          "ref": "fdb4d4dc-17c8-4eb2-9ba7-e8d96ee4790e",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c70e2062-4441-4d8e-8bf5-2b87afba360d"
        },
        "item": {
          "id": "004dd4a1-eecb-4f4f-973d-8ae283aa7fee",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "918850af-9d8c-4746-bf2d-b265d498e721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b90fb70-3659-41d9-b6d1-41dfae29d2c5",
        "cursor": {
          "ref": "dfa5768c-901f-4357-9723-871a7a438c0d",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "100a2bd8-bb0e-48db-950a-969324c5a28b"
        },
        "item": {
          "id": "9b90fb70-3659-41d9-b6d1-41dfae29d2c5",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "dab9a52d-9301-4a28-814a-c3bf5455ae71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b90fb70-3659-41d9-b6d1-41dfae29d2c5",
        "cursor": {
          "ref": "dfa5768c-901f-4357-9723-871a7a438c0d",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "100a2bd8-bb0e-48db-950a-969324c5a28b"
        },
        "item": {
          "id": "9b90fb70-3659-41d9-b6d1-41dfae29d2c5",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "dab9a52d-9301-4a28-814a-c3bf5455ae71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8548818a-a0a9-4d28-8f64-a76940ec31f7",
        "cursor": {
          "ref": "ab91d9ab-1b67-4d37-ab39-29a805339981",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "8f74aac2-c798-4fbe-b1ea-53d34938766e"
        },
        "item": {
          "id": "8548818a-a0a9-4d28-8f64-a76940ec31f7",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "6311e9bf-3246-4ff2-9a91-5d5b90530147",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8548818a-a0a9-4d28-8f64-a76940ec31f7",
        "cursor": {
          "ref": "ab91d9ab-1b67-4d37-ab39-29a805339981",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "8f74aac2-c798-4fbe-b1ea-53d34938766e"
        },
        "item": {
          "id": "8548818a-a0a9-4d28-8f64-a76940ec31f7",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "6311e9bf-3246-4ff2-9a91-5d5b90530147",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28d9a387-d24e-4d40-a344-808ec679a1b3",
        "cursor": {
          "ref": "12317ff0-f528-4430-a49f-5b349459a217",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "fe780b60-f5eb-424a-96ad-4c6938abc933"
        },
        "item": {
          "id": "28d9a387-d24e-4d40-a344-808ec679a1b3",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "decbcfaa-8705-4df1-a722-633847660841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28d9a387-d24e-4d40-a344-808ec679a1b3",
        "cursor": {
          "ref": "12317ff0-f528-4430-a49f-5b349459a217",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "fe780b60-f5eb-424a-96ad-4c6938abc933"
        },
        "item": {
          "id": "28d9a387-d24e-4d40-a344-808ec679a1b3",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "decbcfaa-8705-4df1-a722-633847660841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e010c22e-7338-442f-8d58-212e0a3be660",
        "cursor": {
          "ref": "26a80c66-0385-430c-955e-d1bb9240590d",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "55c91d48-8c8a-4441-a978-846ecb10fa9e"
        },
        "item": {
          "id": "e010c22e-7338-442f-8d58-212e0a3be660",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "2ef24c12-a607-4345-8644-334d22291f65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e010c22e-7338-442f-8d58-212e0a3be660",
        "cursor": {
          "ref": "26a80c66-0385-430c-955e-d1bb9240590d",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "55c91d48-8c8a-4441-a978-846ecb10fa9e"
        },
        "item": {
          "id": "e010c22e-7338-442f-8d58-212e0a3be660",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "2ef24c12-a607-4345-8644-334d22291f65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "063e7508-55a0-4764-bf16-7f5b81fb1eba",
        "cursor": {
          "ref": "b76d936a-5753-4d42-a68f-2b683d101c6b",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "0e1fe88e-8dac-48f9-ad3f-d798b3b1bde5"
        },
        "item": {
          "id": "063e7508-55a0-4764-bf16-7f5b81fb1eba",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "0fc5203f-11f6-41a4-b7f1-3c77895138ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "063e7508-55a0-4764-bf16-7f5b81fb1eba",
        "cursor": {
          "ref": "b76d936a-5753-4d42-a68f-2b683d101c6b",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "0e1fe88e-8dac-48f9-ad3f-d798b3b1bde5"
        },
        "item": {
          "id": "063e7508-55a0-4764-bf16-7f5b81fb1eba",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "0fc5203f-11f6-41a4-b7f1-3c77895138ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bba56ec5-92a3-44c9-a731-ec2aa409c447",
        "cursor": {
          "ref": "c66442a2-b2fb-44f6-aa2a-5c616e89fd25",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d6a0a707-7783-4ffa-a3de-1ba03209f844"
        },
        "item": {
          "id": "bba56ec5-92a3-44c9-a731-ec2aa409c447",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "5550bf77-26db-4618-86e4-429099e97ba6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bba56ec5-92a3-44c9-a731-ec2aa409c447",
        "cursor": {
          "ref": "c66442a2-b2fb-44f6-aa2a-5c616e89fd25",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d6a0a707-7783-4ffa-a3de-1ba03209f844"
        },
        "item": {
          "id": "bba56ec5-92a3-44c9-a731-ec2aa409c447",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "5550bf77-26db-4618-86e4-429099e97ba6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3cdc977-89be-43ac-b216-b2b99c2b138f",
        "cursor": {
          "ref": "4e04b7b6-078d-4c3f-9953-19d691ac18b5",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "56104419-4941-421f-896f-9e769aa94074"
        },
        "item": {
          "id": "c3cdc977-89be-43ac-b216-b2b99c2b138f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "31533b1b-6b54-4287-afd6-f855ab96f409",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3cdc977-89be-43ac-b216-b2b99c2b138f",
        "cursor": {
          "ref": "4e04b7b6-078d-4c3f-9953-19d691ac18b5",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "56104419-4941-421f-896f-9e769aa94074"
        },
        "item": {
          "id": "c3cdc977-89be-43ac-b216-b2b99c2b138f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "31533b1b-6b54-4287-afd6-f855ab96f409",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e925f75-2e5e-4c66-8b56-fbcbbbe85c52",
        "cursor": {
          "ref": "5c955ada-cfd6-43f0-9366-e0d8c15ecd4a",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d65a0d3f-9f26-43f5-b2c6-30c34e75be7b"
        },
        "item": {
          "id": "9e925f75-2e5e-4c66-8b56-fbcbbbe85c52",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "4034a3e2-1aa8-4fc1-a6fe-9aa74c6fcaab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e925f75-2e5e-4c66-8b56-fbcbbbe85c52",
        "cursor": {
          "ref": "5c955ada-cfd6-43f0-9366-e0d8c15ecd4a",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d65a0d3f-9f26-43f5-b2c6-30c34e75be7b"
        },
        "item": {
          "id": "9e925f75-2e5e-4c66-8b56-fbcbbbe85c52",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "4034a3e2-1aa8-4fc1-a6fe-9aa74c6fcaab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "265dc32f-e037-499a-b2f1-ebb2204fb70f",
        "cursor": {
          "ref": "eeeb3a42-774e-4025-a3a4-697275000176",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "b24d313e-cde0-48f5-ac69-60b6566a7f07"
        },
        "item": {
          "id": "265dc32f-e037-499a-b2f1-ebb2204fb70f",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "ff5d011d-7e62-4ca9-b52c-da2dc72193dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "265dc32f-e037-499a-b2f1-ebb2204fb70f",
        "cursor": {
          "ref": "eeeb3a42-774e-4025-a3a4-697275000176",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "b24d313e-cde0-48f5-ac69-60b6566a7f07"
        },
        "item": {
          "id": "265dc32f-e037-499a-b2f1-ebb2204fb70f",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "ff5d011d-7e62-4ca9-b52c-da2dc72193dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbf03e8e-da78-4f03-9871-7f8e260dd9a5",
        "cursor": {
          "ref": "1273d320-70f2-42a9-9a58-a505d4372815",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "0cee6ac8-5866-42db-8a93-00ac05d94099"
        },
        "item": {
          "id": "dbf03e8e-da78-4f03-9871-7f8e260dd9a5",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "0a8e3669-b9d8-436d-b754-fcd906a24d98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbf03e8e-da78-4f03-9871-7f8e260dd9a5",
        "cursor": {
          "ref": "1273d320-70f2-42a9-9a58-a505d4372815",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "0cee6ac8-5866-42db-8a93-00ac05d94099"
        },
        "item": {
          "id": "dbf03e8e-da78-4f03-9871-7f8e260dd9a5",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "0a8e3669-b9d8-436d-b754-fcd906a24d98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57ddce3b-bf6b-4e87-9b6b-ca090294af41",
        "cursor": {
          "ref": "ee643b68-220f-4805-9af2-22b63236b16c",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "76895476-9ab0-4a7e-914c-5d0053accb20"
        },
        "item": {
          "id": "57ddce3b-bf6b-4e87-9b6b-ca090294af41",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "16815020-d45f-4ceb-b242-162a88efdf7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57ddce3b-bf6b-4e87-9b6b-ca090294af41",
        "cursor": {
          "ref": "ee643b68-220f-4805-9af2-22b63236b16c",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "76895476-9ab0-4a7e-914c-5d0053accb20"
        },
        "item": {
          "id": "57ddce3b-bf6b-4e87-9b6b-ca090294af41",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "16815020-d45f-4ceb-b242-162a88efdf7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f3fe330-af75-4ba1-9f95-83ca99fbd39f",
        "cursor": {
          "ref": "a860ba49-e6ea-480c-acdc-64974f2fca82",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "7e5b63e0-4837-430c-bee3-4dac01cac401"
        },
        "item": {
          "id": "0f3fe330-af75-4ba1-9f95-83ca99fbd39f",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "ce509bff-241a-4746-b302-737a7d1c6344",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f3fe330-af75-4ba1-9f95-83ca99fbd39f",
        "cursor": {
          "ref": "a860ba49-e6ea-480c-acdc-64974f2fca82",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "7e5b63e0-4837-430c-bee3-4dac01cac401"
        },
        "item": {
          "id": "0f3fe330-af75-4ba1-9f95-83ca99fbd39f",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "ce509bff-241a-4746-b302-737a7d1c6344",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad195010-e7ed-43a9-a138-8d70e8b631c5",
        "cursor": {
          "ref": "1ce02420-74eb-49d1-8b14-02e007882813",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "23127705-a2be-41cd-91a9-a1ea3804695c"
        },
        "item": {
          "id": "ad195010-e7ed-43a9-a138-8d70e8b631c5",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "325d3a78-cd93-4db1-88f5-bb654710a735",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad195010-e7ed-43a9-a138-8d70e8b631c5",
        "cursor": {
          "ref": "1ce02420-74eb-49d1-8b14-02e007882813",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "23127705-a2be-41cd-91a9-a1ea3804695c"
        },
        "item": {
          "id": "ad195010-e7ed-43a9-a138-8d70e8b631c5",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "325d3a78-cd93-4db1-88f5-bb654710a735",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ca7fa09-0b62-47a2-b271-c1b27e2bc176",
        "cursor": {
          "ref": "89526762-898a-4578-84c8-ad4d2a3de51f",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "79577bd3-b9a5-4d90-83a1-5c4e52486c77"
        },
        "item": {
          "id": "1ca7fa09-0b62-47a2-b271-c1b27e2bc176",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "f63065b8-f7b5-4daa-81c1-276361b275ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ca7fa09-0b62-47a2-b271-c1b27e2bc176",
        "cursor": {
          "ref": "89526762-898a-4578-84c8-ad4d2a3de51f",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "79577bd3-b9a5-4d90-83a1-5c4e52486c77"
        },
        "item": {
          "id": "1ca7fa09-0b62-47a2-b271-c1b27e2bc176",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "f63065b8-f7b5-4daa-81c1-276361b275ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13fbbae0-4cd5-4dfc-85d8-2eae6f61b434",
        "cursor": {
          "ref": "5745a990-9138-4b0c-a2ac-9530d6d03e8a",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "db16f934-4e83-4352-a671-98f7a9c76cc0"
        },
        "item": {
          "id": "13fbbae0-4cd5-4dfc-85d8-2eae6f61b434",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "d2ac717e-2a84-4d6f-840d-d942104b51fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 560
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13fbbae0-4cd5-4dfc-85d8-2eae6f61b434",
        "cursor": {
          "ref": "5745a990-9138-4b0c-a2ac-9530d6d03e8a",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "db16f934-4e83-4352-a671-98f7a9c76cc0"
        },
        "item": {
          "id": "13fbbae0-4cd5-4dfc-85d8-2eae6f61b434",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "d2ac717e-2a84-4d6f-840d-d942104b51fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 560
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92153e9b-f643-4f8c-b591-c8d89c9538d2",
        "cursor": {
          "ref": "89657efe-b279-4d2b-864f-f2cd724e735f",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "1e0e7ee4-8795-4138-8478-4991704f5b2f"
        },
        "item": {
          "id": "92153e9b-f643-4f8c-b591-c8d89c9538d2",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "e7f0e0fd-3b8f-422a-8fee-a92e33898ed3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92153e9b-f643-4f8c-b591-c8d89c9538d2",
        "cursor": {
          "ref": "89657efe-b279-4d2b-864f-f2cd724e735f",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "1e0e7ee4-8795-4138-8478-4991704f5b2f"
        },
        "item": {
          "id": "92153e9b-f643-4f8c-b591-c8d89c9538d2",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "e7f0e0fd-3b8f-422a-8fee-a92e33898ed3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6589562b-eb8c-40a5-9420-b1017a22fbfd",
        "cursor": {
          "ref": "d91708b0-9327-40f1-8094-892dbe943fef",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "07e62c5a-40f1-4350-b267-9eefb04110c7"
        },
        "item": {
          "id": "6589562b-eb8c-40a5-9420-b1017a22fbfd",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "b54b4017-239f-49c6-8162-b64dfce4ad75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6589562b-eb8c-40a5-9420-b1017a22fbfd",
        "cursor": {
          "ref": "d91708b0-9327-40f1-8094-892dbe943fef",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "07e62c5a-40f1-4350-b267-9eefb04110c7"
        },
        "item": {
          "id": "6589562b-eb8c-40a5-9420-b1017a22fbfd",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "b54b4017-239f-49c6-8162-b64dfce4ad75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9df58cea-4bc4-4296-a893-b792f2177ac7",
        "cursor": {
          "ref": "c67e22d3-3bf5-466b-a892-16e056e71f66",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "6ef553c8-1fbd-4431-b0be-d18cb3b956a9"
        },
        "item": {
          "id": "9df58cea-4bc4-4296-a893-b792f2177ac7",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "16b648ed-46bc-4e42-87dd-7b33cbe3eb27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9df58cea-4bc4-4296-a893-b792f2177ac7",
        "cursor": {
          "ref": "c67e22d3-3bf5-466b-a892-16e056e71f66",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "6ef553c8-1fbd-4431-b0be-d18cb3b956a9"
        },
        "item": {
          "id": "9df58cea-4bc4-4296-a893-b792f2177ac7",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "16b648ed-46bc-4e42-87dd-7b33cbe3eb27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92eecd1e-7eb6-4168-9b34-a30f0eb132f9",
        "cursor": {
          "ref": "7ec7dd4c-7f71-4d1c-91c5-8db7ae0e45bb",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "66ef5831-d68c-4641-9b53-67a64c6ba251"
        },
        "item": {
          "id": "92eecd1e-7eb6-4168-9b34-a30f0eb132f9",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "bc413ee5-c1e7-4591-8217-41b02b4fb959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92eecd1e-7eb6-4168-9b34-a30f0eb132f9",
        "cursor": {
          "ref": "7ec7dd4c-7f71-4d1c-91c5-8db7ae0e45bb",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "66ef5831-d68c-4641-9b53-67a64c6ba251"
        },
        "item": {
          "id": "92eecd1e-7eb6-4168-9b34-a30f0eb132f9",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "bc413ee5-c1e7-4591-8217-41b02b4fb959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f568dbe-6f51-4010-b280-fa417b1d6ae6",
        "cursor": {
          "ref": "6a02a33e-b99f-4c72-8d48-32781fc42835",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a4df7fd4-e79d-4fce-add6-a7959490e763"
        },
        "item": {
          "id": "3f568dbe-6f51-4010-b280-fa417b1d6ae6",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "e9a5f357-c617-488e-b692-8538837c1b71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 392
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f568dbe-6f51-4010-b280-fa417b1d6ae6",
        "cursor": {
          "ref": "6a02a33e-b99f-4c72-8d48-32781fc42835",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a4df7fd4-e79d-4fce-add6-a7959490e763"
        },
        "item": {
          "id": "3f568dbe-6f51-4010-b280-fa417b1d6ae6",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "e9a5f357-c617-488e-b692-8538837c1b71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 392
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09e43bee-16d5-4ff2-af67-97d4beb6407b",
        "cursor": {
          "ref": "754dca7d-e5af-4d3a-93d4-563712523487",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "dac921fd-b341-401c-9cf1-88ae3f643dd8"
        },
        "item": {
          "id": "09e43bee-16d5-4ff2-af67-97d4beb6407b",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "5cb24185-a464-44d0-8464-cacc9a6cb01b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09e43bee-16d5-4ff2-af67-97d4beb6407b",
        "cursor": {
          "ref": "754dca7d-e5af-4d3a-93d4-563712523487",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "dac921fd-b341-401c-9cf1-88ae3f643dd8"
        },
        "item": {
          "id": "09e43bee-16d5-4ff2-af67-97d4beb6407b",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "5cb24185-a464-44d0-8464-cacc9a6cb01b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c89aa28f-c7a0-4765-9b31-0e72f941b1d4",
        "cursor": {
          "ref": "dd2a0cdd-fffa-4080-8465-faec26073b87",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "b667c125-45da-42f6-9bc0-aba16ceac87f"
        },
        "item": {
          "id": "c89aa28f-c7a0-4765-9b31-0e72f941b1d4",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "5a89d854-d1bb-442a-9f77-fa4691e65a5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c89aa28f-c7a0-4765-9b31-0e72f941b1d4",
        "cursor": {
          "ref": "dd2a0cdd-fffa-4080-8465-faec26073b87",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "b667c125-45da-42f6-9bc0-aba16ceac87f"
        },
        "item": {
          "id": "c89aa28f-c7a0-4765-9b31-0e72f941b1d4",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "5a89d854-d1bb-442a-9f77-fa4691e65a5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "106e1f70-e27c-4fdf-8021-502eb8d251ee",
        "cursor": {
          "ref": "01ea1f51-be25-4e85-a65c-88ec1820b765",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "dea85b1d-25e1-4781-a852-836266532bfe"
        },
        "item": {
          "id": "106e1f70-e27c-4fdf-8021-502eb8d251ee",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "0cb433ba-6dd7-4185-a17f-6aba85a42708",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "106e1f70-e27c-4fdf-8021-502eb8d251ee",
        "cursor": {
          "ref": "01ea1f51-be25-4e85-a65c-88ec1820b765",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "dea85b1d-25e1-4781-a852-836266532bfe"
        },
        "item": {
          "id": "106e1f70-e27c-4fdf-8021-502eb8d251ee",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "0cb433ba-6dd7-4185-a17f-6aba85a42708",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4824eb4e-7bb0-489b-897c-b69abc61d7d6",
        "cursor": {
          "ref": "be91a07d-98f4-4998-b484-df4954e11581",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "01d80fc5-6d6d-4836-b7da-f0db856c01de"
        },
        "item": {
          "id": "4824eb4e-7bb0-489b-897c-b69abc61d7d6",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "85bb8c5c-9a5a-46d7-90b9-2fd5c2a264f6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4824eb4e-7bb0-489b-897c-b69abc61d7d6",
        "cursor": {
          "ref": "be91a07d-98f4-4998-b484-df4954e11581",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "01d80fc5-6d6d-4836-b7da-f0db856c01de"
        },
        "item": {
          "id": "4824eb4e-7bb0-489b-897c-b69abc61d7d6",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "85bb8c5c-9a5a-46d7-90b9-2fd5c2a264f6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f512d996-19ec-4634-b731-b0b0fdb67161",
        "cursor": {
          "ref": "f1e42001-0766-4980-9a08-e671661e548e",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "6cd7aede-e649-4d72-8458-b6f41bb55a3d"
        },
        "item": {
          "id": "f512d996-19ec-4634-b731-b0b0fdb67161",
          "name": "credentials_issue"
        },
        "response": {
          "id": "82560bce-4573-465f-bb45-50359ce80801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "expected undefined to equal 'did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV'",
              "stack": "AssertionError: expected undefined to equal 'did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV'\n   at Object.eval sandbox-script.js:3:41)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "expected undefined to equal 'did:example:123'",
              "stack": "AssertionError: expected undefined to equal 'did:example:123'\n   at Object.eval sandbox-script.js:4:41)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "expected undefined to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected undefined to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:5:41)"
            }
          }
        ]
      },
      {
        "id": "f512d996-19ec-4634-b731-b0b0fdb67161",
        "cursor": {
          "ref": "f1e42001-0766-4980-9a08-e671661e548e",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "6cd7aede-e649-4d72-8458-b6f41bb55a3d"
        },
        "item": {
          "id": "f512d996-19ec-4634-b731-b0b0fdb67161",
          "name": "credentials_issue"
        },
        "response": {
          "id": "82560bce-4573-465f-bb45-50359ce80801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "expected undefined to equal 'did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV'",
              "stack": "AssertionError: expected undefined to equal 'did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV'\n   at Object.eval sandbox-script.js:3:41)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "expected undefined to equal 'did:example:123'",
              "stack": "AssertionError: expected undefined to equal 'did:example:123'\n   at Object.eval sandbox-script.js:4:41)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "expected undefined to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected undefined to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:5:41)"
            }
          }
        ]
      },
      {
        "id": "37996a1b-b978-4436-8391-7036a24310ec",
        "cursor": {
          "ref": "39bc42f2-a71b-40b5-822f-378adebc0505",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "d5b31ac6-d226-4884-9afc-fca890d6fd5b"
        },
        "item": {
          "id": "37996a1b-b978-4436-8391-7036a24310ec",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "3d6db00a-e2d8-4b0a-85a1-96a843d7763b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "37996a1b-b978-4436-8391-7036a24310ec",
        "cursor": {
          "ref": "39bc42f2-a71b-40b5-822f-378adebc0505",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "d5b31ac6-d226-4884-9afc-fca890d6fd5b"
        },
        "item": {
          "id": "37996a1b-b978-4436-8391-7036a24310ec",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "3d6db00a-e2d8-4b0a-85a1-96a843d7763b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "04c34c5d-c026-4306-b382-aec35a2fbe30",
        "cursor": {
          "ref": "7eee37b9-dd03-41c2-8d4a-8f958f6f7896",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "2aa4524a-ab72-4868-a673-3d66ec25272f"
        },
        "item": {
          "id": "04c34c5d-c026-4306-b382-aec35a2fbe30",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e8e9423e-1a35-46e9-b1ee-9317ca348c9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:43)"
            }
          }
        ]
      },
      {
        "id": "04c34c5d-c026-4306-b382-aec35a2fbe30",
        "cursor": {
          "ref": "7eee37b9-dd03-41c2-8d4a-8f958f6f7896",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "2aa4524a-ab72-4868-a673-3d66ec25272f"
        },
        "item": {
          "id": "04c34c5d-c026-4306-b382-aec35a2fbe30",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e8e9423e-1a35-46e9-b1ee-9317ca348c9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:43)"
            }
          }
        ]
      },
      {
        "id": "9e300c32-dead-481c-8bca-da4e20eb0a97",
        "cursor": {
          "ref": "1e0e7326-2284-486b-adf9-94077c3fee44",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "6a35eba3-d245-4e50-91f1-dccdca211cae"
        },
        "item": {
          "id": "9e300c32-dead-481c-8bca-da4e20eb0a97",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "ba3a34a5-f7d8-4f9e-9c36-1526d2c37aaa",
          "status": "Created",
          "code": 201,
          "responseTime": 1232,
          "responseSize": 552
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "9e300c32-dead-481c-8bca-da4e20eb0a97",
        "cursor": {
          "ref": "1e0e7326-2284-486b-adf9-94077c3fee44",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "6a35eba3-d245-4e50-91f1-dccdca211cae"
        },
        "item": {
          "id": "9e300c32-dead-481c-8bca-da4e20eb0a97",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "ba3a34a5-f7d8-4f9e-9c36-1526d2c37aaa",
          "status": "Created",
          "code": 201,
          "responseTime": 1232,
          "responseSize": 552
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "61848ac0-1893-4de5-a8c4-4f899d7fc253",
        "cursor": {
          "ref": "7a2090db-939c-42af-ac7f-0f7329d9cec1",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "b52e3562-e55f-4c7e-aa65-77f1f64ca906"
        },
        "item": {
          "id": "61848ac0-1893-4de5-a8c4-4f899d7fc253",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "237dbadf-faad-4cc6-af83-ccd3b8dfe02b",
          "status": "Created",
          "code": 201,
          "responseTime": 332,
          "responseSize": 574
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "61848ac0-1893-4de5-a8c4-4f899d7fc253",
        "cursor": {
          "ref": "7a2090db-939c-42af-ac7f-0f7329d9cec1",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "b52e3562-e55f-4c7e-aa65-77f1f64ca906"
        },
        "item": {
          "id": "61848ac0-1893-4de5-a8c4-4f899d7fc253",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "237dbadf-faad-4cc6-af83-ccd3b8dfe02b",
          "status": "Created",
          "code": 201,
          "responseTime": 332,
          "responseSize": 574
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe16dd04-efae-4ac2-8a15-8d3b11647b5a",
        "cursor": {
          "ref": "0f7cb7e8-656e-4910-a3d1-9522da40ada2",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "22b2f391-0730-4eac-b872-5ec1375066c2"
        },
        "item": {
          "id": "fe16dd04-efae-4ac2-8a15-8d3b11647b5a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "25139230-af93-49e0-ab9a-2a9161baf047",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "fe16dd04-efae-4ac2-8a15-8d3b11647b5a",
        "cursor": {
          "ref": "0f7cb7e8-656e-4910-a3d1-9522da40ada2",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "22b2f391-0730-4eac-b872-5ec1375066c2"
        },
        "item": {
          "id": "fe16dd04-efae-4ac2-8a15-8d3b11647b5a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "25139230-af93-49e0-ab9a-2a9161baf047",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "bfee97ff-5713-4ffa-a270-c2a03880beac",
        "cursor": {
          "ref": "6052a9d5-4647-4df9-b352-f15078f9d141",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "4aa02990-b36e-480f-a40d-e77ad40d9f10"
        },
        "item": {
          "id": "bfee97ff-5713-4ffa-a270-c2a03880beac",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1c1ef9f7-0fb6-464b-8030-92b66b783019",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "bfee97ff-5713-4ffa-a270-c2a03880beac",
        "cursor": {
          "ref": "6052a9d5-4647-4df9-b352-f15078f9d141",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "4aa02990-b36e-480f-a40d-e77ad40d9f10"
        },
        "item": {
          "id": "bfee97ff-5713-4ffa-a270-c2a03880beac",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1c1ef9f7-0fb6-464b-8030-92b66b783019",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "38269e3e-9920-45d6-9738-4f8d7151dd49",
        "cursor": {
          "ref": "e0759dab-ae8a-4472-ac1b-8558a9c5b201",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "fa507709-5e6c-431f-b496-e082123876b3"
        },
        "item": {
          "id": "38269e3e-9920-45d6-9738-4f8d7151dd49",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "d61f705e-d906-4274-b1ee-356df59f59e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "38269e3e-9920-45d6-9738-4f8d7151dd49",
        "cursor": {
          "ref": "e0759dab-ae8a-4472-ac1b-8558a9c5b201",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "fa507709-5e6c-431f-b496-e082123876b3"
        },
        "item": {
          "id": "38269e3e-9920-45d6-9738-4f8d7151dd49",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "d61f705e-d906-4274-b1ee-356df59f59e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "75774136-706b-40a0-bfac-a72f04e4f783",
        "cursor": {
          "ref": "29788e8f-6055-404e-baa5-c7f8f17967ba",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "4ab770fd-0ad4-4afc-a625-c088dc303d00"
        },
        "item": {
          "id": "75774136-706b-40a0-bfac-a72f04e4f783",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "9856b803-77eb-42cf-b5ab-df44ce64b3f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75774136-706b-40a0-bfac-a72f04e4f783",
        "cursor": {
          "ref": "29788e8f-6055-404e-baa5-c7f8f17967ba",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "4ab770fd-0ad4-4afc-a625-c088dc303d00"
        },
        "item": {
          "id": "75774136-706b-40a0-bfac-a72f04e4f783",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "9856b803-77eb-42cf-b5ab-df44ce64b3f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96c07c75-ed1f-46de-8c55-cce0bb2f12d9",
        "cursor": {
          "ref": "ccb041df-887b-4a04-9515-12087e1b52bb",
          "length": 58,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "dbb4103c-b14b-4238-8611-27e81c69f974"
        },
        "item": {
          "id": "96c07c75-ed1f-46de-8c55-cce0bb2f12d9",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "732c4a98-ad02-42fd-be51-70af6f7f58a1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7be3247c-1734-4914-82f3-c74e74721d25",
        "cursor": {
          "ref": "4d6a91ff-1cec-4cf8-add8-93c02a1b75df",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d652da91-9279-4784-87b0-fb9b025b2d55"
        },
        "item": {
          "id": "7be3247c-1734-4914-82f3-c74e74721d25",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "22200c33-ae65-46e7-ae4b-e442eeceba53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7be3247c-1734-4914-82f3-c74e74721d25",
        "cursor": {
          "ref": "4d6a91ff-1cec-4cf8-add8-93c02a1b75df",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d652da91-9279-4784-87b0-fb9b025b2d55"
        },
        "item": {
          "id": "7be3247c-1734-4914-82f3-c74e74721d25",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "22200c33-ae65-46e7-ae4b-e442eeceba53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77897fea-9b45-4fdf-b269-b266dc67740b",
        "cursor": {
          "ref": "0743efe6-f584-4497-9db9-6ff64f412d24",
          "length": 58,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "406fe38d-0f22-4442-a898-761d84642380"
        },
        "item": {
          "id": "77897fea-9b45-4fdf-b269-b266dc67740b",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "35be7183-ad37-4f25-8aa2-ce3e5654a198",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 33,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "491e2826-1cc1-4647-bbd2-8ed40e6dd16f",
        "cursor": {
          "ref": "7005eaef-57f7-4d25-9629-498e9a237a78",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "cebb472c-5259-4fdb-b738-b70e8d5b1dd4"
        },
        "item": {
          "id": "491e2826-1cc1-4647-bbd2-8ed40e6dd16f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a1e1d154-db1e-4788-8138-06bf7ec419ed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "491e2826-1cc1-4647-bbd2-8ed40e6dd16f",
        "cursor": {
          "ref": "7005eaef-57f7-4d25-9629-498e9a237a78",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "cebb472c-5259-4fdb-b738-b70e8d5b1dd4"
        },
        "item": {
          "id": "491e2826-1cc1-4647-bbd2-8ed40e6dd16f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a1e1d154-db1e-4788-8138-06bf7ec419ed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e827cc88-1f42-4786-bb89-5ea405c97af0",
        "cursor": {
          "ref": "221ec84d-ac4b-4812-a175-8fdbe0cd53be",
          "length": 58,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c7cd409d-7fa2-431f-8e1d-afcf85037e7a"
        },
        "item": {
          "id": "e827cc88-1f42-4786-bb89-5ea405c97af0",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "e214d28c-395c-4766-b12e-7728ee583bbf",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e162e6de-449f-42d7-8dd9-762d2dad0242",
        "cursor": {
          "ref": "c98e7b67-5583-4bf8-9944-6845786f0bca",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "6d5fd4f2-589a-482c-863b-08504fdc8227"
        },
        "item": {
          "id": "e162e6de-449f-42d7-8dd9-762d2dad0242",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f68c56cf-aebf-46bb-9bc3-857f4a5d9bcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "e162e6de-449f-42d7-8dd9-762d2dad0242",
        "cursor": {
          "ref": "c98e7b67-5583-4bf8-9944-6845786f0bca",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "6d5fd4f2-589a-482c-863b-08504fdc8227"
        },
        "item": {
          "id": "e162e6de-449f-42d7-8dd9-762d2dad0242",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f68c56cf-aebf-46bb-9bc3-857f4a5d9bcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "f5aeb89f-0719-4808-8741-f58212d1c39c",
        "cursor": {
          "ref": "d0bba2b2-7d9f-44b6-aaa6-65dc94a55f88",
          "length": 58,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "78e30ab2-150c-45f8-9698-c023ab53a09b"
        },
        "item": {
          "id": "f5aeb89f-0719-4808-8741-f58212d1c39c",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "6c8c98e2-54d2-4db8-a473-4f15701979eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "b9293665-4ffb-47aa-9d21-8512ce6ea091",
        "cursor": {
          "ref": "a83a6599-1a10-4970-ad54-a1c9b309f028",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "91f95b6d-4c8c-4b25-ae30-11871393026b"
        },
        "item": {
          "id": "b9293665-4ffb-47aa-9d21-8512ce6ea091",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "b102f079-adcf-4427-8c40-c0784de11ac1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9293665-4ffb-47aa-9d21-8512ce6ea091",
        "cursor": {
          "ref": "a83a6599-1a10-4970-ad54-a1c9b309f028",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "91f95b6d-4c8c-4b25-ae30-11871393026b"
        },
        "item": {
          "id": "b9293665-4ffb-47aa-9d21-8512ce6ea091",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "b102f079-adcf-4427-8c40-c0784de11ac1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecb740ab-b112-4b2e-aadb-d36fc4224a4f",
        "cursor": {
          "ref": "42a9e84d-3560-4a5e-84bf-31423c24ab39",
          "length": 58,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "5fd131cd-65e2-4b06-a6bf-7684c530c0d6"
        },
        "item": {
          "id": "ecb740ab-b112-4b2e-aadb-d36fc4224a4f",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "3a09eae9-c291-4239-bc88-b965b6f2e798",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}