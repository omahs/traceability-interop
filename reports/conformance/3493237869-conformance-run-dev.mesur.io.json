{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "00c749d1-4d11-4187-abfe-7e1cc01f12ba",
        "name": "Clear Cache",
        "item": [
          {
            "id": "7fa2a3e1-8e83-4d18-8b42-feabc39439f7",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "584e29a9-3a1a-4899-9fa0-c756cca7bd01",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3eb4fb95-39e6-4a70-8db5-136879502d28"
                }
              }
            ]
          },
          {
            "id": "d2ed2866-2b73-4e7d-9ab2-809cbe9e26d9",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "30a973c3-fd46-43cb-8792-083205bba5b9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9438f661-4848-4b45-84bd-054a518408c9"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "4f36cd93-036e-4381-bda4-4d364baf95fe",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "0ae24f70-f324-4d07-8efc-0e353bf96e9f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e3bd4856-7e78-4010-a907-21c033204702",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "db4b58bf-5d2e-4fa5-850a-14821c1b8228",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "86be2a39-058d-40bd-8cd5-d85d1df5f3f2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7814a4d2-14f6-4b74-8cdb-f2cce2f3fa4f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4ec903db-85de-4e0f-83ed-33041c99ee46"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "011a858b-2790-4785-8365-9c64ecaa6206",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "136a1dad-4f4a-473e-a4f6-bebf2383ddbe"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "42c4c15c-12f8-417a-bbba-5bcc4227a62a",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "9e77b89c-306b-42e8-a6f3-8e684d9ff150"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cd8b5d72-501a-4cd4-96de-8a8d26206c28",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "497f76fd-545d-4b5b-8cb1-15fb5cd3d040"
            }
          }
        ]
      },
      {
        "id": "5e49d32f-45c7-4157-9804-a7867644923b",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "f4d91a3f-4e63-4efa-86de-764cd1821ce6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "642e5303-1d46-48dd-b0ce-824ca15693db",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8b034082-0140-4177-b1c5-098a8b794d65",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6ceb2d4-a7ab-4e74-b039-10536a4b0210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "adc8e001-19d5-4fe3-9eff-58a7a6388f03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5af64654-8638-4096-bc4b-50cccdf8e974",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c6ec53d-8486-4a77-b055-c3f3da2db258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "964e16c9-6e5e-427d-baae-d347c88a733d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d373e00-7c9c-4618-8be6-a98598e05391",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aa669a7-afae-48fa-b9a8-b5c23babbaa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a6cdf422-1d5b-48ce-a079-3b6e4043a0d8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "12406e6d-fc71-4a57-ae7f-6234b0046ef5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2c723b2b-2034-425e-ae32-062e9902bcc4",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a69e5f54-a350-462a-870b-a6ca621beee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1eea7e2b-afcc-4e7d-b227-621877a34a24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82607163-8dba-4836-a027-12e194d163b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0529cb4-c1b8-4f79-8a91-398b32c56484"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56d6ac9b-6754-421b-889f-2411e7a821af",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec794c78-3d7d-498f-92fc-e5b471f941d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "acae25aa-2a09-432c-8c11-e5f9b364d0b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6f06a6d-b39c-47d7-a0dd-c5b6e31510be",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "96921d98-a528-4324-a22f-06f3885f6e02"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d1f546c1-b5a8-4627-a1ca-7c4c14888566",
            "name": "Positive Testing",
            "item": [
              {
                "id": "aa5b8b3d-8b4d-4d33-b844-6436f7ffcc34",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "17e6b7da-92a8-4181-86a5-ef9d917c7c7d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "08c5ed25-7bb6-4c49-9e6c-115e310708a7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f89cf494-b71b-483b-a0a2-662c7aacd425",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "7d9e9eec-724e-4613-87a1-4d65fd3be283"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c81ab1ab-750d-4295-9448-91843afb06d1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e695246c-a112-44d1-939a-6d7221a527e7"
            }
          }
        ]
      },
      {
        "id": "7fc84b06-496e-4287-a6f1-7ad66e69dbe0",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "09422e10-98a7-4701-aad8-54564199680f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ee59d797-b5f4-4041-addf-a533785562e3",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "e6f35684-c89f-4f4e-9284-8213ef82a757",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88478387-d098-484f-b5f3-0f22b81dcf1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d6608ae-55db-4da6-af60-aafb49c4c09e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef68f50d-05bc-4aa6-808f-c2d1f71f182c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "90472daa-fb5a-45d4-b42e-3ebf63f1a7c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c98f198e-ee45-47de-af24-c0ff20eb3df9",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16c1b4c4-a77d-45c4-8056-d012e781ec31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9234317e-f78f-4ba6-b60d-5503cea3aa3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26728db7-fcfe-4869-8497-84f0d73246e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fb719622-4c2b-4d17-82f5-41f5e35d5cbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae989f43-c0eb-4961-bfd0-5d1e84388dea",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7482811-8252-486f-994c-568d2f85a5d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e905b00-d228-446f-a343-b9e2e675ecfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abd7c644-8961-43ee-94c9-58a091615ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe3751c4-43f7-4087-86b6-8f7fbc6be236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cdf2b72-bdec-4db1-b326-d9abb0331015",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5867535b-bb91-497b-80a2-e0442eb1ab1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24d10418-ea67-446d-acee-bf16f84de357"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af9295ee-1425-40d1-b590-dbc6a6291718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c3ca11ae-f98c-4d34-a2b7-2393eced8f43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d74f4c73-05b9-4e97-98a5-b54d2aa243ac",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8e5680c-cc57-4969-873e-6cd0d08947cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f070cd4-538b-47ad-b683-921bfe012736"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfe40286-a34d-439c-a5f6-534f74653b7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d473e65-aff9-48d5-83b3-aae7b4ea03ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe6544e9-aac8-498d-a600-d83ace1aea80",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58788f9c-ef22-4a82-aa3e-4f6d173d52bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d711472-102a-42eb-98e4-c5bed930d68d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f2d34b2-c882-4745-9b6b-a05c7435536f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0979697a-489b-40c0-92bc-e9fc8752f7f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed3eaaa5-1665-47f6-b332-7d925d454ce1",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f22664f-647a-4901-ad81-0b4205bc5433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e456ce8d-5a8b-4021-9160-f7f3afd3bed8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b63fc54-6177-499e-92c2-279cb2001ba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a77d3d40-0e8f-415b-a6b3-9112138e1fd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9626a2bf-c4c7-4a91-ad63-0e23a0872d66",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95842215-7ced-4115-8a10-0c221219fc8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1771ab89-845d-44ac-a18f-da12543941d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32f199d2-79fa-4923-b9c2-f5bcc7d3958b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c87d32d2-a59e-41ca-af32-aac0e397a177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4abd834f-2bff-4f05-b79f-78eb53aa657a",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e69b81bb-f912-473d-bce3-5f33480a3c19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a047f92a-7057-4217-b9c1-0561085cd121"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b02199a-983f-4b6c-8481-146c9b697654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ad407da8-b443-4b85-8954-d414a553530b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83183124-7fa9-4fb7-aaf9-5fe6f09306d2",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adf5eff5-ead6-400b-a8db-ebf6e2fb6ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ef0d74c-ffa8-4306-b655-df8c7f922efc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c367b732-7c97-4c1b-8b6d-86b0ad8e2d00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47e95b29-13e0-4349-b806-b5885b172a73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff3fc38f-62fc-4669-80ac-59ceba0a409e",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4631960e-b7f4-4bb0-8047-e19d553ddb8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ab2dda9-a854-4fa0-baa5-657fcf619b18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee870667-fd1e-4d58-bd72-b1243cd4634b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "81373351-fa62-4c2c-8b08-f60372f7df23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a97eb833-fb2d-437e-b90d-128b0f7a3116",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dfe6022-736b-416f-b9f9-1a6bcfebbb9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a4e2ca0-cde8-4e3b-8116-0b4506025826"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0a8ad8a-ee6b-4386-8e9d-a2ea8b7f4140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e215e969-2d3e-4ce2-aa53-d053971b3652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7ccdbdf-e2a6-478f-8347-931520839b2e",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74e5a4cc-ab1c-4cc6-8f13-7497017b07bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c229df23-6b40-4282-a6a3-2d548c2ffe10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fa2786a-7574-4984-8d94-b993fdb1a448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dadfa9c6-38e3-4566-9181-f8921ba33bef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c2fc094-a1dc-4176-90b8-f565cf099838",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b516ec45-b1a4-4f35-ba70-ff8a22b66bd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e057c93-13d8-4358-805a-639114d0394b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baeb5802-fe0d-4ff6-964a-bc89ffad5e20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "99283edf-4fdc-42bc-83f6-3ed4ce648930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a612c4aa-7e77-4a68-88b3-c5ba31d26018",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89912eb4-534c-4304-8cf2-9fca2fa063fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d76696d8-73ac-41da-99ea-69b19945165e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "960bf311-54a8-426c-9bee-c79331d8663a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4a6a7240-4820-4c53-aea7-8be8134235c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d265993-5af6-4231-aeae-12fa8b96b376",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b24313af-755a-4a48-b8ac-4bc7d8d7df1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83e4cee3-ce45-42e0-b6ac-bdef9c1aee09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f17476b5-b62b-4eb6-a8f6-edb49eeabf40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b15eac30-5413-44a6-b58c-2b68027882dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b6984bf-2b6b-45a3-abcd-858f219f1385",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21ccfad8-945f-4a95-a498-bb21a5bafe86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c28f6420-054f-43cd-b7bf-e1858115cbb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6875efe1-143a-43f3-840a-694b09cfe7af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6ebd31bc-e274-4dbb-bb8b-6ce4a73fc012"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d91243fd-0986-432c-b2d8-1b3209865632",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dbb7e92-3b8e-4270-952c-e4090aede5d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "906d44e4-4a8f-47a2-b4b1-c1d045beb248"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b738ea4c-4cf3-4c49-9ace-1e664ab498bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d402a700-4981-46f2-a1aa-5b023b603011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e78d2590-09c7-436c-9f70-0ae360c47af7",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e39e0518-0abe-4b09-af23-913bb6845184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c52b660-7cad-4f43-a20c-c54d0c06c1bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53bd3770-0a2f-4482-aeaa-5253041d5f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "778b5ea9-9197-412d-bbd2-1445c028cc65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1313964d-d4f3-4d38-b0b3-3b04b99a2d79",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c69ae09f-55f8-45e1-8385-a5c80aaf314b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e509e26c-5a92-4965-8020-8c369e35db40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "223666f3-cdff-4377-9550-e89ca5b4b6c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c816b310-859b-4b96-b456-d3ae751c14cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d164c4d-5d06-4b98-b4e7-6108b5dd6bc6",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b23f9c40-1093-41ee-a1cb-262a18c2c762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3896acc6-96da-49a8-b6d5-3bfd22531cbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc40bcb5-6806-4b95-92be-bfc2628bacf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "036469f6-c9a2-4b23-b682-4a7564d3f327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99708869-aea2-4cc2-a57e-0f84645bcb9a",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e501208-42be-407e-830d-b4efb5e0e50d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fbde26a-04ea-4a5e-a3e5-4ed31b67214d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c910f9fc-ca12-41ae-8aa8-dae5f2d38622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff471a4c-9c1b-46a6-9cec-1cf9b872f0e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "907de797-2cf5-4c6a-9dc1-3d2867a94d5f",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90d1f829-f919-4600-acf1-56d5826f74d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c98a359-88f0-4a2b-b3ca-458f7833c9f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25e5a3ee-b980-4934-b894-97034d2d7f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "144939ae-d029-4b25-af7a-b985e06ed72c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54f57984-b5d7-4919-8e35-58a01a70fbe4",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee3ed265-0bd4-4ec5-9ac4-0369926ec328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c04ae7d3-09b8-44a4-932f-97ee2bd8595c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d7bb05c-b13c-4b30-b0e4-da88dd0819ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc63f90c-e25b-43ca-bd9c-9291d93ff432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17cde7a0-acfe-4b42-b172-50e33324c2f4",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efe54682-a3e2-4f13-98fe-512cda74231e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "879cdddc-c3e2-4605-ab8b-ee9f84b4b74c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a6096e1-1b79-454b-aba3-2fcec29947a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "726025a4-65c2-4af7-bd2a-3ac234212523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c9ba073-a448-412d-b0d0-1cce2d8e2968",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "394b63a0-c870-4f9a-b95a-6162d6c9b6d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a4892e4-fa51-4934-a19d-1f646fb25626"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1ba6794-5160-4ce4-a837-a608fe4c2d3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c7e2d72-4b7e-45be-9efe-bb88e50ed521"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d79757ae-a100-4337-b1ce-831254cff95e",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcbac7c4-01b3-43b6-877f-9141711a2518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d46cfe6-c5dd-439a-8b91-4ebb87f65e49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96e28837-3e8e-43cf-a0c2-4f37d293478b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1e66778-48c1-4f5d-8ff6-ed12ca6477ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a88348ec-d67a-4e6e-a012-ea66fdd83778",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da30da3f-5ca6-48f7-a2a9-fdddd7133642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3023956-48c5-48d2-9c07-ad604078ddb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "086c781e-cf08-475b-9ec0-a1944e6dd77e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "980ee455-2e03-4aea-9016-a1cea82577a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ceb09a6-3e01-45f1-b040-efaa57f720b7",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0669832-776a-4d4a-a49a-4cb231ad60ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e0d962a-36bb-4e24-894f-ac167d00e932"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "876ae6f5-ae57-42b3-884c-382f2854ec40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c4a9a21-f007-4dd9-8184-679298fd68e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a49fc45f-3cba-4c7e-93f1-36016072ff9c",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a12c6e8d-edec-4c05-878d-612a2c99f6df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cc071b8-8ea3-4146-b2f0-d1d516e8d57b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "930eb4eb-c6ad-4871-bf41-3e29feb2be17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "aaaa9a24-ab90-4eaa-8a39-77f6ccd12e10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bbfbcfa-9582-42c8-8bb6-c4470e762fc8",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d63c049-8719-483d-920c-b479f0793bbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e838b6a7-1c51-4ce0-a543-33b4d9e59960"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2323085c-da39-459f-a4d8-770d0e9748ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "618dc566-22a5-426e-a852-d29560a8531d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3c7437f-3211-4ce4-8e7d-c5eaaefa3c13",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c7cf077-ba53-40fe-bee7-2bd4c7ca4d9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67d2c5bb-1d40-44fa-bfac-4574f918818c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "958ee4d2-4b08-49d9-8359-3ce787b4a454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "10513707-c4a6-4f08-ad42-cf98479f150c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bcfd23a-7380-4229-833e-7daca3832780",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dfe3a0c-7e33-4ba7-8fb8-7d5ffc6a2283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b997e3b4-7b66-476d-8642-3d4ccc6bb437"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "232e7d75-3d71-4c09-ab24-e9991cd389fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd9ef07b-d1e8-4bf3-87ae-7edc7085c413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec0f375c-0cdc-4005-bced-f4677ecbbfb4",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e9adf3a-04cc-42de-adfa-b4e8c31a0a06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9308617e-6e01-48bc-b355-f2564ecf147f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f57a42a4-6368-4097-9ca2-154310e34bd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "add9eb87-8e31-4479-8647-92e48a2aacf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c80c74e-ee70-432d-b63e-04dc54fdff1a",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40008c88-eef6-4d75-825b-83fbb1d9daf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bff14bf-b305-4a5e-bc8d-9b382914f14e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeca0ce6-7a71-4b92-bcb4-553340eebec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "6e29a891-f5f0-40ef-9a6d-1f5e4d8d738e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9c1f51a-94e9-4c01-ac0d-a77ab3f59d0b",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2958ed81-aaa4-454c-a1dd-eb0ea086667f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b0742dd1-9efe-42ba-a9bf-cea80a46220b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08226671-7b8a-4a20-9a6f-857770e48147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "47739912-6b0f-49d7-887a-b5569625a152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad859882-5d6a-4b8c-8881-c474d531c9b2",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13b5b2f4-2f1d-459f-9522-03c83a119559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8363e4eb-1cf4-4eba-bbc9-c5bd1f433221"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6cac885-1805-4d6e-9a30-86920a2a5752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb1c42b4-b401-4bad-9ee4-0e5240741318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0152a4a-0c9f-48de-8c7a-ab5a9727d7a7",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adc8827c-1fac-4358-a6d5-5416ec8f3a40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc522094-fdd0-49b2-8022-4a0b9ab1bb21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23813cd6-2fbe-4d15-98f5-41cff4b4e9d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "571befac-7151-46ba-9e2e-a1556ca790dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5073ef8b-85be-48e4-82bb-6e1c8dc06b95",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91568baa-18af-486e-ad8f-2ba08096320a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ead210e-4ea6-4ff6-b04c-9cad013114fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68fe971a-140d-4539-8fca-fdf4c3987098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef5d2506-6d61-44fb-9580-f19cda3a6636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4577beb5-49c8-44f8-8e5c-aa9a3bcbaa9c",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54a4bb0c-00ca-465c-8127-81dce4e5f941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df8cc311-b2a3-4442-bf80-e970d8bf10f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "256d7f3c-bb17-4a30-9b5c-fa04c90afe42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f51b97c-5af7-4929-bbb6-1d2e6e88006c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c878d2c-0c21-443c-871a-9e83d27c70e8",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "042ed0f9-5d04-4592-b9c4-39b2c5464ae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3edbe42e-9cdf-419e-82ff-0c26581b30d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9887a5b4-c7fc-4f41-9d96-95339a84f008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8ae484e-27a5-4592-aba9-25fffc03b74b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30ef9596-46d3-42bb-8b22-8c44a13009fe",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44fd1098-3aa7-4fb8-b4d3-1a0b8f81ce79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa7dc668-6077-46e8-9a29-a2dbd9c8fba7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da844eb6-1fc6-47cd-b3b5-6b3e5ceac464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "374317bd-2a77-4c7e-a962-1da0336ac4af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62934ec3-80c7-4410-bf78-1baa66a553a0",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3f7ead5-315b-454e-ba8c-84cdc14818b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "198ae860-3648-4d0b-9343-6e9b075c02cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bdb6889-ede8-482b-b9b8-4abdd0d65800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "fdc58c3e-6971-4680-9a48-d5967aba3de4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45d7cdeb-1dff-4398-b49c-fbead4ade559",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78ef11cc-6888-44e4-bd72-23aa70ef4c9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26b9cfa0-8e14-4980-bf52-19e64ea46f23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ed477b8-84d1-479f-8f24-8565d59203ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "e28b9637-ebdc-4870-9ddb-333dfadfccb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc4040f0-f266-46bb-8eed-62f8e59b8bc1",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "162d6e7b-2bd8-4a42-b9d1-9c2cafd1600b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "797343ab-f999-4b5b-bf9e-3d836665dda4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7fcd896-e537-4c19-90c9-da0a020d8911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "93fc0e1d-33b3-474d-8840-76a104e3adcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2c9fb1b-06c8-4980-b2b5-e58e2cec20c2",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53f89bbe-3dee-492d-a684-f8acd0053d7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5493648-6027-4cda-ba5d-0447acc27e1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bbeddad-91ac-466f-8598-f6850bf604fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "013edce5-7250-46ba-a4d2-2a6d1b1f0054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e7ccdac-4872-4b11-a84f-66ae2faac1c2",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0527b791-67b1-498d-aa1a-13738755d60b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f355f7b5-394d-4af7-a453-203edd176367"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba00ee91-b64a-4fe8-a181-5a9e8189c4d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ce9d8ce-ef09-412f-beca-0211707db4f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff70109c-13fa-4398-b633-5507d79c4a19",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff3233ec-9795-4cd4-86b6-62b9742ffd72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60f75fe4-f3a2-4958-bc40-301bc6242d58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d03725d-fa20-4ae0-a808-0978a3269343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "42a2459e-c895-4899-9576-40d75c51f01f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93dcaf7f-8659-40c9-982b-4b3ebbc5ec87",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2ea8b0d-c5e5-412e-a567-3c06c0aad165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce99f6ef-6181-4648-bdc4-99067147013e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77fe0411-f1e2-44bc-b10d-d84203c701ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec93109a-27ef-4b24-8715-f39264d4fc4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fa5819a-3dc3-423b-b64d-8ed065b9bbca",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3e48111-321d-4a82-9fc7-f77b4bae43ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9515989f-cde7-4380-b406-d751e9b5125f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90c060b3-595a-46e7-9f21-db5d831c5b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d4431bb5-8acc-4bc3-aff6-4cedcda50465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "387b9c79-2ab6-4b1d-9d24-f5cb1ae25f66",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e14a80c-9d36-45ef-834a-cc6a5c4632c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6077bfe0-862c-49f5-8028-d493cd8b643a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa95e0a0-fd40-468d-a614-0cdd3059cb23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff2ba175-134f-4dae-8a84-20eb115d7ee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "204ce4de-f32a-4560-a2e9-b7e76af8ab5d",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92bf42be-2026-4082-b68d-448a7efcc58e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5950ab08-758d-4cfa-acce-2bbc15b9afa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbd5b236-f820-4cb8-bf64-e157e1f7355b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "935b91bb-1d46-4b45-80b2-02d2cfc445bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbe62e2c-150a-431b-b034-83bef89459d5",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60a18d9f-e7d5-4033-ab77-ee96554b2b21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "546f2eef-5136-44f5-9800-f2b11c419dfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "786e4e98-d671-4d16-9a23-6d56ca29dc7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f26a249-7157-4c06-b09a-60949c06b2e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05886a73-e076-416b-b1f3-99bb2a6a7746",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa133735-c272-42d8-b155-3fba35cf3cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b8aecf8-9c40-43e6-a3b3-0663b891055a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d8596c5-52bf-49d7-9aeb-16579b31070b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "99d96b15-f344-49c9-8797-c216e39939be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "931e8e64-1984-4b34-bdc2-a9e5a0c0a2b4",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be386148-833f-41a8-8310-ccec51dd7023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d292c5c9-4d15-44b8-a0b8-f0fc4bb6e7df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d3306c7-e520-4cd0-8c5b-cdeed2e874ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a388ddc-9dd3-45c2-bb77-36783d38eb43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8194b0fb-85cb-4587-a140-cddf1715fe8c",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bca8d715-7681-4722-aaa7-55fe6ef7ee9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1c2350d-88bc-4dfe-ad1d-3e6b37c735cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4e9b174-fbf2-411d-84ce-112aea614f71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "61e30912-01c5-40f8-8950-c7005486191a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cce74645-c9b1-4861-b18b-8ebfd9008ea7",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4372b08-915c-43a9-83fe-12d2a723ea19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82fb969f-f28d-4777-b764-6025bae200df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13a544fc-9fcf-4b95-9e92-497109b1b536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "65498837-160d-4a8d-88ca-b1898d0ab24a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a74e883-94cc-4daf-8d01-e1ee5b3f58cc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9e2d0c1-018e-4d28-bd77-19ef880eca9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e2b7247-d1a4-46a8-8800-41693f697b3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c784e33c-de9e-4ba8-83f7-c095104548fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "36d62e6e-cff6-435e-b256-2aaf059705b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9128e22-fdf2-4eee-bb2d-abc5657c411e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a980959-86cc-4126-9c50-aa044618ec8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66caa16c-86fc-4627-a90a-474e49d65d5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34387817-373b-4b50-a147-52cd0fcc01c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea401153-35b9-4329-86e5-00342b739df8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d9eab60-d394-4a36-836f-8301cf530618",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac479396-023b-4213-9d98-e049e26c085e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9612db47-d359-44be-a740-1f842e6b2e75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27d57627-fd4e-417e-a0e8-93dc655b735f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6c35786d-edc4-4c06-896d-6d9276fe653d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4087a6cb-3539-4928-a7f5-5e31d611b0d7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "284dde0b-e6df-42e9-a155-573b19a05eaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebd664ec-8012-48a0-ace9-795b64e9a842"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f477eeb-e86c-425f-bbae-04ede8307325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3eab56a5-b8b0-4406-a959-b6feeaddb491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12b9fcf7-a0ed-424d-9a8f-5b89b7b947c0",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "225465ff-1f9e-4d53-bc34-2e490b9ee272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ea7d85c-3c7b-4d09-8306-0a4f04b855a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "989072a2-feff-4f2e-a8bb-9e1da9bb9eca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7d42593-d8fe-4898-8980-73419b0ddb19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c6a4eec-0d00-4d33-8f6b-8fe1368c7467",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "950ae63b-0a59-424a-8f1c-2be5bb86297f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b274224-b099-4099-a2d8-9213dc8569d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb709e88-89e3-42f8-a4a1-4173e6f50c20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6cb6064-ed5a-490f-b1c2-a8642aae3011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2261096-e7b4-43cd-8cac-67a61c48076d",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8611f638-4742-4d77-a222-0db2d74f66f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b90072a6-ed05-4e45-9a39-556ade080d52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55633f12-2419-435f-a9dd-b76c3a0db6c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5753faac-4c61-4bd4-98e6-a91037a75eb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f98d1140-4021-4ae0-afbc-06810d2dab57",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bde6200-3566-49f4-afc1-90cc75fd7e59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d808d48-37f8-4d93-993a-7b0932a6caa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef9672f9-b1c2-445d-bd9b-f92e04b8ec46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e83390f3-cde9-45ec-a5cf-634e64bb588f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8ccbf1c-07e4-4d6a-b1e3-320d21fcaa42",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "381f3630-a9fd-4c34-8b74-77d5b0bd0610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5477674-f9a7-4561-9cb6-cb1cc24caed5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f5af2b0-3811-44ad-83dd-96b513bfa827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8eac09af-24c2-4103-84e4-d7ae63cb567c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b82ff58-7d0a-403d-9ffc-3ec77cf53edb",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a295786-056c-4b03-ad2b-c39543bc91cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3034bb67-3b17-47be-90dd-29ecfb6eec33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebe7c589-872f-4431-bedf-e6537a122bf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b30a2a14-3876-4f21-a349-e875f0f052dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60c39687-34fc-49f8-bf90-f0cb581734ff",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca19fc7a-1c21-4564-a076-80df8855b1a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "720fb6ff-b0e8-4999-a66a-d76d496811ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "675642e4-6dbb-42db-9ebc-167121e849e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d98ab49-8f5b-4875-8f59-822432e9b350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc97a7ea-3865-4af7-971e-d71cd99c72a8",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3af5e3b5-c0da-484d-966e-d38d4f38eaa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ecd077e-d2cf-483d-acf2-20b554e54021"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf946e4e-a5b4-4cfe-b8a4-e538c90d9445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f4416c4-6970-43b8-b5bc-be5b1623c061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37c343fc-61b8-44ab-9291-53f613dfb32f",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "262f19ad-0022-43b3-bc0b-de6ba8ce9c15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48c77a40-3aa7-4501-a9a7-f432152786cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32885f46-68e0-4887-9879-531f69725a2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "163e1a6c-9a6d-47a6-8bcd-d7a76b27c6f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eb05851-4fa8-4ab1-8bf9-cd40bd6de7d1",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9479f1d-ea8b-49ce-93d8-d237122ff04d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00db1d03-9232-441d-bda6-862fc0b0a567"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9f8f91d-66c2-4f4b-a95f-818c50967d58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6170b01-faed-460f-a1c0-96010f9ff299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b4fe42e-69b9-4087-bd9b-c621975f9750",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a653b99a-ef18-4531-8157-6b0e04e3dab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcb2f295-ecd5-40db-910b-d6b3c8fa91fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f351bed7-b965-40e9-adfc-c03ccaf69a27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5121674-7863-4210-8341-a3f3f119423c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dfb60f7-237a-4000-94c1-f3804c7cc994",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efde0bb1-3378-471d-9dac-d290259c3ee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3a0bdea-267a-4483-9287-e1b6f0f7c85a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2e715dc-afce-4e40-b31e-624a476fefd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2b7fc451-4385-4e3d-8870-eb1b49439e6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccb9f49f-d78a-4ed7-b177-9c2caea41e3b",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f252d230-9a21-4787-b4d1-6e6a38ffda63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca616ef0-131a-4e0d-8d41-0a2e5b203deb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4c6f811-643c-47a1-bb03-280e6eed4a8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9d24ddac-a9ff-4cc0-9a52-64689554c668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77f42763-f18a-4df3-894a-4f648764292b",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4189a08d-20b0-47d8-a498-7f3dd4d1e2a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "042585ac-c96a-4246-ac2c-3bba993cc3e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "619fbfd3-afe2-4287-a189-1bc4ddb96a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "36327a68-df6a-452b-9f16-2573d616f52c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b5e367b-3457-48b0-8c36-047b84ba1fa8",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da18be19-f9db-44a8-8af5-c2d1c24fd5aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0fdb04e-758a-49c9-8bbc-a34563418b34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1232c8a1-b613-4d87-8546-86f9529bb2ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "97df1e4c-83e2-4b2c-8383-ee83630701ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f948c92-ae90-4b5e-a151-c920b426446f",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4463ca33-a000-497a-98c2-07d4cd6f777c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6da39388-0b6d-4933-a2c4-d881679bd30c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adfb6919-c99a-48ac-b5cd-4659dc83812b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "42a07f33-f47d-441e-845e-5f3672af3157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15cfca72-ba56-4d12-bae0-bbfd31bd51ab",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad58ca3a-45cd-4ad8-a164-1e22ab988f30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4668e527-b1d5-4dac-83d4-957b94bdded3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6af12a0e-4b8e-4f93-9c9c-ca61ab0c0ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1f76aa0-7a08-4ceb-90e6-cea2305c2d8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f2f7d6c-e375-4d3f-a6da-4c2955a0ae0b",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f46eddf-bfc9-4196-925a-f1fb2c132796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4af2a1c7-adda-4445-a5f3-07eb49866fd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba3bed07-70df-46b8-9ce1-3c1a0d5de637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f1ceec7-2b37-44f5-a8cd-94cd634f04fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "483a43b7-c49d-481d-bb80-295a05f12c96",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37673ef4-73a4-4c29-89ca-9906d86b5cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d03f279-8670-4c67-a17d-79f86bf04a77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff8146a4-5b93-421e-b842-07d2c2551cdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "72cf329d-77cb-4e0d-ae18-90650d909463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e6ce8c0-e94d-4ee0-8c8b-a06e9b029093",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "076f1288-d5c4-4dcb-9f30-f3d4fb8b065d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95eb8e1f-6bdc-47b7-bd88-ac93fdce0e15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5529234e-26a8-4218-91aa-5b2289259a72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c59ed293-fa42-4947-abba-e113fc8b9487"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e54b3690-669c-471e-90a9-474afbf38350",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edb4058e-c2d2-4251-8da3-553a87724b03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa74218f-c19f-4b8f-a06e-6491ece72944"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0710cb2-6fa1-4028-b406-354981246286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ff2d40b-0f0a-436c-bd9c-0c9461e3da2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8331b4a6-803a-4b48-b470-0cc99418d84a",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18d45483-197b-427d-9e00-fa737bf79b78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9de76ed-8361-466b-9ac4-4bc561e67715"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "069540eb-4382-4f06-a32b-dd6e794437c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "25146455-2581-49bd-abfa-b788f128a34a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f7f72a2-4cf3-4ab1-845f-5fb2a768d481",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eb1610f-b289-4c3c-a9e5-ef1554934e59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bc16f24-56a1-4146-8cc7-06d7ac01bea0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f855f8d-50ac-4def-b387-b7051129fe39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aea478c5-67ad-4003-9430-1bfc62ee48d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdba6831-de99-4e44-ab2c-1a3b46ec5103",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91bb5f14-605c-4471-8cfd-48bd140b4b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d0b6bb4-e0c8-45f1-ba82-19c330042a00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "689b68d9-fd1d-49ba-9a06-d9bf028fa485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f6fdf04a-bc2e-46a3-b152-c13ee06eb6d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c695e2f-d5bb-44a8-bcfe-2dfe5213328a",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d5a58ed-38f5-4a88-960e-f0ab31279840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb72028d-aa35-4601-8ee9-e48a432a6e49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ae5db57-d7fa-4106-acb6-b4c93bf48a0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "26c39095-85ce-4e30-89b0-f72529513d3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18838dc6-55f3-4416-ad12-bf96d038bbdc",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "277ba2f5-7819-4bad-96dc-8d91269ffde8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f82d6b2-e52b-4b6a-bc65-c1fb30f9045e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e05b01a-3b90-485f-b0f4-0910d325fb3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8778c320-faa5-4c92-a065-a41eab3fdb8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c284d634-537f-4197-8c6c-d07f57e0dd61",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d995f43-da44-4f8e-aef2-15c50881d70b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3864dae-b0f1-4a49-ab11-75107af65455"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3889673b-1f7d-4bae-8dc0-041fd868b59e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5920b3ba-c578-42c9-9477-232283a699f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86956d44-e2cd-4503-aa73-555a664d7390",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "421c90d3-ac48-42ec-8c5d-fddb62caccc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f27af23-4992-4487-b846-9e4fe6f38d93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6e6f348-105b-4954-add1-121cb6c4246b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "aea2bb2c-a29c-4fd8-8383-080e9ff45013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82b6493c-c706-46de-bf1c-e9d7a5d29485",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b28d7c1-9aa8-4c5c-815a-c0f9fe3e2cc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d1c6a46-dbec-4ff6-9018-abbdc4822c0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbbf3b08-3d07-4234-b103-ab728598d5fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ecf01054-ca88-443f-8bf4-435af82f5ed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71bd31f4-2f58-4333-a3ae-d64916a1cdda",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20c94d2c-c583-46b4-a639-e64c722d5be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a68ad1b2-89ad-434e-aafe-f2c98e87995b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e1dcc4b-9a1f-45a5-831a-b3586cd2e714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "aad8ee62-ed96-47c7-8715-33f45b027cf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b407fe4a-c312-4c04-b8cb-6abb3844c2d2",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9111a59-296f-401b-b08a-ab67045ca6ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "6d117927-10a9-463f-8af2-4e3e3beaeb75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55e52fc1-dbc0-444c-aad3-f517f03191a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "51f92cb4-a946-4b3a-a155-1de2e56d2f9d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "370eb538-90de-461f-9d7b-5715b5cd5e05",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ce727dcc-0e55-448d-bdde-542fc1b10b1e",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "525800c4-7d46-4b57-be91-b10678f4c28d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eb40a8f5-b6b0-4a18-8911-13954bd8e823"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a3019b-a40f-4ba4-a497-d386df753c0b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "bccef442-a97d-4b1d-872a-2d13f2e973c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4625020-1a69-47cc-bed3-ffb06c5a5309",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ae81fee-8880-4a16-be6f-45c3673f7793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "345887ed-f292-4838-8b9f-a22df71f68bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92001699-ab7f-4021-abf1-70e4be46e083",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "1857a52a-51f4-4c03-8139-fc31664bb694"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "638ba044-be37-47e5-af2d-1a4d638a3258",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "42993627-b380-413a-9639-6f9fd64e1a40"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "facba92d-2328-4587-b2a0-923055cec0df",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d7beac51-4de8-48df-add9-0b9efcc4a3e5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cd7c19fb-5d19-4d95-a241-9013d0acaf11",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dead5f4e-660a-407e-bbd4-d36db4ca75ae"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6250e66b-4c41-47ef-9ed8-f1c7c061d8cf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bd5a6a8f-9c87-47ee-9fa6-209f0a249f9a"
                }
              }
            ]
          },
          {
            "id": "229a8d54-0ca4-4272-b53c-9ec7ed66fc40",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6d14a10d-6299-4697-a2da-a1118467501d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ad9723b-98ff-4cca-b58b-ef8ff4700db2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5705fc73-424a-4148-85c7-a323f8997bfb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "56667732-4970-44d7-9204-a02bb07be452",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "03d336a2-30e5-4cc2-bd7e-2e40c8f56147"
                    }
                  }
                ]
              },
              {
                "id": "706fc0dc-4049-4bd9-9321-dae4a741c10a",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "321d2845-de29-4bc2-8b1f-9d8956da7d4d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e13fc7d2-3780-4a7c-923f-30a32aabcda3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bcf148b7-605c-4e94-ad6c-766a22ddb377",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d6525332-84f8-4bdb-bedc-2fd1eb086741"
                    }
                  }
                ]
              },
              {
                "id": "1658d5e7-7622-4b10-9f16-9c40a2207bb2",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f4f8ae13-fe9f-47c0-9358-50fbad9689dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3f4e15d8-4194-42c0-bc07-d42ca70573d4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3dacff1c-f92f-411c-ab14-a7c4279da138",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c449f0ce-48d9-46ab-b25e-716d3eaf09ad"
                    }
                  }
                ]
              },
              {
                "id": "ad294041-265c-4bb3-8445-a0db0b37bb60",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ad62cb2-cec7-4f88-b96b-87932a17445d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "84114233-cae6-4c6e-bfff-fd4442e1477a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8f5669b5-f834-46e1-a011-7d12c0489153",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "00ce0663-a608-44c1-ac80-369a0c165412"
                    }
                  }
                ]
              },
              {
                "id": "1e4c9454-25da-4834-a0ee-3d87f79f346e",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4c7f4a8e-e53e-4ed7-9b75-195c739be171",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "98df6327-5a30-430a-80df-14ee3dc728f2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b90d9b8b-0549-4f22-8a00-fbaaa9f56adc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "fb9d06b6-de8c-4980-a0d7-c4705e7836b5"
                    }
                  }
                ]
              },
              {
                "id": "ec752b11-a58b-4961-ba32-4797d285b6a1",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c728f4a9-f0f2-4a5d-9cc4-94246eded4d0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ee5f7b8e-dd6c-487a-9aad-98dd846725d4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "36273f97-7415-43aa-b2b1-2ca4ca76d7d5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6c1d3478-b2c4-44ac-a80a-c688ebb4300d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cc901bab-5b95-45a1-8b35-aed4ab7a6831",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f513fa12-1beb-4053-a513-e428c94ba11e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0bbafe56-1527-475e-bf4a-13222ff1e032",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2537d2f0-5814-4e0b-90d6-12293693be17"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "48a8b778-c923-4789-ba4a-37998a6c8fc6",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "6d7d469d-faad-4ca3-946c-ee5a4d2644a6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e83c584f-e33c-47c3-984e-12b1480bdd56",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7f8352f2-d200-4065-a789-5ca6060b7cad"
            }
          }
        ]
      },
      {
        "id": "db308b9b-4b12-4f4b-b836-5e6cdac93ad6",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "e8c0205f-56c8-47c6-8ee6-2aae045f4d03",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7d767559-ca05-4ea5-923f-efbd5fe2d50e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "88cb950d-54b9-47e0-b923-f0bc6830242d",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6067c2e5-d653-43d0-aac1-1788f44d8877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63352217-e269-466e-b5fc-970ffbff9c5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8accc10-bf8b-4ff3-a673-1c2025f0afee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1d23e6f-ec0d-4ec7-ab50-daee030b7f1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6072b298-9663-4611-8388-9be309093e0d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c16df0b8-c239-4550-bf5a-16a3bb60095d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44045ae7-01b1-4230-9e71-b81f06c1081d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33ca756e-0b4c-423c-9e6b-d3d763a1d61a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "236e4f91-aff0-4cd6-8d9d-b7325001b6b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e7d2488-79c7-4eec-9496-12fe2493e8ef",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c1248ee-49dd-4d41-9b67-751142973e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a00c7a78-1a00-45ab-942d-6227e4836013"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43f93f93-2077-4dc7-823c-75b15f4844a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "13292546-ae26-4b08-bc51-3a966674527d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebb17f7f-80bd-4fc0-bbce-cbc32faaeb76",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "759adf1e-39b6-4349-af4a-74009dae4257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a35dd5dd-49df-4f9d-a38f-687b26ee9bcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "744fb7ce-d920-4f2a-8425-a52d19eb3045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c55752b4-f14f-4a11-9951-c01015857f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e03daa7e-f003-4ccb-8b36-1f8a5e9d22ca",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "788b39f6-c28c-47cc-9baf-b0a934a6f684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd83e4df-b67c-45d3-8124-d727537fed5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "086937ab-7348-48b1-9d54-0a31a02a2597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c6b65bf-469f-495b-b9d5-4b9eb658b0f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "699c122c-5643-46e5-9f2f-8a3f8313f83b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e0f34a-155c-4901-aa10-214ad4973748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a6f634e-54ca-461a-bd51-5acecbdb9fde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ca1832d-11d0-4d8b-854c-94e7191b16aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6d99eb80-9f1c-48ed-8922-8b6aae221e09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a5a0dcc-386a-48bd-88ac-f5f99a31150f",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "746cbbf0-93ca-4a02-8955-72d2ce91c79c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4d7b8da-0d20-457e-ac99-d6533ee01ac6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d042eeb5-ba1a-4bc2-904e-d052e9b0220b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d0d6707-ac21-4daa-bbb5-95bf34bfa40b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cbe84da-41b6-4736-b6ce-b15696d9e898",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "990306c1-deff-4b58-a0c0-2e8cdbd34dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dfb99a3-db4f-4132-a959-77217dcb36f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f8c8236-be45-4084-a08e-8d6c5b1d4089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "11b4e298-1f4f-42da-a489-5eba4ffa1bfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc0bf578-728b-4cfe-87e7-2c383c5fe90b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c7b6124-5ef4-4da4-8824-d4f35def189b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e35be44a-a029-498f-a347-f4ed2aa4450f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e010d8c1-d3a9-46fb-9737-7b7aa0df745b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "791bb21f-eb24-4677-84ef-9622e8c7062d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c38e8012-930f-4dd4-9d51-523f0c1908ac",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ff595e4-62a5-4dcb-825b-b73d627998ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09221490-685d-48a9-88f4-2753ab43b241"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "485125c3-0a9d-42bf-858b-5750989448e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7f93d72-3693-497a-8740-bf4f1c02c428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c49d04a9-48e3-4426-ada5-df522de4bee5",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a27fd8e-61d8-4b71-a5fe-fd4fa8c4878d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cfbf1ab-77b7-40d5-994a-777042aeac60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dc6539a-330e-4185-bfdb-5604453366b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "7810d948-a942-4138-88d2-09c401162be7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cc8f400-1417-4902-9d7f-8959529d2a65",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeedf0ce-fe95-47cd-a372-c520196efd52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b2a61a9-7fd3-481d-b5c6-87a33c8da8d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36dd858b-94cc-4831-b3cd-b5b38ab58d38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "063c3464-7f19-4e4e-b1ef-b5a141fed4c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee5aa71f-f577-4216-90ca-d59ff17e32e1",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "191f0731-0d5d-436f-ab06-e9e167fcae74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d732154-79e0-43b3-ae2d-f29d914742bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76007388-a9e2-4799-ac21-3e1887e6e10c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3ff5235-9776-4b01-ad60-f64febc0259a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26ff1a5f-c257-4cf2-bb84-8aa68ae946d1",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e79852bd-5cac-46de-aff9-37e3a9a5ae0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "308b3d9f-1ec4-4199-b158-075dc5f8ee8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9e9a525-edb2-479c-9162-4fec68aad89b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "58075d4b-675a-43da-9dfb-50811e74bcd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a8e0ea6-bdf9-446f-bef1-c2ac4415a11b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8609795-a373-4f6a-b25b-e306f10f73cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2be7dc6-9549-4396-b6ac-ac378d045dad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c12f433-481d-4af4-9298-4f7b88ad88ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "aebeb0e1-96db-442f-aff7-b41064e3c14d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1b1c9ac-0aad-442f-bf51-636fd86fd0f9",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d97d42e5-451e-4aad-b348-dbbe9f15e822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "663dd36d-06bc-407f-86ef-7630dd76b9d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "881d5e8b-74ab-4ca7-bd72-b39ff6015e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "524b0ba7-74f2-4293-8fa6-9673a0d772f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5967888-4b58-4719-a2c6-69c5eb87d889",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "603e56b6-788a-43a9-a729-e83e11149774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "079b606c-8cb1-4dfe-97ed-afbad71c1c32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6cc7554-c6ab-4fe8-ab30-2d7e3944ccae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "effbfe04-9109-423e-b7c9-ca3f9c9ddcad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06634a01-fecb-4e31-a11f-921057bb434f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e495df4-edc0-4855-aebf-ca626e6af574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45665d2a-9674-46f5-a403-895a36e211d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe23ca9f-2dc7-4411-a4c6-2b2d214112c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0eb03bef-abf4-4d6e-a0d0-bbfa78b7b5a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca1faabb-0443-4fe8-9e6e-90802c28cf0b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dd03392-c0a1-4325-8932-d8cd4d4d7ea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21401567-394f-433c-bab2-7358eff55cf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f4d6864-001c-47a4-96a3-58fd4874dc76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "401e028c-f078-4ab0-b51c-9869365719ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed59c856-d5dc-4c70-be34-07085e32b131",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f9c2b5e-d8ff-41be-b46a-ffefbc2ad1a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2db79cd8-15e5-421d-b4d7-2f4a03fbbfd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ea105c6-3040-4400-9f41-14f06a97024d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7406f40-634b-4609-97cf-45d045a7ea3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "703fbbf8-8369-450d-9ce1-5ebd6789e65e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "010cb57f-399c-4c1b-9047-ba84d0f4a1a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23b9594a-bd65-45e7-ada1-ec28e984f532"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41db1a69-b726-4aee-b46a-b1b1f95b8f81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ae09e79-fa60-464b-9e2f-52fd266324a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "603db85e-0c45-443a-bde1-b94cbde10b4c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3095b7bd-d79c-459e-a7bc-ee11ed538bdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "024e1acb-da5a-4a63-af75-b349af66261e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7dde9fc-9639-42ff-9d9c-c08357bd66bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ad4d20e-df58-4482-8351-23a5868279ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8ecfcdc-a966-4dd8-9483-e82bb294793e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc7f8308-18d4-4839-9b8b-2717c06d8e6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "823676a2-0b18-4390-995e-310227e8f406"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72b946ac-b40e-461b-b62e-40d7cfd5830f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3ed8931-66b2-41e4-8439-d8237f002693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85fd7b43-4e7d-4945-bb80-c4da966fcadd",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "432465ee-9afa-48e7-bcc5-9692b314c5f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e50eb5b-f043-4cf0-8389-acf899cf5a29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebfd2395-8b67-4067-aca9-6a63fc83ac10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "93c36d35-0e65-4247-b529-1f803ecc8889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "695617c6-94b6-4411-af9e-133a76d663dd",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae22c23-e027-42b3-a19c-79b3cac2a47c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d07410ee-7efe-4292-a3a8-4b56204d481c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0c71461-fc19-4fbd-9b6c-8ed13b120355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf75d8b2-be6d-4d54-8374-9b55a63ae269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02ee9080-6578-4b0f-915c-f4b9421177c4",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7d9b0b2-0238-4197-a9b4-b298bc3ec1af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c84afec-74b3-42b5-ab30-ff565149302f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1184946e-d92c-4e00-983c-c1113619f430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa293042-dab2-4757-929d-6253b59a9351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d62fbac8-30cb-4ede-b1e1-9e5078987f88",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9100a598-ce62-4c9b-865b-59f462bc7998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d70b446-433d-4b53-966e-3816933a82f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "136bbfad-2459-40c6-b905-f9859533abf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a510691-01f1-4a33-a314-7592bae834f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "263c2bb3-fdfa-4a33-971e-5dde855ad47c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7abfe1f2-c437-4b4a-a69b-5ad4de4f598a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbee6bbc-193e-4df3-ae23-6322eeeba09c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7a2f2c8-81ce-4818-af35-578dbc80bca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dee6d6aa-9af6-47b3-ab6d-63e7562dd0cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "648bc6f5-1a56-441e-b074-8f61bf833a56",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0339a6c3-1f77-4c00-b2b9-da7420cb7cd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f82b2920-ec9d-43da-9a04-d29e38b636b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96c60f94-4a19-424a-9a74-dc229ed3e17e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "789b41fc-a736-48bd-8bb0-62c41c57c774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a98c1a8-9972-435e-a96d-e5cccbb57e4d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0bb2fce-d2d4-4b31-b358-e74eeaa7d4be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c236e23-2dd7-47df-a323-abc719c8bd6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89d3311a-6948-459f-85c9-e7c34d496a4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c09ea10a-6072-4b6b-84ca-bccaee955cc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "086fc4fa-d384-40e9-bd27-2117883cebf0",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb63fd7e-108e-47df-ab60-4b0d0f1120e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4940de5b-e3c2-4cf1-8c7e-6f917fbfbf0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ec6e04f-bf60-48c8-bddf-4e6a3d0fbdc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "19ee2e2f-0f8f-4e17-a708-a1db9c84adbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fef4c17e-97eb-46bf-bb3b-9619e5ce9435",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0829d23e-3a4a-47f4-8689-3a911628459a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b928e28-e147-4152-a936-b558be2ed3f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a795f83-f880-4048-a895-f9420b6e152e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "10b2cb3c-8350-4d8c-9368-3a4131839bd5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e0aef048-827f-49a3-b081-0be936c9e34f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "089a6836-a89f-4d12-b9f6-3edf9116568a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d57e84d-b226-4858-bbb8-ca82411d423f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0985ed75-de54-4135-a92b-7860acf0d367"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "169be294-a294-408b-8171-6162cf5ea0a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fd026eff-7a19-4671-a150-fce6a4d1c926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b22c77a0-6c99-4d81-8855-97a2cdd1d801",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c1d3817-37dd-4884-a4f2-023930916cd7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "2b85ded5-a113-469e-8be2-86770a076b83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d179aeee-ccbf-4875-b17a-cd3b928af304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6fd4722a-739b-49a1-8e17-e113d1618f06"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fec49fd5-130b-4f0c-a0a4-a4f1c9859575",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d72e7007-1ae7-439c-bc2d-0322d71c50f6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "164eb660-7363-45e4-b8a1-7f552fdc55d6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "015af64e-db2c-4113-84d6-b40208ea1d3d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fa52c99f-6d81-4e7c-9216-971c5f90ee81",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5f35eef7-fce6-4365-9a68-8019c75b5c52"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b9b45d79-f2ea-4d64-883a-bffcf9626aab",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c9a219b2-e135-45eb-a130-010cc6838cfb"
            }
          }
        ]
      },
      {
        "id": "2fded702-bd39-46b5-a104-175ce394235c",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "c307c71c-08a5-45f6-983b-087c379666ec",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6a7b785b-5b99-4bc3-b1c8-4ad912679332",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "51f92b60-70ea-4d19-991a-d2aa88f34fcc",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f51bbf5-2c50-486f-8e4e-802868ad1597",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6ae9361-c09f-468a-835c-80db8df5d86e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc384a35-feb0-4ee2-ba2f-44aa2c5c39a9",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b9826d6-cdfb-4c24-8d0e-73bc12012710",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b4ab04d-8109-42ce-bf50-0b3fd31e84f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4a44c8f-3c58-461e-bd39-7d411485ba4b",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28d9e4c7-487b-4b39-8b7c-a50de29548e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cc050ad-5b5c-452e-88bd-0f7bb17966cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eebde83-809c-43f7-97f0-f55ea0dc3a54",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52213bcb-cee7-40cc-8c56-79e45f74e357",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c080a2d0-479e-41f8-9f16-d2e1533c6a2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ff9b1c-d909-42cf-be7b-e82342aef492",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d6a33ac-c1d0-4ab8-96f7-953cb3411905",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11efb2eb-2ae2-4adb-a54f-2defa55bf933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7794d3cc-9014-4d56-a717-b3b9a7502268",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12d65a11-1e51-41e1-b7b1-201e0fcda0a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6339b99d-cb8e-467b-8e60-f2f7672e630d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b26cbb5d-4051-4400-a307-a11f56468814",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd06f5b8-fd08-4ebe-b13e-4386e0191198",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "672f918c-6338-4dae-8479-71c44e6797e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fffb06d7-eaca-4b88-a908-f30d4a90609f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "698acc00-1770-4ce9-a115-e9a9e74850b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7002b448-3d7b-4930-a5f2-0e5ccb1a5b8b",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "734f2ab1-9f0c-4883-8c40-d20c71017278",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "311bb13b-c92b-4e0e-8967-8d124207a7ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d391575e-59bf-40c2-b400-44d8b48543f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c32897f-9dc1-4360-80a0-6ac320e4a1c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ece93e3c-6e8a-4b1f-9c96-7e0d2525c281",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8e260c1-8d38-4a85-b1ad-aec774ba1a2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72143e5a-2ea3-4f6b-9deb-125cd3511f88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f541dc89-21bf-464a-ba75-4cc02b9532f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ae59a34-9fc8-4a86-9161-b1067d44aae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcfd6e8e-42ac-4e0b-a03f-68b33fca095b",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f43a4587-3067-4a7a-a0e4-f7a13de69b00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68f47f0f-4400-4db9-97f1-6e6adc4a934e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70e746df-2e15-4280-9fdc-c9e0e4a7538d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4178d735-d71c-449a-a2c3-4f026a89809c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2df63a9b-7475-4148-a081-deeb3f150fe5",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c84a909c-92e1-4ea3-b9fd-e7998fb0c471",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d9aba74-7100-40eb-b963-67ad7d001034"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb74e090-9de4-4656-9a1b-5a529d2c620a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e89aca7a-9091-4336-b997-a958cad3a3c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "063e4d54-ec37-4587-b263-d8e4abd97e6c",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8837d00a-9768-49c5-a8f8-21aa04e75efd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4e2c632-ce48-4400-89af-5eba983fcd63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fc33a36-5fb8-42ea-b456-7ff1d9a6ff92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f1e69a1-b4da-4b2b-a7c6-b8fedc460e2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac8fa67c-dcef-464f-943e-9ef4b5467f3c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "283ba9e4-184f-4692-9499-005251001b30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a55f4d0-1faf-4a6d-b2c2-8c70ed9df184"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d153dff-ff89-4f9c-a8a2-99f95b11af8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "043e5232-9832-40a2-ad63-3aa103ff8bcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3db2cd79-ca27-4098-a694-7def9ce852f9",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50e9ddd8-d5d6-4502-831e-be775d0d29d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c105fbcf-5028-4f2c-a28f-014aedebebcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e00f0b14-c3a4-416b-8a55-19c70688a4b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64eee296-b303-4baf-8e1c-e9353f769141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fd5dfaa-835e-4c1d-b43c-7514e82299eb",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "052a7405-f6c4-439e-8eb4-e02d1ce9183d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c9341e4-52f2-4711-b9fd-edae3c70ebcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dffecd9c-943c-4b8e-94d3-b416444aaea3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5acba5a1-793f-4d07-9f1b-f0d705bed031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b98b04b-52ad-4c51-8696-1177a02c56a8",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b5b4803-2347-4808-b1ed-83be1d5b41ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70591187-99cf-4b65-856f-0589f2db61fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fd98a83-4d04-46fe-aa3d-5463379926eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fdb8b65-2978-4ea3-ab93-3db7a22abfde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69048592-f461-4543-a137-aec90bacff19",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ade38c9-0846-4ce2-bd89-9f5980f0cff3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0085232b-2d9d-4f3a-818b-c5b9b25eb7d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "feefb11a-e28b-4b81-929f-99e2e8ffc9e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca363a8b-1fd1-4d3d-a328-bffe7606e5fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a493870-5e22-4f99-90b3-fcd24cf4400e",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83071735-37ea-412b-bb99-069c9144d8ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "494184ee-dad6-400e-acb4-cbf261e9de22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bbf2966-735b-4ef8-93ba-e2d3938f525c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "801b16a8-4693-4685-b2fb-48d20a4ac9e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e8dcc55-32fc-4b72-afa4-437ec60e6c53",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "379fc453-d62a-4863-ad44-c8d489d4992d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be17cbe3-6695-477f-a44d-5295fe6845b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68d498bb-6fa6-44e2-942d-50c90b4c88a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5412cf93-b477-49ae-8bd6-e71c26e45caa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9117131a-c682-4ea6-895c-8f2fca5abf08",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a5fb24a-d963-44a2-9ccd-8e365e6f1ae0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b413d9b-fad8-42c4-adda-c41cba2318ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29790b37-9233-4a53-b5e0-0bacc985368f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e56747c6-6bdc-405f-b94e-0b44f85722f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78f10631-777b-42a6-aa7e-42d9c53f6bf7",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "096309e8-7079-4a24-b71b-b2fbbc0fb92c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df510ab3-14c4-408c-ba9d-f11bb8453297"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11e19441-a290-4f51-819c-15a668e76fe3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8b91566-2a3a-4e20-a0bd-2174ba375199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16ef761e-0689-4b8b-be21-060a6583d042",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "353fe63e-46c4-466e-84bf-437abf518d0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "209e25eb-b370-489a-8b74-dc7165747153"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0030f421-8e13-48b6-81da-8d0ad1c1f62c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74ae6625-73b0-45e5-92c3-4b211e02884a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a1fef24-e420-4eca-bf31-d65cec85e190",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb91b8f9-0e31-4f14-be55-a13ff2fbfc96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c9f0886-389a-452e-84b9-581d445d0d97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaf28350-ddd4-40ce-8937-0dacd61303e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80ae0769-1ff4-40fa-9fd7-84e062b2a0cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51449bc3-7c85-4582-b5a0-8f1cf5207f8b",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2ae1586-d9bf-4dcf-9706-0e173ea426e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "913fefc6-0fe0-4307-ab96-3d467176becc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "264622b4-2da4-49a6-9ace-6f70286c5011",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "853a3b28-e03f-454b-ac4e-3075c7413b68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0253aa64-1ae8-4b8c-a65f-5218ce5ae667",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00ea2cb3-6771-419a-a141-2effbe79d918",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3af74c1b-af07-47fa-ad29-fd781810f62d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0c93f33-369f-4a98-b19e-40280f96ca35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa0726b0-4c11-47f5-bd2d-5495b38d728d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "119fd627-f049-4d4f-89dd-761beb395f51",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "464a7cc7-5ae0-43ca-8937-e728dbf409b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86773f54-042d-4df0-bbbf-930b812b5166"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2966bfc6-9dce-478a-8813-2aaf59942a2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39a71676-a42b-44f6-a2fb-0f8d51a41206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beb1a852-b768-4bca-a8de-4ddb5e1b94d1",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e805abdf-484d-4885-b022-b04d406468d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9371c974-c765-4cdc-a06a-7841994728a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbb4791d-f12c-4352-b766-b690c45b730a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9516f65f-4d82-44a3-96d2-2acbf598ccd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "329425df-d73c-46b7-bf69-3f3181b4753a",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "657b374b-9d29-4391-a83c-e2df3d3fb330",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2ea2b44-fda6-4c7a-af77-13a2250836a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7961d252-e530-47c3-a588-783840238b12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d991b15a-59f3-419b-9ba1-1f0ce4a163d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66030bb3-e048-409f-9bc0-9884ae929fcd",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9febb05-0697-4958-8ca7-77479ccf86bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f52b65e-4093-4a38-948e-7e467d569331"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8459e988-33c6-4675-8156-da1c7c462e13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4280653-a394-4a62-a4c7-27f07e6d68de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be349915-e7e3-400d-b770-159fec0575f4",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c566dbe3-833a-4953-809c-622b9b0d1b07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eab9201d-2295-4613-bfa3-5e1cb34a7519"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "477ab1e4-d63b-4c07-8be0-6e5152455f1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bea754a-2e1b-42d7-9db3-cc21725d66d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d420685e-1b63-4759-be82-7bc45ed0962f",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df972312-ef28-45ae-83f5-3c3fcd332bc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "adfe48b0-89d4-43ba-8220-8e7088c1f1fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "760fce3d-3fbf-4cd8-af06-c63cac906650",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eac392f4-3b91-4d40-88d2-7ac3c529cfae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64bc2c81-fab2-4b23-851b-d8e0951049d7",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bedf7fe-1621-4220-985f-3e3dbf5c0f3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1a6d657-e12f-4763-8d8d-3100d36c8685"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99b240d3-568f-4049-af1d-bbd0f9460def",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e6913e1-7e44-4cfb-9382-7e5d6fa41e71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8eba171-8d38-4f1e-9307-f382085eb4b6",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5688f994-8caf-4a6f-b7c4-da6fc8169fe6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb2d8149-6390-4783-b7cf-c436693be92d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecd1c53a-5e99-444c-834a-8e6553527eb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ded8c7e6-e092-4008-8ce6-bff02b8b838a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "071418e3-5646-4629-9a6a-3c350b7801c9",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cf3ec31-4be2-4160-bb48-7404e212763c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40766f6b-4e48-48f6-8230-4ffd7004a8db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa5875a1-6d04-46cd-941c-26df38d3de55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33d6fd54-59ae-40cd-8ff1-88c11a2c26dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa94a6c6-0bb7-40f9-b6e5-2bc8e7a3e4cc",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c375ecae-d2ba-435b-b9bd-8e926fc10050",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3af6947-0ed8-4611-8d38-d9e09e0127fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "986936b9-f8ed-411d-a895-49cd59048bac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cecf8c1e-4413-45a0-bc81-58a1cdd0767e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eb6ea6a-49b2-4d5f-b73e-06c4cc0ec5fe",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4205775f-93b1-4799-841f-e26cb7aa89a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b901bc5-fef6-4e0b-ac69-c7c4484d8598"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e78624ca-2594-48c8-a96e-7d5d02b5c41f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18111a99-a760-4a12-9bc0-e95169cf18db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b507ed2-c58f-40db-aa22-eab7f4859a0c",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "079349ce-a80a-49cd-acd2-398dc9c20d90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab1acd8a-5ed1-4a76-b45a-37dab9d341ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10e2dda9-c31f-495d-b46a-abd0ea69beb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c18e0c07-5cc8-4437-b59b-2e85c3183029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77f99f16-2592-4f9a-9709-4d14674ca17d",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5b19cba-a13f-42f9-92fa-40480dbf602a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8aaf0872-ed88-43cf-902a-dfa8575a2584"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a165d75-becb-4459-954d-b1a280d8b650",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9896d28d-829c-4df1-9174-7c9558fdfca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c19ae2fc-f883-4516-8042-2057bf6ba192",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2ba3a84-2412-4963-838e-8ce1c6f96432",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cdc03fa-7a2f-4c1d-ba37-132bc04d8d9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76e1628c-c5b8-479a-b761-4cc0371c71ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a1a0fb7-8842-4934-9ce7-e14da803535e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b37e160-0552-4f1b-894b-534014914c48",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "745b0801-5326-420d-9161-5778193a6b2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7de0c1dc-3240-41e8-97ce-bb7c7b977f4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b61112c1-3ace-43a3-96b7-e47dd61c0918",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bebf62d8-bb2f-41ea-8562-f35c4d2c7ced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6da3f72b-73cc-47a3-bea6-0980a16cf9fd",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec93c0f0-81b3-4b98-9fc7-988afc4013e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "447ab5b3-d9bc-4919-8658-96744fff1afb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4deb4a2b-7de8-4451-ad79-583d6cd1d462",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34ee93a0-4da2-434b-88cc-c1339aaf1da5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "773c277c-b9a7-4a12-917e-9e71bb072f88",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14743247-d4c6-4582-8bae-9d672d70fe9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4a70063-1a93-4373-ae08-e7361b49ffd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36825486-7331-4587-95fa-e0a9c741d5df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df2d2833-912b-4bda-b1bf-f0958c56557e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "605f4fe3-0efb-4d9e-9e56-b370f2e601d1",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53fa07e8-aa19-421d-a226-f38a28c34759",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "272e42c0-740c-40c6-b289-70e4d5f912f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42dc961c-9ace-4eac-b65f-39dd95266efd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33cf0a6d-8862-409f-95a6-eb58dac0229a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d84ab4a-db9d-4e3c-9dda-6099b80788b5",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1181185c-ac5c-404e-a1a8-7bfa45b10dad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8f38102-4ee4-42bd-98b0-fe322e15bc4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22b928d6-8f83-4900-9a57-e4fc24609a0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32a22797-3f4f-4ae9-baed-3a00731b56e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e537f072-9c0a-436d-83cb-e2caac625780",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a4c30d3-939e-4964-889f-d738f0428491",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b719418-a930-4781-9b4d-a7bef711310f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b028971-b67d-4b0b-bb55-6c91e30a16c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97bddd57-ed6f-469f-934e-a1d7c5437a15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d003ac0-f2cb-43b1-84da-93edaf93ef8b",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8b79cb9-cca9-4a61-a791-9581719409f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cc0d524-0b76-449c-b8d5-27fd7203541a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6af6e94-63d1-4939-8c09-526496e3a380",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a4bf8fd-8a70-4f3a-8225-5be6ef586566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45c8a962-b33f-48b8-b968-fb17ebff186a",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad3dd194-34b5-4101-91bf-e07d880f6a78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13a7d5b1-9e58-4a7d-b4bc-6acb5e04ff9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a122d494-83ed-4919-9d6f-5dcb900a35e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "759499cf-c62d-4984-8180-d5c279c3c0ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fdf838d-6996-4e2b-a56d-75b2346c73bb",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "880a50af-c970-44ad-a0e6-e704d07a2d41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f1ba15d-252b-48ab-ada5-1a44138a1c2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e6ccd40-e9ec-4820-b592-cae0b61c5559",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "155d5e05-260d-4ef7-a95f-e5ef286197fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3df8216-99db-450a-84c0-867032711bd1",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47edf641-106a-41c5-a9d0-54e2f4808ea1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09f76f3f-0877-4e06-97e3-2d33f1dc7414"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf009035-031f-411a-9f61-7b72b25761e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7df4e3d2-3336-41f7-98b5-99ebdf9fc73c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "513ebd78-2105-43a8-a5ca-5a61ed78e52e",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60a3c6ec-4137-4c18-94d9-202757bd3b03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a680b7d4-0091-4ff7-af71-86cc882e8961"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0d60f11-c03c-4f96-b6fc-5b8b7efe2985",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c9a072e-9d45-4bda-8bc4-5f261281e316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "444ecd81-531c-405e-825e-116e43065eb9",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ef47954-9fcc-4789-af8a-739cf5d4a4b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4f364d4-0846-4ad9-a837-76f8a7fbe8b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf72c3d5-ada5-4ff0-9c1e-8d8f7c1ad395",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d63a5a05-7ce7-40e2-a308-6794e8e74973"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05f434d5-6ba8-4280-a706-1e1411abd8ec",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f4c50f7-1bc5-41b5-b46a-ccb9895db8c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca3ae8cf-3dcf-4497-939d-55307ab02baf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62d99e32-febf-4ad9-9ad7-ba1f60f961ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60e2a56a-e4c5-4714-a64c-ba39adce7a04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05a7e7eb-e011-4af8-a272-63ed7a64af54",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20cfe691-0113-4f2f-85a8-e8a851a5a8f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30ac3ec7-4a5e-41fc-9462-cff5ff8a6d79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "642388c2-fb5f-4a59-b1a9-049c602c41f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3e897e0-54ef-4f98-aa28-d3b180e93aa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a454b2bb-31a1-4bd4-a05f-49d086c0f7a5",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66f9bb7c-5c56-4a0a-81b8-832b7afab2da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2086917b-aa15-4487-b8c4-1401e4a371a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ce37606-0cd4-478a-94fa-1a4f37f06c26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b94bf4cf-dfee-4d9d-9845-d13c6d1d6dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34ea1d5e-adcb-43c6-af88-3b9bbb8ae771",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f1c7bfb-8959-4bdc-a8c7-cecce5c1f32c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c122b318-857a-486e-ada0-277a5d6c6ab1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0587f659-0db9-4925-b019-87203427ec04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1df167c9-8707-4108-ae71-ec8fd72bb154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30dcc905-8a26-41ea-aa4c-bcfefe266587",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af2304dd-b39d-4084-ab03-918e23b5c20e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1c22a1e-82d9-47f3-9f06-85d054202087"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0790fb37-62b2-42d0-8d3b-17aa42e6c9d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "846ecbff-a140-4582-8a1e-43b345123b24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c09d719-ed7d-499e-9961-3bd7968ad01a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc381fc9-2a00-41c9-ac9f-1f1ce2fddd4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d4ed038-1224-448d-aa1a-213533777aa0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df5867fd-1c1d-412b-aa1a-8f8d6b87b231",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fd4cb23-0d47-4cb9-85dd-2e5581652227"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f76c87f-dd43-4e20-b4fb-208d4ee27918",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1b2284b-b599-471c-bb16-14f70f0f232f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "580844dc-893e-4bf5-aa25-aee70bf9c270"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd52ea1f-100a-4426-9823-0e29d624b048",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64c56a3b-5f8f-4ba9-9c39-05319c3b5682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f33a674-e2ed-417a-bf5a-8b88a01d16b1",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "022d4b10-bfaa-4a71-9c7a-2257a79e8577",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9334a7a3-41d2-4fbb-b8ec-644130eea215"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e4fb4fe-8e69-4b1c-aa20-4af1834f2506",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23961c7d-4fc0-4af3-a507-2692fb3296fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e19d375a-c24e-423f-9433-9443d25a8ab8",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bc18403-87d9-4a3f-9342-1299b775fa26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72abd0ae-5172-42a6-988d-d029f63faa7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b37f69c-7136-495f-91f0-35f641560c1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a246ea7b-37bc-4554-a409-c2cee61b2c56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a09362c7-2745-4a5d-b1a4-8577212064cf",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eff8827f-73dd-478a-b946-a090d2ab22e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c621a16f-c29d-40e3-b5be-94a55e39f647"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18131403-47c3-4d1d-9c6b-a87ade6b1d71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79df5b1e-56e9-4fe0-8147-efa2178996d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1427d9c-7fbd-4de2-8f78-a58f7ac7d402",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18218a6e-3839-4678-a248-0d54ba48818c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0820aed3-68de-4158-9ce0-7ba8c2cf3c9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9fa5655-fa75-421b-9833-ecb883dd0cae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dd13ce8-0b22-49d8-a075-4dbc41fd653e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82a11696-cf92-4896-8532-b2b092166795",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cb720c6-3eef-422a-acd6-71f9412b29ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4c89a53-1d9c-41ee-b106-2fd6d2eef417"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58835ad1-3408-4eeb-a0dc-c59d31d5097c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c9a6b03-de12-4e53-9450-930673fb6b62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72b9c02d-1e45-40dc-b046-af8ef75bc997",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9e64e5c-dbdf-4ed0-9e35-4c6a00fe5d2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bb6abf7-b254-49e4-b7c9-cc01195fb74f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca2c7a5a-afa6-4901-948d-52ca064aa7b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24ee308b-d3ff-4ee0-abce-160383cb2c0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1349e7e3-81a4-42aa-82a2-a0f3aa1fe525",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f54f1af-b04a-47a9-825d-802c20946c8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e281ff36-b576-4e82-b8d7-8616116f98e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92684e55-e240-4106-9989-3c3895aa1977",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cc5cea1-4c74-4681-9fe1-767428be6fef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e509a56-d362-4155-a536-ed94558cd8b5",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "553e43b9-bb87-4e69-9b46-c7d2a93cd6e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "365608a6-a607-4fa6-acdb-cb804e5966c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8964bd08-f638-40ca-bc10-46ad3668b9e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff6549ad-b6b1-470d-93a0-dda3310a7a3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e4cb038-5aac-4526-8af8-54a16e4f2762",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c45074eb-88c5-46b3-971f-27be0a73da30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba1d5b25-784f-4df3-8995-af6dbdc2d5e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "368c01a9-fc73-4c36-b61d-1a3d5f3239df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95338450-8f82-4f93-91d8-87799ef33bd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ec6b92a-c444-4355-99ed-4d19604aa2c2",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43fc44ad-cf74-4a50-9741-f447ed053605",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48c36760-6298-4dc7-ab3d-4665899e237d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afbb5a03-1771-4111-9d13-ffd4dec5cff5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "814f7770-c2e0-43da-a8b5-ef0115c5ca07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5720581-89e5-41fc-b9fb-b7eb0349b8f4",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "076b56c4-f5a8-4079-8b22-7b5617e6e2f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13c0cd3b-3621-4d88-a242-9412caa932d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f502ab94-2c53-4e56-9fd4-46e75b320ac3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa0693ef-2165-44c4-9f37-97a5e591b77d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5091ffff-8391-4e59-85f4-2624cc4de888",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c983502-b42f-4cb2-af43-0a0d2ae9a9b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4fd5745-8c93-4367-9315-a2ba948d230d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab9e6044-893e-46ff-93a2-69b3d28b4208",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29871638-1794-4bad-9444-c6b3fce62cde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b93dc4dc-921b-4c7f-a17a-22388d97af54",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14e2d938-9cb2-427b-80e3-0b1207da4388",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9c68288-ddb9-4545-9ffc-9e64ae6b53ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa932855-6a26-4594-94b7-f905fb4a39c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1214cd74-6101-48f9-a24b-c221179e8680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7757916-5e1f-4dc8-bd1c-a24c7fb7c7f4",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e58e296-132e-47cc-a55c-20843d28f437",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92df839b-9f42-4574-a80d-d0e3f301fd15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af851bee-ecfa-449e-a0f4-04bb96923187",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7a751d2-6888-4e94-bb66-80fa43541fd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d871b7e-e5de-4528-93bf-be84372a0890",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0124a359-e9ec-4dcf-af88-253afdcb61de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d5d9997-b03c-421f-a58e-e6c182e8bd9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6facacaa-c0c7-44c3-9763-715712456d60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "594956b8-759a-4f35-aa35-6f84d318a1f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea5743c6-cd87-482c-9cfb-cf10c16158f5",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0ea866a-643c-4e78-be3b-0ffab17ae3c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b40548b-34ed-41a2-bd4c-e25926e81736"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cd9e488-12eb-43ea-95ca-c677b80433df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bf1a2b4-0562-4862-9359-0d34479b6485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37d7d5e0-91e5-4840-8612-0d88c9c253a5",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36714ccc-4ff4-41d1-87b9-8c4f817b7790",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abf4b1f3-a6f3-4b11-9a7c-60ca369ca64c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49bef1ef-8453-4ca7-a619-7d3e1a4b7b7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f473292-1ba7-45ab-974f-23455b64012f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36858d6c-8792-472b-9562-832d9608bddf",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baf0bc1c-18ee-4fb1-b4f0-e96f49dd6f0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58abfc1b-a921-4884-aaf4-bcb990ddd708"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3be6405-7c8f-48a6-bc3e-e68aa4b8cfcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01651203-6d97-4243-bbce-92948dfe7867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c8ddc8b-45cf-44d0-b22e-ce1774814bdf",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "900171c5-d2dc-4128-8f99-e4499e94472e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6daab9d9-a60d-428b-82a7-bf1878c6bedb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63e0a376-96bb-4331-bb4f-52811e93f77b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a100d1d5-5b4e-4a4a-9b2c-feb900bbde39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "087965bf-44e2-4d46-82a4-1c80d0de0e8a",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c15b1998-8058-4197-a3d3-97052f3d1df9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "485471ab-4b0e-4fe0-8a2e-f7e37cd1d4c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58d71954-6ede-4402-806a-e4b715d8ce95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40bd7f5f-5216-46f3-9afc-7d5fb8f50f6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c74edd95-207e-4e9d-af61-7185e094dd60",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33fa0858-42b8-4139-bfcd-4bba940c28f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "adb4759a-4169-4ebd-a275-c9b7a7d1ac90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b27c76db-e292-498e-ae3f-43a7246ad4c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fa97059-dc6e-4d19-bc57-b7425ec1df07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8180df75-a0b0-4632-876a-db1f0201aa77",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3857d95a-97f3-431b-8d60-b031a0cd74f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ed0725b-19a5-4636-abc4-8d81332f6891"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf9779b-cccc-437b-9630-cffae8df1c39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4b63119-5443-4899-aadc-dd61d3b47082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "587a5e12-0e6c-43ef-93bc-47221209717a",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efa51632-d535-4834-861b-febdf4b93f7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f8858c0-c87c-4652-8b26-69aedb446b8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d661c672-9469-4454-85ab-f765f99cd3eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e7666a9-887d-479e-9361-548ba84685e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c1bdf7a-2337-4571-b580-716029a3489d",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac2afde7-6b2d-4509-a23e-b0df8a4acbe5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f5e8df7-958c-4943-8d4d-e52f41c234f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05c84493-259b-4ab5-96c2-1c9c18f14dc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15814743-c9f1-43d7-bf87-6b090ff4034b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "553d012b-f11a-48e3-8949-0889f50125c1",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04819b63-8cce-4bb8-a660-0dae62340293",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db0bee74-c997-433e-86db-d1c9ee5b96e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "317e103c-b6a7-4f5d-a306-39a82dc88242",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "825f3a50-9308-48db-a37a-7b7f22e1eee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a636dff-3720-4ccc-8e50-87bf581b3cbc",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18d9b842-4784-49a2-a660-68fc07e16270",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70f7e55f-3aee-4d75-8777-b0c66ce3d69f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f157f5e-df3a-4867-8573-82286d93c284",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ee8d1fc-e313-4b86-a0b8-5dc2f96d1990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2a59207-e13b-4e5e-aa32-4c529a39d6d8",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7a00c70-b9cd-45ac-ab70-8fedb0dfd2f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "396293cc-f138-4bc6-8613-2c0818c9a30c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a3ac46-87fa-45a0-8092-d9ef7330e391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c70b0f3a-34b8-4df6-aac3-4a0c30b445a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c98edb6d-0f3c-4861-98c0-80b91e4ed2fb",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c5d700d-509b-456a-856b-6d51ada1ba0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6acf09c8-4c38-4a77-9c18-e1b0b64ba30b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "639454d7-349a-49a7-8b62-93d212944ea3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "705b2fdf-7b78-4cdf-be3d-27a71513a66f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f14a4e58-c84d-43e5-83f2-de03e89d024f",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3677f84f-e507-438d-8d25-8115bc0a591b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5349ef6b-799b-44f8-a61b-fc72b33158d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21d9a078-f6e6-4494-ab46-937ff7b82343",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27c0bd9e-f66e-4b32-b1a3-625f2614d74e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5379783c-7a53-4b52-b5fa-5404cbc25eff",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d2ee000-bab8-4e87-978b-ddae0fefcedc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0470020b-c23b-452a-983c-ba9eba8172bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "828021cb-943c-4b25-ba6e-7859e3594040",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da21d59a-a6e8-4e5f-9dbf-06f3b01bd6eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98559c4d-a75d-444a-ba42-93bd96f86242",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46b92da1-d3d6-42cf-97d4-eb0833480498",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0ad2a6c-7a03-4169-91fd-279952d8e41f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b45feb80-3619-4d07-b693-591fa68a8330",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ccfdbae-d8b0-4c43-b6bd-4a6ba08d9213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71d569b5-1e87-44cc-a0fe-a6fc316608e7",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07cb931d-7c7a-494a-a083-056bff972b10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94c7d232-7bab-4c76-9608-2e690222d8e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60df4897-39bb-459f-a388-037316315776",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c09d4eb-49f4-4f85-a4c8-e941b7050f2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6db4ba9d-55d4-458e-8f68-af7318d806e3",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6db2561-75c1-4bc5-b5ff-7d75eccb6c72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d68fd366-5bf1-4519-bf77-fc30db440691"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d4e658-c9cf-4f23-9b20-2268a55a4151",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbf6661a-f3fd-44e9-a554-2d758af6347f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e352c6d-c9d6-4af3-a044-8efa957d65ba",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eb67203-362a-47c3-8369-d64bf4ef3ecf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "410c1323-f910-4057-b6d5-c1c7b4f4106c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51e17dae-c92e-43ab-af5f-64361ccf3c1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f41afc5-4e98-4fa0-a599-5e971fbf56fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b820efc-f1f1-452b-8a01-bc2d4920356d",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faf4dce1-7496-4a4d-a3e3-b483c5408246",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e3c21a3-5805-4e60-9ced-3058057dc284"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70bd5fb0-2212-47a1-a18a-25c90f8b8659",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d023db8-0b73-476f-8774-9d85600f872a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4e30fca-1cc8-4ea9-87d2-ec145e76e926",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "315a1dbb-8d6d-4a3e-8f00-0ea34519b4f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b671f9e-4e52-410a-8572-e73334d10334"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "033b5cc6-d368-423c-a39a-87c1aad41c86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29468f3f-1853-4c66-88e3-d15707dbf030"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f2c1ea5-2a49-49c7-9b33-8bbdfe90275d",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "234d0349-8b4f-4453-a8d1-a4c8f3494961",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c881cfe1-c123-4cfb-9c7c-f9b47e6fcc2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7cfa065-e579-407a-b10b-634d3f97bf27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a73cffb1-1e37-4ac7-9775-eef347064941"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aed6f1f5-a3c5-4dcc-866a-556925032279",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f3ff80-c3ff-46f4-b2de-e43afbab6b85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11f5b485-f812-4c58-ac75-ade9c04835e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cee4d46-00b0-46c3-955e-97b31997f99f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02587d42-507c-43b3-9502-6ac1aec10770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10ae20c1-af83-4caa-86a5-151992c18d33",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fa1d858-ea5a-425b-9ac2-801beae15b25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8659bb06-a374-4925-b38d-755bdb62c7c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab673e18-b8d2-4c17-8432-c68ae713d662",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f06ab887-6311-4ff0-9afe-f61893b3c184"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c71b0cf-cb6b-45c7-87ac-0e75d7350c76",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "78e7dfcd-5dbf-4eed-a1ed-61e73f0ebbf0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d4d472a7-cf82-4c7c-b7f2-155ff138429b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b812d108-093c-4e29-967e-ad0c7a6a24a4"
                    }
                  }
                ]
              },
              {
                "id": "93c98fde-a723-4a7a-a1a6-a7e8faf12951",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cdd97cea-4745-4239-ae2c-b86a25c9c6cb",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "251d144a-dc52-4f3b-a59e-decc3b5aef89",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ae3269ec-0eb7-4951-99eb-9ce63b107215"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "786620ac-1ad9-46f5-86b0-1b3bc9e7405c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "136936b6-5dbf-4af4-93cc-00af89ca8591"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2774eef9-b29c-4e38-8c0f-af1030280849",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ced23ee6-d278-4cb9-8b4b-458879c96e55",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f72f24d0-4a8f-417c-8c18-d7c29aa27616"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85fd1256-5696-418f-91cc-40c657526103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8ee03774-d49d-4598-bb36-3344e16604a1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "82571d8e-2c4d-480d-9d9e-8c1a2b7fc3f1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5294aa50-e62c-40b5-b97a-8986967db0ad"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "674f013e-27b3-4b94-9ef2-e50a09915d8c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1a158ace-d37f-4390-908d-85e36cbe9531"
                    }
                  }
                ]
              },
              {
                "id": "dbb3b3c0-2f54-4f53-a227-ca779e36242b",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "37d2bffd-9b2e-4e00-9290-d98ac3551cfe",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f93c78b-1ee5-4369-b98c-a67996e0c0af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "0c060c4f-2ee6-4df7-bd61-f6a0baf0118f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19d19d52-8d00-4a88-98a2-a8057ed84797",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5ba670f-d47d-4c7f-867b-b31d51245c18"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2b487b69-96cf-41ac-b20d-12a8705275b2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "59bb3892-dc48-421a-9974-b2bfca884e9b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a225111e-b4d1-4436-b46e-508b7d5902c3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8ae630ab-608a-466f-8036-e2692ad4c6d5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a2a62969-7124-477e-bf04-be5c387d6a71",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "74a887a8-ceca-4f73-8af6-67bfe3d02882"
                    }
                  }
                ]
              },
              {
                "id": "4f2d75c9-4072-458f-808d-7a6969aa8e3d",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a453bf07-2fed-4126-a7aa-9d25a8795deb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "aa4461ba-6979-4411-9a47-b4360768a7a4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2b816d18-f17c-4aae-badd-e16047905d72",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "75da6682-73f1-4aa4-b8de-b0d9a5ee225b"
                    }
                  }
                ]
              },
              {
                "id": "ac3d7efb-9e1c-4022-a230-83044bf0359e",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "98024a70-6b71-4fe0-9926-cbc3c5b6d906",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c308bc8b-9408-4dd4-9851-0f41d5d7ec33"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6d37f696-ff01-42fd-853c-91ed81d37ca3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b635a4f6-1130-4376-88ed-1993b8338b67"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "344719d9-0aad-4f9c-aab2-04cf7a8d7bc9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "89a33f8b-d696-4813-baba-828540795941"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4625419e-6436-4227-bb37-4362eeda42c9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "85c24486-30ec-449b-85a0-624b2c87820b"
            }
          }
        ]
      },
      {
        "id": "83a3c019-4602-401f-a204-5ec7dbf7b41c",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "61b89026-69be-41e0-b730-b48984657cf8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "21554240-827a-490a-9809-92209f93b219",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5d7e06a6-c60e-40dd-a4aa-279248d08932",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37f43f0f-07c8-404b-b406-76bd840c6aa5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "01ce6050-ef61-47ed-af3d-0f07cb50d2b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2046b9b8-8241-42ff-a2e0-ea91c11fd487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "32f08368-80ab-49a4-ab26-89c2a6f54c16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25a5281e-fb45-493a-951b-0d94bc8ad9c9",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5820f8cd-8abc-4f6d-80a1-7988485fa67a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "72c3df83-7005-4acd-872b-116df5e4b84a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80b1af56-8c6c-4eae-a47c-d57e3040a7e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6da8e890-56bc-43b5-890b-93aafb144326"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a3fed092-264a-490e-8d8c-05a20747a225",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c3d217c7-28c4-4b8a-b20c-ffdd4792797a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "01d2493f-6c2e-41ed-8b03-ca0e1ba42385",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3788a35f-0621-4ff1-871d-bd615ed876f1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5feca18e-e74b-4381-8822-f1a572e0d755",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c7f12109-4dd7-4071-8a6f-b627de187195"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3d1b19b6-bf8f-42f0-be50-080e5f74ad08",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "825c0dae-2127-4697-8801-37d3a689914a"
            }
          }
        ]
      },
      {
        "id": "4be4ad5f-07c9-4080-a18d-0cd3afe04294",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "7f5e2f9f-48c4-4998-a01b-4c7f88d963b8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "17e4a573-fcc7-4d7a-8550-701023213353",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c0ea8be7-f9f8-4c73-86ce-2b34b5ba32c5",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f4284a0-1f62-4e10-a1a5-6945080f9102",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "27763c8b-ea6c-439b-96bf-5fcbf81cb975"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "317f3ad5-4302-49b0-8f76-f407c832b8dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fb7e3890-57f5-462b-bba6-74bd476661cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdaf38ba-bb3d-43c1-b6a7-3b644fc49c5e",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c107357-2715-409d-afd4-a4b8a4edfe09",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "48d9da79-dbe4-4d4e-8628-af04e279094b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a06cc2c-45e6-4c6c-b05e-397ea1909d6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "03cb7841-f69a-459f-a8e8-73f5fa88e8d2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fc92d12c-0831-477f-b06c-05ad1e3a873c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c7ee8ecf-c7f6-402e-bb74-39b83d36dac7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "890f606b-85f1-427b-b5bf-ba50c3011089",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "189d7114-98d6-4e38-a499-e77587a73f86"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "36a6bd83-a247-4702-a06e-36852951b30a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "69938d36-d8a6-466a-b58a-1f4d5cea232a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f26151df-6ba4-4079-aa49-85b0ff701451",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5fcc4f68-9592-4457-8b5e-a8042c4cb980"
            }
          }
        ]
      },
      {
        "id": "236d78a8-2d61-4f51-ba16-468a1728a02d",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "5da10a22-b077-4fd5-8296-2a0441ec05d6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b7c09a2f-6f88-4c13-80d0-210f05cb9a8e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a196dc2d-6f89-4e87-8c1d-5608a8f622c8",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9cc9654-e1cc-4e9e-a828-500d4b116122",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f96c3d5d-d6a4-43d7-b709-796db6b22c71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e57be32-d483-4baa-909c-173e24d7c125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "25d75d3d-4bb4-4da6-a564-5a2c6bfcdf5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d440dfb8-c653-4f36-be80-c9f528e01d8b",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad913a0f-ef4a-4211-91c9-f7b6d5b4d1a4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "afc910dc-c3e0-4466-a561-021a9072d993"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46bb0d70-a2a7-416d-80c5-4e1ab27fa8ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "81084065-8593-4156-bf93-b10a5a80575b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "52e0b065-3d5c-477b-b758-038c36e4ef9b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dde807de-6615-45a5-996c-892ab3034962"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0b92be89-c2aa-406f-8b28-2f647cc24c9e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f1ed4db7-5a17-4793-9caa-4cbe5497d33a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fe1d7042-50dc-4f6e-b30b-659599921c9e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b806b89f-4b0f-4758-bcac-46db68217b9f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5c02d3d6-e96b-4cbd-ae10-46f4e5e86bf2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "453d7ce7-e956-4f9c-b9aa-d841d30e86a0"
            }
          }
        ]
      },
      {
        "id": "e70e9ba7-e57b-437a-877a-406c09b5a84c",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b2bbd0cd-7b17-4773-8762-6d6d2222c62f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a94bc32c-e967-45f6-b11d-33d4f76957cc",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "4bfcaea7-5b40-4c2a-ac11-8883e0627adf",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "aa56af91-ae6b-4a43-841e-5d3152636658",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ee0ff1a3-3e27-43fd-b43e-4d1780a26b4f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1915,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 92
      },
      "testScripts": {
        "total": 962,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 953,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 88.95019157088122,
      "responseMin": 16,
      "responseMax": 704,
      "responseSd": 108.10928826319937,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1668732568493,
      "completed": 1668732602849
    },
    "executions": [
      {
        "id": "7fa2a3e1-8e83-4d18-8b42-feabc39439f7",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "156ee045-fe2c-4adb-8939-ce9ee19d5120",
          "httpRequestId": "78ce2da5-ed9a-4d1d-9875-cb5027d6d7b5"
        },
        "item": {
          "id": "7fa2a3e1-8e83-4d18-8b42-feabc39439f7",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "cf486a79-06da-4f35-aa1d-2133cc83338c",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 0
        }
      },
      {
        "id": "d2ed2866-2b73-4e7d-9ab2-809cbe9e26d9",
        "cursor": {
          "ref": "593269fa-3c3f-4c01-9d6f-45bd8f5e22bd",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "81b8e521-5002-4edd-9d25-15be1288e67a"
        },
        "item": {
          "id": "d2ed2866-2b73-4e7d-9ab2-809cbe9e26d9",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "df57ad51-1209-416a-83bc-874474024146",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 0
        }
      },
      {
        "id": "e3bd4856-7e78-4010-a907-21c033204702",
        "cursor": {
          "ref": "0d322f72-effd-4ddd-afac-f869b9c7721b",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1c6358fd-fa38-41be-9c99-72e7e656f392"
        },
        "item": {
          "id": "e3bd4856-7e78-4010-a907-21c033204702",
          "name": "did_json"
        },
        "response": {
          "id": "17b69bef-e8ec-46e7-a298-551d286833ca",
          "status": "OK",
          "code": 200,
          "responseTime": 169,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b034082-0140-4177-b1c5-098a8b794d65",
        "cursor": {
          "ref": "755c108f-4bda-4cb7-976d-4263f7fbc445",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f0a88951-acee-4f09-a3ce-19c6676c4d82"
        },
        "item": {
          "id": "8b034082-0140-4177-b1c5-098a8b794d65",
          "name": "did:invalid"
        },
        "response": {
          "id": "379d210d-f953-4002-9224-b76378ab6f96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b034082-0140-4177-b1c5-098a8b794d65",
        "cursor": {
          "ref": "755c108f-4bda-4cb7-976d-4263f7fbc445",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f0a88951-acee-4f09-a3ce-19c6676c4d82"
        },
        "item": {
          "id": "8b034082-0140-4177-b1c5-098a8b794d65",
          "name": "did:invalid"
        },
        "response": {
          "id": "379d210d-f953-4002-9224-b76378ab6f96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5af64654-8638-4096-bc4b-50cccdf8e974",
        "cursor": {
          "ref": "f22d3f56-0ac8-4a9a-aa34-31aed11df054",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9203f6d1-8df4-4629-8da4-75594f8d9320"
        },
        "item": {
          "id": "5af64654-8638-4096-bc4b-50cccdf8e974",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "b4401cf2-d0f0-4955-b43d-397bece3f43a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 77,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d373e00-7c9c-4618-8be6-a98598e05391",
        "cursor": {
          "ref": "8236c231-0ba4-4cba-bdf4-a6cd5f0e6b6f",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "203b4912-41c2-47ef-b9b0-ae0987e21561"
        },
        "item": {
          "id": "8d373e00-7c9c-4618-8be6-a98598e05391",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "5aa017a1-1e45-494c-9824-dd215c589da8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 32,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c723b2b-2034-425e-ae32-062e9902bcc4",
        "cursor": {
          "ref": "8e02cce4-0b6b-4b6a-83a1-42783507185d",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8fe23717-e13f-4632-b997-a6d6a85c40db"
        },
        "item": {
          "id": "2c723b2b-2034-425e-ae32-062e9902bcc4",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "c023e231-53b9-45da-9ef6-443a709a9ab1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56d6ac9b-6754-421b-889f-2411e7a821af",
        "cursor": {
          "ref": "7cf01b48-ce2c-4526-9085-0911a82bfd32",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "dc08b9b3-4c5e-4aa3-a640-4d8d268c8302"
        },
        "item": {
          "id": "56d6ac9b-6754-421b-889f-2411e7a821af",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "6d65ec32-7a88-4d4e-9039-5a363b764175",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56d6ac9b-6754-421b-889f-2411e7a821af",
        "cursor": {
          "ref": "7cf01b48-ce2c-4526-9085-0911a82bfd32",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "dc08b9b3-4c5e-4aa3-a640-4d8d268c8302"
        },
        "item": {
          "id": "56d6ac9b-6754-421b-889f-2411e7a821af",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "6d65ec32-7a88-4d4e-9039-5a363b764175",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa5b8b3d-8b4d-4d33-b844-6436f7ffcc34",
        "cursor": {
          "ref": "5a4d5c06-2f6c-4c2f-b5cb-e05ec4b8e2b4",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "082d9685-9568-4273-b3fd-cde4ab31f22b"
        },
        "item": {
          "id": "aa5b8b3d-8b4d-4d33-b844-6436f7ffcc34",
          "name": "identifiers"
        },
        "response": {
          "id": "405aa3f6-0688-4f00-aded-e684fc7bf37c",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6f35684-c89f-4f4e-9284-8213ef82a757",
        "cursor": {
          "ref": "1d3d7d45-421f-4980-b1f6-e42394e5d7da",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "13cc701b-92ed-44a4-9130-e30b93bcca01"
        },
        "item": {
          "id": "e6f35684-c89f-4f4e-9284-8213ef82a757",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "73bb5687-93f5-48df-b9ba-05de2b5123c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6f35684-c89f-4f4e-9284-8213ef82a757",
        "cursor": {
          "ref": "1d3d7d45-421f-4980-b1f6-e42394e5d7da",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "13cc701b-92ed-44a4-9130-e30b93bcca01"
        },
        "item": {
          "id": "e6f35684-c89f-4f4e-9284-8213ef82a757",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "73bb5687-93f5-48df-b9ba-05de2b5123c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c98f198e-ee45-47de-af24-c0ff20eb3df9",
        "cursor": {
          "ref": "6701bfc3-f72a-4148-ae26-b37f0bf427d0",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4f7d10e0-8d7f-44e3-8a6d-a6f0092c0ccc"
        },
        "item": {
          "id": "c98f198e-ee45-47de-af24-c0ff20eb3df9",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "9ed411fe-4fe4-49f0-b530-030c9bf57395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae989f43-c0eb-4961-bfd0-5d1e84388dea",
        "cursor": {
          "ref": "25cb5f75-e1b0-4c90-be4c-2f7ae55852e0",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "ffb46f87-b6c4-4557-af75-dfc910640f72"
        },
        "item": {
          "id": "ae989f43-c0eb-4961-bfd0-5d1e84388dea",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "113b455d-7641-466c-a2bd-e1a016a04d59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cdf2b72-bdec-4db1-b326-d9abb0331015",
        "cursor": {
          "ref": "f13a435f-e030-4bf6-9f7a-855e1734b7c3",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "862201f2-4a6d-484d-abcb-6215ca171b9e"
        },
        "item": {
          "id": "7cdf2b72-bdec-4db1-b326-d9abb0331015",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "353c47e5-8d52-4124-ae4d-467857c7309c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d74f4c73-05b9-4e97-98a5-b54d2aa243ac",
        "cursor": {
          "ref": "63b8e931-dc1b-4742-849c-41b8525391c0",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "896e1174-e2c2-401d-b8a9-91558feb0fc8"
        },
        "item": {
          "id": "d74f4c73-05b9-4e97-98a5-b54d2aa243ac",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "18baee37-eed9-4ffd-b9e2-85e7a8c698bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe6544e9-aac8-498d-a600-d83ace1aea80",
        "cursor": {
          "ref": "4ffabd2f-6c46-4cbb-9df8-79b2093027e3",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d20e6ede-9072-4f8f-9af9-f0d339d3a9e1"
        },
        "item": {
          "id": "fe6544e9-aac8-498d-a600-d83ace1aea80",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a10b08ba-6281-44e9-a0ad-65ded325ec9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed3eaaa5-1665-47f6-b332-7d925d454ce1",
        "cursor": {
          "ref": "702701f9-687a-4cd9-aade-07c6e067a680",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6925c83b-0174-46ae-9ad9-e536763bd68b"
        },
        "item": {
          "id": "ed3eaaa5-1665-47f6-b332-7d925d454ce1",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f1a1259c-85ab-4bd9-95ad-c152de6ead65",
          "status": "Created",
          "code": 201,
          "responseTime": 374,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "9626a2bf-c4c7-4a91-ad63-0e23a0872d66",
        "cursor": {
          "ref": "b102a346-0afb-44cd-9bef-aaa15d7c1f11",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "5659a6d4-5323-4145-8f1b-266121c02c1f"
        },
        "item": {
          "id": "9626a2bf-c4c7-4a91-ad63-0e23a0872d66",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "93a9a8d3-c634-4f6c-b310-2458429e3d7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4abd834f-2bff-4f05-b79f-78eb53aa657a",
        "cursor": {
          "ref": "6be3f26c-89d4-4126-a03d-3832de54c6a1",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "d0409c06-89be-4b9c-8d98-d50be4398544"
        },
        "item": {
          "id": "4abd834f-2bff-4f05-b79f-78eb53aa657a",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "311b34cc-9c7c-4602-8ea0-74e2d140f8c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83183124-7fa9-4fb7-aaf9-5fe6f09306d2",
        "cursor": {
          "ref": "161152cf-6a78-46fd-807d-bd584fd956bc",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "3418fa9c-ad17-45da-9593-c96a2ad62f47"
        },
        "item": {
          "id": "83183124-7fa9-4fb7-aaf9-5fe6f09306d2",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "2774c677-f3ac-4a6b-96ea-24cf58d15979",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff3fc38f-62fc-4669-80ac-59ceba0a409e",
        "cursor": {
          "ref": "c270a4e8-4786-47a0-a4ff-7b0492c2d979",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f6b23c07-686e-4120-b92a-4f958261cc28"
        },
        "item": {
          "id": "ff3fc38f-62fc-4669-80ac-59ceba0a409e",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "d7e3aa4f-7607-4fcc-83e0-2a073dbaf962",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a97eb833-fb2d-437e-b90d-128b0f7a3116",
        "cursor": {
          "ref": "b50e85bf-4a0b-49cb-9f18-2d2addbf606d",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "53fc50b1-0bc6-4a97-8a2f-8e7add63a70c"
        },
        "item": {
          "id": "a97eb833-fb2d-437e-b90d-128b0f7a3116",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "4e051739-232f-44b2-97df-dc06e0a7fb02",
          "status": "Created",
          "code": 201,
          "responseTime": 327,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "e7ccdbdf-e2a6-478f-8347-931520839b2e",
        "cursor": {
          "ref": "b5fb95db-0d2b-4c84-92c8-839c5d01105b",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "626e0ae9-d0d4-42e5-be5e-20bb2de3e9ee"
        },
        "item": {
          "id": "e7ccdbdf-e2a6-478f-8347-931520839b2e",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "c70e2d1f-ec2a-4950-8a9f-275a2874a12a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c2fc094-a1dc-4176-90b8-f565cf099838",
        "cursor": {
          "ref": "ed154e8f-f8d1-4533-88b0-cc43294d51d1",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "f6de7f0a-6c93-4426-bf54-edd276780ffa"
        },
        "item": {
          "id": "9c2fc094-a1dc-4176-90b8-f565cf099838",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "469925f0-4cc6-4efe-b064-2912640bed6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a612c4aa-7e77-4a68-88b3-c5ba31d26018",
        "cursor": {
          "ref": "93df99d0-323a-406a-a0e9-028a6dd86ed8",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "52a4e426-9765-4644-9b1d-6a12bab7bd5a"
        },
        "item": {
          "id": "a612c4aa-7e77-4a68-88b3-c5ba31d26018",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "e3e9e06d-9efc-433b-8445-3c42a4eb2bc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d265993-5af6-4231-aeae-12fa8b96b376",
        "cursor": {
          "ref": "de5e739a-77a7-46c8-979f-9064df9b3069",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "4178de03-b9a4-407c-a1af-4d5446237622"
        },
        "item": {
          "id": "1d265993-5af6-4231-aeae-12fa8b96b376",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "52ff5e53-441b-484d-b9a2-9f818d8d4e72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b6984bf-2b6b-45a3-abcd-858f219f1385",
        "cursor": {
          "ref": "ca287887-4c0e-4cdb-9e60-9bf935c83af3",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "d7f3e41d-1daa-4e68-b533-be919fed6b53"
        },
        "item": {
          "id": "6b6984bf-2b6b-45a3-abcd-858f219f1385",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "42e1db0c-79ce-43b5-ba8b-9a3fb26f5bf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d91243fd-0986-432c-b2d8-1b3209865632",
        "cursor": {
          "ref": "c78ccc05-25d7-4e65-bff8-49d48801bd93",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "2a44bcec-b794-497d-ad1c-b96c7b656b73"
        },
        "item": {
          "id": "d91243fd-0986-432c-b2d8-1b3209865632",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "405787db-a17a-4c29-87af-010a0ee5ea8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e78d2590-09c7-436c-9f70-0ae360c47af7",
        "cursor": {
          "ref": "00b469e5-1320-4d9c-aeb7-b730f7848c0e",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "2ca21e35-98d0-46c8-b630-927d20f8c65e"
        },
        "item": {
          "id": "e78d2590-09c7-436c-9f70-0ae360c47af7",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "fcbc0fea-6cc6-4685-831b-7b9245b6b6a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1313964d-d4f3-4d38-b0b3-3b04b99a2d79",
        "cursor": {
          "ref": "23eda85c-631b-4896-9993-191ee669a267",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "4dd1608a-cdc6-4e85-a418-f7e1501a36dc"
        },
        "item": {
          "id": "1313964d-d4f3-4d38-b0b3-3b04b99a2d79",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "1cca4364-de4b-4555-bc6e-983e8f569ae0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d164c4d-5d06-4b98-b4e7-6108b5dd6bc6",
        "cursor": {
          "ref": "1caa2176-eb93-4d01-ba77-2442f2edc881",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e2b09292-ba37-4cdd-8f49-66e8b9418275"
        },
        "item": {
          "id": "4d164c4d-5d06-4b98-b4e7-6108b5dd6bc6",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "ad5e6bd9-ce11-47cf-97a4-b2e1b6cdac90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99708869-aea2-4cc2-a57e-0f84645bcb9a",
        "cursor": {
          "ref": "21c372ad-9b5a-4dc3-a7f8-f68c3de0fc64",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "b58cc77c-db65-448e-972f-b879e712d1dd"
        },
        "item": {
          "id": "99708869-aea2-4cc2-a57e-0f84645bcb9a",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "b9a8a929-2034-49b4-a209-28108d885989",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "907de797-2cf5-4c6a-9dc1-3d2867a94d5f",
        "cursor": {
          "ref": "382b7ac4-a680-4bc0-98f1-2e132f19d6f7",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "49701e31-a9a7-4bc5-acc8-8dc5bc78a25a"
        },
        "item": {
          "id": "907de797-2cf5-4c6a-9dc1-3d2867a94d5f",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "2c2514b4-7653-41eb-a8a6-f570284f9a21",
          "status": "Created",
          "code": 201,
          "responseTime": 449,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "54f57984-b5d7-4919-8e35-58a01a70fbe4",
        "cursor": {
          "ref": "d188a779-0d63-4eea-b368-94982c13bc41",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c01b9388-366b-4bfc-8d22-8b4d5cf5c922"
        },
        "item": {
          "id": "54f57984-b5d7-4919-8e35-58a01a70fbe4",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "f884552b-71d8-4362-b5ba-8826d8d8aaad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17cde7a0-acfe-4b42-b172-50e33324c2f4",
        "cursor": {
          "ref": "a2094bb5-0627-4fa0-868c-53db4c5cee72",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "94632525-e21e-4fa3-8222-3ba21c76cffd"
        },
        "item": {
          "id": "17cde7a0-acfe-4b42-b172-50e33324c2f4",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "64edd579-1cc4-465b-958b-1c8a48c2d2f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c9ba073-a448-412d-b0d0-1cce2d8e2968",
        "cursor": {
          "ref": "b176119a-fc45-40bf-92ae-8497be119d52",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a967c142-ff72-4a74-b622-84edc4892757"
        },
        "item": {
          "id": "5c9ba073-a448-412d-b0d0-1cce2d8e2968",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "f56bf4f9-1c43-440e-af79-df32d9714a9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d79757ae-a100-4337-b1ce-831254cff95e",
        "cursor": {
          "ref": "c4c346d2-6ec1-4bdc-b0b6-2aa2c69c3143",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a690c0cd-1174-4666-86ed-f286ce4e9e12"
        },
        "item": {
          "id": "d79757ae-a100-4337-b1ce-831254cff95e",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "c5b4e632-81eb-4d87-af7b-3c2ffa0fd3fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a88348ec-d67a-4e6e-a012-ea66fdd83778",
        "cursor": {
          "ref": "831d9daa-e001-48c1-8fed-7ca980cff0d0",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "3712905c-d4df-403d-8d90-d40515a73032"
        },
        "item": {
          "id": "a88348ec-d67a-4e6e-a012-ea66fdd83778",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "2eb4ba7b-5d3f-4fec-b872-96b4c10f50b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ceb09a6-3e01-45f1-b040-efaa57f720b7",
        "cursor": {
          "ref": "4c580dcd-6843-49e1-8d87-e6570ccc37ec",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "f8edb125-7d3a-4580-9bba-31cec65b3259"
        },
        "item": {
          "id": "4ceb09a6-3e01-45f1-b040-efaa57f720b7",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "cd367fb0-132d-404a-90f6-722cc6a6e5ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a49fc45f-3cba-4c7e-93f1-36016072ff9c",
        "cursor": {
          "ref": "f41b1f35-9a55-4417-87ad-c5382ebf3406",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "b242591e-72fc-41d1-a5b2-1e8a9012280b"
        },
        "item": {
          "id": "a49fc45f-3cba-4c7e-93f1-36016072ff9c",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "3fa2cb82-bf80-4415-8fa2-871474f0c821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bbfbcfa-9582-42c8-8bb6-c4470e762fc8",
        "cursor": {
          "ref": "73fa05f5-4db4-4b36-8305-cc7e8bdc6cb5",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "152d9721-3fb7-4bbf-b96c-8d69f32fbbf6"
        },
        "item": {
          "id": "0bbfbcfa-9582-42c8-8bb6-c4470e762fc8",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "c9b3ed6f-dbf7-4b7c-adb2-7faf17d50adb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3c7437f-3211-4ce4-8e7d-c5eaaefa3c13",
        "cursor": {
          "ref": "91f24ab8-33d9-4148-b0be-f6f7d5fb49bd",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "32a0f2f0-4ebc-4ef3-aa2b-ed2127385e9d"
        },
        "item": {
          "id": "b3c7437f-3211-4ce4-8e7d-c5eaaefa3c13",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "2a811cd7-eef9-4c68-a06c-2a226e2ee5d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bcfd23a-7380-4229-833e-7daca3832780",
        "cursor": {
          "ref": "7ede6645-aaf3-4219-a0b8-84b22f9cd52f",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "23e76514-1cb8-4b26-b765-524118d80934"
        },
        "item": {
          "id": "8bcfd23a-7380-4229-833e-7daca3832780",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "b20fecc7-4cc7-4b6f-a9aa-de731a228e00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec0f375c-0cdc-4005-bced-f4677ecbbfb4",
        "cursor": {
          "ref": "457332fe-a60e-49d7-917f-5977090efc1c",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "47c64950-7a41-4b54-9f2c-a50461a7e361"
        },
        "item": {
          "id": "ec0f375c-0cdc-4005-bced-f4677ecbbfb4",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "9cf4c234-7a3e-40d2-a585-a2f0a5a89523",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c80c74e-ee70-432d-b63e-04dc54fdff1a",
        "cursor": {
          "ref": "8d1274ca-0099-4c87-9517-bba3ff81fc48",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "85bf160f-3c82-444b-b99b-4931c5667ddb"
        },
        "item": {
          "id": "2c80c74e-ee70-432d-b63e-04dc54fdff1a",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "92c35212-b791-4abe-b214-f1d516529023",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9c1f51a-94e9-4c01-ac0d-a77ab3f59d0b",
        "cursor": {
          "ref": "beeb112c-6f74-42bf-a523-8122d0af2dc1",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "3333a046-b452-4697-8a0c-ce69199e2fd6"
        },
        "item": {
          "id": "f9c1f51a-94e9-4c01-ac0d-a77ab3f59d0b",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "9b0dbd4a-7006-4a0e-ac82-c3efc16cfe75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 265,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "ad859882-5d6a-4b8c-8881-c474d531c9b2",
        "cursor": {
          "ref": "d9828027-d98c-4b9f-920e-97ab8f974788",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "7e9c25e5-6e56-49f5-98ac-cb1dcf459252"
        },
        "item": {
          "id": "ad859882-5d6a-4b8c-8881-c474d531c9b2",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "9e1dd272-91d4-4e52-a03c-678d62b3ba47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0152a4a-0c9f-48de-8c7a-ab5a9727d7a7",
        "cursor": {
          "ref": "dd50fe4c-d548-4861-b43f-d995836ee324",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "88651dd0-69fb-485c-af7c-67c73329f624"
        },
        "item": {
          "id": "e0152a4a-0c9f-48de-8c7a-ab5a9727d7a7",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "72a0796c-c330-415f-b980-d205b59158c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5073ef8b-85be-48e4-82bb-6e1c8dc06b95",
        "cursor": {
          "ref": "d20d4a94-c570-4576-9048-d7f502ce9a7f",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "7607e645-ca20-4ac6-9a92-3e9ef1eb9375"
        },
        "item": {
          "id": "5073ef8b-85be-48e4-82bb-6e1c8dc06b95",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "2fac3332-0f1d-4ff1-8d0e-410b632e63d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4577beb5-49c8-44f8-8e5c-aa9a3bcbaa9c",
        "cursor": {
          "ref": "2b7bf23d-9930-496c-87bf-546ccd54a088",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "01cd4b1a-2165-416e-bcd9-ab6bf3c73a07"
        },
        "item": {
          "id": "4577beb5-49c8-44f8-8e5c-aa9a3bcbaa9c",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "fa764532-9f6f-4792-bc54-0cbfddc57f21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c878d2c-0c21-443c-871a-9e83d27c70e8",
        "cursor": {
          "ref": "a6a3c297-af36-41b9-bcc1-7771c2e9ea01",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "222c6577-1342-4828-acd3-befeb6e9d7b8"
        },
        "item": {
          "id": "8c878d2c-0c21-443c-871a-9e83d27c70e8",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "5f40a79e-e562-40ef-89df-cfc0bbc03712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30ef9596-46d3-42bb-8b22-8c44a13009fe",
        "cursor": {
          "ref": "901effc2-e590-4e6f-83b5-aeeeb5f3515e",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "0b2e5bb3-07ec-4c49-bfc1-494366a784bf"
        },
        "item": {
          "id": "30ef9596-46d3-42bb-8b22-8c44a13009fe",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "82f6a3f5-2f28-4726-948f-55c31dd22d1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62934ec3-80c7-4410-bf78-1baa66a553a0",
        "cursor": {
          "ref": "f9d88aab-35f1-42b5-9a28-06e775a66d71",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "68e58830-3f8f-427f-9982-1c35d11c45af"
        },
        "item": {
          "id": "62934ec3-80c7-4410-bf78-1baa66a553a0",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "d111bde5-ab6a-496c-9392-3308e09f2a22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 187,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "45d7cdeb-1dff-4398-b49c-fbead4ade559",
        "cursor": {
          "ref": "5ec9f2f5-e0bc-46dc-bd8f-3beb0ae9f2ab",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "20c3ce39-8e53-47b8-903d-21bdb8782ae7"
        },
        "item": {
          "id": "45d7cdeb-1dff-4398-b49c-fbead4ade559",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "dc95b23c-dd0f-480e-9768-654f9d277737",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc4040f0-f266-46bb-8eed-62f8e59b8bc1",
        "cursor": {
          "ref": "c79c8260-6a68-4e9a-bba0-b10cee73b47c",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "38e9d6fb-2b3d-4bbc-b812-c35dd72122d6"
        },
        "item": {
          "id": "dc4040f0-f266-46bb-8eed-62f8e59b8bc1",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "4d0ea6b9-f6ca-476f-8ff8-b199cdbb2f50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2c9fb1b-06c8-4980-b2b5-e58e2cec20c2",
        "cursor": {
          "ref": "517c09fa-d557-484b-a6d0-074c89f00658",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "86831a5e-a081-4dc6-8b30-cd02cd87d25c"
        },
        "item": {
          "id": "d2c9fb1b-06c8-4980-b2b5-e58e2cec20c2",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "f0d0b98f-e205-4672-b2ca-d87949e03b15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e7ccdac-4872-4b11-a84f-66ae2faac1c2",
        "cursor": {
          "ref": "b112b88a-9578-4023-a9d9-cb99c4a7eb3e",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "e325e271-17dd-47ff-9a43-8fadd43bdd41"
        },
        "item": {
          "id": "0e7ccdac-4872-4b11-a84f-66ae2faac1c2",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "938fd624-5956-4718-8d83-f329b8d46070",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff70109c-13fa-4398-b633-5507d79c4a19",
        "cursor": {
          "ref": "fa68486a-ec82-413b-ae77-b9c3d0630afe",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "08fbcc1f-27c0-466c-a693-3b1b8b3a25d8"
        },
        "item": {
          "id": "ff70109c-13fa-4398-b633-5507d79c4a19",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "09fa813e-8ae1-448f-8dc3-909c64637988",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93dcaf7f-8659-40c9-982b-4b3ebbc5ec87",
        "cursor": {
          "ref": "2fbf1eb7-c3a3-498d-9446-e8bf21d10a23",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "d7798c3a-274b-4940-936f-f0f8e00ea689"
        },
        "item": {
          "id": "93dcaf7f-8659-40c9-982b-4b3ebbc5ec87",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "7cfd1f80-5a8e-4955-9ed0-ed1cd50f9682",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fa5819a-3dc3-423b-b64d-8ed065b9bbca",
        "cursor": {
          "ref": "6fecb822-42b8-48e3-af49-7e708da27e60",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "9feef611-fcf9-40ac-917c-45edbb91bc6e"
        },
        "item": {
          "id": "5fa5819a-3dc3-423b-b64d-8ed065b9bbca",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "9f3dd880-0b16-41e4-8147-55e2823ef1e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "387b9c79-2ab6-4b1d-9d24-f5cb1ae25f66",
        "cursor": {
          "ref": "d63b416c-73fd-4fe6-a634-0e59e0c897fa",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "91e19d9d-3b95-4e3c-bf3e-329e39691c98"
        },
        "item": {
          "id": "387b9c79-2ab6-4b1d-9d24-f5cb1ae25f66",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "22452632-c2bb-4ca9-b451-4af868b82fc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "204ce4de-f32a-4560-a2e9-b7e76af8ab5d",
        "cursor": {
          "ref": "5eeea224-5496-4db2-8edf-fabec5fdadd0",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "fce66747-bbf4-489e-9687-9a38d84dfa39"
        },
        "item": {
          "id": "204ce4de-f32a-4560-a2e9-b7e76af8ab5d",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "2e4d1558-4897-4692-a4f9-ab83e24dc01d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbe62e2c-150a-431b-b034-83bef89459d5",
        "cursor": {
          "ref": "f32ea22e-18e9-4a64-a780-f6443fe6928e",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "8a4ee718-7023-4b05-a2b1-1ef46e9663e8"
        },
        "item": {
          "id": "cbe62e2c-150a-431b-b034-83bef89459d5",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "6b20b440-206e-4149-88a8-f0435edb7262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05886a73-e076-416b-b1f3-99bb2a6a7746",
        "cursor": {
          "ref": "8e3875c1-6134-461d-a1bb-a369fd745b34",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "21fd4c33-8857-4edd-bf82-1499d80e009e"
        },
        "item": {
          "id": "05886a73-e076-416b-b1f3-99bb2a6a7746",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "023a5dba-3d96-4f63-b408-7b2b5a0a55ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "931e8e64-1984-4b34-bdc2-a9e5a0c0a2b4",
        "cursor": {
          "ref": "0a8f8b8e-ca3a-4eea-8d72-848c7d6fc2cb",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "0a68cb4c-4081-4c6e-898f-5ec60cd66527"
        },
        "item": {
          "id": "931e8e64-1984-4b34-bdc2-a9e5a0c0a2b4",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "f24aa7cb-4214-4d57-b717-ee19d71b8139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8194b0fb-85cb-4587-a140-cddf1715fe8c",
        "cursor": {
          "ref": "08377bd5-b5cf-4713-bbe7-48943e042d9e",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "a0d450ce-21c2-4b27-911c-aaefaf49a5f4"
        },
        "item": {
          "id": "8194b0fb-85cb-4587-a140-cddf1715fe8c",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "5da8ec34-229b-421f-bb98-65972963b4cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cce74645-c9b1-4861-b18b-8ebfd9008ea7",
        "cursor": {
          "ref": "fe71ad31-2a46-4377-aeda-da5b966b0849",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "9d1094af-14e0-4fa0-bef9-ebbf9461350b"
        },
        "item": {
          "id": "cce74645-c9b1-4861-b18b-8ebfd9008ea7",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "43d28c29-cc51-443e-8b30-d3136972dd28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a74e883-94cc-4daf-8d01-e1ee5b3f58cc",
        "cursor": {
          "ref": "d773d772-d867-4b12-8546-a2294094baf7",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "5c06ec02-ca82-43d5-9bae-ad5c00d9d042"
        },
        "item": {
          "id": "7a74e883-94cc-4daf-8d01-e1ee5b3f58cc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "43f76936-f4e8-4472-834c-195d26207d5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9128e22-fdf2-4eee-bb2d-abc5657c411e",
        "cursor": {
          "ref": "7f7495f5-664f-43ec-9a0f-5dc04d025b38",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "c8085f39-7097-44f0-9752-27f5b227115b"
        },
        "item": {
          "id": "d9128e22-fdf2-4eee-bb2d-abc5657c411e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "56d8bdef-11b3-4e98-b456-2bc3743c79a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d9eab60-d394-4a36-836f-8301cf530618",
        "cursor": {
          "ref": "1dffa436-8927-4623-a19b-9911abbfe02a",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "f2161f22-81e9-4b4d-9362-b9629948b1a2"
        },
        "item": {
          "id": "8d9eab60-d394-4a36-836f-8301cf530618",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "5efe757a-167d-4881-9046-dd88cba59bf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 239,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4087a6cb-3539-4928-a7f5-5e31d611b0d7",
        "cursor": {
          "ref": "b4d87a16-1161-445d-8579-855ac00270a3",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "20acd7b5-b393-4b33-9d56-ed357ded7a03"
        },
        "item": {
          "id": "4087a6cb-3539-4928-a7f5-5e31d611b0d7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "e33deacb-bfb4-4ed3-a73e-fe5849e9c661",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12b9fcf7-a0ed-424d-9a8f-5b89b7b947c0",
        "cursor": {
          "ref": "1fb7122d-d526-4b55-9fc6-9efb28515b6d",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "e112e8cc-eb82-4041-9e78-fbe13063d3ea"
        },
        "item": {
          "id": "12b9fcf7-a0ed-424d-9a8f-5b89b7b947c0",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "1a839b22-6979-452c-9cd7-78f00cfbb478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c6a4eec-0d00-4d33-8f6b-8fe1368c7467",
        "cursor": {
          "ref": "71e4d82e-d559-45d7-9587-dc1adabc23ad",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "7627327b-f95f-49f8-8e2b-da15bed125a2"
        },
        "item": {
          "id": "7c6a4eec-0d00-4d33-8f6b-8fe1368c7467",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "6fe6f66d-d349-4375-bf5f-7a1fdf3226d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2261096-e7b4-43cd-8cac-67a61c48076d",
        "cursor": {
          "ref": "26a6d3a7-3563-4da6-93b2-68643e7c5157",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "9bf28a8c-79cc-487e-81e2-53920e894658"
        },
        "item": {
          "id": "b2261096-e7b4-43cd-8cac-67a61c48076d",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "799005c2-aff3-4181-9b5a-bb9b026cf379",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f98d1140-4021-4ae0-afbc-06810d2dab57",
        "cursor": {
          "ref": "bc510665-a3df-4192-b2a2-549b2823d854",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "9aaeea09-a542-46a9-b9d9-35a20c9ce5c0"
        },
        "item": {
          "id": "f98d1140-4021-4ae0-afbc-06810d2dab57",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "c2f9a0b4-8a61-4cdf-b6b7-757b253c32b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8ccbf1c-07e4-4d6a-b1e3-320d21fcaa42",
        "cursor": {
          "ref": "8612d95a-0e99-4602-8cdf-25cc3170d4c1",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "9abad6ed-50e6-42e4-bf20-cb24e863b1f1"
        },
        "item": {
          "id": "e8ccbf1c-07e4-4d6a-b1e3-320d21fcaa42",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "cae80416-e06b-487d-bd84-76aab78514e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b82ff58-7d0a-403d-9ffc-3ec77cf53edb",
        "cursor": {
          "ref": "5b53f52a-1173-4ec7-8005-0cd49bd29c72",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "e3b8a572-2549-40cf-94f7-e4b215bdf7eb"
        },
        "item": {
          "id": "9b82ff58-7d0a-403d-9ffc-3ec77cf53edb",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "8f155e3a-7eef-4073-9b83-7386f8c96eb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60c39687-34fc-49f8-bf90-f0cb581734ff",
        "cursor": {
          "ref": "9afbd893-549c-41cb-a937-3cc687eeafcd",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "a694e8c7-6c69-4bfa-8492-fc36af902bec"
        },
        "item": {
          "id": "60c39687-34fc-49f8-bf90-f0cb581734ff",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "a4f7d7c4-49df-4e5b-80c7-586e24330a00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc97a7ea-3865-4af7-971e-d71cd99c72a8",
        "cursor": {
          "ref": "7a7115ed-d0a9-435f-8e9a-e535d2b9918d",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "ba98e7e5-e87e-4178-b7cf-edd57831e9a6"
        },
        "item": {
          "id": "fc97a7ea-3865-4af7-971e-d71cd99c72a8",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "c8b58cf5-73e1-4efb-aed5-b72f36209c77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37c343fc-61b8-44ab-9291-53f613dfb32f",
        "cursor": {
          "ref": "1e154ada-4fe3-4fdc-a497-5ce622d41021",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "88fd8f75-8605-423c-9975-3a697bf648bd"
        },
        "item": {
          "id": "37c343fc-61b8-44ab-9291-53f613dfb32f",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "befa4dfb-201a-4e9e-a499-ef4421b6dd0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eb05851-4fa8-4ab1-8bf9-cd40bd6de7d1",
        "cursor": {
          "ref": "efe22e5e-b93b-46f6-9ebe-e8a6e72bf406",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "86ebb729-7b67-428d-aca3-d6de93a9ee12"
        },
        "item": {
          "id": "0eb05851-4fa8-4ab1-8bf9-cd40bd6de7d1",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "00e5341b-742f-45af-8281-919792131ac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b4fe42e-69b9-4087-bd9b-c621975f9750",
        "cursor": {
          "ref": "4f8f4520-b765-438e-abdd-3640ba165df6",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "7271a181-baec-468d-a5cb-ce30b7fb071e"
        },
        "item": {
          "id": "3b4fe42e-69b9-4087-bd9b-c621975f9750",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "7ed1b90d-7262-498f-903c-d15e0e776903",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dfb60f7-237a-4000-94c1-f3804c7cc994",
        "cursor": {
          "ref": "f0798740-a52b-433f-bc90-4529257f6234",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "c8c7272f-9a4d-4ae2-ae7d-61adf09d9aa2"
        },
        "item": {
          "id": "6dfb60f7-237a-4000-94c1-f3804c7cc994",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "afe2a3af-6fe1-46c2-99d3-a6b56a18af79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccb9f49f-d78a-4ed7-b177-9c2caea41e3b",
        "cursor": {
          "ref": "0dfe720a-d53d-4b33-80ea-46742c3c1f42",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "0181a456-a897-4f74-8627-26dc0589f810"
        },
        "item": {
          "id": "ccb9f49f-d78a-4ed7-b177-9c2caea41e3b",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "dae2d910-6d40-4b1e-b808-fa5a4da66aa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 277,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77f42763-f18a-4df3-894a-4f648764292b",
        "cursor": {
          "ref": "5a8a41cf-627a-4666-b8a9-4cdbbbd10776",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "29898fa6-56ef-4f4b-88b9-70f71f91347c"
        },
        "item": {
          "id": "77f42763-f18a-4df3-894a-4f648764292b",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "5c205d65-a8a7-4cac-b030-8c4771051980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b5e367b-3457-48b0-8c36-047b84ba1fa8",
        "cursor": {
          "ref": "ec11b6cd-30ae-4218-a387-13f410bee0a4",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "8a101484-31a3-4daa-9435-e1d8c3bcf9ab"
        },
        "item": {
          "id": "8b5e367b-3457-48b0-8c36-047b84ba1fa8",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "f23daf6a-f4ca-4af9-93df-0b0b69a4b604",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f948c92-ae90-4b5e-a151-c920b426446f",
        "cursor": {
          "ref": "ed444775-3eb8-417b-b780-5da779ee7b25",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "9fceabe8-da00-4a1c-a981-2c8d60974c3f"
        },
        "item": {
          "id": "1f948c92-ae90-4b5e-a151-c920b426446f",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "61f8e870-f078-44c0-84f1-0e4c4b7871e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15cfca72-ba56-4d12-bae0-bbfd31bd51ab",
        "cursor": {
          "ref": "eafe8a4a-3e6a-4ae9-9749-1105bdf582ad",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "e20aacb4-6cb1-4020-bbef-2528bd798c4a"
        },
        "item": {
          "id": "15cfca72-ba56-4d12-bae0-bbfd31bd51ab",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "c3529a1f-4960-406a-9652-d3dfe9b16b3c",
          "status": "Created",
          "code": 201,
          "responseTime": 345,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "7f2f7d6c-e375-4d3f-a6da-4c2955a0ae0b",
        "cursor": {
          "ref": "02c1476b-e3b4-4f4c-8c94-af3aeb4f4379",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "9f6b2098-7894-48a9-81ee-4421df74a37c"
        },
        "item": {
          "id": "7f2f7d6c-e375-4d3f-a6da-4c2955a0ae0b",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "b7b4434e-c079-49d7-bd91-24b09fc98e1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "483a43b7-c49d-481d-bb80-295a05f12c96",
        "cursor": {
          "ref": "408f3c8e-3240-4dbf-a605-7634254d8e29",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "d5a4a4aa-1e23-4a11-9c79-3f16ce6b3bd5"
        },
        "item": {
          "id": "483a43b7-c49d-481d-bb80-295a05f12c96",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "f9e30462-35ae-465e-87d3-b259523496f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e6ce8c0-e94d-4ee0-8c8b-a06e9b029093",
        "cursor": {
          "ref": "83e2a4ba-415d-4ab2-8ea4-ef251926e85f",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a93a1e3c-64fb-4196-a6fd-814de9e5a17d"
        },
        "item": {
          "id": "9e6ce8c0-e94d-4ee0-8c8b-a06e9b029093",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "53dda6ee-e76d-4cdb-bf19-1b04ae8d112f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e54b3690-669c-471e-90a9-474afbf38350",
        "cursor": {
          "ref": "2f4f00f3-1553-4c5a-babc-286efda21eb9",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ec0eb5f8-bae1-4317-a8e6-67d7ccddb5f5"
        },
        "item": {
          "id": "e54b3690-669c-471e-90a9-474afbf38350",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "6319bcae-ebd0-48f3-b76c-2ea328942e19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8331b4a6-803a-4b48-b470-0cc99418d84a",
        "cursor": {
          "ref": "0ba57daf-4afe-49bf-a5f9-953726ed8c94",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5ed08dad-3d7b-419d-8dbb-f6808c1150c1"
        },
        "item": {
          "id": "8331b4a6-803a-4b48-b470-0cc99418d84a",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "06b49a62-2f2c-402e-bd05-e3f883c32198",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f7f72a2-4cf3-4ab1-845f-5fb2a768d481",
        "cursor": {
          "ref": "79bdb180-061c-461b-ac1c-1e022c9aabb0",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "aaf9614f-2f5d-4879-a773-5186942d264d"
        },
        "item": {
          "id": "5f7f72a2-4cf3-4ab1-845f-5fb2a768d481",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "bbaa572c-9331-474c-b514-d5061cee244c",
          "status": "Created",
          "code": 201,
          "responseTime": 324,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "bdba6831-de99-4e44-ab2c-1a3b46ec5103",
        "cursor": {
          "ref": "9bc65cdc-c6d4-456b-bfcb-b9fa736e3024",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "1940d2f7-3c2f-43fc-9ab8-5d9f1a3fd8dc"
        },
        "item": {
          "id": "bdba6831-de99-4e44-ab2c-1a3b46ec5103",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "3ba40466-3572-4c45-b19a-0426a0a51722",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c695e2f-d5bb-44a8-bcfe-2dfe5213328a",
        "cursor": {
          "ref": "b7516d37-3d3f-40b3-a109-3b9c431ca9ac",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "9df73ae2-033d-468a-863e-280497834b6d"
        },
        "item": {
          "id": "3c695e2f-d5bb-44a8-bcfe-2dfe5213328a",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "11543831-a905-4b74-ad7f-70f28adc142b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18838dc6-55f3-4416-ad12-bf96d038bbdc",
        "cursor": {
          "ref": "61987f96-d629-4194-bbf2-90df3d36e818",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "e92d6558-4285-46c0-94bc-b3add5bcdd8b"
        },
        "item": {
          "id": "18838dc6-55f3-4416-ad12-bf96d038bbdc",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "017aefb1-aaa3-40c1-b891-cc421a5b83cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c284d634-537f-4197-8c6c-d07f57e0dd61",
        "cursor": {
          "ref": "e0e5e955-38e5-4af9-ad7e-9560b6f16b3b",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "e811390e-512c-4d65-9388-9a58854b59a3"
        },
        "item": {
          "id": "c284d634-537f-4197-8c6c-d07f57e0dd61",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "8af84039-03f6-414c-95ef-4a9a7396601f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86956d44-e2cd-4503-aa73-555a664d7390",
        "cursor": {
          "ref": "5503a013-a6fe-4871-bc2e-41eef57c372a",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "39580493-13ee-4d11-8a24-0be3f115f31c"
        },
        "item": {
          "id": "86956d44-e2cd-4503-aa73-555a664d7390",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "f0066b26-a99b-44a4-a2b2-e79601f896ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82b6493c-c706-46de-bf1c-e9d7a5d29485",
        "cursor": {
          "ref": "2fb4057b-40eb-4226-83d9-eb466b2a5e1c",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "5621b567-0c25-4a80-a15a-bc862251980b"
        },
        "item": {
          "id": "82b6493c-c706-46de-bf1c-e9d7a5d29485",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "122ebc03-8b2f-4c78-a7c2-b7e6397b72c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71bd31f4-2f58-4333-a3ae-d64916a1cdda",
        "cursor": {
          "ref": "ae24fb49-eeb1-4e7b-9098-af7341bbdca8",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "dc2beaf9-3790-4f41-a749-5f19fb024456"
        },
        "item": {
          "id": "71bd31f4-2f58-4333-a3ae-d64916a1cdda",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "bee6ffb1-e70b-4ea9-ba48-bbc22df852b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b407fe4a-c312-4c04-b8cb-6abb3844c2d2",
        "cursor": {
          "ref": "e8675050-1abc-45f5-b949-d11a59d89cea",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "b56d21a0-d0b2-4d4d-8344-020e8e3bce16"
        },
        "item": {
          "id": "b407fe4a-c312-4c04-b8cb-6abb3844c2d2",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "d9a3ba1f-92d0-4c41-988a-a3281de9ea01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce727dcc-0e55-448d-bdde-542fc1b10b1e",
        "cursor": {
          "ref": "cf06eae3-0880-4a6b-9745-0ab3f41006c2",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "da3e97a8-f497-43af-8769-f1317e0f8505"
        },
        "item": {
          "id": "ce727dcc-0e55-448d-bdde-542fc1b10b1e",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "89924176-1f82-4391-8672-8bbc42b96b85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "f4625020-1a69-47cc-bed3-ffb06c5a5309",
        "cursor": {
          "ref": "2266fadb-0019-4008-be9a-69ca58d450b2",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "befeaf62-1d17-4f90-a3ad-1df73c94e5f3"
        },
        "item": {
          "id": "f4625020-1a69-47cc-bed3-ffb06c5a5309",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "f77c334f-a159-44f5-bbb7-9e5a70546b15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 171,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "6d14a10d-6299-4697-a2da-a1118467501d",
        "cursor": {
          "ref": "2a9e173c-b07e-4ff5-9490-9f6c719acd32",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "5ed4f451-30d6-4c47-9236-ff4c3a919b47"
        },
        "item": {
          "id": "6d14a10d-6299-4697-a2da-a1118467501d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "5f1c975c-c00c-4db3-af70-c043abb339ff",
          "status": "Created",
          "code": 201,
          "responseTime": 420,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "706fc0dc-4049-4bd9-9321-dae4a741c10a",
        "cursor": {
          "ref": "7d1faff1-5d3c-43cf-808d-89b52c5dd545",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "46c87cd4-06aa-4d94-9487-e5bf7c9f2f20"
        },
        "item": {
          "id": "706fc0dc-4049-4bd9-9321-dae4a741c10a",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "4a06ab46-790f-4642-9d53-8273f6f982c6",
          "status": "Created",
          "code": 201,
          "responseTime": 329,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1658d5e7-7622-4b10-9f16-9c40a2207bb2",
        "cursor": {
          "ref": "1d7d1a75-59b9-4fa9-ab0f-9e48f0d9093c",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "9f2fa46d-f67c-40b4-ba9e-a6d51fe31df7"
        },
        "item": {
          "id": "1658d5e7-7622-4b10-9f16-9c40a2207bb2",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "7bf4ebd1-d740-4ad0-a810-e3338d488d77",
          "status": "Created",
          "code": 201,
          "responseTime": 337,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad294041-265c-4bb3-8445-a0db0b37bb60",
        "cursor": {
          "ref": "bcd2ddc8-3c40-4272-8dba-6d524345d484",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "91c139ef-ec79-4cf0-a9ea-0b10584604bb"
        },
        "item": {
          "id": "ad294041-265c-4bb3-8445-a0db0b37bb60",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "0a6cef8c-4f43-416c-8c8a-b85fbb1551f7",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 659
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e4c9454-25da-4834-a0ee-3d87f79f346e",
        "cursor": {
          "ref": "c501de12-57d3-49e9-b965-457ba62d599d",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "878b800b-9e0a-41e8-917d-513ecca98256"
        },
        "item": {
          "id": "1e4c9454-25da-4834-a0ee-3d87f79f346e",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "75d78f63-9196-4115-a760-3839ed3ea312",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 627
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec752b11-a58b-4961-ba32-4797d285b6a1",
        "cursor": {
          "ref": "95a49aec-6e88-4b45-88d7-15474b6b4fc3",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "06d3bd98-fb68-4a2a-a47f-87f102a40b7e"
        },
        "item": {
          "id": "ec752b11-a58b-4961-ba32-4797d285b6a1",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f2bd2156-1ff5-4c7b-9cb9-9b1d99319f19",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88cb950d-54b9-47e0-b923-f0bc6830242d",
        "cursor": {
          "ref": "bfeaa789-a4e5-4715-90ea-52956bf6461e",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "13a70050-153c-4e31-97b5-848a9a008bb8"
        },
        "item": {
          "id": "88cb950d-54b9-47e0-b923-f0bc6830242d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "71c02458-23a3-49f4-ac61-369561dfd451",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "88cb950d-54b9-47e0-b923-f0bc6830242d",
        "cursor": {
          "ref": "bfeaa789-a4e5-4715-90ea-52956bf6461e",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "13a70050-153c-4e31-97b5-848a9a008bb8"
        },
        "item": {
          "id": "88cb950d-54b9-47e0-b923-f0bc6830242d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "71c02458-23a3-49f4-ac61-369561dfd451",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "6072b298-9663-4611-8388-9be309093e0d",
        "cursor": {
          "ref": "c231b11b-6ea0-4adb-b994-d7fde7a7c0ee",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "3a8fb2b4-8f97-455d-8c13-f13bc10492fd"
        },
        "item": {
          "id": "6072b298-9663-4611-8388-9be309093e0d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "8fa64773-b6fe-491b-9719-da53fc46f5a4",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "2e7d2488-79c7-4eec-9496-12fe2493e8ef",
        "cursor": {
          "ref": "07565f47-f596-43cb-98ce-57b846f72be3",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "094f64ed-ff11-4e33-ad0e-f59f80d167dd"
        },
        "item": {
          "id": "2e7d2488-79c7-4eec-9496-12fe2493e8ef",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "146d8d42-817b-4287-bcdd-c678fcb5f675",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "ebb17f7f-80bd-4fc0-bbce-cbc32faaeb76",
        "cursor": {
          "ref": "26e133ed-2071-45c2-9a69-f6dd0166f17b",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "ab09affc-7e45-4476-be72-21c3c7de63d1"
        },
        "item": {
          "id": "ebb17f7f-80bd-4fc0-bbce-cbc32faaeb76",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "62b4260e-5479-4f91-9b3b-63d92555498a",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "e03daa7e-f003-4ccb-8b36-1f8a5e9d22ca",
        "cursor": {
          "ref": "ae76852c-bb8c-48aa-990c-46a4b5c508a6",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "c3f5325e-146b-4689-9935-826d7fedc5f0"
        },
        "item": {
          "id": "e03daa7e-f003-4ccb-8b36-1f8a5e9d22ca",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "7e5c9a76-92cd-4d65-b2fc-4fed549d244b",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "699c122c-5643-46e5-9f2f-8a3f8313f83b",
        "cursor": {
          "ref": "39e99bb5-a2d7-4c32-8458-fb2515d5f25d",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "71aa49db-fef1-43f0-ac78-29bfde20604c"
        },
        "item": {
          "id": "699c122c-5643-46e5-9f2f-8a3f8313f83b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "7ebe7a0a-9005-4739-9445-5d3cc2ef5624",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "5a5a0dcc-386a-48bd-88ac-f5f99a31150f",
        "cursor": {
          "ref": "ab2ec800-27c4-4e81-a67c-04cf80f2540f",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "56ceecd9-fb25-4116-92b2-fe1079e49846"
        },
        "item": {
          "id": "5a5a0dcc-386a-48bd-88ac-f5f99a31150f",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e861ad66-a00d-43bb-9d4a-f768aecbac9a",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "3cbe84da-41b6-4736-b6ce-b15696d9e898",
        "cursor": {
          "ref": "3acc0749-026e-453e-9ec6-7f4bd330fb8b",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "c57c02af-955c-499b-8626-84819afe59b5"
        },
        "item": {
          "id": "3cbe84da-41b6-4736-b6ce-b15696d9e898",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a48c0f0f-dc5b-4879-9f70-fbce126b843a",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "dc0bf578-728b-4cfe-87e7-2c383c5fe90b",
        "cursor": {
          "ref": "66c5b235-e32d-48b5-ba25-f1b9988187c1",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "f85c2173-dbde-45be-913c-1372359fb28f"
        },
        "item": {
          "id": "dc0bf578-728b-4cfe-87e7-2c383c5fe90b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c9aaafa1-7462-4b62-9d8a-fb08e2ca30ed",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "c38e8012-930f-4dd4-9d51-523f0c1908ac",
        "cursor": {
          "ref": "ab308153-ad29-4b6c-acde-9ab26c4b815a",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "8031179d-f188-4bdf-a32b-29ddaff27f27"
        },
        "item": {
          "id": "c38e8012-930f-4dd4-9d51-523f0c1908ac",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ee8e72b7-d176-4b00-b0f7-063a575b1891",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "c49d04a9-48e3-4426-ada5-df522de4bee5",
        "cursor": {
          "ref": "079c25d1-0cd1-44a2-915e-6907618854f3",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "31180916-229b-4996-816c-40ec59cffa6c"
        },
        "item": {
          "id": "c49d04a9-48e3-4426-ada5-df522de4bee5",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "be7e41a9-2a22-4a03-9d51-163c97ce7717",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "6cc8f400-1417-4902-9d7f-8959529d2a65",
        "cursor": {
          "ref": "d47d1378-0d58-41cf-9d49-1e34b338112d",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "5b3acfa5-59f4-468c-bfa1-82c349f8bc31"
        },
        "item": {
          "id": "6cc8f400-1417-4902-9d7f-8959529d2a65",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "edeb9d92-cc2c-47a3-96ed-8b02d0058f69",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "ee5aa71f-f577-4216-90ca-d59ff17e32e1",
        "cursor": {
          "ref": "8e41e1c5-2723-4ef5-91c5-70ece63f7c11",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "ce035d05-a489-494e-b631-9f512c7c5934"
        },
        "item": {
          "id": "ee5aa71f-f577-4216-90ca-d59ff17e32e1",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "45e67934-7dd9-4f38-8a61-f712d28b74bf",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "26ff1a5f-c257-4cf2-bb84-8aa68ae946d1",
        "cursor": {
          "ref": "e5ec6701-279a-4ff7-bd8f-b6fa8d453d91",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "82f98009-14f3-42d8-aef3-7c6db90e8a92"
        },
        "item": {
          "id": "26ff1a5f-c257-4cf2-bb84-8aa68ae946d1",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "77481a3f-2f07-4801-b8cc-93f737b06d9a",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "0a8e0ea6-bdf9-446f-bef1-c2ac4415a11b",
        "cursor": {
          "ref": "5264eedc-5810-4d88-9f0d-930236bd53d1",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "56717dbd-270e-4ac2-af9b-754151f7b491"
        },
        "item": {
          "id": "0a8e0ea6-bdf9-446f-bef1-c2ac4415a11b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "9422a69e-6c7f-45b8-a294-79b1c47b0a0a",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "b1b1c9ac-0aad-442f-bf51-636fd86fd0f9",
        "cursor": {
          "ref": "35e9a395-deaf-4f7c-a483-a24c7e74a860",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "c4a95e9c-0d1e-4590-a46c-5f858ab88a72"
        },
        "item": {
          "id": "b1b1c9ac-0aad-442f-bf51-636fd86fd0f9",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ca57908f-b4ec-47ed-86db-53ea94f6d6ad",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "e5967888-4b58-4719-a2c6-69c5eb87d889",
        "cursor": {
          "ref": "7fc994ae-eb5d-4d4a-b22b-51ffe551d160",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "45dced75-2dda-40fb-94a6-1a601f470cb1"
        },
        "item": {
          "id": "e5967888-4b58-4719-a2c6-69c5eb87d889",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "8e3a1814-ec29-4691-b4dc-92ba43a6c2e8",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "06634a01-fecb-4e31-a11f-921057bb434f",
        "cursor": {
          "ref": "17870360-44cb-414f-b6d5-f61d61b38b4f",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "27c41964-dc75-40f9-9f1e-906009abad91"
        },
        "item": {
          "id": "06634a01-fecb-4e31-a11f-921057bb434f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "36f8250d-7e54-4d9d-b6a8-b0c7284af4b7",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "ca1faabb-0443-4fe8-9e6e-90802c28cf0b",
        "cursor": {
          "ref": "221d742e-d30e-42a5-b203-2d3b2895eab5",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "e4da8adf-e7df-4592-86c7-1213dcfde07c"
        },
        "item": {
          "id": "ca1faabb-0443-4fe8-9e6e-90802c28cf0b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "27e1a278-da19-4996-9498-130ae096833c",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "ed59c856-d5dc-4c70-be34-07085e32b131",
        "cursor": {
          "ref": "9cc4b6fc-1592-4a30-addf-c793650af6fe",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "a1b6d0f5-8901-45bb-a0b3-7ea1b604eb10"
        },
        "item": {
          "id": "ed59c856-d5dc-4c70-be34-07085e32b131",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "52298414-62e0-4cc6-9ad8-0c4ca1d3cfc5",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "703fbbf8-8369-450d-9ce1-5ebd6789e65e",
        "cursor": {
          "ref": "d9d84e9d-878d-4c83-898d-f61fbead066a",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "f0956bf8-4223-474d-8018-99d18d7524db"
        },
        "item": {
          "id": "703fbbf8-8369-450d-9ce1-5ebd6789e65e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "29b06b15-7172-427d-89b8-9ea145c6a2e4",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "603db85e-0c45-443a-bde1-b94cbde10b4c",
        "cursor": {
          "ref": "81eda1b4-9227-46f4-ba11-3ef2b7c9ee41",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "496bf95d-191d-4306-9da6-a9c2099ca40c"
        },
        "item": {
          "id": "603db85e-0c45-443a-bde1-b94cbde10b4c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "51e3ae38-399f-439b-a93c-40664dd6003c",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "c8ecfcdc-a966-4dd8-9483-e82bb294793e",
        "cursor": {
          "ref": "b5d2b84f-bc2a-4ff3-a8e6-469bb0f8e2ac",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "5337b290-24bc-4031-9c68-4810c52c5185"
        },
        "item": {
          "id": "c8ecfcdc-a966-4dd8-9483-e82bb294793e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "37444768-8f2e-4fc5-84fe-cc9fc9631d84",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "85fd7b43-4e7d-4945-bb80-c4da966fcadd",
        "cursor": {
          "ref": "3606a648-f8bb-4721-9847-9c00e8062593",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "e2e6aafa-6add-4198-a17e-7e9d2a4507bd"
        },
        "item": {
          "id": "85fd7b43-4e7d-4945-bb80-c4da966fcadd",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "89c831f0-3e0a-4d4f-a0a2-b5931c2a5a0b",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "695617c6-94b6-4411-af9e-133a76d663dd",
        "cursor": {
          "ref": "af8a6736-41f8-4e0c-9302-0fa64f61075a",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "85066de9-2c2a-44a2-a5b0-049d517595a7"
        },
        "item": {
          "id": "695617c6-94b6-4411-af9e-133a76d663dd",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "30fa6e0b-7450-4cbe-bfdc-efa9b47378f9",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "02ee9080-6578-4b0f-915c-f4b9421177c4",
        "cursor": {
          "ref": "0cc2863a-b4c2-433c-ae3b-380005ab0ed5",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "29d5c1a5-227c-4761-bb0e-151c3abd8ce1"
        },
        "item": {
          "id": "02ee9080-6578-4b0f-915c-f4b9421177c4",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c7eab0f9-cdc6-41ae-b5bb-1e50bf22230e",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "d62fbac8-30cb-4ede-b1e1-9e5078987f88",
        "cursor": {
          "ref": "9567c021-5148-4e6a-a2e2-e88dcd31de3f",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "0ec58a53-c289-4017-a6e8-66a139015df8"
        },
        "item": {
          "id": "d62fbac8-30cb-4ede-b1e1-9e5078987f88",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "259c9672-e83e-4113-951b-9954d285a9d4",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "263c2bb3-fdfa-4a33-971e-5dde855ad47c",
        "cursor": {
          "ref": "9b69c396-0ccf-48ad-a156-9837fff38cea",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "5c433ab7-7a40-42f9-add9-cd1f886f33bc"
        },
        "item": {
          "id": "263c2bb3-fdfa-4a33-971e-5dde855ad47c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4772d6ee-fc7f-4c34-830e-462bf49a756c",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "648bc6f5-1a56-441e-b074-8f61bf833a56",
        "cursor": {
          "ref": "ac59e9ba-3131-49be-b7f0-cd51cadd55fc",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "fbc78456-3c1f-4c3c-b208-84c66fbdb0b8"
        },
        "item": {
          "id": "648bc6f5-1a56-441e-b074-8f61bf833a56",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b1a81454-0fa8-4c4e-88cd-fd2a1cf99e73",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "0a98c1a8-9972-435e-a96d-e5cccbb57e4d",
        "cursor": {
          "ref": "9bf808e8-4457-48a8-9baa-fe7b13acfe52",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "dbb8a8ea-7149-43e2-a476-aec81cfdbec3"
        },
        "item": {
          "id": "0a98c1a8-9972-435e-a96d-e5cccbb57e4d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "429a3432-0cfe-45d4-bb2b-572a5f8085e1",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "086fc4fa-d384-40e9-bd27-2117883cebf0",
        "cursor": {
          "ref": "7edee5f8-2057-442e-b792-af655ecd243e",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "7b06ee21-75d3-45b0-88a8-ee994f4140c9"
        },
        "item": {
          "id": "086fc4fa-d384-40e9-bd27-2117883cebf0",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7a69ee2d-c1c2-4de0-9de0-f47ad8279fae",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "fef4c17e-97eb-46bf-bb3b-9619e5ce9435",
        "cursor": {
          "ref": "de6a5f4a-ae86-409a-b315-0240e29d5fc3",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "c2dca0bb-93fe-48a3-9ebb-30ca5048b11a"
        },
        "item": {
          "id": "fef4c17e-97eb-46bf-bb3b-9619e5ce9435",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "176b28c0-8364-42c3-9c15-9541bcb42fe4",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "089a6836-a89f-4d12-b9f6-3edf9116568a",
        "cursor": {
          "ref": "99cd21c8-6724-443e-b483-f5ec46c0fdd1",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "13e5685e-5de6-4515-a0d8-36e8dd5e7bd2"
        },
        "item": {
          "id": "089a6836-a89f-4d12-b9f6-3edf9116568a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "0191f132-74e8-49c7-9ecf-0258b30e9266",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b22c77a0-6c99-4d81-8855-97a2cdd1d801",
        "cursor": {
          "ref": "7a3e1eca-799d-4603-b5a2-d911200c38b6",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "e8d63fb2-5a93-455b-b9ca-e9cef892e25b"
        },
        "item": {
          "id": "b22c77a0-6c99-4d81-8855-97a2cdd1d801",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "3e70a97b-f3f0-4eab-9929-7f266b442678",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 36,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51f92b60-70ea-4d19-991a-d2aa88f34fcc",
        "cursor": {
          "ref": "454cbb6d-5f5d-4449-b202-6da2f5d034ca",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "e21c3287-8ab2-467e-843f-a9cd6ecf0061"
        },
        "item": {
          "id": "51f92b60-70ea-4d19-991a-d2aa88f34fcc",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "39c3e87b-b0ec-4f2a-a552-8b6b56b5fbae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51f92b60-70ea-4d19-991a-d2aa88f34fcc",
        "cursor": {
          "ref": "454cbb6d-5f5d-4449-b202-6da2f5d034ca",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "e21c3287-8ab2-467e-843f-a9cd6ecf0061"
        },
        "item": {
          "id": "51f92b60-70ea-4d19-991a-d2aa88f34fcc",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "39c3e87b-b0ec-4f2a-a552-8b6b56b5fbae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc384a35-feb0-4ee2-ba2f-44aa2c5c39a9",
        "cursor": {
          "ref": "6d8361c2-1e07-450f-9321-a99f53b04aea",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "b28c5578-98cc-4420-b22b-61bd89d64f81"
        },
        "item": {
          "id": "cc384a35-feb0-4ee2-ba2f-44aa2c5c39a9",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "52b2ed15-12c8-4135-8762-a407d6683ade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4a44c8f-3c58-461e-bd39-7d411485ba4b",
        "cursor": {
          "ref": "15791946-4e5d-4cea-9170-199a545a5a5a",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "92118f13-1998-41d0-a57d-040c29f8da00"
        },
        "item": {
          "id": "c4a44c8f-3c58-461e-bd39-7d411485ba4b",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "5b97b8fb-4188-40cb-96d8-141edf7ad202",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eebde83-809c-43f7-97f0-f55ea0dc3a54",
        "cursor": {
          "ref": "a136b08c-846a-42cf-9718-884c24dc77c3",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "6bbdfd13-92a6-4b23-8dc2-1b1af6e4565a"
        },
        "item": {
          "id": "6eebde83-809c-43f7-97f0-f55ea0dc3a54",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "1f30da44-f4e3-4b5f-aa8d-3e96e9001a3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05ff9b1c-d909-42cf-be7b-e82342aef492",
        "cursor": {
          "ref": "24440eac-c5ba-4b88-b56e-53babb8b5fcc",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "4411fc39-0825-4c83-bc33-36e7af43ae35"
        },
        "item": {
          "id": "05ff9b1c-d909-42cf-be7b-e82342aef492",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "a2467d9e-6bce-4453-971f-0cd454b39d3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7794d3cc-9014-4d56-a717-b3b9a7502268",
        "cursor": {
          "ref": "1ef3402a-d78a-425c-8d4a-87f364eacf8d",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "57aeea44-5278-45e8-8104-a868c7e55ca5"
        },
        "item": {
          "id": "7794d3cc-9014-4d56-a717-b3b9a7502268",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "739aa5fd-f716-4d28-97a6-747f8b026ba6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b26cbb5d-4051-4400-a307-a11f56468814",
        "cursor": {
          "ref": "acf911df-c650-4bfe-b30d-2cb6b4af88d1",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "8bc0b8d5-deca-49e1-ba3c-cf232e30ea39"
        },
        "item": {
          "id": "b26cbb5d-4051-4400-a307-a11f56468814",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "6d038a0d-456c-47a8-af36-8a5ac4a391bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 629,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7002b448-3d7b-4930-a5f2-0e5ccb1a5b8b",
        "cursor": {
          "ref": "1b2726ce-538d-42b4-83b1-715d92bc1bd0",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "fcd78819-7440-46b2-9971-4a191e5a994b"
        },
        "item": {
          "id": "7002b448-3d7b-4930-a5f2-0e5ccb1a5b8b",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "f5cfa215-f53b-4afc-b241-17ff7018895e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ece93e3c-6e8a-4b1f-9c96-7e0d2525c281",
        "cursor": {
          "ref": "3c1ce188-e0c9-42f7-aa28-22b76dee0dbb",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "65c849d9-e03b-4732-9da4-851f60b01ebd"
        },
        "item": {
          "id": "ece93e3c-6e8a-4b1f-9c96-7e0d2525c281",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "e12e1073-8fb0-4a9e-abe1-5930fbc496a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcfd6e8e-42ac-4e0b-a03f-68b33fca095b",
        "cursor": {
          "ref": "f0434f34-8872-4bdd-8265-35a5228127fe",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "6ed76421-aa4e-4d17-9d91-3d3ded6e0906"
        },
        "item": {
          "id": "dcfd6e8e-42ac-4e0b-a03f-68b33fca095b",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "a8c1b2b9-58c9-4cad-bc7d-8ac50327b4af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2df63a9b-7475-4148-a081-deeb3f150fe5",
        "cursor": {
          "ref": "24d5651c-57af-4e20-8698-9ddc13b69a1b",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "2cc8b261-9ad3-4b9a-8b64-dffe65e86ab6"
        },
        "item": {
          "id": "2df63a9b-7475-4148-a081-deeb3f150fe5",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "6ac7a976-25af-499f-becd-3c9150e0df9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "063e4d54-ec37-4587-b263-d8e4abd97e6c",
        "cursor": {
          "ref": "0cc0e097-94d7-4e69-a67e-0c61545453e1",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "efe64d49-c810-4811-ac41-29a96030dfce"
        },
        "item": {
          "id": "063e4d54-ec37-4587-b263-d8e4abd97e6c",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "aa8681e7-87dc-4963-a7e2-8c713c667543",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac8fa67c-dcef-464f-943e-9ef4b5467f3c",
        "cursor": {
          "ref": "3e97f8bd-768c-4efd-aff0-1cf1762a67c3",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "d105796b-61d3-4807-8a3d-8353694fea0f"
        },
        "item": {
          "id": "ac8fa67c-dcef-464f-943e-9ef4b5467f3c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "f6bc19a6-a1fe-491a-a8c2-59a51752310a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3db2cd79-ca27-4098-a694-7def9ce852f9",
        "cursor": {
          "ref": "8c0bb854-8c65-4e52-96cc-191c19e13b37",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "e7eab526-3e3b-4d03-97c5-ef105e66cab2"
        },
        "item": {
          "id": "3db2cd79-ca27-4098-a694-7def9ce852f9",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "375ca334-9fc5-439b-9d51-2827427c8713",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fd5dfaa-835e-4c1d-b43c-7514e82299eb",
        "cursor": {
          "ref": "c483022d-2085-4c85-aac3-131325c7bd16",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "7b18e901-7b6d-406a-bd18-5310778d2c25"
        },
        "item": {
          "id": "4fd5dfaa-835e-4c1d-b43c-7514e82299eb",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "42bd90fc-44e0-475e-ade0-1442ee292d36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b98b04b-52ad-4c51-8696-1177a02c56a8",
        "cursor": {
          "ref": "766c7e3d-86fb-4e52-bcb7-6c74ad29c6e6",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "7a2897f2-e705-4f8d-8b10-7bb8f1f96804"
        },
        "item": {
          "id": "2b98b04b-52ad-4c51-8696-1177a02c56a8",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f7779f7e-2354-467d-b3b5-c2e6bbe205e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69048592-f461-4543-a137-aec90bacff19",
        "cursor": {
          "ref": "8e8e8387-9700-4c80-9416-f46cde1a2070",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "553e2de5-8ce6-4628-8414-bf080caa7a51"
        },
        "item": {
          "id": "69048592-f461-4543-a137-aec90bacff19",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "05c45a61-cc59-43fa-8c7c-c1e2c42f0604",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a493870-5e22-4f99-90b3-fcd24cf4400e",
        "cursor": {
          "ref": "efcd385c-241d-4d3d-9ac6-f8b236c64a99",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "c58b402f-e54a-4636-9e33-35eec48f6552"
        },
        "item": {
          "id": "9a493870-5e22-4f99-90b3-fcd24cf4400e",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "8927df25-cc41-4485-b550-a2fc49636126",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 402,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e8dcc55-32fc-4b72-afa4-437ec60e6c53",
        "cursor": {
          "ref": "9c6b1fe6-e702-496d-9fea-3a70715c4249",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "a4938973-d5a3-4498-87b7-0a366ce645a4"
        },
        "item": {
          "id": "4e8dcc55-32fc-4b72-afa4-437ec60e6c53",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "52c01f5c-5f13-4a16-9885-c13bef312010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 206,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9117131a-c682-4ea6-895c-8f2fca5abf08",
        "cursor": {
          "ref": "be3aef4c-6093-4f9f-bf97-70e2d6f655d7",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "42921703-a7ae-4869-8390-4d4b4ed5d38d"
        },
        "item": {
          "id": "9117131a-c682-4ea6-895c-8f2fca5abf08",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "9f729e75-fc20-4e1a-844d-21cf821113eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 198,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78f10631-777b-42a6-aa7e-42d9c53f6bf7",
        "cursor": {
          "ref": "0f2f820a-f2c6-44a4-8926-699b09d67383",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "3636bdb3-33a3-4072-b6ac-dc7dc7169823"
        },
        "item": {
          "id": "78f10631-777b-42a6-aa7e-42d9c53f6bf7",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "190475ec-97d3-4965-b10b-f39cfc9ea2b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 199,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16ef761e-0689-4b8b-be21-060a6583d042",
        "cursor": {
          "ref": "7d25ea5f-2cc1-4ec5-bd0d-70a4a278909e",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "f7f7888e-a74e-4fad-b14c-f9d5559408ee"
        },
        "item": {
          "id": "16ef761e-0689-4b8b-be21-060a6583d042",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "c099c675-5792-4fa3-b001-e8dff8d025c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 215,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a1fef24-e420-4eca-bf31-d65cec85e190",
        "cursor": {
          "ref": "228845fd-d940-472c-b6fc-208bc0d4ab6f",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "52ecf132-77c0-472b-992e-5182fece56e6"
        },
        "item": {
          "id": "8a1fef24-e420-4eca-bf31-d65cec85e190",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "75befd7b-3b61-4e9c-b8a5-4cb72c960852",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 216,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51449bc3-7c85-4582-b5a0-8f1cf5207f8b",
        "cursor": {
          "ref": "feed8bc4-c4da-475a-abf7-b0af32a8a837",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "7007b603-810a-44d1-8eb3-169e775233be"
        },
        "item": {
          "id": "51449bc3-7c85-4582-b5a0-8f1cf5207f8b",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "230575d9-2d4c-42e0-9184-88e5733387e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0253aa64-1ae8-4b8c-a65f-5218ce5ae667",
        "cursor": {
          "ref": "7c5a5e0d-786c-448e-82ce-ad1ae1263ad1",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "97b082ac-d7e1-4fc0-b6fe-2e8d3ba27a5c"
        },
        "item": {
          "id": "0253aa64-1ae8-4b8c-a65f-5218ce5ae667",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "23e8cbd5-ea94-415e-9636-aef55bec73ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "119fd627-f049-4d4f-89dd-761beb395f51",
        "cursor": {
          "ref": "1647626c-9d68-4a34-a73c-ce65f9497c6d",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "65679681-9a7b-493d-8ddd-bf4fb4ce3467"
        },
        "item": {
          "id": "119fd627-f049-4d4f-89dd-761beb395f51",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "d51f7100-0acf-4848-b4a3-ee14d35cc94d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 214,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beb1a852-b768-4bca-a8de-4ddb5e1b94d1",
        "cursor": {
          "ref": "fca09914-f6fd-4478-877f-62fd1394d195",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "8b038d85-877b-42c4-9d55-95eab39b817b"
        },
        "item": {
          "id": "beb1a852-b768-4bca-a8de-4ddb5e1b94d1",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "298fac5a-23d5-4536-8bf5-c359b1e9141b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "329425df-d73c-46b7-bf69-3f3181b4753a",
        "cursor": {
          "ref": "c24de2e5-9e05-4105-8ead-2c6f771bb204",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "41e39c39-62fc-4bd5-ad22-41658eabb05b"
        },
        "item": {
          "id": "329425df-d73c-46b7-bf69-3f3181b4753a",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "20f768c4-a8cd-4563-ab8e-bf1a8e2fe933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66030bb3-e048-409f-9bc0-9884ae929fcd",
        "cursor": {
          "ref": "9f9daf17-974d-430f-8a1f-4a03e6125f0f",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "42af7fd4-8df3-4de2-a01c-97857d1ed47f"
        },
        "item": {
          "id": "66030bb3-e048-409f-9bc0-9884ae929fcd",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "495b266d-610f-46be-aedb-db1bd958f5f9",
          "status": "OK",
          "code": 200,
          "responseTime": 206,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "be349915-e7e3-400d-b770-159fec0575f4",
        "cursor": {
          "ref": "c2158875-7be1-4950-9c60-8fb3c25c2144",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "f4efa8f8-0e31-49ed-9ff2-80fe635a3b8d"
        },
        "item": {
          "id": "be349915-e7e3-400d-b770-159fec0575f4",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "7ffa8a07-e489-47bc-bf81-e7ae59d18a5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d420685e-1b63-4759-be82-7bc45ed0962f",
        "cursor": {
          "ref": "223979fc-1df0-4c80-86fb-40a41690cc42",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "71086580-8cb0-442b-8ea2-8d38fec0d174"
        },
        "item": {
          "id": "d420685e-1b63-4759-be82-7bc45ed0962f",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "c978311f-151d-4b79-b9e2-a2ce8a72766e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64bc2c81-fab2-4b23-851b-d8e0951049d7",
        "cursor": {
          "ref": "7c6e9b0c-5bb4-4199-893b-03de57821420",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "417c7419-4a40-4eb4-8199-826d1fa6f918"
        },
        "item": {
          "id": "64bc2c81-fab2-4b23-851b-d8e0951049d7",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "9c555b85-b7e7-40bb-bb3c-ccd982a805c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8eba171-8d38-4f1e-9307-f382085eb4b6",
        "cursor": {
          "ref": "5221e76c-106b-4840-8d22-f31f13bb3ffc",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "46006d00-a147-4cd7-8c90-7af55bf659ec"
        },
        "item": {
          "id": "b8eba171-8d38-4f1e-9307-f382085eb4b6",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "52bfe9e5-c1a4-4645-a002-dca7d8cd5df7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 196,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "071418e3-5646-4629-9a6a-3c350b7801c9",
        "cursor": {
          "ref": "0f620b6f-da7a-45ca-a145-5fb0a30042fe",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "cae8ae50-e3d7-4527-849b-8ea9877a366d"
        },
        "item": {
          "id": "071418e3-5646-4629-9a6a-3c350b7801c9",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "5ea9a8e0-65c6-4e50-9c5e-373cddc2984c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa94a6c6-0bb7-40f9-b6e5-2bc8e7a3e4cc",
        "cursor": {
          "ref": "db395b1f-bb82-40fb-a7fe-be4707a2f476",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "b3576554-3212-4b46-a6ee-64fea7c5c8a8"
        },
        "item": {
          "id": "aa94a6c6-0bb7-40f9-b6e5-2bc8e7a3e4cc",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "1b442e5e-2680-4b8f-ac05-72b85ab4fc98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 202,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eb6ea6a-49b2-4d5f-b73e-06c4cc0ec5fe",
        "cursor": {
          "ref": "f01b27de-6d8c-4c95-87c5-e6788de726a2",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "ed076f92-4a5d-4b4a-8958-631a6c195b13"
        },
        "item": {
          "id": "1eb6ea6a-49b2-4d5f-b73e-06c4cc0ec5fe",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "07e2d7f2-f08b-466a-873f-d1115da87b3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b507ed2-c58f-40db-aa22-eab7f4859a0c",
        "cursor": {
          "ref": "b0bbb1a8-8b4a-468f-83d4-fd36bc8a1307",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "1bae7b0b-e2ac-413d-b5ec-8258d5430d08"
        },
        "item": {
          "id": "4b507ed2-c58f-40db-aa22-eab7f4859a0c",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "27ce7eed-c648-4ca5-aa92-e3928a2e97cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 211,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77f99f16-2592-4f9a-9709-4d14674ca17d",
        "cursor": {
          "ref": "d76da1d8-0454-41b8-a2f7-c493b0b7e97a",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "bccbab92-a509-4109-9d80-1c76987dd4ba"
        },
        "item": {
          "id": "77f99f16-2592-4f9a-9709-4d14674ca17d",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "9925e27e-3cce-434b-982d-b1115c457f47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 198,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c19ae2fc-f883-4516-8042-2057bf6ba192",
        "cursor": {
          "ref": "7a120c05-55df-42f6-add4-87b5a3a5150f",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "63cf15a5-71c7-4a7c-9c77-4442e15599c3"
        },
        "item": {
          "id": "c19ae2fc-f883-4516-8042-2057bf6ba192",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "b7b729d3-f1ed-493f-bec1-34762ede76d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 206,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b37e160-0552-4f1b-894b-534014914c48",
        "cursor": {
          "ref": "6535206e-809f-4fa2-b494-906cbfb8b28e",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "ecea3677-5847-4161-aadd-7efe336f8758"
        },
        "item": {
          "id": "7b37e160-0552-4f1b-894b-534014914c48",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "084211bd-d691-4070-9de4-b34892da0ef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 234,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6da3f72b-73cc-47a3-bea6-0980a16cf9fd",
        "cursor": {
          "ref": "6dcb75ee-fdf8-485a-996a-bc12e886bae7",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "065e4098-e0f7-4aac-a757-67fbc359ced8"
        },
        "item": {
          "id": "6da3f72b-73cc-47a3-bea6-0980a16cf9fd",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "49bcbed8-c6b5-4b0e-bd71-3903d6931734",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 211,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "773c277c-b9a7-4a12-917e-9e71bb072f88",
        "cursor": {
          "ref": "9d7140a8-510a-4a93-accd-66a42a7fb1b1",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "c1c18b77-9b78-44d8-bc31-63b0506a4c49"
        },
        "item": {
          "id": "773c277c-b9a7-4a12-917e-9e71bb072f88",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "e233260f-c544-4847-be7d-96382dc239b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "605f4fe3-0efb-4d9e-9e56-b370f2e601d1",
        "cursor": {
          "ref": "98394613-53e5-4dd4-903d-f8d50149bb31",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "77f6b353-3207-4435-b3e2-49dbfbf269ec"
        },
        "item": {
          "id": "605f4fe3-0efb-4d9e-9e56-b370f2e601d1",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "dd23bd43-e4f1-47f7-abcb-7f60de9925d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 205,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d84ab4a-db9d-4e3c-9dda-6099b80788b5",
        "cursor": {
          "ref": "26cfba2a-a470-4961-8771-1428cf52f9a5",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "486348c7-2704-4a9f-9b47-75becd666c10"
        },
        "item": {
          "id": "9d84ab4a-db9d-4e3c-9dda-6099b80788b5",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "a8a402cf-d367-48da-bd9a-d5f06e7e0b00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 223,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e537f072-9c0a-436d-83cb-e2caac625780",
        "cursor": {
          "ref": "a48dea35-4310-4e0b-9226-9de7df90f8da",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "24a96d4b-7a69-46c9-b7e6-0b64af30c673"
        },
        "item": {
          "id": "e537f072-9c0a-436d-83cb-e2caac625780",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "51deb853-6ea8-4766-be3e-9f7ae7b06b88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 265,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d003ac0-f2cb-43b1-84da-93edaf93ef8b",
        "cursor": {
          "ref": "82f045e2-1035-42b0-aa44-a473c9a72876",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "fe126145-a203-472c-a71f-e740a0672265"
        },
        "item": {
          "id": "4d003ac0-f2cb-43b1-84da-93edaf93ef8b",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "3f83688b-4049-426a-8806-5a0a142f4fcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 238,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45c8a962-b33f-48b8-b968-fb17ebff186a",
        "cursor": {
          "ref": "4d2fcf3c-d88c-4750-a304-417e5dc10729",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "d1f98c26-6e50-430c-bbe0-a3a7bed23cf4"
        },
        "item": {
          "id": "45c8a962-b33f-48b8-b968-fb17ebff186a",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "3fde540a-d17e-4fb1-b8c3-0635ec7fdd66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 208,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fdf838d-6996-4e2b-a56d-75b2346c73bb",
        "cursor": {
          "ref": "86c1ad3d-7767-4c9a-afca-6043477102d0",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "004cea04-1537-42d5-a05d-795d53469810"
        },
        "item": {
          "id": "2fdf838d-6996-4e2b-a56d-75b2346c73bb",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "881095e3-6bc2-4105-a9d5-dbaf7255c2d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 209,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3df8216-99db-450a-84c0-867032711bd1",
        "cursor": {
          "ref": "0a03cd1d-2b2f-4b85-9522-9140c1a40922",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "289e45be-9156-4c79-842b-d62edc04e160"
        },
        "item": {
          "id": "f3df8216-99db-450a-84c0-867032711bd1",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "968df9e3-d731-4f70-9045-c594de948e08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 205,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "513ebd78-2105-43a8-a5ca-5a61ed78e52e",
        "cursor": {
          "ref": "9e2b425d-5e64-4276-be79-623cf8dc37a7",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "7545d446-2a26-472f-9186-45e49a0e8e23"
        },
        "item": {
          "id": "513ebd78-2105-43a8-a5ca-5a61ed78e52e",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "732bde57-96bc-485e-8867-3b62d5b58bc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 205,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "444ecd81-531c-405e-825e-116e43065eb9",
        "cursor": {
          "ref": "5f8acc9e-c4e0-4177-9e86-084c3b871cc9",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "73bed48d-fcd7-414b-8f86-a9ca5d4b2e85"
        },
        "item": {
          "id": "444ecd81-531c-405e-825e-116e43065eb9",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "341c719b-990c-46be-aa89-27b4c66c791e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 196,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05f434d5-6ba8-4280-a706-1e1411abd8ec",
        "cursor": {
          "ref": "e048afa7-df21-4f2a-8f50-ca32b0ed0203",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "e248f5f6-a51c-45c7-b0d3-a29eed12fff8"
        },
        "item": {
          "id": "05f434d5-6ba8-4280-a706-1e1411abd8ec",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "8cb6c2ce-29e6-4a56-91dd-e49faf27a1b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 216,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05a7e7eb-e011-4af8-a272-63ed7a64af54",
        "cursor": {
          "ref": "ffcd5d42-66ea-4d5f-b6e5-ce3d921f0bbe",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "c6aa1279-2501-41cf-942a-745986fd1308"
        },
        "item": {
          "id": "05a7e7eb-e011-4af8-a272-63ed7a64af54",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "91b426f9-98c8-4b2f-86a2-a566115973da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 235,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a454b2bb-31a1-4bd4-a05f-49d086c0f7a5",
        "cursor": {
          "ref": "c7a0faa6-ed66-4a92-97ad-d092bb324cb4",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "54aa4053-7fec-4290-b8a4-18c054f5d8fa"
        },
        "item": {
          "id": "a454b2bb-31a1-4bd4-a05f-49d086c0f7a5",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "5dbccd09-babf-4b4b-8396-a60ccdd7fe63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34ea1d5e-adcb-43c6-af88-3b9bbb8ae771",
        "cursor": {
          "ref": "bdd8eba6-b610-4ed7-a2c9-0455ae9a5044",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "83f9c81f-8770-4332-b310-e1f9c9bef43f"
        },
        "item": {
          "id": "34ea1d5e-adcb-43c6-af88-3b9bbb8ae771",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "28b67368-9df3-44e4-bcef-cabb7151f7cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30dcc905-8a26-41ea-aa4c-bcfefe266587",
        "cursor": {
          "ref": "a1f23e77-37fd-4b38-afff-dcd5f00cfc3d",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "9fd9f083-7684-4a90-8ffc-f7abc65475de"
        },
        "item": {
          "id": "30dcc905-8a26-41ea-aa4c-bcfefe266587",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "55a8fcd9-0846-4712-a33f-fdcff0a08835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c09d719-ed7d-499e-9961-3bd7968ad01a",
        "cursor": {
          "ref": "fb19ac89-e65a-4abf-836e-703aac57921a",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "7b4b0dee-8941-45a4-847f-da9af736e705"
        },
        "item": {
          "id": "7c09d719-ed7d-499e-9961-3bd7968ad01a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "66f1e3dc-7539-4879-99ee-345549eee9f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 199,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f76c87f-dd43-4e20-b4fb-208d4ee27918",
        "cursor": {
          "ref": "7eb40209-c06f-40ff-a8aa-f8457b16725c",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "025342a8-73b0-49cf-b27b-3515df84b155"
        },
        "item": {
          "id": "2f76c87f-dd43-4e20-b4fb-208d4ee27918",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "c7252c50-af1c-4eb3-99d3-024657e076f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f33a674-e2ed-417a-bf5a-8b88a01d16b1",
        "cursor": {
          "ref": "025a3e92-51f1-463e-9f1e-ed5f702c6e9f",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "734a0af7-2eee-4e82-93e9-5a34a6199f59"
        },
        "item": {
          "id": "6f33a674-e2ed-417a-bf5a-8b88a01d16b1",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "2a5af1c5-9fa8-42eb-827d-07b16b1c3b54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e19d375a-c24e-423f-9433-9443d25a8ab8",
        "cursor": {
          "ref": "2c78aa89-a61b-4be8-bc5a-86fbf6037b20",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "fe7429c4-1a91-4a88-ad6f-593404404e6f"
        },
        "item": {
          "id": "e19d375a-c24e-423f-9433-9443d25a8ab8",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "2765936d-c1e8-4ee3-b996-8e0cacbfdebb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a09362c7-2745-4a5d-b1a4-8577212064cf",
        "cursor": {
          "ref": "1e5fc262-90cd-4d97-9387-af687aed0499",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "c9073991-69ca-4e7a-a174-f7b3a4266117"
        },
        "item": {
          "id": "a09362c7-2745-4a5d-b1a4-8577212064cf",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "e34e2ed8-742b-4d94-849f-26542ccbdac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1427d9c-7fbd-4de2-8f78-a58f7ac7d402",
        "cursor": {
          "ref": "fe09aafb-a994-4e8c-9803-187509b2eb80",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "aea0c684-f945-40bf-b63d-7ff100ac36bf"
        },
        "item": {
          "id": "a1427d9c-7fbd-4de2-8f78-a58f7ac7d402",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "fbd77858-3c0c-4355-ba14-baba3b638fe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 197,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82a11696-cf92-4896-8532-b2b092166795",
        "cursor": {
          "ref": "b6bf1bc8-7b96-45be-a0ff-e0fd2bc2f443",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "585293eb-6677-409f-bcd4-54d31867a401"
        },
        "item": {
          "id": "82a11696-cf92-4896-8532-b2b092166795",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c58e3a44-d225-41ef-8ebf-dbf3b92ccded",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72b9c02d-1e45-40dc-b046-af8ef75bc997",
        "cursor": {
          "ref": "c105b951-289a-4b07-a6ce-8d149a275a82",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "4bd32b19-2fb6-4bd4-884a-f1f3d233e0d6"
        },
        "item": {
          "id": "72b9c02d-1e45-40dc-b046-af8ef75bc997",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "d1bab282-cfbf-49ff-befc-b42efebfbc31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1349e7e3-81a4-42aa-82a2-a0f3aa1fe525",
        "cursor": {
          "ref": "f789a537-9dfd-4e85-a9de-25110d12fad1",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "495fc7c7-f4ef-4da5-8b1d-394e5a73a15e"
        },
        "item": {
          "id": "1349e7e3-81a4-42aa-82a2-a0f3aa1fe525",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "74f7b15e-f084-459b-ab97-70adbdaf5dd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e509a56-d362-4155-a536-ed94558cd8b5",
        "cursor": {
          "ref": "779179c4-f386-4312-b425-c1914061f1ad",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "d67e8165-ceb3-4bce-adcc-3a551d749a4e"
        },
        "item": {
          "id": "5e509a56-d362-4155-a536-ed94558cd8b5",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "01b7e41e-5a6b-4abf-8e82-74f43d4b5601",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e4cb038-5aac-4526-8af8-54a16e4f2762",
        "cursor": {
          "ref": "16c8f6be-9a56-4c2b-83b8-0ea576f2351f",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "7fa031ec-01cb-4613-8109-c3cd6bdb2fa0"
        },
        "item": {
          "id": "3e4cb038-5aac-4526-8af8-54a16e4f2762",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "32637a6e-39b9-4edb-b89f-aa60a9187fdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ec6b92a-c444-4355-99ed-4d19604aa2c2",
        "cursor": {
          "ref": "ff72f99d-e8f9-49c2-b3a4-a654350ae7d4",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "22372a2c-b62e-45b8-9631-81066b190aa1"
        },
        "item": {
          "id": "4ec6b92a-c444-4355-99ed-4d19604aa2c2",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "045b46a5-4c72-49e1-bb2b-be1edbe80e7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5720581-89e5-41fc-b9fb-b7eb0349b8f4",
        "cursor": {
          "ref": "cb971eb1-33ee-4606-8069-93bec83de827",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "2c2d4d93-7ab7-46ea-bb6c-e10e43c19953"
        },
        "item": {
          "id": "c5720581-89e5-41fc-b9fb-b7eb0349b8f4",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "e78ba6e5-4352-436d-af5d-ead4aee1b8bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5091ffff-8391-4e59-85f4-2624cc4de888",
        "cursor": {
          "ref": "b5d23454-266a-4223-9448-51bac26063a2",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "3ef83047-e0ec-4850-8c0b-d52478e67dba"
        },
        "item": {
          "id": "5091ffff-8391-4e59-85f4-2624cc4de888",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "3dd8cf14-9069-4b3c-9b48-a00b71d6604f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b93dc4dc-921b-4c7f-a17a-22388d97af54",
        "cursor": {
          "ref": "ac5ea81b-d794-42d8-bf0e-1e0e2132f1d7",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "34a4d3b3-86c7-4ab3-906f-188c2ea2a295"
        },
        "item": {
          "id": "b93dc4dc-921b-4c7f-a17a-22388d97af54",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "57bf9e99-2c63-47b7-8c41-ffcc3c406264",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7757916-5e1f-4dc8-bd1c-a24c7fb7c7f4",
        "cursor": {
          "ref": "11748ad0-ee2c-45b3-a722-657d8dacf415",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "7d8f4606-cc3f-46ea-9733-8f5a3e139258"
        },
        "item": {
          "id": "e7757916-5e1f-4dc8-bd1c-a24c7fb7c7f4",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "3d2987c2-e912-49f3-8859-ffca4ef75a64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d871b7e-e5de-4528-93bf-be84372a0890",
        "cursor": {
          "ref": "9434ce8e-9bee-4b27-a28c-0af032102926",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "29de918c-4495-46df-9473-3a729adc2a3e"
        },
        "item": {
          "id": "6d871b7e-e5de-4528-93bf-be84372a0890",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "fbaaea3d-4ebe-43c2-abaa-dd5622f1fff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea5743c6-cd87-482c-9cfb-cf10c16158f5",
        "cursor": {
          "ref": "860149af-1b9c-4ef1-9145-de3a3d55bea5",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "c73e4e65-6b24-4b8e-b56c-6b8e6fc4d2f1"
        },
        "item": {
          "id": "ea5743c6-cd87-482c-9cfb-cf10c16158f5",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "95c61d4d-b73b-498d-90d6-ec2e0bb27c5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37d7d5e0-91e5-4840-8612-0d88c9c253a5",
        "cursor": {
          "ref": "44f43aba-0f1a-44da-8fab-a7e8baa0fd7b",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "537eb52a-e2fd-4d53-8820-3112b6b4533e"
        },
        "item": {
          "id": "37d7d5e0-91e5-4840-8612-0d88c9c253a5",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "76633fd1-8bb9-46f7-80a7-066b53c29a63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36858d6c-8792-472b-9562-832d9608bddf",
        "cursor": {
          "ref": "7ed38ca5-2994-499b-b5ca-269211141e3d",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "e75895b7-0c7c-48f2-91f6-29826a22ba11"
        },
        "item": {
          "id": "36858d6c-8792-472b-9562-832d9608bddf",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "93c7db88-a078-4e79-a367-743844c0ad7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c8ddc8b-45cf-44d0-b22e-ce1774814bdf",
        "cursor": {
          "ref": "9c753e4c-f35b-4c60-991e-5d0244cd3784",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "73d8bf61-38a6-487a-a308-e3ef123f57a1"
        },
        "item": {
          "id": "5c8ddc8b-45cf-44d0-b22e-ce1774814bdf",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "833bcfbe-4792-4ae8-85e9-58768393eb78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "087965bf-44e2-4d46-82a4-1c80d0de0e8a",
        "cursor": {
          "ref": "59eb971d-35b7-4eff-b50d-32231c401bd4",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "809dec10-6a5d-4db6-9662-b42af349dcb5"
        },
        "item": {
          "id": "087965bf-44e2-4d46-82a4-1c80d0de0e8a",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "2a4d4568-65e7-4775-87e3-23aa180e77b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c74edd95-207e-4e9d-af61-7185e094dd60",
        "cursor": {
          "ref": "5f6364c4-894f-4ec0-a529-aebc69b67460",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "f0023b4f-1929-4200-9988-98fdf0fe674d"
        },
        "item": {
          "id": "c74edd95-207e-4e9d-af61-7185e094dd60",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "ba2b17c3-12f1-42a2-a771-0213750ccd4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8180df75-a0b0-4632-876a-db1f0201aa77",
        "cursor": {
          "ref": "404a6c2f-6970-4aa7-8dc4-038920ee81da",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "b67d91bf-083f-45bc-9d02-3bac6ab573b0"
        },
        "item": {
          "id": "8180df75-a0b0-4632-876a-db1f0201aa77",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "952a2a4e-8938-40e9-937e-626b8a8e4541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "587a5e12-0e6c-43ef-93bc-47221209717a",
        "cursor": {
          "ref": "2c34cfac-6bc0-4817-aba2-8e09a3f52db5",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "ae67f954-460a-4371-8d92-6122068d6e2f"
        },
        "item": {
          "id": "587a5e12-0e6c-43ef-93bc-47221209717a",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "db66af7b-74d8-4d30-8922-2e883495f967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c1bdf7a-2337-4571-b580-716029a3489d",
        "cursor": {
          "ref": "446f6297-5e75-4196-8964-630ad5658bb1",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "e8d57a34-0e6b-47f5-aed7-c37ee24728ba"
        },
        "item": {
          "id": "6c1bdf7a-2337-4571-b580-716029a3489d",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "1dcb1bf0-63fb-40f2-9d0d-7563d3380c24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "553d012b-f11a-48e3-8949-0889f50125c1",
        "cursor": {
          "ref": "ca5ca86d-ad04-4b24-a533-fb486dcf0f0d",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "cf68c68d-3ad9-48f4-8104-946e368dee2c"
        },
        "item": {
          "id": "553d012b-f11a-48e3-8949-0889f50125c1",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "2b0d1bd4-0862-4f7d-b674-47281503107e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a636dff-3720-4ccc-8e50-87bf581b3cbc",
        "cursor": {
          "ref": "a7a46ff1-55b9-40da-be84-db8b6c53633f",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "24f3ba1d-9fdc-4fac-ba43-37c4a62af739"
        },
        "item": {
          "id": "1a636dff-3720-4ccc-8e50-87bf581b3cbc",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "09cc1ddb-2406-48e5-9951-109e934c6dcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2a59207-e13b-4e5e-aa32-4c529a39d6d8",
        "cursor": {
          "ref": "db148dd3-91cf-49f6-8657-f48896a65da7",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "cc1f7902-26a7-4b6c-a208-d683c3748ff6"
        },
        "item": {
          "id": "c2a59207-e13b-4e5e-aa32-4c529a39d6d8",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "9daf41bf-908c-498c-b905-91887a7c8aa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c98edb6d-0f3c-4861-98c0-80b91e4ed2fb",
        "cursor": {
          "ref": "ce9bb58c-9455-4234-b2c1-d0d46e1a22a8",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "3b75c430-8214-4b6f-b928-ea5bbe8809ab"
        },
        "item": {
          "id": "c98edb6d-0f3c-4861-98c0-80b91e4ed2fb",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "fe9baf1e-0b29-4a5d-ab37-9ecb6aa473ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f14a4e58-c84d-43e5-83f2-de03e89d024f",
        "cursor": {
          "ref": "0eb4e396-2d8e-40bf-b16f-07de02d1ccd5",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "d0750491-e941-4da5-a9e7-99c547dcce61"
        },
        "item": {
          "id": "f14a4e58-c84d-43e5-83f2-de03e89d024f",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "9b53fd6f-76fc-4b6c-9127-ad91a8c2cc8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5379783c-7a53-4b52-b5fa-5404cbc25eff",
        "cursor": {
          "ref": "1efe7640-f385-4f43-b1f3-50ecb07915cd",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "020b2948-3ec9-4ba0-9cef-8dea1e6e614b"
        },
        "item": {
          "id": "5379783c-7a53-4b52-b5fa-5404cbc25eff",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "be2017dc-bb28-4545-9d0b-4d7c9f3e28af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98559c4d-a75d-444a-ba42-93bd96f86242",
        "cursor": {
          "ref": "5761cc94-69f2-4a2a-b21f-fa75fdd6be8b",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "aa8601b7-f37e-4f5c-a152-c735f4b048b8"
        },
        "item": {
          "id": "98559c4d-a75d-444a-ba42-93bd96f86242",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "cfef19d4-8be0-4438-ac0b-c3e2fc537883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71d569b5-1e87-44cc-a0fe-a6fc316608e7",
        "cursor": {
          "ref": "a0d7777a-6323-41db-aa32-ff69a37722da",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "2180d194-99c1-4c05-9bbf-bafd9f4fb82a"
        },
        "item": {
          "id": "71d569b5-1e87-44cc-a0fe-a6fc316608e7",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "2d1e4bf7-d4ba-4460-90c4-827522f36a75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6db4ba9d-55d4-458e-8f68-af7318d806e3",
        "cursor": {
          "ref": "29505f28-5253-4705-8646-b50953237ddb",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "5c5bd682-ee21-44af-bb35-0b0f4358d991"
        },
        "item": {
          "id": "6db4ba9d-55d4-458e-8f68-af7318d806e3",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "8bee1631-985a-480f-9af7-d117a93b2d5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e352c6d-c9d6-4af3-a044-8efa957d65ba",
        "cursor": {
          "ref": "03bc08e4-351a-4e85-99a3-69a5890542b6",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "17f200fa-af1b-465b-b376-fab769fbc7c8"
        },
        "item": {
          "id": "9e352c6d-c9d6-4af3-a044-8efa957d65ba",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ebecf8ae-2ecc-46f6-994f-e2182d8ed50e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b820efc-f1f1-452b-8a01-bc2d4920356d",
        "cursor": {
          "ref": "6b245820-29bc-4b72-a9a1-b25192bff111",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "c1c5dd1d-ca5b-4fcc-a5ba-a2402549b5b5"
        },
        "item": {
          "id": "8b820efc-f1f1-452b-8a01-bc2d4920356d",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "7e5e939c-0025-477e-a4bf-48a1971c824c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4e30fca-1cc8-4ea9-87d2-ec145e76e926",
        "cursor": {
          "ref": "3e9b3fd3-b6a6-4a64-8cb6-d3d6459efc6b",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "5c17a5e0-3692-40e7-a708-db2f80577620"
        },
        "item": {
          "id": "f4e30fca-1cc8-4ea9-87d2-ec145e76e926",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "91af809a-4bbf-4948-ad60-0bf538ac64c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f2c1ea5-2a49-49c7-9b33-8bbdfe90275d",
        "cursor": {
          "ref": "27b32a68-977b-47d8-a88d-dea11b0c0796",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "d7f1fac9-3386-4fdb-a5f4-38224f861ecd"
        },
        "item": {
          "id": "7f2c1ea5-2a49-49c7-9b33-8bbdfe90275d",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "19e4eeed-6d08-44a6-a695-394c53565097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aed6f1f5-a3c5-4dcc-866a-556925032279",
        "cursor": {
          "ref": "e3e79d74-364b-4584-9dc1-43d02956d40b",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "9a384af6-78c7-4c9c-a975-9914f530e78e"
        },
        "item": {
          "id": "aed6f1f5-a3c5-4dcc-866a-556925032279",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "40dfeae9-5a3d-4c7a-ac2f-6020d68a6d89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10ae20c1-af83-4caa-86a5-151992c18d33",
        "cursor": {
          "ref": "4c5fe14e-a187-4cc9-8202-5caee966e086",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "83c1eb83-168f-4cb3-80f8-422107dd4938"
        },
        "item": {
          "id": "10ae20c1-af83-4caa-86a5-151992c18d33",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "f4702869-8719-45c0-a5d1-d4bd4227ee92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdd97cea-4745-4239-ae2c-b86a25c9c6cb",
        "cursor": {
          "ref": "dc65142d-d7a5-4c4f-956f-c8946adda8da",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "601e1e54-421c-45a7-ad02-e5ce1b2fde5f"
        },
        "item": {
          "id": "cdd97cea-4745-4239-ae2c-b86a25c9c6cb",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "eb547cc5-afe8-4388-be30-8ab64dc5d8e7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2774eef9-b29c-4e38-8c0f-af1030280849",
        "cursor": {
          "ref": "ab64c20f-652e-45b6-8e16-8407c61d68f1",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "478ea7fb-3012-4a5a-9c9a-50a555f209f0"
        },
        "item": {
          "id": "2774eef9-b29c-4e38-8c0f-af1030280849",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "7096b306-f55d-46a6-88b0-1b209fe5b491",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37d2bffd-9b2e-4e00-9290-d98ac3551cfe",
        "cursor": {
          "ref": "282c5b19-c3cf-4908-b30a-a40b9e9545e9",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "f1493dab-0a07-44d9-a5fa-8383f92f5b05"
        },
        "item": {
          "id": "37d2bffd-9b2e-4e00-9290-d98ac3551cfe",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "ed0a3a3b-2fff-4f2c-80aa-f87c642a7740",
          "status": "OK",
          "code": 200,
          "responseTime": 330,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "59bb3892-dc48-421a-9974-b2bfca884e9b",
        "cursor": {
          "ref": "a47ebcf7-1700-4b8b-b409-e396867b64c6",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "d7514f46-1a7c-4260-bfea-31fb1fea6de3"
        },
        "item": {
          "id": "59bb3892-dc48-421a-9974-b2bfca884e9b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "9814895d-abdb-4ea8-af3d-4f9bb3a00a93",
          "status": "OK",
          "code": 200,
          "responseTime": 340,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f2d75c9-4072-458f-808d-7a6969aa8e3d",
        "cursor": {
          "ref": "ee4a4621-6216-4591-83fd-d6622b9489e5",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b8d4a767-5c49-401c-9db6-de1a0ce48190"
        },
        "item": {
          "id": "4f2d75c9-4072-458f-808d-7a6969aa8e3d",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "6568330c-3dd8-4d99-80d7-5d8c60eec5d2",
          "status": "OK",
          "code": 200,
          "responseTime": 704,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac3d7efb-9e1c-4022-a230-83044bf0359e",
        "cursor": {
          "ref": "58616ef6-5b8e-4ac1-8eef-8fe5733ff6b0",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c31ea3b2-4fd4-4965-ad5f-43e62cf8346d"
        },
        "item": {
          "id": "ac3d7efb-9e1c-4022-a230-83044bf0359e",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "02120b6e-ba50-4247-9481-ecdff62d1649",
          "status": "OK",
          "code": 200,
          "responseTime": 365,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d7e06a6-c60e-40dd-a4aa-279248d08932",
        "cursor": {
          "ref": "b9cdea20-b2df-4af8-9eca-cd736cc9b1b0",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "c23c81d1-80f1-4f3a-8026-819b844e86a4"
        },
        "item": {
          "id": "5d7e06a6-c60e-40dd-a4aa-279248d08932",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d73d7efc-a77b-45c3-b24e-9367c6aa7023",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d7e06a6-c60e-40dd-a4aa-279248d08932",
        "cursor": {
          "ref": "b9cdea20-b2df-4af8-9eca-cd736cc9b1b0",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "c23c81d1-80f1-4f3a-8026-819b844e86a4"
        },
        "item": {
          "id": "5d7e06a6-c60e-40dd-a4aa-279248d08932",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d73d7efc-a77b-45c3-b24e-9367c6aa7023",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d7e06a6-c60e-40dd-a4aa-279248d08932",
        "cursor": {
          "ref": "b9cdea20-b2df-4af8-9eca-cd736cc9b1b0",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "c23c81d1-80f1-4f3a-8026-819b844e86a4"
        },
        "item": {
          "id": "5d7e06a6-c60e-40dd-a4aa-279248d08932",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d73d7efc-a77b-45c3-b24e-9367c6aa7023",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25a5281e-fb45-493a-951b-0d94bc8ad9c9",
        "cursor": {
          "ref": "f42dfa7e-ce5a-4f90-a40d-a5ea056442e8",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f25b89a6-cf12-45b7-ba9d-8a27e5f6baa6"
        },
        "item": {
          "id": "25a5281e-fb45-493a-951b-0d94bc8ad9c9",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "7cdd29cb-c7f4-4662-9d3f-210cdbda4b96",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0ea8be7-f9f8-4c73-86ce-2b34b5ba32c5",
        "cursor": {
          "ref": "7f960e51-1b19-4c9d-ab84-a4971cbf3bdf",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "de2d1517-8725-4400-843f-0b2510f59552"
        },
        "item": {
          "id": "c0ea8be7-f9f8-4c73-86ce-2b34b5ba32c5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "7337190a-107b-4c6c-9c12-689ca52a6dfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "c0ea8be7-f9f8-4c73-86ce-2b34b5ba32c5",
        "cursor": {
          "ref": "7f960e51-1b19-4c9d-ab84-a4971cbf3bdf",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "de2d1517-8725-4400-843f-0b2510f59552"
        },
        "item": {
          "id": "c0ea8be7-f9f8-4c73-86ce-2b34b5ba32c5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "7337190a-107b-4c6c-9c12-689ca52a6dfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "fdaf38ba-bb3d-43c1-b6a7-3b644fc49c5e",
        "cursor": {
          "ref": "83115248-fcc1-46a9-a6fc-daa13c35f4a3",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "67422c4c-1d2a-41ca-8f49-d36555f7d94f"
        },
        "item": {
          "id": "fdaf38ba-bb3d-43c1-b6a7-3b644fc49c5e",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "6a5ac942-a914-4456-b96f-cf812c88b44b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "a196dc2d-6f89-4e87-8c1d-5608a8f622c8",
        "cursor": {
          "ref": "5e332efb-5461-4f8e-af6d-cb7badfafbe5",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "99923116-36a1-4740-83db-318d4f32de86"
        },
        "item": {
          "id": "a196dc2d-6f89-4e87-8c1d-5608a8f622c8",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "4ba35e51-64f4-40e3-a3c7-c26dfba14fbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "a196dc2d-6f89-4e87-8c1d-5608a8f622c8",
        "cursor": {
          "ref": "5e332efb-5461-4f8e-af6d-cb7badfafbe5",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "99923116-36a1-4740-83db-318d4f32de86"
        },
        "item": {
          "id": "a196dc2d-6f89-4e87-8c1d-5608a8f622c8",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "4ba35e51-64f4-40e3-a3c7-c26dfba14fbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "d440dfb8-c653-4f36-be80-c9f528e01d8b",
        "cursor": {
          "ref": "05a0ff44-adf3-473e-b433-be48a7980adc",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "13e738e6-7ce6-4831-83b4-d7c9de8ee556"
        },
        "item": {
          "id": "d440dfb8-c653-4f36-be80-c9f528e01d8b",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "aa1dbd87-194d-4116-b2ba-eff336ac3ee0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}