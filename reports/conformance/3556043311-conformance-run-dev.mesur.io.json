{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "24d1b9c0-1772-4128-8f34-7dacfb76b2c2",
        "name": "Clear Cache",
        "item": [
          {
            "id": "ada03071-ffb4-40f3-8dde-7a93e7834335",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7a7cd811-be82-491f-bc32-4beda0f76d18",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "28d69e1f-5560-44a8-aea5-70c97c6e9556"
                }
              }
            ]
          },
          {
            "id": "c61f80a7-9c62-4e55-be5e-9b0897ce7915",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4a422a09-c4d8-42a8-bed2-b68e58bd61d7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6ac55917-7171-40af-9135-0f1512671168"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "6675ff3e-3bf2-4742-bf24-74e44ea5da94",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "ff89352e-4df4-451b-829a-1c5431afa28b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "265a28c6-4046-441b-8684-32fdf15fb4ae",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fa7a581f-02ee-46bb-87d6-5739a8943c09",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cbd169ff-cd1b-4a8e-98fd-0ed4bafec8ff"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "108e8a57-5bcb-4f50-b4eb-e1133b8a6340",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0d49dc03-fbe7-4136-80e6-fd215a0f9810"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "82997069-3ba3-400f-b610-52ac2b6e9bf2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "35346f12-cf98-41c8-9ee2-0a822dfeecdf"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "07cb27e2-b7be-450e-aa99-34753e4c7774",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "636fe9bd-3188-4649-a713-a9e9238ddbf5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c4545697-ffa6-4f04-8a90-e29d1f32bba5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f99a8a00-50f9-46a0-ac12-3d604b45ee83"
            }
          }
        ]
      },
      {
        "id": "d4494e46-6cf9-4a20-8d9c-2658176b3378",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "13fbc165-4d29-4c27-8f10-4031cd93b87b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "18dada96-ad1a-443a-9605-ce1e902911a5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b6ba58af-e2a7-40ea-8cdb-133d7fde2e1b",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d25a3414-f0a1-48b8-b519-af734777ad4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6359d65d-102e-4bae-85c3-a79c232051c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ddc9e91-f41a-4c94-80da-b7b4a584f798",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6c82b19-590f-4241-9bb1-d55616cd72e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d13ed2ac-ef27-4028-8927-617b427ede0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc087bb4-ec09-4d9c-a8ed-2eaf90b0327e",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f340bb2-0cba-4987-a815-3272a8915938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff867006-405a-4637-a4cb-5e19d0308442"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "96ad4991-e435-4431-b1fb-a37dbd2fb0fc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8b839529-66c7-4c5d-9ba6-8fee49f257ba",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57dcb5b0-8280-4aca-83d2-672845dbb484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3d770ee9-73c6-4da5-b16a-b770d6c58b15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e15f98ed-d8d9-44ae-86d3-910b76bca3f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afb0c0f1-5aed-485e-9e55-e79869eec783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0124af4-1441-476d-b6ac-4da6c80bf6f4",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6973107f-305e-4242-a0a7-2e0547e39f88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "152ceba1-f9c4-4d13-9cfd-460fa289a3ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87319562-f6e8-46ff-b42b-c7d52c1f31f9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "c31e18a2-6f3d-4571-a7e0-896706b90d16"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5ebf0fb0-51bb-4a8e-b341-e915741a04d9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "22be8b81-916e-4621-93c4-995b5856e70a",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "55a0d79e-16c9-480f-a317-a4bc5cbbf8d6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "440837a8-f8e8-4522-a650-4e8430015b31"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4fe29031-025d-4019-8584-b1a6639ef3f4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "d77aa188-b2fe-4647-ae41-a6cd2b520c9d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c3b2eb89-d64d-4fb6-a2c6-0fcb8d6ef076",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a769fd68-9f4e-43b3-9ace-5153b65e2d9e"
            }
          }
        ]
      },
      {
        "id": "8dc9f354-b4f6-48f2-94cb-da4f7c993cde",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "a4c70f61-89de-48b4-b329-6b9a7124daac",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e219da2f-15a2-498a-b9be-35bceec8c370",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "842c973c-d211-4063-a38e-5e72aa616da8",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edb69ea2-a09d-4027-914b-d04f56fa3b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "006fccf2-bd58-4928-9213-0dbb9c0c18d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6488352-aad3-4e67-bf0c-7da3269632f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b1760e11-dd15-4dd3-b871-e7e58e12bef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74e43148-789a-4daf-bfd7-edf07b514861",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebe17097-de50-4bdd-abf2-ea2cfbc8918e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2152b054-939c-452b-afc0-7624f681fdac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b9a1f6d-a95c-40fc-9431-20bcb20d1d9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cc9c2ac2-b151-4d5b-a8c2-ff8b23610918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb2d13ed-8277-4d54-a058-76871ff0fcd9",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6bf8493-d40f-45ee-891e-37273fd71d96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebd81d33-0e7e-4903-a2cb-aca78bc43c6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d662173c-c61b-4669-af0b-685a8b2bcbc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b6b98802-2b4d-4dd8-bfb2-567fa8857e26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d0b3518-ac35-4953-94d4-856310bca6f6",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "612306e2-2a7f-448b-8ffa-99e0a7da9111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a583c6c-8032-449b-a226-3fcc687593e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbc2a6b3-01bd-4fa6-acfd-ed1e5369ec89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "668aa71a-bc77-4112-9cce-0f2152e4857d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc09ceb7-ab2b-4674-9e3f-d0c7b0349c4c",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b39f8c1-e4a4-4c6a-91dc-47ebf086d93b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "841aa597-4fba-40f9-b5c6-aad467156871"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b381646e-0d8a-4a48-8a66-ca71ee5f4567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cda713f2-706e-4843-bf20-eef2e90ce9f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21dac041-953f-4193-90f7-6379ef449755",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "317a9ba6-8545-42f4-b6d0-0a3e98cd53d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a94b603-1fb1-4994-bc91-a29ea511d2a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c51149f-739d-4f56-97e0-7768f4d917b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3402796f-fb83-4ad4-b01c-29e8e1a94193"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f729d35-33b7-4475-b56c-0a431361cea6",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43cb6344-f709-4ec8-9536-c7f3e485aec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef9b1508-5a07-484e-9a57-97a01724339a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7974dfdc-be28-40b4-9dcc-b58d7ec48723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d16e3d91-f1b2-4df5-9229-25b21098ab54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "723aabde-2709-4f63-be4a-17a34b882410",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b380acf-a991-45d0-b575-8e676131127d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dde79617-56c5-41b6-9570-8ee7d483d585"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71b3964f-ebf7-4c08-b6f7-794bc6743af1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ddb29496-283d-4836-89a6-4fefc7b252bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2436a35-011b-449e-8ecb-dbfd04c137c6",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b61e8fb8-2cd6-40d1-9ecb-e17533fcfb1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d30f291-3a37-47d6-8312-2757e3c42868"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15af0fe1-25ee-4b96-9f1b-d8012d4381b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b2786d42-3b54-4cee-92ed-9997cf02c61b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34b4d34c-85fa-4ba0-964a-a1e41ea30df1",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d107f7c-caff-4c0d-a405-020e94fc5de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcb9e6ac-3a26-420b-a09f-4f78e4cd4bf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49f4046b-48e2-4f53-9bc3-d053c523e415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0a23c142-7def-46d0-90b2-68e5989ddac6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90702f41-efe8-482e-a03c-db1a8a6895ab",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95e66273-08eb-4ec7-ad18-ec09d8eecd14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b45c8d5-b5a0-44c7-a9a1-35e68e4a4073"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81e6ad86-5417-4d82-8b76-208514d4fcb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f41ab67-0c83-454e-b74a-a20c5bd820c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe2b8ab6-9e70-49c4-8005-da75eaf284be",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "667182ca-d481-433a-9429-3bade75f2420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "638e5c7e-ed42-4b30-b32e-478799bdb57c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3e86f0b-02b0-49d2-ac8b-9b9db63508dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3102dab5-b217-4eaf-8835-93801b5b2c5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a5c454a-c94c-4c0a-82ec-309dd26eca02",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9d94dbe-b681-45cb-9ba8-2b8a4f2447a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dcfcc67-e6ad-41cd-8dde-168c5e34c1ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a6ebc8e-80fb-4b24-a7c3-9f7e8fea5ab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f334199-3583-4d6c-825a-03061bfd6fc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ca73426-174b-4a2e-a8be-c494a2c8ae5e",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6fdbdaa-231d-4be3-b659-fae8fdd5d269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef72ef34-4276-44cc-a8e8-67c8db2203e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41ae7313-9155-4574-a2b1-bbe35547f20e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4617dea2-1512-4996-a1d0-579ce796fac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30f9ed01-afc0-4c34-9c0b-dabcdb633481",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2397d6a-b363-4962-9920-313955952324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "055ff927-6476-4e65-88b0-ac05d742c659"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bac1a5c-01e8-4843-995d-7d98a5f09b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "09d58dc8-bd6f-49a0-bc65-44e480a14786"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1646a9d6-5229-483f-bd0a-acb17428d6e1",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fc290d7-447a-4fce-8795-8c0a3b0569b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2601537-5688-4307-9648-6c17ba17774d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1073fbef-8f2f-422c-a013-45b2a91ff264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "24697114-f394-4e61-b749-9e19dda5a1e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb176ff4-0ede-4133-9017-6564b8cee0a5",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9890c11d-5321-4450-819d-4b028cb82bb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7af8d48d-868c-40ce-8666-8ce3dd0aafe4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a0ad4a2-c1df-4621-8a36-b727dbb472bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "01de4525-70a8-4776-89b6-64e750fbe005"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f79ac5a-31d2-4ccc-a9ff-bedd777787ae",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5758ecce-b283-4081-81cb-a1b48e4f467f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0358856e-84e1-4cae-8874-7869c1b69125"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa24b5e2-86c4-4ee1-a201-9e250dd419d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f03153a8-7233-43bd-995d-d2b7f7a8b04d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75261c12-8f98-4656-99d9-896336f9e56a",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0231e25a-282e-4b66-87d7-0648d0b2c9bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e48db9ed-454f-4337-bb48-b27cf0c39a75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd9fe3cf-52e4-4953-a6fe-597d3dc4a8de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7501883a-55fb-4350-88f9-82f9dc8ab5f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11b339a3-3a71-4aca-ac5b-a6d6b0ff61dd",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88537968-26ee-40c4-8778-4687275bff3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bb79f09-7a9e-4193-a8f0-61eb3c0743fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29a38aaf-8455-4d04-8c8f-738b96e8f4af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3cb1098-a774-4fd8-b1ff-a835cb4d6c94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c53f1067-7299-4b67-b54c-a13480018d5d",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be6bda98-9211-48af-8a92-8e8df2f1fe81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f0b09db-a481-4c95-88f7-55f9d17f5339"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3114c5de-695d-4e98-893d-b8f19f0e0a7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3300ec7c-feb2-4f59-a4ee-e83ebdcc794f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0493822a-cc23-4caa-a0ab-754ef2ef1e63",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "055a066f-f831-44e4-aa65-2d817e852e1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e16cab01-8619-4683-8378-7c06653b30a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48a68641-138b-49cd-b269-a7e86a25ed47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "05f6f63d-b3f0-4090-a5e3-750a09aa04d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bac3b36-37ed-4d5e-8c3d-c793ec087fa9",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d35fb0-22a3-4737-9b4b-5178fc3900bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1266dab-6f66-447c-a12a-37d8cada8497"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3100d91-3317-4c64-839a-13ec24b9870b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "11e05b83-9564-4f6c-b183-afd07e6af588"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4c70278-e115-4d34-bde3-be008627bb79",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a7a76d-b1cc-4559-b042-f6621890457d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e7b4d7b-727b-479f-a751-3ad13dc94d52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c036d60b-5960-4a2f-887a-4bd536eea51f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "972baf41-23cf-479e-8b4c-464846732cff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "067adced-ec94-4946-9b8b-081be5134935",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7562780-2319-4e65-8d98-01acc081063a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c1a41c4-cbd0-4ca2-9ece-9f0c0689228f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c1b3aa0-efc9-45e0-9b3a-06ce27133ab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b9764c6-6cb0-4d5f-8f3c-d8478ccf586f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "533cdea2-7437-48eb-b0a5-a03fa8a48857",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d199def-e186-4b73-ae85-0073ec8c2147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d07c72fd-7f37-4b7e-a91c-44be94ff909f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f8badbb-f023-48ad-b6bc-9ab5e014e08c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "895951e9-001c-46f9-a272-3db93f68a475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b1f1381-e861-41af-b8e9-f9a8ac78f6a5",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9c2f313-68b0-4348-8257-a37e4d2a0ac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1a7ecd5-d76f-4b2e-a5c4-76d2216f9f31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d73a67d-91d5-4e34-882a-307d7e6c4c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a7e6574-0eb8-4540-8752-483f911230aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "194edbe1-5b13-40fc-836f-708ce3b9ecbb",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a061e7f1-8e82-4604-babc-c78211403eb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dff3896-cf4a-41ba-b048-2503afee9087"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1ca75c6-7f03-4dd5-adee-9e09ae65b5b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d7862ac-e7be-49f8-af25-8331a68f40f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3089c611-590e-4753-8363-a0fdf308dbc3",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5753d564-bb69-4fdb-a5b6-bac97a3f3a93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c829148-ae2b-4a6a-acb8-032d0eb8ee2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0052ac99-a0bf-4029-86da-06d60a623421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "af04c946-9d36-4b80-8f1d-1a8e707df051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2c9ffbb-057f-44a9-9168-771f55efb090",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a052a8eb-ad12-4677-ba87-1daba71bbcf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23fb1048-8183-4a84-8880-86b4eb6fefb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccf14ff2-de69-4167-80b6-566bcaf7a0ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "522c3140-5aeb-47d7-a0f4-a13f874864b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdefc14f-1f1f-4ebb-8964-4d307a3ad751",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc5a3bf-2f94-4cc4-b2d4-e98c74cf78ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7def5d2-824c-431c-b9df-a8743857e84d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c700fc6-a65c-4f23-a9db-a65889f046ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f9b96d3-ff2e-4402-ad79-f8df879de3fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a81641bf-4c73-43e7-888a-61c383e1adab",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c28fcbb8-e75e-4fac-924e-092673ce01cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f739cdba-4eae-4b5a-9f70-af0e1fa5077b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ecfc8a1-b1eb-4557-8603-f06b4b2b3e2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ef9e192-447a-4f3c-b2e8-d26f4c1ba472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "371a6657-f050-447d-8b12-f5c8540483da",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6ee9988-6909-4c48-885f-22b107d7127d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "463fb25b-bb81-4d02-88c5-b6c3adf4d234"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1072c79-0b0b-40e9-acef-5ca38c4db551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd8a0e52-6514-42f4-8a12-c525dbd9a4fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ef70e17-1527-4c03-8dd5-ece5e17e7269",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0e99a58-352e-491d-b663-fab32b904927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bb2a1f3-dd30-49cd-979c-591fbd8e09c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b56ee680-280d-4b88-aadd-b6db4f7673f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "453a06fe-8e26-4fe0-9a4d-5d4d1a9cf3aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "854da61f-8e76-4ce2-b925-d6bf82297fd1",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "098876bd-d6c8-47d8-a430-0bdae82f5ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1605abb-cc75-4f94-8aaa-622288e6957e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d91700a-8628-417b-b3e7-67d2ab6bfbd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "2a00ae8f-3e1a-46ef-aa49-7be92ed93b6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9afec43-24cf-4479-a7b7-dbbec00b2a9b",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3b6156a-1203-41c5-9cf4-55eb9abb10d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "87e71bc2-6419-4f2e-9dd0-1290c7ea19a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "001b0349-1842-4184-85f6-9cc736d37c06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "90b75aed-2208-4722-9eb5-1693515a5606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a1d1d26-5d5b-4457-827d-814f0a5f13eb",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69e2e310-52de-4afa-b3a7-d47560b0f435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c046332-93b8-4890-a663-ee33b750259f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c75c2718-1557-45cb-b981-27927ca4ec38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f30b0c18-57b5-4044-a916-d5ae31e96ed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "362d0550-0122-4696-a574-ba779a142fd2",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e07a4c3-1f94-430a-b9d4-ce3496bb21c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47141f7c-1684-4f58-a1b4-953843f17374"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aaa3fc8-f8bb-43aa-8df7-af9b3da1c98b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "933a3841-e1cb-44ef-b7ee-59e4ba5d5c4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d491a989-ed85-4f5c-af4a-30583d525934",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "544d01aa-4aa1-4fc7-b552-eec3fa188ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6acf162d-81a7-4215-85b9-e5184983da82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c3b23e4-a67f-49ed-b2b4-335de32cd0da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "499c7598-dc79-45e3-862c-3a236fe22b12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e016838c-bbcf-4794-90eb-075d7f6cfb63",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "676bb6db-2cf8-4e2a-8036-82e0960829e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "505ba5ab-bd12-4525-9fbd-35d8ff21eb59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "084ca38c-c367-4ddf-b369-0c162067e6a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "286eaaaf-800f-4f38-9538-517f7df91045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4178b27-ec1d-4388-9afb-64b09e3b346f",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f4696e-a8e5-4354-b387-c72b1166539f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfde7c91-e904-41cd-a9c0-69fa26ca4f72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed6c641b-722b-4b1c-8c04-5a425b3a0a06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4351ff8c-a6ec-42e2-b615-dde0bcbd0e43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27a422e5-0220-4d88-8e9c-cfe681a5ef57",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "765ea581-048f-47d1-a96c-e2c7c5e8d759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed38b615-7517-4028-a8c9-0834ef943422"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9f91f9f-1f4e-4c78-8af7-5a43fc3218a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "21ac3b06-31af-4f04-bf18-a5e4a37e6f29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aecf3fb0-5c1d-4244-acbd-77e4e3a3e871",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46fa259e-0e45-4483-acb0-ff8c0315d515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99e74d7d-89dc-4255-b25c-d37e89f5fc15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "879823a3-c8f4-4f37-a7b3-173cc3c2d199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "319c819e-2085-4f25-a9ea-334b63e96fa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b38d79d8-9e28-46f6-908f-8915e0f86764",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9724f4c-7a62-468e-88b1-2f192e307ce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ae7b13f-d0b4-4c9b-9d0d-32f7dffd73e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d843c30-265f-46ec-a9e0-9ec58e815ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "540d6e36-62a0-4cc3-b274-3dccfaeda262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a30bfe86-fdc7-4e89-a38e-a038e1009132",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07fc3977-3c2e-494b-a04b-852cd03f7e46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "393bf61d-a10f-4ac3-a8b6-0ba0606bc72d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f273ae9c-2e1d-420e-b81f-67bce807f821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "51043bbd-7617-4b56-ad5f-20f6f13b03c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fed61ab3-d168-4356-97b9-44dbdefa8274",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "795ebc55-5535-44a3-8541-e4e73dd43cc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e80afd4-9a25-4994-9527-68b42cd68ee6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "920967c5-e9c0-4d4f-b69e-e39424afa276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3b2842d-f243-4bc0-9295-e6263c280bbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5403c6fc-c161-4fb1-9a4e-1cf7a97bd34d",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfbfa33b-7678-4046-a82f-e35e32c4ae53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64c39121-8f8f-4563-8257-8c951060e2ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eb7b808-a8d3-4eab-8d6b-902ebea29af8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "25e7c11d-06af-4bab-b17d-95d785f76dd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b95f088-98d6-43aa-8fd9-cc6255b76530",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd73d814-16e7-4e16-9b3c-770034f7af97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b4be033-e953-4a2b-b28b-79ed30e0bd32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7828ab2b-d05b-4a06-b755-3804136c1bdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ccb51b82-57cb-46e5-b866-1e15e6633cd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cd007a4-9e1e-49da-b736-78f67e46e060",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a660cde1-457b-428c-a278-07fe822aa99f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cfdca4e-406e-4640-8803-4f587202f65c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd694d58-a675-47da-b6c4-8597f82822fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a407162-5c0a-4636-afee-3a665930feed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fcc90ae-2c25-4965-b7cd-a8b4c910312c",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38a5569d-bafb-4eba-84c7-e7f0c1e9fe8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "529b31c2-0093-47e4-9819-ac15b201a305"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce656ecd-b5fe-42d9-a36e-8a27acd74824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c15410b1-3795-4837-a704-e02ee30d5788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a92aa2a-6b5b-450c-a801-3a1c1189b4c5",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "659f9286-0cf0-4423-a6c0-0501a2565467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0eba188-4a78-4297-8727-3c43acd84dc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa0d3206-e0a5-4fbe-8dc8-1c3a91e5269d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "57d24ee2-c172-461f-bc7b-9e9f698b6e88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daab6924-3526-45c9-9cd7-498703a16c96",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db5e9660-2343-4a81-9bbb-168c87375b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db387347-c33b-4ffa-9f3c-9fc69a580257"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83b705c6-e198-4d27-a245-8ec255268dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "981be6c0-6ae9-4cd3-83ce-d70f0fd4a30a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e6d2e92-7661-4179-85e3-f0b4253b1162",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dd74a9e-7098-41be-8ae8-0655bfa278ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "194ae296-4191-4eda-a0c9-f194d48e1945"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c26c338e-1bb8-4435-8215-35edcef5afa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3552ddc2-54f7-4f14-aa29-c6a6c8d3ed71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3e432d9-cb82-4dbb-add6-bfd2974c34bc",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e13c7d61-de85-4b48-ab1d-501b16b10862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e663533-30fa-442b-957b-65327f34fb44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "738ce119-5f0c-4910-b479-996222eda416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "61be9015-2179-452b-be90-f24c568afb8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b759a59-948f-4110-9c0b-89ad2d992a22",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a21e6db2-45e1-4cfb-b087-16a27b9fecd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a133a4c4-0da5-4d73-a06e-be6a5d6e972a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e2b2ede-4a0e-4d05-92e6-cc40bfa8ae8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee9fb13f-2246-4129-b017-2427f007a333"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bfcd269-6ea3-4863-abdb-e7d704597b30",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d43832bb-969e-45c9-b81c-b7f52df5a866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38070319-442e-4ff5-b095-b2506cacf3ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "176cc6a8-b6c2-49cc-a19c-34ba9661aa2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "7cdb33d5-f171-4f9d-8b53-b26d80bfeeda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ce21ace-77bc-458c-bf68-a4bb92f6f9f2",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d026c278-fe03-4ace-ba6a-45112a4c0bc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9d91fab-391b-481c-9544-8abedd301afb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65a897d0-db7b-46ae-b087-e002b6c18054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "589d43ec-994f-409c-b37e-4b7909210e3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77be31b3-a703-4e05-b1dd-42032e94415f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff0f94e3-a54f-4dc7-82f7-de0a9f43361b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a6b8ab7-ff3e-4fa3-b815-efb130897305"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79e4cdef-e050-419c-9aeb-6415a612b3cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9db787bc-f72c-4bce-afbd-0a799de5e505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb275dd0-634d-46b8-8e14-c923f9b8508d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06075d37-46b3-4cb7-8d54-dd29917d8605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d07e7059-1225-4a65-8c72-519a7ff0ef7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "740561e0-e619-4ad1-8477-7e0a0330bc74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f0936c7-c503-461f-b74a-89665003f0c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df7147cc-52de-4c53-bade-c7b2ac623d07",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20d265f1-a418-4c13-bd4d-d303c4b9caa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbf53139-e33c-408e-8487-e569ce1d9b07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90583989-6ffe-4fd8-81a0-ea4c0bb2ed87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f91adf77-0e7d-443d-b691-872462d0a871"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0ab1389-fb49-4dc6-81b3-7349e48a885c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3ec148d-6634-4a0a-95d7-d86a91063aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08214839-fdaa-4442-bc45-c31c95f7bdda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6591e8bb-9343-48c4-8671-a03ebcde292c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b855f1f8-faec-4257-b3ec-d9a14d673f0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2396990d-e25d-478a-881f-b610568042ba",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48631d44-dccd-44f9-ac3f-05aac3300b68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9291702-563a-47e6-b031-ea5238c799b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a1cbcca-e4c9-4ad0-8672-7006ea90faea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "61d2d796-dc59-45b3-88f3-a7e0edc982bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dc2b19e-4a5a-484e-aff4-d51def44e9c3",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bea701cf-6753-4f3d-88d0-6677ad47be2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1c0e838-7706-4593-a8a1-881c1768e66b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03200ebc-e7eb-426a-bc52-b16bfb33c1b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fd0c562-83a2-4048-9d33-6f0be7741b2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67a8c935-2feb-4b50-81b3-caa5bc292715",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be2e2613-3b47-48f5-aca3-0da0f891fec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4783889c-5c44-47cc-aac6-8bc7e43330e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d71e5b0a-1860-4090-a661-320b88546124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5227d66-88f0-4dfa-b646-e89c19753bc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbaacbb2-1df7-4b4f-bdbd-8cdc01604dd2",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3af4c74-8488-4a65-89ae-b61c86fcc8ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a4c4480-cc6d-405e-aecb-03215b60b6ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99299133-e05b-4d64-875a-8624097d22bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5f5daf0-9325-4f7f-8ccc-0742c861586b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59dc8535-527f-469c-b9a0-ca2c83867924",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2056d8b7-9fc9-4ba6-bdb7-3d6657e3ffbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ba35f75-167a-4a00-a455-f9dbb10c88ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31c75422-9164-458b-bfac-000f46ebf01e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "577fe6b5-d287-41c6-b53e-77d09d31dbca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbc722a4-5d3e-414f-8b92-b21ef2c29164",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dc613b5-5959-4afa-926e-6f1f40426cde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8521df6-2e54-40b7-9c0b-4f884d658d6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dbe8155-354a-46a1-9796-09ff5f7911bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b0e6265b-d0bc-4af1-9b5c-cd356ef3b3de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2eaa838-4482-4bbf-b42a-2a4a9fc0e863",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59b4a993-0806-49cb-894d-4d36d372bcbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56f1b2e7-9f2e-4dd8-84a2-f50613f8bf16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4d9154b-84a0-40ca-8d4f-25a87ee051b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2faccc55-0981-4f89-925a-e616aca936ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16730312-5005-4f45-82f9-2418ea6bf125",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ac4b503-b254-404a-8e19-0bd557859338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "887e9095-9d68-4af5-bb78-c1996bd4a18a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d44fb0-a278-4b8c-8795-be7efe42d193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "49aa5d26-c60f-4b80-99c7-68db99bbf8fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a9beb55-2219-4296-963f-0cf05e37dc24",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a466c642-30fd-4398-be3e-6b12c5514cdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb252abc-a7ec-4ce7-b5d3-fc8141da508c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81905f43-68b1-4a6a-abbf-2073b3ecc038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e31d13f1-d9bc-459f-a368-a2c9f5e7ddd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95f0a518-f3ee-4c2c-adee-8489b7687bab",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a62ce9d-ebf5-46db-ae1a-e5a61c11775b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1832578-0d10-4942-8171-6e532a37aacf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e26f42b9-c0b1-410b-bf8d-7c1807d7acc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a384eb9-fae9-4b5a-9adf-1ae82cddc672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e41e429-0095-4f41-8e1b-c8f0a19dfc49",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0c9087c-3ab2-4475-ba64-46e8de6f6106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc496e26-ce1c-494f-9229-e56bd94bb166"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebda40b2-c946-4190-ac14-bcd83f9c2e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a25c0a8-025b-4b16-8aab-2a38c88c0cfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "835f0ac5-1f26-49fe-8ee6-2dd76ea4c19b",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8e8e4b6-1904-444d-b375-a6292a7e9175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "488c8338-d5f8-44fe-b964-c37da0f7be4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd63bc9d-7d15-4946-869c-c47c3b9bec8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1def2761-1b36-4706-b490-3f56a2968d56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "016ef2ca-5361-49e2-b8f2-74fd3b96418c",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5faa6edd-0f7f-42d4-9fa4-25d93d92537a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "552fd075-f719-4353-a95d-8122da12fb75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b36a5e67-e8ca-48b1-9851-f7fcd2ab7032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9f18a905-b802-4b45-b080-6d9007a5fa25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f33bf5d7-b1a8-4576-9f96-8feaa4c5de8d",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3676108f-08cb-4e43-a0a0-8e6c2ff40ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4ee228a-d0b9-416a-9fdd-b24e205027b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7e18f34-8945-4ec5-9dbf-e6332c8657aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef66e7be-dcbb-46c4-8a0c-38f69dd6a701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "503af07c-4cf7-4c5c-a8f4-c8ae79f8a555",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d31123e-3cc2-4679-826d-59684501e9c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05eb0ce1-3149-47b9-a2c3-f498d1eee0f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f714628a-7adc-4f61-a453-e018b3b723c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee0c3e1f-0cbb-4e61-a08e-947d0a2d11db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1090de49-cbbb-4e3e-84fe-b9d6de91795d",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06739e21-3cf8-4664-b463-209d3ef6cee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a01adc8-2b60-4de3-813c-5aaa9998bc12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ecbb6b5-e321-411e-9230-01a45235d242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e72dfd4b-e794-4b9a-89f0-7bf31120a4be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "651ff430-32b8-4838-8dc7-2735bd47eb4c",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07b0f862-6b9f-4ca9-9856-369ae4854eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eb01874-2dbf-4600-8d48-193ee45c55c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3632e098-4e7f-415b-8399-fb1e31d0acf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9bccbe4e-0d09-43ca-8566-63d556fdc500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f97a4656-fa91-493d-9e3f-ea35ae30e9a4",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35b6ba85-7051-4a8a-a488-55a156268583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3114e3f-4b2a-42f2-b36e-8fc0c4313232"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c5a4b7b-9462-4d06-9185-5331df84124a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a035e61-b086-4738-9df2-33acc1eb2cab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "855d9be6-6c0a-433d-a507-6c25c0b45d08",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c92aafa-9076-4988-8295-49c793cdfee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f6f7a6d-bfa2-44ea-9664-c3ce04376e76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "842891cb-8f81-4d70-860c-e8f10641333d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "da87c1ed-f6ac-40b2-ba90-6f6c2d2d29d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a838081-bf3c-4bbe-bf63-e5512a392ef8",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e6202c0-168a-44e0-8bd8-2fa1380437e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae9c1fa2-227d-4abf-9aad-3a91a4a0974c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5352ae87-efd3-4a1f-a9c6-0fc755a5e1ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "734b355f-17ea-440f-9171-d6f5295529a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d6df2aa-b97c-4768-ad87-f88d40a6b2d0",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36becd1a-d7f9-469f-8471-f801bd2d982a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7ce4b11-0dbe-4d29-a6cc-facf96267e22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dd2eda9-f7dc-42b4-af19-f58daa4e6d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d35fe3d-c311-4bca-b983-f554b87bcc7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ddd6f35-f338-4f89-9776-2f0b4b3b1144",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eb02edc-17c4-4de7-b7f5-8784fefcf215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a869a90-1d18-4c86-8b34-48be631f2a7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06d8ca2a-089a-48b6-a111-0f5cb8344102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "502d3645-33d3-4fd5-8773-10fcbdda9a4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "add58386-8451-4310-b581-f7a2909faebb",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "635aee06-4049-4015-9796-058d28a64136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbed191e-19eb-4898-81f5-e188389dd32c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f25b77b1-1e60-48ed-9c59-4d4d4b297b39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7f8deec-fe50-4870-8f4c-967b1f2c4656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f0483e3-8037-4d0c-8af3-9705e72fd551",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "073881b3-b3ad-427d-9d97-0e2a0068dafa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1356738f-3d5a-4670-9f13-91ce6f12fdbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0e3d2d2-9986-44fa-bd8f-e13c2b48ebef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9397f034-4154-43da-a0de-ee046618f751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "516433c8-d0a0-4f66-8bfb-5912b9ea7860",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8beda331-c122-40ed-a12e-3d3eacf4c318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fb334e1-993b-43fb-a779-9732d5ded715"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07d99d7c-c04f-45f6-818a-9c405bbbc5a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5f5d3536-a214-4d78-be65-eaf79b239814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e10ba006-f744-4a4e-90d2-1132c8d5d158",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30d46caf-fddd-42e7-a95c-2936e5733105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8ad3855-11af-490a-8765-f8fe42eba40a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4db2885-e9db-429e-9430-10957bd14643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5aa71bbc-af97-4aa6-b1e4-b731e608292a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e1b62d5-9f7d-4a52-a752-e1196ec547a9",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2ddd673-faf4-4ce5-85a4-291d4ccefe44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68e29e43-ed4e-4c62-8130-32086d69593d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12a15bc4-c2b2-404b-ae4e-0d4e31ad71ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8baa0d93-c3b3-421f-850b-012818e65f46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dcecc3d-b6e2-4367-99ae-024cc3f1c39c",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aaf5b4d-4a06-468c-a492-af5d1ddf2997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa48dbec-373f-46dd-8d54-83fe3eb6f316"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77776e72-cbbc-4de9-888a-a95b4873db38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "12878f60-75b8-4fe1-84bc-df80fcbb7927"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f833952-9114-40d6-94ec-54d34a89bd3c",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "479ead1c-3e2e-4634-8031-6d63b3cb7925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f36c026-9dea-4b6a-a14a-ab907a444f38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4348ee9a-ce46-41d6-8174-18ad77caa952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc296320-64f5-4109-b51a-d82e15dd3dab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "735026e0-8059-40cd-ab92-bc8d562f0d23",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8af7f47-5432-474c-a2d6-fab0ac9868b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35b02b78-a8e9-4d77-a442-d162f7736aba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0259c4c-4dbf-4b58-a441-695dba7a5362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9fa98872-3d00-4024-b8c6-68f272884ac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "376606ee-6e8e-4161-b739-d3172f9066ef",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d29e445-6574-45fe-8e66-5158ef7a18e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b73f2bda-c75b-4cff-b6d2-af0ef0583b08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbaa4644-fee3-4c9e-a4c5-c4b494582e89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "20b707e0-394b-4138-8b38-b3dcaf38d0f0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "05378859-57d8-46db-bc55-a3eafcc7aaaf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c0697fab-c851-4b2a-bb95-267b242d6f84",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5af06f7f-d7c9-4c8e-b659-b453da05a105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f80fefec-391e-4e9b-87f1-f9bff6e3aff1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a4a92e9-f801-41e1-b3fc-4cf1494db34a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "2d8a0163-1ba7-48ad-a293-83f96553b9eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36747b9a-6bb8-4b9b-96ca-3003239e9cc5",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "580e08f8-cc46-4a59-aafe-8777731bbde3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ad75a254-2456-4896-9f27-71b03016484a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ee4a564-53ba-4037-90c7-2f31dfaa826a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "c8e48db8-6022-441f-9cc6-037177e2b00b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ef477c2-b278-4661-8c28-90d1b0eda62a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9f93f7f5-0753-4973-87ae-e51f118310c6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "09c11954-2ffe-41e6-b6ac-6aa1083f6530",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a1c93425-83c0-41a3-8348-ec9d19fc6ca4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8152bfdc-b896-4d02-8b7e-d06113f4698d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e839978b-af53-4192-ac73-e5e1cf6449da"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d6b191d5-3583-404f-98bd-b42eaf4215cb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b778ac74-f940-4a91-b999-a543129b6473"
                }
              }
            ]
          },
          {
            "id": "4cf57ee0-2e21-4dc0-b76e-deebb474b16f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c2696ad3-e39c-4c4c-b6e7-8ae8051d6674",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "97160a61-00d6-4206-8670-ae5474785b55",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "363cac72-5939-4ed2-b769-57950a50f999"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "924cab16-3d63-43fd-9031-b6a04fc5d1be",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "931f369e-0add-4a3d-905e-b2e254bb65d4"
                    }
                  }
                ]
              },
              {
                "id": "d84fb8ed-2484-4631-8a8f-9bae05aa9af8",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0b99afde-ae7d-487f-95d6-71e5dec76e9e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f2524834-1df0-4ed7-a1c0-c70ab74a5076"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8b836b86-afe6-471d-a91d-82b7a8dee2e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2e097d79-ef06-4901-8e95-72c6fe20865f"
                    }
                  }
                ]
              },
              {
                "id": "c6bbdd66-ac8c-494b-8ef5-71490e1e0327",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b5610a0-d255-42b7-b4f1-3c8fe3d49f8c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1cdc2823-fa75-4054-a4b4-66b2e68ee651"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "186cf688-2d17-40de-b8bd-ec27ea942e39",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ff8096d5-7e16-4ade-bbf1-a0662f7d26c3"
                    }
                  }
                ]
              },
              {
                "id": "00c025d8-a533-4bae-b8d0-afe0e7db3441",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "85d31b2d-d3d1-4e02-bc2f-fa3780343755",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ab1f0fb5-31f3-4f4a-9a42-baf2425c8a40"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "35501ab6-b733-4180-9026-c2405db99fff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "4cab9af7-3f27-421b-8cb8-8d7a1ad7bbf1"
                    }
                  }
                ]
              },
              {
                "id": "cccd15b5-d2fe-4c88-9900-c04a217f7a11",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c25a3d2f-18db-4f42-87d3-f2203c793b15",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "000a3376-f76b-4a94-b775-6f1715d6453a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "321af7d9-56a2-4345-a667-53744e3668be",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "30744b8a-4b3d-49b1-8e21-5e1c12f0bd46"
                    }
                  }
                ]
              },
              {
                "id": "371d9dbd-af70-412c-90b0-895aa1923987",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "58b813de-eaec-4742-9397-8ef6a582dbdc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "92a5f857-2c73-418d-9071-b8e23b93374e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "add525f6-cdd5-4f57-b836-beb1c63d7035",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "78058f08-75f6-4e59-b9ec-5d42aed0f099"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "47b94a63-33cd-42f3-b18e-8f2b5085a66d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "33f52d7d-f0a1-4db1-870c-ecd949b9941d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c88743a2-1d0d-4924-a6fd-3866f1f29e8d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ea1e3de0-b095-4eee-9f29-5d0d48bdf1ba"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "89540084-3be7-4fa6-8b86-079651d7db14",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "b56f626f-b93a-4618-8776-e1c032ae7b2a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "89c134de-bcb5-40eb-9952-26e65925f0f2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "245bcd21-7c94-4c22-9d83-247ae16d1513"
            }
          }
        ]
      },
      {
        "id": "e1ac6a10-5b75-4076-9289-fae1d969a4c1",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "c1179c41-038f-4049-a139-010823376e50",
            "name": "Negative Testing",
            "item": [
              {
                "id": "93dad829-4dfc-4225-b687-eec26b754736",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9d80f2e5-28ca-4380-b4b9-525564c2a735",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66a38271-eec4-4b59-9400-cf6f95c81bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26f8a63e-b551-49f4-91c1-c6d80611347b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b464694e-10ac-4bfd-809d-a1c2cc60c2a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "210f1e50-db8d-42dd-b756-295b8570d99d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "637f95ea-5aff-4db1-81cc-0458e73ecde1",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29a3d81a-1a44-4002-ad3b-dc3c806b3a7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a1af5e9-ebc9-49f2-a9dc-58cbec78e45e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d9a5809-2c0c-4780-afa3-eb3669c47656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc890a90-7a47-4c79-8ce2-a04514868a32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24dd7cd7-780d-44da-ba3f-80e726a515a5",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73576842-6d62-457e-9679-eeb3b86707e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e82cc011-7557-45fa-b203-3d0f7b0a399c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d7f3745-85aa-40c7-8ec7-5f14e9b3d2dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fdcb5fbe-52b2-4800-ace8-993aa8810409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "935a9b30-71c8-4e48-a64b-8bf7b5576b0f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7b3fc55-72c6-461b-a90a-fefcccb4fffd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a554933e-0699-4b64-b4c1-6dac7ad7d4f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6501c4d6-08f1-4fb0-9931-433e3cffde4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "457bdefc-f4b5-4380-a8b6-941ab3cc4b1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a56d5a32-da0b-4541-8bd9-28766892865b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91a05e50-585c-4334-8f15-ae183af68e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3ac2873-2a8c-4259-8523-2e32fb7d53cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9460cbb4-e060-4516-accf-a4729e0c0567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a327bc4-1108-4060-af57-fb7d7c3df428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2b168da-adac-4898-bc03-e7aa5dcb73b5",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2905b952-7e8a-4514-8d6e-c11f018d763b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4756726-f223-4b94-a731-cd4d5fd7f7a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43675fcc-f1f5-4077-82b2-97bb63cd0e74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7de1edf4-cf78-469c-873c-a72e7c67c75e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4e9069b-a6a9-4c51-936c-db69780c2541",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fef4cd5b-a23b-43a6-9a24-3559553cc9b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03616cf1-009d-47d4-8167-69bd48cff17f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f18d2a24-984f-4afa-8a52-f9438bff221d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce9b0929-b4be-48b3-bf66-b4f3fbf26cdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc2b7665-44b8-4c63-8fe0-405b896b5a48",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c75e512c-7890-4ed2-b983-d7e7c3645abc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a052296-920c-4c7f-aabb-3ff9932ff920"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67d8bfde-4148-4973-9707-1d9d231c8e2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "39db0b03-1025-437e-9c70-223bca4c152a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b3f3b4a-b989-48fc-a1be-06c2f9a9a4be",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d43993f4-156c-438a-b67d-60805b6e7b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b490e9f3-d4dc-4381-b9a9-0bee89a5fa8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b89c79a7-67ee-48f4-bd3d-05e3163c64ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b93e4de-0ca6-447a-a91a-0f18cebc1352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91305a1d-3b4d-4ec3-ad7c-969ef9fff04a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0763ae8-d427-4e58-8610-f61dc04eec73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f572fd4b-dd93-433b-b3ab-bc85df6e644d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5bb0668-c2c2-4d7e-9e9f-35d42bbe966c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed77b384-c593-455f-8e5e-863a0fef208e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21b0426e-5376-4bad-9ba2-ec6b14e5c8de",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe2e4b30-2960-424d-9bdb-63aba3de3df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "806c6bb2-0aef-4f1c-bb0e-6e19690b1401"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6684196-2138-4bf1-b1fc-9c2898bdc0aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e5279dcd-b6e5-4e60-b547-7a49942fc885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3479161-8f9c-44a0-a722-93738f3b2f02",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c64957b-b24e-4a83-ac80-921a05b1c5fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3854079b-b4d4-45c3-a767-c0e607621979"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55682efb-25a3-4cca-b595-9572a5cd2a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "527f8713-13d7-41db-a17a-cb57b3db6def"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e62ccb7b-74ed-46af-9ec6-e436979d20be",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b874dfb7-9a93-4c54-98cd-314d556f5b6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d716821-0cdb-407c-b571-6d5ada4d72d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc571499-78f1-4009-8596-5e162b30261e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0326c0e5-6f0c-4baf-9901-81812fe0a349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f625ca81-543d-4e3c-811f-8b188b66009f",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1882ab3-c1a8-405a-94d2-c64b897d733f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55f4298a-8c9b-4efa-afa6-47f5785368df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebae28f9-cad5-44bb-ae62-e394aa5778de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "24417840-65d8-492d-bbec-696664d4d122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4eb33fe-97e9-4515-9bd7-e4343d436b41",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "705b4007-d8f9-4e63-b5a9-20002dd65c9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "041294cd-574d-4d8a-b895-5c1eb53fa04e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adec43c5-6bef-44fc-ab50-a6e48ee32032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "79b3cf6f-cd65-4805-aff1-1ea6e93cce20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1ba95c7-cbf1-4080-864c-84b2698e14b7",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3160e3f2-9898-458a-9aa3-9c00325809c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73531e26-c38a-4d09-84db-45fa4c8664cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c582c26-ab2b-447b-969c-0d762fb9e121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ee5fa33-27a2-4c53-b0d2-d63096b6285b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a617b455-94b3-43a4-8cee-e112c7134cf5",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b2f5eb8-1465-48bd-a822-0b60d6723849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f61d26df-089d-4780-8c7b-957b5c802c22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86c16e0d-cfc6-4df4-aeb2-dabed74cb2d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "be3050a8-575d-4505-93ae-0f9de0d8f97f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "567da645-b768-4558-94a2-70ab71946cda",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37842f5b-3433-4f63-869b-f9bb711a797e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c364bc58-9b50-44e4-b03a-bc2696c6e0e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dc1468e-739e-4d3f-9ad9-5e6d02303fe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "12e69a1f-f4ce-4957-be71-cc3238e8a9f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c77afd9-7a58-4b2e-9e96-3a8b0fb7fc60",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "900cf541-04fd-4f9f-a5ee-02e5750e7929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fd0b68e-c9c5-478a-9790-a77747f608c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcb61e8a-bfc5-4fc2-af4d-de8e171ee251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb12d055-1628-42d8-8a90-9654fd290e95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8382d6e-b586-4d0e-af71-0b27725ec855",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b331a3c9-4480-4d9a-b7e5-9d3e2dc203ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73dd07db-a8f9-4822-8c62-3c549e85ae41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1626d083-c827-472e-ad61-6f84069a53f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "90a5f39a-d27c-4229-83c4-39f15ad8c18e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c14f48b2-1db5-46e8-859c-6ebb48d004ed",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48c06dca-9e03-4a15-8b93-44deab569513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7edfe571-a94a-4b61-b659-d6240a293be9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6748315-0898-49d5-8379-fd196909f517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c106c5f-07f8-4232-a21a-9f2271f32515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02681d57-b286-4452-b427-180bdac657a2",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "843030b0-8e3b-4309-9e20-df5a97c9b92e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd57935f-5ff9-4c98-813f-c328825f2c2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33d90d7a-365a-47ff-b070-d46b5811e284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "84147952-6452-4670-a114-9b48028bb779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "818409e8-7794-4940-a389-0a8c66021fce",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9847855-49ad-4785-96a0-e43b2489c9e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd12248b-905d-4da8-875d-a12858f3ba27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ff53872-d454-4948-81f9-7b70139c1d5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9700932f-e84f-4beb-bfb7-871f94430e06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c98fd5e4-017a-4cf4-abc1-132a8572687d",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c4901dc-6d53-41c0-b14b-a6fc45cd864f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f15a675e-e400-43b8-bea3-38d67420448f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e92b1159-08a9-47b7-a3e1-f8d2b0e86254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b596be8-4208-413f-b2b4-60937972dc2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8b02bf1-cff3-4ae0-af4b-1bd09cb29b51",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5df7d93d-36c2-4768-a420-0e6ba802143b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e27e3e0-b15e-41db-9957-277d520046cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4234aea5-7622-4b7b-b9fc-6c113f4f2cde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c952b70a-60cc-4974-bfef-949a20ca61f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0057ad20-4159-48a3-a5e3-675f1bc2be90",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d92ef30c-d65d-4036-98ce-04a1e1b32b2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dd4085b-1e61-4901-ad51-3b484d7056f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfe12c56-a9fb-4912-be34-34c2957f2be0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "52e11b1d-a514-4462-916b-4694d4b2b3e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a231b9d-7fed-4632-be1e-be104838e2e6",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b429f74b-c682-45b4-81d2-267de674b79e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37eb6b1e-3034-4db3-9a6c-6c5322324437"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddeaffc7-ac91-41ba-9098-da5ba8ad23e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc0410fa-8afa-450f-89e6-b7c48142c4ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84f6f708-386c-4b4e-be2e-587d73dc9964",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b896ac1d-5352-4b16-b00f-852cddd27c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3462a7ed-1219-4b33-8242-35b587e9be0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bc7fe18-c538-41ea-bb6d-3c4839374d3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b61c2405-6e66-46aa-846a-b6f857e75d54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb675cd6-ec11-4038-9c31-69959c4a167e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "287d2e27-b3f3-4865-91d1-5759f0e96f76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "084c1202-a684-4d22-9a8d-8f18abf42750"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "634810d1-1c79-4254-a9f9-84461a887d8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2eda7d1c-3331-4053-bc4f-d61e3616780c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a34a70f-35d1-4921-93f2-efba5753b6c0",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bae1703-8cff-41b6-ba6e-699898eff884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41cd11fb-1c6e-46d8-8f86-cc680dc7fe64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bbc3f45-40cb-4d54-ac33-178d89174301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f98ec9bb-5da3-408f-b33c-57cdb2cc8703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0e2caed-6777-4e37-b363-0f52be7150d2",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81f17a1e-11be-422f-ba4b-6672d36f9af6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e36b1f0-163d-44fc-bbff-308df537472f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be00281b-f9b8-4d39-b443-00adbb0dcf31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98a31716-7f18-414d-a510-87d566b175a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de779c0b-18a7-4613-b6b7-e3b9919a1cf6",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8da757da-74b8-4245-a601-752445380466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a575776-3681-4d7b-9e49-6676668f030f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8575c5e2-11a4-4591-8ec8-8b72b53eee49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "70d61379-f362-47e5-babe-3ea42e5a602f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8160e66e-46eb-4899-b855-cc4badfd8f4a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9af183ef-f539-4ec4-9842-37a9a535b202",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47e122af-5c4d-48db-bc9d-60a5e0d61d98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ad66a1b-1217-4ef0-9a9d-f228713ea250"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4a27c59-1bf0-4079-8076-f288e4a9aa0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f6e77ec1-dd0e-40aa-b781-409f0cbab7ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28ac9f7f-04b1-4884-81c1-f5422a32f18f",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "012b9d64-fda1-41d4-9bba-8f4dab4aa7ee",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "292ae5d3-f7a3-4f42-9587-af38c61fecdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a13e2ade-ec1c-436e-bdf3-5fe221bf9831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c3ec6420-d9af-4f6f-af9d-0e72ab0b2bf0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ab718a33-82a0-4aa3-959b-76ed80444046",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ec1d3f35-4bd2-46e1-9c7b-9f0a6688500f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9de05131-fe04-4a58-8f85-e7a20d3c20a8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c17034a8-9884-45a0-a7e6-ce300bb15916"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3bff5d2e-35a6-4949-9057-9e92f59d9ce3",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "862e38dc-bbc2-49c0-aad5-7c1e8b1bdc18"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "19c91df5-841b-4375-ab8f-816361a7da95",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cd0cc4fd-acc8-44da-8e36-9bcf90881b18"
            }
          }
        ]
      },
      {
        "id": "4dbc1445-8395-4b9f-8075-c13b4f2685f2",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "3ab6d1e8-e46a-4c8a-8c27-c4f513d98453",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8ff93ebf-8b99-434f-be9c-becc0dad3748",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d0118120-ed10-4c8e-9075-191a4c785cea",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6be5b974-9514-434c-b9b6-afac5bb3cc0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61bc4459-897d-42b2-b2e9-5d18d97d32f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c621cea-9455-427c-a04b-f79475e84469",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f67e4f08-86b1-4677-bb43-083644ea605a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "749272ad-6e75-4092-a44a-90ad48dcd5cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bed64fc-fb63-4d24-b530-e4970a2e53ac",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b170ea2-647e-48e9-9cbd-e9d63623b8ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd64baee-4472-4761-ba34-b97c64e7af9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "851648d0-67dc-4410-a8d9-9c76dbeeebef",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91c53e19-542d-4899-b8e9-938a37869ad4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c95bd07-558b-474f-befd-94227501f67c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07e1cc59-52e6-4909-9f90-4c65617539cf",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c798b27-166c-4f48-a2f6-4166b2b12cab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01acdfac-3a9a-44a1-bf8d-cbbf645a08b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17988974-08b5-4bbc-ba65-c3d83859b51e",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d18d1e6-5f67-45d5-ae70-1369f33cf1cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1d6deef-0793-4bdc-8581-90c6ee2919c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cb2c391-9ffc-4afc-8d76-3a0e187bb358",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ae5894e-eec1-4d62-bd9a-478f557ddda3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d95e281a-daa6-41a3-8c68-53815cf9c6a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d515a791-489a-4c11-b6c7-934f1b22f3b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c120961c-c898-45c0-8436-337ec01b3166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9764a40-9213-418e-94ad-7f62ade32052",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a8e049f-23a7-4e85-a8ad-0a6087111c47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40dfc368-2478-42f3-9848-109993647ad7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9f1c1b8-021a-4cd3-9cfd-f83069037908",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c7c2708-b046-417a-af51-ed0c07f25140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b985e9a9-d0eb-4220-96eb-9fdf2940d7df",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d58322cd-2f46-47f0-8216-5557a6487cc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73824684-008f-47f6-80c9-1dc192695b5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c55bd120-a29b-4e8e-9598-88b6eb52c0ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4247858d-50af-4d6c-9c8b-4f893644601e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f755f71a-4e4d-4fbb-9e2d-6dc6fb1fda75",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41c11623-c0a1-44e8-9b1b-e53d611b4fa7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c64e5806-b973-4033-a6f0-b57079f347c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "794f8712-5084-400d-b897-45e0f9cc7530",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7c3acd8-e13d-424b-87b3-f84cb86fbed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07ebfab1-0f9c-4a0a-aaf5-f22ca6647dca",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2201a8cd-6b55-42a1-9208-da4f7d9ef17c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86063d69-4d26-4017-b100-0d29409ca56c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b0c040b-6255-4d6d-8d21-65e58d63d4b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65a50400-ffe2-44e5-80da-aa4982ec28ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ef16615-4ecf-431e-ae1f-007034f47775",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fc22c60-e7a5-4ce0-ad8a-9954a6bb4756",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccefa4a3-4d07-4210-aff3-1e29483a7139"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c8730e4-f147-4527-9f0c-3ca29e3073d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6beeca24-7481-4ea5-9ede-0fe8187afc4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68cfd3bd-02fc-4ce8-83c3-aaec2665c730",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5afd43d0-5673-43a6-9a80-f200c27e7bdc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61bc7c34-2349-4d7e-b5a7-007e45b11855"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b505845-f39c-476a-b757-7074faa22f58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3288e8af-17d2-4667-9b00-ecd65bc6afa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f00e699-3e48-4ce4-a876-5e0569808bac",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f056f3e-05fb-443b-8257-78a7aee88171",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b731748a-6e05-44e0-8ba2-152b0f669fae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ddedb57-168b-405c-a6d8-a2792a2ecd59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34dade76-40c7-4294-93b0-2719e503f63b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8b2af49-8358-4e44-a191-6a581a505def",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd84fd9f-8956-4ed5-a030-218431e04c69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7987c35-4d02-4599-83fa-35a4184fc8cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d35803d7-f868-4d75-b381-6588a140b5db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d373f68-6811-4f08-9c64-1d3de930a07b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48bf8088-e997-48d3-8eed-16738844b2ba",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3de3c42f-669c-4949-89b2-58e8e1f77a51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a81b5c2-17bd-46d7-b97a-4ded52737f95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d9c4832-d58b-4dd7-a297-26a1eec6dac9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c73c86c-312d-49b7-b0a1-0949fe06dca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35f14cab-786a-4ec6-8ae5-85a4c6bb63f1",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1eded27-8027-40a1-9bbc-efc30c211362",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56c02f1f-90f5-49ff-9a9b-673f62151eeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09ba1260-8001-4d80-bc88-93cd99d08c15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b99a63e1-9f43-4801-abb2-151f8c7ff781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc484dfb-2cb2-4cb2-a697-dd34f4f5fcf3",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9fd50a7-2259-4203-8be2-0b9172a3dd47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffd7f31b-83e4-4c11-8acd-cacd3e7b6a76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "425bed13-96e0-4ff5-9466-13d0b2be2b8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ef7c3af-087e-4de0-ad7e-fedd122b2568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36b590c3-5169-4c33-bb30-9408ff6c94b1",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04644f9a-7550-4c7a-a313-2f302d7db02e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63e57f74-22c8-46b5-9750-bf57a17ddd51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3444b385-8e45-4726-9a29-1b8d7855ba88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22e1fbca-b597-4595-9428-a8fc291be2e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97c4b6b6-35a2-4689-b9f8-1a46fb834724",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3cecac9-2a45-4d87-9ae9-ad2aa03e25c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f672856-d5b5-4817-a245-faf6c6da60f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef9d0ca9-f922-4592-a28c-9d5bfd40adb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4a2aaa2-abd2-4522-a996-95fa9275b686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53299070-c6cc-4bfd-b54c-577f2417690e",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be6fd1bb-03db-4e32-ad78-326bb218e8d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddf3bff4-8d33-427f-b05e-ec8dc0b0dc7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf38b22f-28eb-4a03-95cc-b9404701ecc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d76801ff-9190-461a-8fd4-4534cf2a7cfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4534a01-f144-485e-9141-649e6bc0cab7",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "405f9fe5-44e3-496f-9679-aa19ebb5c438",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed333ace-759e-4412-a316-34e47d717ef0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "329e4b32-d034-4779-be4b-28dadd2546ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef5f5c85-152c-4041-9758-9532141fa56e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37d3387e-444f-4e6b-a654-9ac31a5ae421",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2925309-a66e-427a-b036-5463fda62d50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5a52049-1284-43d6-a7aa-585ccbec1f18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b183847-522b-4602-b441-fd2c6bffe4a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42a8ab68-496c-41ea-9cd5-fbb3eadffad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "590c9f53-b42d-491a-af1d-57c76cf54082",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3433d74-d4e6-4cb5-b484-5150887bd428",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d28cfe6-c9a7-43eb-a41f-b8c6dca9125b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52d8ec6d-4d53-486d-bbbe-b36425e60182",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee9980f4-80c7-421a-86e0-7fa0d29e3a10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acf6c29a-6cce-4ed2-a81b-ba8bc1b974f9",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77bebbfa-0922-4a02-b1d8-8470a5f469b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2732729a-cb48-4565-9605-71ceca5ce756"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11f63513-d0fe-46d0-ba7f-2fbceef5ba00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57352931-387c-4924-a4d6-adb8e5c95663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7654a8f-eb5d-4f7b-98c7-5c697d434aca",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d239a12d-2003-4b05-a842-f4b33dc91be6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53176b46-63e1-4faf-a64f-5b5e4e5fa2c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5a50d1f-afb8-4884-b44e-88673986dfed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d30287d-45d8-4b3d-897c-6a1ff13e9cc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62778677-4d04-4ff9-88e9-6e104afc16b9",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6adb213-6e7f-4478-8bfd-e30779b9cace",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "212702b0-5aad-4153-98a8-9cd261dea0b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d2a531d-780c-4854-b544-edbdc4a83e60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f5f35ac-f7e6-4725-a7b0-8f6e7f2b4f72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf4321f6-c098-4313-90f8-c1dba68354f9",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e54cd64e-5562-4cc4-a848-479f3933fd4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22756327-2043-469c-b233-e50a6808e0c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5990a65-3984-457f-973c-ac524be62ea2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e08f8f0d-22c5-4f48-8829-d5a55fd94b54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ccc152d-84a4-48fa-a793-e5addefd5078",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73dba1c8-ca3f-4432-911d-c8ac7288daab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9140aae6-c298-466c-a2e9-28f7f44eca82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05803439-9b51-4939-ac9a-d7447b23753d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "612294a6-372e-4ef3-b3dd-040d6b548a32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc87bb36-6e6e-4ffa-863d-d56f8f14a182",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce07e91b-cffc-4fc1-85fa-45ff7cc608f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe2c7b3f-16b3-4892-85a9-668073bc0f80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cc50857-ae2e-40e8-b0ac-3f894cd31205",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b01e697-6b57-4051-ab99-31a128645c6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fb71b66-883c-4a52-a2de-d2cca304054e",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6387321-60ad-44aa-84f6-383ba2859bfd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9f59370-0401-4cb7-b548-909aed0d430c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62ce4ba1-e400-42a0-bca8-7a3e64a4e44c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c0f17b0-0b2d-4eaf-b242-0f6823bb0c2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66838814-e371-411f-a907-71f09bf80b05",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adee66a3-0dab-4a11-9e3f-6f5c106dc4b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1361f5c0-b125-4cb6-97a2-81e0d37f5e7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f69e56e-dbdd-4418-8df9-445c1a5803e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91adbcfe-990b-494e-99b4-aea822f0c790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97710485-4a1b-494b-a095-8449ca9e5a30",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8838c49-5e8f-4b9a-8e35-cf99dcda91f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0511dd84-8f68-42af-a7b1-4792571a4661"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78cea560-08f5-45fc-b82e-9f43d8e6d502",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd345f88-2a7d-4924-99be-77e4bde96fe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c095437-efbc-4a9b-90dc-48faa10a5355",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80b52c9a-03b2-41e2-8c52-54247c813f23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28805d32-269e-4bb8-9896-4acce4ce0ff6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f67b4d79-f7f7-47eb-b5e3-7514d609a9d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ad090e7-9b26-43a4-a4fb-1e4dad18c5d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d3eb434-40e2-46be-9360-44ebb4d45ddf",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5d46e22-6a6b-4e78-95e0-689b7f55f87d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41d12643-2f37-4964-a63f-6194a436279b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "652c8364-51a2-4a02-a810-45f67ad15c0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7964022-2510-4ee9-9062-2cbb0eb7b9f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fffd71e-e7d1-475b-be60-8a8b182d461c",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfa96563-4a86-429f-9368-52ca14749e57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c64092a4-ad84-49de-b808-7ef09103e95a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f10eb4ce-9aaa-4a84-ae0d-27e50c5a679e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db8e20d4-2d1b-4c1c-b3b5-272ffc9eb5dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c1d2da7-1cf7-4831-8653-a2f256170bd1",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb369096-c21c-4d47-9d80-33034b5bd1e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae629561-726a-4309-bda8-b65359817300"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e99280fd-84fd-4616-a885-d85004c15752",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58adb9ad-dd3e-4d0b-85f5-9076b816f784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "827d3882-e059-40b1-aa84-f8c4b18d7a11",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f6aa1d2-86f4-4872-9cb1-536e9a83a767",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "759a8339-1ef5-4c26-997e-abf9ae25282b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8bd798b-c58b-4698-b471-2a9f90c34b3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70f4f216-dff6-4012-8062-d7dfdd009c36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cd46ac5-d81f-4693-9667-295a7c65e549",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b1e4791-ef18-499e-aa37-701cebde21d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1636885a-b2a4-4ddd-96fb-b929f92a0652"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2801edec-f7e0-4b05-bf1e-8a9addb320b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a6ebc6e-c40e-4016-ac08-c7dd12a80cbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b954bfa3-78e9-47d1-a71e-fc2a78920c34",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72338f8d-1b80-438d-a8c4-eccf601bd0e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21323ff8-f6a8-434c-afab-8f91766b5afc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbeffae1-0504-407f-a024-4fa1a5b9af59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed43a384-c7d6-4b44-844f-95a5918b2455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90312850-b0d8-4d9a-ac78-dfa11bec85ae",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f3d8769-c040-4d8f-b9a0-bb878f92e7e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "befccd38-8633-4d16-a1bc-05089091212c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87de725e-ae1f-449b-acb5-c6b6b537a8f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73c5cd63-2d1d-49c2-bc11-76fe28a50a4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "454657a2-354c-45d2-83da-87b8bb3f10d0",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cc12374-40a6-46e4-a321-fb79f66768fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "309b6957-33d3-454e-957a-fa50a33e9c2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ff67801-d7db-4efc-acb9-54404fd6d450",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b0e42d9-8948-4414-bbdc-7a9cb04db3c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b3e4ead-0775-4d29-953d-d261380e1371",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a2d76f8-b76b-46d8-b16e-0c66d7adb818",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b14b0587-1a35-43d3-950a-04abb4eaa6e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98809124-3930-46dc-81f7-5ab4790dba97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3ec3f0c-390c-440f-ba73-54ad5c8f1c59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b147bd1e-3d93-409e-9263-f1370c4ca46d",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "378eb3fa-b351-4e20-9fc1-b81fe2edceac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa76d86f-5829-42bb-b53d-241e91f5180d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fec6d2a5-aa56-41ec-9d12-5583a1cabfbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "582571ab-053a-4b61-a5cc-ddc366c956aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d5a94c4-280c-4bfc-8ea9-3a2eab1bccd7",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "def85ff8-0f55-4188-a298-cef9af47ce46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bbb1f1e-8b81-4fa2-85bd-814cd9a733d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60f50ea2-b215-46e7-af48-1b5239d8eaad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e96218a5-5dff-46ec-8507-41c3c9067720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58f74c2e-b215-4bf4-b78f-f476c96b3ec3",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d43a0b8-ca9d-44d7-a1ce-9739d7f0944a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a3a3930-cae4-40e2-9e12-11dda373eb61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac307275-aaeb-4bb8-a8fd-3c3792059bfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4d1d7d6-8eea-4032-a0c3-70882a9c4c55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffc554b2-6eb0-4960-93f4-2fc7ad123661",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3d7734e-4ca0-42dc-99b9-36e89e0bbe36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c63f76e-da71-4869-9f25-b96fb9246afa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a6f59b2-26d9-4842-9267-8293d429c8a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "170e6ec2-3cbd-4bd1-813e-3af38b49d285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c9bf478-297d-4628-96d5-ca62d1975d91",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea8243aa-abe7-4481-8cba-51a7ef5e1b1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "151cbe85-f163-45c6-99e3-226866793321"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "826d5fe5-dc9e-47d2-bc67-24d702cba915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a8d5dfd-5eb4-4c18-bb90-d97cf5fa584c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d587bf6b-c140-4fe5-b988-7a6880c5a4a7",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b9527a3-ea2e-442c-b1a9-930cd37b317b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b7be318-9b31-4804-a6ca-27844dc6e55c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c7e669f-0595-4165-9a5f-e68c9e1b142e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2889f73d-66c5-4279-9cb3-d05b699382f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec79f86c-1efa-44bd-84fc-9c0dce9df0aa",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac51a700-7bd7-4caa-9a48-a2ea4779a4fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2aee7357-c408-4961-81c8-bbdd6b6a07ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "137a39f0-9b08-441b-a319-a57e7ebcc528",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09fb5860-6786-4eac-af2f-b27ec9fbaafa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef495489-e0ca-4363-a7b4-bc0d6acc8fd2",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfe9f753-1f37-4de5-bfdc-8cf3520aa7b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "454f3547-a1b9-41f3-929d-fdf1628c74a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4108d88-556d-408a-b087-7e7f8eab54db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0aeac3d-9e41-460f-838f-d9aab431ab5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5426456c-e893-4586-a612-842805d93cfa",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db422f45-efe0-46da-8347-82531801a06b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4cdb84a-3629-474c-b077-1220b3fc5219"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcc5a8d3-04b7-484d-ba15-e465cc29fe56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ff3028d-1f52-4c12-a909-d1de1139b6ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16e41cea-fa3b-4aa8-9657-a1a65c9b1fcc",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bde223fb-b934-46bd-b7d0-6ff38073078b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fc3ed0a-0583-4943-b701-fc5151d41702"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eecb3c4-e90d-4ab8-a8ba-49dfa21d5810",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f6bfb60-2ecf-4e1a-b5d6-73288b283543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8df2c6f8-4abf-4670-8e0b-57a8c5a5ff0d",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "507688d9-ba98-47ec-9b6c-725410dfec3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df29efe7-cdba-4021-8051-bf6bd4d1e5ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51787656-e7f7-49f3-901c-b9ec6bb29865",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75b62c9d-c143-4854-b3bd-a8217e903b5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "582b846a-ad66-4ca0-94af-dc5335b7d6ea",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ed18219-5e87-4518-8545-d67e9aaf3445",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97458659-7308-4863-88d6-86b9f00c3dfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "907e9fa9-270d-4928-b2b4-68e434d0d26f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4066bc0-f7cb-4d10-be49-1cb38d626601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04626249-caac-4f0f-9c55-e631954f8c6f",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17a0dc16-083c-4f2f-9eb3-fbcaf9cb74b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e03c552c-27b1-4def-a0ad-090efc88894d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "993ea45a-86b3-4ce0-a2a4-41ca3135c859",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20a1f046-c0a2-41db-8f26-39d438b237ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b86e8319-034a-4468-86f3-94bda8f8179d",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b84e8dcf-ab9b-4167-ad6f-1f3154b990cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a636de1-27fa-47c7-9182-c96cd4d726f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c6dcd4a-33c8-4d10-92a1-36d41f0f8dd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62744da7-4166-4fe6-ae19-8035f23468e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7f2dc73-986f-4957-ab64-61ea3b43dbe9",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b23a181c-1d9a-46da-9e68-63ff8764dc41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaa4306b-0d44-4408-bbf1-d8129ef350fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1c053d9-8541-40ad-a646-b5a5cd7e7657",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db339273-293f-402f-9ee2-43ee3235dee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "416e7c3a-3eb6-484a-a208-3b7ebf51e47a",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c3e51ab-e67a-4af2-951f-f113112c68b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6bda76a-216e-4942-8924-f0bc3d65ae0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1debd199-f48e-44ec-9d86-2a3c0c75b131",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d6c06a2-ae0d-4434-b678-5f2b773727ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aa8964c-3818-44a5-858d-6c4d542522f1",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad95d39c-4c6a-4d0d-bccd-ffba5472d61a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10e5fd24-8667-4b6f-9e18-a2228497bde5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b39466f6-bacf-42df-b2a5-1e5dd030646b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c7a6aa1-d334-4abf-8659-512bdf198496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c918bb60-7acb-4c33-b1b0-58ad6288972e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2401702c-446d-45e8-8064-c9b9dd67ba71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77c97d13-a22e-4f51-9318-da4857858e0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "669966f7-79c4-48f4-a9a2-ab90a6d80724",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e060b018-3253-4172-8878-13a9e89eb0cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee975b18-c5e5-4a0c-8e24-8e9fe752fcda",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dad2372-2fc8-46bc-9ea4-78bc3f28c21a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "117228db-ee23-43b6-b931-cfdfd2440218"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "525e13f6-de4e-4ace-8e0e-3868348f744f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edf66856-5c61-427d-b53c-db3a575f66b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87b9da51-d76e-4b72-9fa9-c96171cd9e28",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02058474-e108-4365-9663-8db678b92f3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de35dea7-5fc2-4e3f-927f-f915b7c4b156"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1c83abc-f24c-4eb5-a71b-0b3b25002791",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cd530f3-e2ba-40e5-a4c5-ef873b62f78a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "472e41a3-d2ad-48a4-8d17-322b151415d0",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f947159e-6213-4264-917c-7c8fc820a1d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c92a6419-b1de-4d68-aa3e-84c6b5a64765"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c717603d-6c3c-4fc0-9a4f-c723d189e4e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c67ac7f8-f91d-4ab9-a2a2-8ffc3e376e2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f7df584-c6ff-42ff-9210-16edbaf049c9",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "068dde32-4f22-481d-8dc4-f8fe36f731f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be651a6c-ee5a-4236-98d4-d30da1e4adb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "799f0e42-223f-40ed-bd62-a8dbeddd6d22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cd0611d-4068-44cf-a567-3f45a4579c99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ec6c2ab-d454-4e07-a233-2a627e95635a",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f9be68c-132a-4ec1-9b33-fb19a5844399",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8de08d83-9800-4281-a582-d3e08ebd5037"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "667e6f85-f62e-478e-85b2-32c531970915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a5ae500-fc2c-4e40-a3f9-15c243711eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f03c4eb-6560-4bf0-9e16-4ad1d661ed84",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69a28c21-6d15-4bef-be52-0a9611b5b922",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01f268d7-286c-4f64-8dd9-a9f9b1899c15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee15f5ed-8626-4439-ac64-f07b8c025360",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9927d1a8-1b1b-4895-ab86-a8233614aebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33831163-2fad-4db0-9671-9354c522d161",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68703f4b-955b-4b8c-95e4-484797c6401d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3188cf7b-66c6-4bea-817d-35d53060edca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35e77545-b6e0-4e7e-9f58-4bdf0565b4c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4a5a571-80d1-4975-91fa-33660cf38a60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8837454-1bee-4141-be0c-c7f1a75fb6d5",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5af0b62-e328-4819-a72c-0c6bf93cbdc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ed4e87e-2878-43f9-a650-ee82ddbfbd03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebf70bc8-ea1b-4139-aeaf-dcb7c124f3fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6f7c0c6-b965-45aa-b4a5-b4423c3c5afa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5990fd1-6c80-416a-9197-09c44ed2883b",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "100f5504-e438-4703-affc-7440f340c1f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0bfc108-0ff3-4643-b666-15c41bac06a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b271a485-4042-4c4a-8270-a0fa8a724b79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27955bc7-eb34-4b1c-be83-77d1ed6adeb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46220352-b455-41e4-9cf2-2f5770ec5a1a",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc64dcf2-16be-43c1-8641-5c1a69769d57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24a653df-69c7-4467-a17a-c19a388f55db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59cbd144-9a9c-42e1-a19d-0aa88f2a5990",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f59f7c1e-d269-4374-b9ca-ee7557073baa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8437e124-cd8a-4918-b4ef-be0781eb586c",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6c7bcf1-352b-4608-b173-5a246779ef67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b4071e9-fe18-4cbd-bf81-61f43c6f851e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0b88d9d-000d-40bc-b61e-01d98ca8ea74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e36eec25-4b12-43cf-936e-1008d49dc59f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3d26e6e-04ab-4acf-b964-53d54f831e75",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "527f191b-13c4-4fda-a3ee-0136c7e76843",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e6f2a0d-c2f6-4335-9dd5-f4f2b20d46d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5292630-6d0f-4248-b809-eb80866d6cad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac4e0037-bf48-40f3-a979-bd217873917e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dc6aae8-e48d-4ff4-9aa9-8b35e65cf37c",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "689882a6-8f83-4aee-b9b0-fe0cd6ca8bac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12f0064b-28d6-45a2-9a41-a120b11314f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67ea8d38-c782-4021-9ce2-d7f2fea6053a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d5124d6-f546-44a6-a8d5-e1d0c5e76d13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf855f68-6b67-4286-9af9-ed41d8941ffc",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36b18b4d-93a1-41fe-b323-160340599866",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e806f98-677c-4cf5-9d20-ec448be87da2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70d849a7-a7db-4efc-aee4-a9e51fbc1b14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f3dbc27-4d9d-4086-ae16-2b744bbbb63e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4454fca5-9351-4bec-aa65-b08d27d6e32b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0325ae6b-a711-4781-9166-e0904fd3d13a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b5c232b-e4da-45dd-b790-baefd17439cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ef9c1f5-d06e-490d-aee6-18a87b51917f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de5821d6-303f-48bf-9961-491723ce2b9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f31385bf-9365-4f58-887f-b4520d8a6770",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08305222-d063-4ee8-ab2e-4b2918ff6682",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "554d14a6-147c-43ac-ab64-ab1b6635a483"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be4791b3-b55b-4213-95aa-fec0239b9487",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7ead777-15b1-4459-bea0-396cfde17b7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6778990f-ec08-40e1-8d41-4bceb7916d2a",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39ca9670-700f-4f16-a727-ef6c2c6537f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf0f0c1b-a9a7-47a5-aada-c14b2b80b44c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d23f4b3-10b8-41b3-8360-dffb85ee093d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ca0d6d0-eb7f-4102-bc84-0b2fe6dca5a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02862ce9-daa9-4ff9-a7fd-49105e175f08",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7751576e-4847-4fc5-84b9-e6788149255f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e71490bc-f55b-4d4a-92a7-593d6f5f9197"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a2cee82-1e1a-4f11-af87-ba2654ee16cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee66d28e-dae2-4848-8c8f-260eb0cb1316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec62d157-9bd9-43d3-9459-1c9446a4fa5b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd525b20-8bb6-4187-8b73-2cce3186c2cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63042bb6-3ea3-4033-922f-6b9ab6e989c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a03c439e-0131-4998-abce-71b01e497933",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da466a28-18a3-4d77-bcfa-53964a759df6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae44da61-797e-45ae-8255-bfebc99e16c6",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48323b9a-da82-4274-b189-7ffc8ca45186",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a98f22c2-916b-4f8a-8dd6-36609111bb60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d734ce40-6665-4c33-9890-e9c903f68e85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f7c0d60-5810-4dc2-a571-fccf0f1f4725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb491b6f-89a4-4885-9c8f-2e976644dcda",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ecfebf5-983a-4864-bd94-fe4fdea438c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe57c381-73ce-4464-9a49-aaa2ca2d3c33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b69530b-cd33-4d84-b68f-2d98268c571d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3669228a-18a0-457a-ad9c-9b62d1deb09a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e7791a2-d116-4103-a94e-e33774864a82",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfd95f65-b5cf-4017-afc4-3b0276340ee2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0332650-a6ab-47c2-88a0-1370bc655905"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a49a2c6-b939-4d83-b4c4-de8e9ab6d6bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f118d82-b4d2-4e26-9218-efe0f52fcdf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a683019-54da-405e-aa7a-6d3936628ce2",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b4cf8ac-daa0-483f-a751-f76d482024f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd6c4f0f-0946-4dcc-8aaf-d080b8f47bb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17226cf5-39d7-4f21-bebd-45eeece9bae6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07269c48-c95e-4cad-8f41-ebeac1137a80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "010ba6de-1233-4bf2-a2cf-c4389e72f248",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dda900c7-52f8-470e-8d4c-e37fddc1eef2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be1378df-19a4-4590-8cef-575234dad899"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86e2209e-eef1-416a-ab97-7b47ba926197",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5bd85b1-f9a7-44c3-86f7-0821d70c2fbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d089ea38-e741-4ac4-9b65-00f94f585562",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd78d97a-54eb-416b-89dc-bb2a605fa96b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b9000df-d0f4-4b6a-ac8b-8968c445aaa1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd3fa55b-5640-4731-9812-bba2e388bfc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37ce1479-54a4-4e84-9c52-31eb454d353d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02d1c696-a380-4cd0-b618-9a521959f7fa",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6771fc96-0eab-47a7-983b-958de37e1271",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "704b3f52-43a9-4e5f-85e6-c017a14782d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6be67104-6f2f-4995-95ec-c6bddc90aad7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac4f9ece-444c-423e-9498-133915b96d82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3631657c-5d4b-45a1-a969-2431247a01b7",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "becbfa89-ba14-4eb5-b78c-b583bcef4965",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4151b56-ecd8-4cae-aeb9-c053a40546f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eade1c6f-661d-425c-9358-ef564dff8dbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de8bc64b-d60b-435f-81a6-02c2bc4bcb97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a176c0a3-72ce-446a-a32c-caf90e4924aa",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "831c469b-79ba-48b7-a43e-24af711b1dd7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd80a2ea-731e-426a-809f-8f1a3a73bb70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75720741-a66e-42a7-97e1-0203fd45aa93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13388879-8807-43de-b51c-c9bab8d3f150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "450cbe83-088e-42e9-a32c-0de2659ea284",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8b5d5e1-c05d-472f-bcce-bf46296d9b73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f26d6775-4c4a-4d57-ba5c-a8f27798f989"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ddfd3ec-9e9f-4a9b-8117-dac5e81bee79",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "928e1e46-3880-4bca-b703-830a02520073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9ebcf84-16e2-418d-8e4a-84732a2bc5c0",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5462f153-9dc9-4021-9cfc-a2d843e4a139",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ab77440-1799-4502-b02b-8f9ccf2085b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3be99a2-e18a-48c1-8cc1-dd86c63ce0e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5372881-3942-4207-ad50-3b46bbdcacc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f33c4aa-0675-4e79-8322-81fb54121263",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98ff7e8c-2884-4647-8e2a-043db8ea886b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ef9620d-1016-46bb-99a3-d7da3b573b61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfc27b45-78bd-410e-9913-a64d9235a041",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4c6cbb7-79b3-485b-833b-3bf45714e44b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6c247a9-994a-4f58-aaab-b46cd13e0672",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb13954f-68c2-4c3a-a361-e2a8bbac038d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ccbaa08-67b1-45f6-8f4e-fc0f46074252"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0849bc6-c9ef-4623-8767-ed8e600c5a05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9c2ddbf-8666-405c-b482-6e629f16f8f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "849f65d0-ca8a-4942-ae58-4d8af3c56cab",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6808126d-5e90-4e23-8043-43ee2149ae58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75751e5c-f592-4b29-b412-315decc063cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd0070e3-c0ad-4f75-9053-2a15128b033a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d73f195d-ca72-4359-872a-eb0c30c0a19a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "363a9cd0-4641-4355-a76d-63d6d11ab12a",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66d5261a-090d-4df4-a768-c62adb23f6b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d05dd6f1-e8e7-4a20-93ab-fef2614f28d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9fd5ed8-05c1-4698-b569-2ff87bb669ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24a9210f-af40-4403-988e-beb2bf536361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d519d5b-fc0e-46ca-95c7-02c41d58c756",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2c6420c-5c16-4ed1-9fab-8c55c7a335ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86dc6949-ce42-4eb3-b322-67b46558d5f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4256ac3-422d-45cf-a9c8-6688f9f1f3ec",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "315ed6c0-8b2d-4707-979a-eef1114c71c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78bf073a-c2d9-4805-9973-97d69d3da48d",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36d8c0d4-7989-4ac2-92fd-f19ad0adce65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5aa1fa7-8522-4172-961f-de44abdc9d95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd4ef592-8a6e-43bc-970c-c5c83891f883",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49a3d5d9-bf99-4df7-902a-4ebb425d75c3"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a2426eae-b699-4b9b-97e3-e6b31e70406f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a5189a15-c76d-48a9-abc4-0fa5477257b1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e107c46c-c58e-4a4e-a598-597aea7d7635",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7757646d-3e2f-4e3c-894f-e7612a95b4ce"
                    }
                  }
                ]
              },
              {
                "id": "50968223-5b72-49de-b143-64f496b31bcc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "35f1f125-ffdf-44f1-bedc-c08c0bf87b59",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07de1a9f-10fc-494d-a5d2-5d7ea0ee1bf1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "622814b5-70bd-4d4a-904a-13c27961b9e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d35204f2-a8a7-4353-9a9b-ef8855a39ee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2c8c3520-f68f-44fc-8968-81379c0ffead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1286dee8-0ff4-47c4-81dd-443b252a72bd",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6febbb4d-aadd-4ec0-a80c-34ad194b7f00",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "04fef99e-277c-4428-98c0-6291fda08e62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "601379be-2c74-45c0-99ee-f89784f32dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "386901d5-2603-4f35-8181-7020023fe653"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dfc0d43f-99d9-4e19-b018-653bd49f9f04",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a6a54ba9-685e-4b98-bfb9-ede92da0cb86"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fbba7788-ec54-461b-8ae8-da6494c5e823",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2843ca2c-a12c-4456-940a-995710f404b3"
                    }
                  }
                ]
              },
              {
                "id": "73fd2217-d042-4a6a-bcef-3b3074360ea9",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "e0d09d3a-d416-402b-8d72-4383fa73f27c",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a58c4c1f-415b-41da-8c1c-651b95d7d943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "10458172-dabf-480c-95b2-7ca1760cff7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8741c13-bdc6-4fc5-9abe-3e8b6a40dd76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91b76233-c0f5-46bc-8b45-bdf888a574e1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4fd4b192-45c7-4172-8dc7-dbca8a7ae742",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d18b442c-6ea7-4a55-a72e-8a74260e020c",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "629515ab-2776-4633-a53e-63acf46f3cf5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9c42ffd5-c4cc-46e8-b749-66e055b7ed37"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3a8e249d-16b9-4871-b6f2-4d73bf2c9b61",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d2e9d930-f31e-4c36-8e3f-bb418ac71370"
                    }
                  }
                ]
              },
              {
                "id": "1cdfca7e-706b-4724-8c6b-fa14cdbefa5d",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fa3f12f5-134f-4f7e-a28a-8b5446ac9f5b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "deb8c54b-0cea-4afe-92f8-b8c4c3561b67"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "31942c92-dcc0-4896-bc7c-6062aca0facf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c7c50b7c-0205-41c5-bbf6-6b4fe6358ff2"
                    }
                  }
                ]
              },
              {
                "id": "c6f5107b-3fed-4f80-b450-a05d35213af6",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "32a4bc76-b9d4-42c5-aa15-ccfaf8907c5f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "667fdc7b-5912-44fe-8d6e-213881225aa3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a4e861a7-9efc-46c8-82cc-acdd811b1ffc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "20a12ab1-c3e1-4c78-a1f7-93be71c86ef3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c80fc0b8-de7c-41f6-8693-8c0a72ba53a6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "1c5c697c-6e1f-462f-b893-0052e03dab83"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "57841883-6523-44e7-8b3a-05aa54291255",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "51d0aef7-2268-4cc0-8c85-55e2616f1995"
            }
          }
        ]
      },
      {
        "id": "4c0aecb3-b231-49ae-9644-79a95587355e",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "cb4534ff-e3bd-4b3f-b06c-525495c0d398",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0b87ed93-d6e7-4c05-b02f-729fbd2dadb4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d8c95d0a-c709-4a90-bd5b-d4ffa890e2f8",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81f76e0e-1a8f-40ff-b146-e75063cc2a5d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "69461e38-4fd5-4d45-a9db-1efaf4609fc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9f57f0e-3843-4314-a174-711d1007383e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7e1e80d1-2646-4a5c-9134-2b92663dd8ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8b6ee65-0044-4648-8c1f-d5bf800a6e1a",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f27d6462-0b57-4db6-81a8-57fc1d20922c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "13cdda13-c03a-4b41-bcb8-2118e5009da2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30fad22f-be85-48fa-972e-a905f712f029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8b5702dc-315d-4458-b665-4f5a45a33565"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e8969a6-3e46-475f-8696-5ff639823708",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ac9a0834-17d5-4533-af34-6abeb1c4859a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e5631f3b-087c-4fdd-9c64-df50a99c8545",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b0216c9b-41dc-4f77-9be1-ea7a3af6e8bf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "31d3bf8f-5bca-4380-b947-fde1eff61235",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "6d173d17-0838-4f42-b261-bf1c17f0b371"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1d02343c-8acd-4cdf-996b-e85cf8db66a3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f4f00497-a7a5-454c-beaf-ed25867be857"
            }
          }
        ]
      },
      {
        "id": "0a1f6c58-b4ee-4110-ada0-0770e9e0cbd6",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "8f2fdcdc-0e3a-423f-8d0a-1bb055eca2c8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c524a9bb-bb51-4e32-a018-1a9927aff297",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2430b54a-4705-4dce-9ede-f26252c73d62",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c0d519b-b3df-4dd3-b765-540f36f31cee",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d85f2b2f-1c5b-4768-affb-c76e25591ab7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a16c4d1-e920-4340-b141-7210ac695b9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eea04f1c-e224-4146-95d6-21acb36de8f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3afb1af2-3227-48fb-ab58-8871129b0d88",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "551dd2dd-fef6-498a-a588-2825846da4ae",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a92b9c11-b7cc-40d6-835a-9e32d2dd4bc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8342d81-b2c7-422f-bd2b-8907ecd6d10b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6327a36f-9341-4c45-8176-1fb2e6261be0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e2f5c01e-56ce-4c24-9508-607bcafc22d3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a48d432f-fbc2-4b5f-8239-4bd0b7bc65fe"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "893d83cf-a4a4-43ff-97c8-3335dbcc656a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f1bab396-4c90-4b5e-bf8d-72a8bcad8295"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "41b1ce2e-0dfc-490d-9571-a9860846747f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "6342fa5f-5190-4daa-975b-9494c3908bfa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "12300884-6592-47c1-adf2-67ab43572ec1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7f47d82a-1d0c-45bf-ac89-a7dfba7a0d41"
            }
          }
        ]
      },
      {
        "id": "66e2fba7-79f0-4fd8-9de1-d902233527c7",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "53419b75-86e7-48d0-8a38-b2410f8c6fd2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "af004669-7cc2-48f7-a970-0de7c83b267a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a4374d40-fb8a-4315-9a02-ff141b4cc3de",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "279d04de-2800-4471-b89c-5915777efe4d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "80aa8062-8a83-40ec-b5f1-0a09f316ccca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd4cfeb0-12db-4b41-8337-5b3200914227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c952d709-3940-4bf2-9088-9c7c94588b7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "276d9315-10ba-478a-bb5d-ec4f071ddc0f",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fa8727f-1442-4059-a466-3d8f7f4b9c45",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b8117321-41f2-47ea-a0c8-95dac3ccf171"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2379cd86-0b93-42f7-be72-1e2454102550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "69dfa085-e6f1-48d7-be06-159efb2a2792"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ac931a27-58c3-45b4-80b7-e85408e8bd41",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1c061b3d-76fb-4dbe-a8fc-34413086a473"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2ecbcb9a-e403-4a0a-a846-9e949bc108b3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8e1ba1ef-59a6-4c15-8b6a-32d37124da7e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "43f3fbd1-2e2a-4438-a3e0-2e95ffd1fc53",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ce05e3da-b14f-49a8-b507-043d3bc6afbf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3792441b-e342-4881-87dc-806cdb5392d9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dc490b01-0b7f-4eb7-bc67-5b3b4055bb57"
            }
          }
        ]
      },
      {
        "id": "debd9586-937d-426c-8c74-cc5b877dea77",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "84193c38-7d83-4cb7-932f-9d75f2c1eb0e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a0035d82-3c57-48e9-82e2-7deb3c034ce7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "25a71291-e975-4ce3-a60c-059121afa8b0",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bd20bad1-4b89-45f2-aecb-175a6df6fe4b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "af78dbd5-d080-44e2-9f29-4e71cb04d2dc",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1915,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 92
      },
      "testScripts": {
        "total": 962,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 953,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 121.93869731800767,
      "responseMin": 11,
      "responseMax": 695,
      "responseSd": 103.13092930419043,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1669509832025,
      "completed": 1669509878193
    },
    "executions": [
      {
        "id": "ada03071-ffb4-40f3-8dde-7a93e7834335",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a29fe85a-8240-4a31-8529-d3ff15d42e29",
          "httpRequestId": "d49e984b-8c0b-460b-b913-f4e84a349713"
        },
        "item": {
          "id": "ada03071-ffb4-40f3-8dde-7a93e7834335",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "0c9e4f72-0eaa-4b89-8227-c15ef0534985",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 0
        }
      },
      {
        "id": "c61f80a7-9c62-4e55-be5e-9b0897ce7915",
        "cursor": {
          "ref": "19b9efec-8537-4189-886e-e4a704200490",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6d695b02-1877-4798-b663-819d169502ea"
        },
        "item": {
          "id": "c61f80a7-9c62-4e55-be5e-9b0897ce7915",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "ecbaa7cb-1e54-4bc4-b125-d40c64c10abd",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 0
        }
      },
      {
        "id": "265a28c6-4046-441b-8684-32fdf15fb4ae",
        "cursor": {
          "ref": "144d4758-f488-422a-be55-8666e8f9b01f",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "4e7a5a6c-f732-437e-85eb-cc3bbe02cade"
        },
        "item": {
          "id": "265a28c6-4046-441b-8684-32fdf15fb4ae",
          "name": "did_json"
        },
        "response": {
          "id": "1f7fe5a8-66c4-42d2-98fe-b778ad692632",
          "status": "OK",
          "code": 200,
          "responseTime": 291,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6ba58af-e2a7-40ea-8cdb-133d7fde2e1b",
        "cursor": {
          "ref": "e80568ef-d799-44c2-8d53-2f9a0d750e9b",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "721c974b-ef5e-4836-a6ab-3328834a9adc"
        },
        "item": {
          "id": "b6ba58af-e2a7-40ea-8cdb-133d7fde2e1b",
          "name": "did:invalid"
        },
        "response": {
          "id": "b4d3d1c1-acf7-4307-85f0-23a3bd01d905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6ba58af-e2a7-40ea-8cdb-133d7fde2e1b",
        "cursor": {
          "ref": "e80568ef-d799-44c2-8d53-2f9a0d750e9b",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "721c974b-ef5e-4836-a6ab-3328834a9adc"
        },
        "item": {
          "id": "b6ba58af-e2a7-40ea-8cdb-133d7fde2e1b",
          "name": "did:invalid"
        },
        "response": {
          "id": "b4d3d1c1-acf7-4307-85f0-23a3bd01d905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ddc9e91-f41a-4c94-80da-b7b4a584f798",
        "cursor": {
          "ref": "6952161e-1f91-4d9f-9c9a-df16dd21c97c",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "7eeae95e-0529-44a6-ba41-b28a4071c197"
        },
        "item": {
          "id": "8ddc9e91-f41a-4c94-80da-b7b4a584f798",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "6e99a574-fe88-430f-afc1-64be58fc1fe7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 213,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc087bb4-ec09-4d9c-a8ed-2eaf90b0327e",
        "cursor": {
          "ref": "a29f78c2-d253-46c0-9270-822d49297cf2",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "b63c4963-01ee-49aa-88b2-de751700b488"
        },
        "item": {
          "id": "bc087bb4-ec09-4d9c-a8ed-2eaf90b0327e",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "28131d8e-79c3-4ac0-a4ef-229a44a981b2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 69,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b839529-66c7-4c5d-9ba6-8fee49f257ba",
        "cursor": {
          "ref": "22e15b25-f92e-4f10-a299-f6ee7271bf9c",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "38d990dd-3497-4b4e-a79b-4296fc1a1294"
        },
        "item": {
          "id": "8b839529-66c7-4c5d-9ba6-8fee49f257ba",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "3f49b2c7-0901-4c03-b1f5-b784270d5655",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0124af4-1441-476d-b6ac-4da6c80bf6f4",
        "cursor": {
          "ref": "8b010a30-f631-41ae-99a6-1579d2faca19",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c315f00c-b9da-4578-847c-1ccceac03249"
        },
        "item": {
          "id": "c0124af4-1441-476d-b6ac-4da6c80bf6f4",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "43c63508-8267-4b12-a1ac-df5cfe8f5a1d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 73,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0124af4-1441-476d-b6ac-4da6c80bf6f4",
        "cursor": {
          "ref": "8b010a30-f631-41ae-99a6-1579d2faca19",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c315f00c-b9da-4578-847c-1ccceac03249"
        },
        "item": {
          "id": "c0124af4-1441-476d-b6ac-4da6c80bf6f4",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "43c63508-8267-4b12-a1ac-df5cfe8f5a1d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 73,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22be8b81-916e-4621-93c4-995b5856e70a",
        "cursor": {
          "ref": "2c76142b-5561-4a8b-b0af-f6fc5f871dcf",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a74dd8fb-bac4-442a-81fd-b3d511c21885"
        },
        "item": {
          "id": "22be8b81-916e-4621-93c4-995b5856e70a",
          "name": "identifiers"
        },
        "response": {
          "id": "3c6545df-6efd-42b2-b21a-30616723442b",
          "status": "OK",
          "code": 200,
          "responseTime": 161,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "842c973c-d211-4063-a38e-5e72aa616da8",
        "cursor": {
          "ref": "81e23d6b-c208-452f-9817-5ef67e4b4749",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ae1c55e2-796d-4c62-b9b3-3e9a6a1338c4"
        },
        "item": {
          "id": "842c973c-d211-4063-a38e-5e72aa616da8",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "702b4824-54a0-4363-b2f0-5f9404966f44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "842c973c-d211-4063-a38e-5e72aa616da8",
        "cursor": {
          "ref": "81e23d6b-c208-452f-9817-5ef67e4b4749",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ae1c55e2-796d-4c62-b9b3-3e9a6a1338c4"
        },
        "item": {
          "id": "842c973c-d211-4063-a38e-5e72aa616da8",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "702b4824-54a0-4363-b2f0-5f9404966f44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74e43148-789a-4daf-bfd7-edf07b514861",
        "cursor": {
          "ref": "ac4afbee-2f2e-4b0e-8774-476d6759e276",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c1403cbe-8060-48fb-8eb2-4c87a00dc8ad"
        },
        "item": {
          "id": "74e43148-789a-4daf-bfd7-edf07b514861",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "bf970e90-37a1-4f90-97f2-5edef477ccd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb2d13ed-8277-4d54-a058-76871ff0fcd9",
        "cursor": {
          "ref": "838fd3a7-0bb9-492c-b139-1ca84442bf54",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "ebddcbc9-4e86-4e89-bf2a-5d4b14e25623"
        },
        "item": {
          "id": "cb2d13ed-8277-4d54-a058-76871ff0fcd9",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "0b0f389b-6436-4238-98ac-ba450a02d3b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d0b3518-ac35-4953-94d4-856310bca6f6",
        "cursor": {
          "ref": "1c806d9d-a57e-415b-9696-911310a9a748",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "039c6e1e-4b20-47b3-b1fe-62622c033f74"
        },
        "item": {
          "id": "9d0b3518-ac35-4953-94d4-856310bca6f6",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "b7a26018-7411-488e-9eb4-a9ad472f742c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc09ceb7-ab2b-4674-9e3f-d0c7b0349c4c",
        "cursor": {
          "ref": "ccf38414-4601-4a96-8b25-eb5d98eab9d7",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "59e639c0-8b32-4dd0-87ba-bde8e11dd666"
        },
        "item": {
          "id": "cc09ceb7-ab2b-4674-9e3f-d0c7b0349c4c",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "4e2332d6-e3ec-4ee7-8cb3-902d1b16e7aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21dac041-953f-4193-90f7-6379ef449755",
        "cursor": {
          "ref": "8de31069-0608-4bcf-93d8-798c8eee5ba5",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c15ba181-b749-4c96-8cf8-caf955af34f5"
        },
        "item": {
          "id": "21dac041-953f-4193-90f7-6379ef449755",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "f5446514-f1b7-4598-8e90-1ad3bd03ebca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f729d35-33b7-4475-b56c-0a431361cea6",
        "cursor": {
          "ref": "1d650eb5-92fa-4ca0-803d-96275c2230b6",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "46380b27-59d2-4c42-8c32-38c23d6ad344"
        },
        "item": {
          "id": "0f729d35-33b7-4475-b56c-0a431361cea6",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "e0e517a1-8a47-4194-97ab-cc6e53bf8435",
          "status": "Created",
          "code": 201,
          "responseTime": 463,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "723aabde-2709-4f63-be4a-17a34b882410",
        "cursor": {
          "ref": "179130cf-1ce7-4ea9-99f0-76cf866e50d6",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "2cfca2f5-0932-489a-a3ab-bc46ef537e03"
        },
        "item": {
          "id": "723aabde-2709-4f63-be4a-17a34b882410",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "c5deb7cb-df16-4d81-8c5d-48ad72cd2fae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2436a35-011b-449e-8ecb-dbfd04c137c6",
        "cursor": {
          "ref": "229b34ef-ecdc-44d4-bb85-d587ca3e395e",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c4d786d0-bfcb-4b57-824d-642803e300de"
        },
        "item": {
          "id": "c2436a35-011b-449e-8ecb-dbfd04c137c6",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "25d3a7eb-3325-4481-ae6d-a63ad859515b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34b4d34c-85fa-4ba0-964a-a1e41ea30df1",
        "cursor": {
          "ref": "be688f95-221a-4df3-ac9e-6a24e3dfe15d",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7d91392b-11d4-4010-a94c-29035257416f"
        },
        "item": {
          "id": "34b4d34c-85fa-4ba0-964a-a1e41ea30df1",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "509a2ec8-76a6-48e1-b354-eb826eb65423",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90702f41-efe8-482e-a03c-db1a8a6895ab",
        "cursor": {
          "ref": "ef57b7fb-b0bd-4fbf-b877-924b49cd44b7",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "3a106063-0e75-4ee9-a2f3-7cbf5fb46da3"
        },
        "item": {
          "id": "90702f41-efe8-482e-a03c-db1a8a6895ab",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "2823f909-2de6-43c6-a220-9458dd1a2abb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe2b8ab6-9e70-49c4-8005-da75eaf284be",
        "cursor": {
          "ref": "9a147bed-6905-49b8-8037-402ff666b2e7",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "926f1bff-f5c2-4cc7-bf0d-6e984663eabc"
        },
        "item": {
          "id": "fe2b8ab6-9e70-49c4-8005-da75eaf284be",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "593e96bb-60a5-488e-add8-ce3b891e6178",
          "status": "Created",
          "code": 201,
          "responseTime": 351,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "9a5c454a-c94c-4c0a-82ec-309dd26eca02",
        "cursor": {
          "ref": "9e639901-516e-4216-b828-c1e91b11994f",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f2b13887-dbf4-4063-bdb4-d4fa044706d8"
        },
        "item": {
          "id": "9a5c454a-c94c-4c0a-82ec-309dd26eca02",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "1264b011-a067-485f-8bb1-ebe4647036ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ca73426-174b-4a2e-a8be-c494a2c8ae5e",
        "cursor": {
          "ref": "d530ea1e-d564-44ec-a45e-41bb7b43e0a2",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "4e59ca33-bddd-468d-99a1-983ff7c6fcd0"
        },
        "item": {
          "id": "2ca73426-174b-4a2e-a8be-c494a2c8ae5e",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "b76078f8-275e-4c93-a494-ef13d09f7457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30f9ed01-afc0-4c34-9c0b-dabcdb633481",
        "cursor": {
          "ref": "fb133b2a-d3c2-4987-8796-d307ea18ac88",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "7adafaa1-dbef-472f-b2c6-f72f13d4e864"
        },
        "item": {
          "id": "30f9ed01-afc0-4c34-9c0b-dabcdb633481",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "02bf9ef5-2f7f-4118-a398-aae6b46dd22d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1646a9d6-5229-483f-bd0a-acb17428d6e1",
        "cursor": {
          "ref": "32ac3b72-2eaa-4cbe-97ee-6a890397f801",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "af270477-f649-4167-b718-ea497ecac7ee"
        },
        "item": {
          "id": "1646a9d6-5229-483f-bd0a-acb17428d6e1",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "fcaadc3c-8f6e-4c67-9a33-1e3e79eaddc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb176ff4-0ede-4133-9017-6564b8cee0a5",
        "cursor": {
          "ref": "5d964368-0453-4687-b306-4642d245d2cb",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "42daaec0-bd2f-4046-8963-c93b84155d7f"
        },
        "item": {
          "id": "fb176ff4-0ede-4133-9017-6564b8cee0a5",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "41847ca0-4681-4d84-9076-8d1900c5c123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f79ac5a-31d2-4ccc-a9ff-bedd777787ae",
        "cursor": {
          "ref": "d2617fbe-9ca8-4cad-8bbd-78ba7fc81b99",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "fd69911d-3e79-4f2a-a41d-84bd53d80527"
        },
        "item": {
          "id": "7f79ac5a-31d2-4ccc-a9ff-bedd777787ae",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "58cf1699-bb0d-4628-9149-ddb159107c59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75261c12-8f98-4656-99d9-896336f9e56a",
        "cursor": {
          "ref": "a249cca6-966f-45db-b640-c12559999edb",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "37b5e0e2-b43c-4baf-bc98-36189c5f085d"
        },
        "item": {
          "id": "75261c12-8f98-4656-99d9-896336f9e56a",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "9bcaa317-034b-445c-b92e-8e2a3a5884ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11b339a3-3a71-4aca-ac5b-a6d6b0ff61dd",
        "cursor": {
          "ref": "91fbf294-ccf4-44fc-9333-65aa3071cd63",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "bf70beb7-7b47-4a60-b158-c8bcbd158476"
        },
        "item": {
          "id": "11b339a3-3a71-4aca-ac5b-a6d6b0ff61dd",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "f062c622-44e0-4720-bc10-4d515ac96d47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c53f1067-7299-4b67-b54c-a13480018d5d",
        "cursor": {
          "ref": "62bdea41-a8bf-4ba0-971c-675008f9d3de",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "3164bc30-bf12-4426-99fc-f37bcca95ba3"
        },
        "item": {
          "id": "c53f1067-7299-4b67-b54c-a13480018d5d",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "2d5e988a-7064-4725-b279-d35b91c9487e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0493822a-cc23-4caa-a0ab-754ef2ef1e63",
        "cursor": {
          "ref": "7acc4519-22cd-4db7-929b-2adc15e0b11a",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "6c48c9b0-ca36-4b71-bb9e-f777b3d86268"
        },
        "item": {
          "id": "0493822a-cc23-4caa-a0ab-754ef2ef1e63",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "826d5ca4-1287-46d6-a494-5ea932de5c89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bac3b36-37ed-4d5e-8c3d-c793ec087fa9",
        "cursor": {
          "ref": "e9b82d2a-1307-43c0-a7ab-21b07c835d81",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "3838976f-7941-485b-86f0-ba0dae1878d0"
        },
        "item": {
          "id": "4bac3b36-37ed-4d5e-8c3d-c793ec087fa9",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "63769389-a9db-49c0-87bb-649cb5a2526a",
          "status": "Created",
          "code": 201,
          "responseTime": 438,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "a4c70278-e115-4d34-bde3-be008627bb79",
        "cursor": {
          "ref": "bd15991c-9da9-4ead-bd55-8f730b34fd70",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "e47cc042-8829-46de-a2a2-ae853930782f"
        },
        "item": {
          "id": "a4c70278-e115-4d34-bde3-be008627bb79",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "7e876a88-b8e7-4250-8c33-13d93950546e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "067adced-ec94-4946-9b8b-081be5134935",
        "cursor": {
          "ref": "53691b41-6e5a-4e99-9217-0f41a2a6f448",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "b6f78623-1123-4a23-995c-b5999a62487f"
        },
        "item": {
          "id": "067adced-ec94-4946-9b8b-081be5134935",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "fecc5ac4-8ff2-48d0-8d51-bfea53b3c64f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "533cdea2-7437-48eb-b0a5-a03fa8a48857",
        "cursor": {
          "ref": "c75b233b-6fe4-4d7f-a953-b2c8f7773b46",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "337d0f1e-0503-447f-8f7e-6f8d73cf789d"
        },
        "item": {
          "id": "533cdea2-7437-48eb-b0a5-a03fa8a48857",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "b36dfb22-e64e-4022-8c75-45c74bdea15a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b1f1381-e861-41af-b8e9-f9a8ac78f6a5",
        "cursor": {
          "ref": "26dd38f6-e809-490e-9a7f-6f05a2819c43",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "48618755-b725-452b-8b3f-54d648553845"
        },
        "item": {
          "id": "0b1f1381-e861-41af-b8e9-f9a8ac78f6a5",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "e6c4edd6-3ca7-46a9-b00f-b5c0c76c0029",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "194edbe1-5b13-40fc-836f-708ce3b9ecbb",
        "cursor": {
          "ref": "0c6b0198-804e-4788-bcdc-4b92076a4ea6",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c0290b68-250e-4247-b3d5-697a8d3538b5"
        },
        "item": {
          "id": "194edbe1-5b13-40fc-836f-708ce3b9ecbb",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "fcb4ba6d-140d-4c52-a77c-e5ecc2d05728",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3089c611-590e-4753-8363-a0fdf308dbc3",
        "cursor": {
          "ref": "c98d5899-a992-4510-bbef-950909107e53",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d4e64c52-a7cd-4256-bda8-163cd927484d"
        },
        "item": {
          "id": "3089c611-590e-4753-8363-a0fdf308dbc3",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "c9fedfc1-d7a1-4172-95a2-31bfdf9668eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2c9ffbb-057f-44a9-9168-771f55efb090",
        "cursor": {
          "ref": "76116f4c-b6b7-47a3-acbc-80489f7a39e5",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "bd2a42eb-def4-4b8a-803f-52b2f5e06bfb"
        },
        "item": {
          "id": "d2c9ffbb-057f-44a9-9168-771f55efb090",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e6a42d47-76cd-4cf4-8dac-a9fb90612716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdefc14f-1f1f-4ebb-8964-4d307a3ad751",
        "cursor": {
          "ref": "187f4d8d-6fd6-40ed-90c9-a8f93a447a22",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "3eddd3c0-5772-4d2e-9553-ac8099f3c108"
        },
        "item": {
          "id": "cdefc14f-1f1f-4ebb-8964-4d307a3ad751",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "10d51f90-8c51-40ae-8196-b311cccfd8f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a81641bf-4c73-43e7-888a-61c383e1adab",
        "cursor": {
          "ref": "363bd44d-1b76-4698-ba32-a2b76e6b330b",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "73ac5cf4-0e5b-4910-8a9f-c70f9472a6cd"
        },
        "item": {
          "id": "a81641bf-4c73-43e7-888a-61c383e1adab",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "3bec5acf-84e3-4465-aff1-606414e2bd57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "371a6657-f050-447d-8b12-f5c8540483da",
        "cursor": {
          "ref": "4c58fc15-ab9f-459b-bff1-d7d6f48e79a5",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "7772f320-ecca-43ce-a977-a6b347566682"
        },
        "item": {
          "id": "371a6657-f050-447d-8b12-f5c8540483da",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c889a244-02e4-4873-852f-a123e6484047",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ef70e17-1527-4c03-8dd5-ece5e17e7269",
        "cursor": {
          "ref": "14983046-3077-4663-b22c-335c02c15af6",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b4c0812c-98b0-434b-8ba9-5a5e4239888e"
        },
        "item": {
          "id": "1ef70e17-1527-4c03-8dd5-ece5e17e7269",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "586a6da6-ac01-4113-876f-126d067cd725",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "854da61f-8e76-4ce2-b925-d6bf82297fd1",
        "cursor": {
          "ref": "ed34eafc-563e-4046-b8f9-b276051d207a",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "90e30d03-76c4-41b3-bb2a-f3036e05c606"
        },
        "item": {
          "id": "854da61f-8e76-4ce2-b925-d6bf82297fd1",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "d0da6fb5-588a-426f-af10-0c04c01f9925",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9afec43-24cf-4479-a7b7-dbbec00b2a9b",
        "cursor": {
          "ref": "6d766a9b-5e67-46bf-822f-12907c4f8740",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "006aeeac-8379-47b2-9da5-a387eafa3244"
        },
        "item": {
          "id": "e9afec43-24cf-4479-a7b7-dbbec00b2a9b",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "4b5a52ce-2130-4a83-83a1-dabf59aca674",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 304,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "2a1d1d26-5d5b-4457-827d-814f0a5f13eb",
        "cursor": {
          "ref": "215b2fc3-36bb-43c2-8eb4-6274e0aad38d",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "600b74e3-c567-4a95-a1a6-f92a084848e9"
        },
        "item": {
          "id": "2a1d1d26-5d5b-4457-827d-814f0a5f13eb",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "41fac4ee-fc67-4c55-bc0f-c0952d57b4ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "362d0550-0122-4696-a574-ba779a142fd2",
        "cursor": {
          "ref": "6f86154e-b562-433d-8fb1-c7866763a863",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "402c5aa1-7675-4933-b3b4-52467601320a"
        },
        "item": {
          "id": "362d0550-0122-4696-a574-ba779a142fd2",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "9f137802-937b-480c-a344-cbe16981bc32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d491a989-ed85-4f5c-af4a-30583d525934",
        "cursor": {
          "ref": "b1378b04-c4ee-4679-8021-9b4e7274063e",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "181837df-dc62-4a62-8d2a-b71f65f06a68"
        },
        "item": {
          "id": "d491a989-ed85-4f5c-af4a-30583d525934",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "d9675562-b87b-47b7-8003-4895288f5700",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e016838c-bbcf-4794-90eb-075d7f6cfb63",
        "cursor": {
          "ref": "c4be5c73-cc23-4257-9547-7b377684622b",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "431aa1b6-32e1-486b-a01b-dda65ff5b961"
        },
        "item": {
          "id": "e016838c-bbcf-4794-90eb-075d7f6cfb63",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "91560fd6-82c7-4b43-bdde-fa18e3c7e4ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4178b27-ec1d-4388-9afb-64b09e3b346f",
        "cursor": {
          "ref": "9e75069c-2d44-4615-acb2-2de741597207",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "85cf0d8e-7c53-4c72-ac3f-156bb570d3aa"
        },
        "item": {
          "id": "b4178b27-ec1d-4388-9afb-64b09e3b346f",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "2bad51cc-4791-42c2-8b5c-530882b9d68a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27a422e5-0220-4d88-8e9c-cfe681a5ef57",
        "cursor": {
          "ref": "5bfb1081-6e29-4a1a-ad83-5321cbdd881b",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "2440dfaa-225a-4d51-aaa4-291ece370802"
        },
        "item": {
          "id": "27a422e5-0220-4d88-8e9c-cfe681a5ef57",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "d598cf18-da72-48cd-9c93-9270c1b22409",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aecf3fb0-5c1d-4244-acbd-77e4e3a3e871",
        "cursor": {
          "ref": "ed94c5de-2ae7-4c9b-a5e3-069b7d06c4ed",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "52124003-34b6-4b57-bada-6373f0ac68fb"
        },
        "item": {
          "id": "aecf3fb0-5c1d-4244-acbd-77e4e3a3e871",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c3c4fd69-efa7-491d-ab07-fb5b3749d75d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 354,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "b38d79d8-9e28-46f6-908f-8915e0f86764",
        "cursor": {
          "ref": "3f1519ab-5f16-41c2-81db-0732f6b728e3",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "4d26e0e1-a328-4425-a18a-e25524f803a0"
        },
        "item": {
          "id": "b38d79d8-9e28-46f6-908f-8915e0f86764",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e7ea50af-1909-4b52-b171-92571e1687ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a30bfe86-fdc7-4e89-a38e-a038e1009132",
        "cursor": {
          "ref": "3485533d-b3bb-4006-a332-79d53a71b725",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "2f1acd19-75bf-4f95-a3d0-803ad528c45b"
        },
        "item": {
          "id": "a30bfe86-fdc7-4e89-a38e-a038e1009132",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "23d148fe-2095-4ca3-af6e-40021cb5864b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fed61ab3-d168-4356-97b9-44dbdefa8274",
        "cursor": {
          "ref": "6fd15022-2cdc-4a38-8a38-541bdfaf8226",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "3bab812f-8d07-490c-88e4-c4554ce45fa2"
        },
        "item": {
          "id": "fed61ab3-d168-4356-97b9-44dbdefa8274",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "c286f227-ea74-4255-8109-b5cd078a7d6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5403c6fc-c161-4fb1-9a4e-1cf7a97bd34d",
        "cursor": {
          "ref": "97cfed6a-f07b-4317-a321-8ce74af9b8b0",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "3949010a-ef85-48f4-9556-345997429177"
        },
        "item": {
          "id": "5403c6fc-c161-4fb1-9a4e-1cf7a97bd34d",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "ce9e058e-2d32-4faa-a3c7-50898e297393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b95f088-98d6-43aa-8fd9-cc6255b76530",
        "cursor": {
          "ref": "79d4a463-0ec2-40b1-991d-bef5a29e9e26",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "44bc4923-2a2c-4a4d-92d8-ab30b1171a80"
        },
        "item": {
          "id": "4b95f088-98d6-43aa-8fd9-cc6255b76530",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "6c441fe4-912b-4bcc-a0f9-50ae13f3a779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cd007a4-9e1e-49da-b736-78f67e46e060",
        "cursor": {
          "ref": "c4421b2f-ef3f-465d-bb45-ebd654736ebd",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "415858d5-a6b1-4e52-8f82-9652cfa73c1a"
        },
        "item": {
          "id": "6cd007a4-9e1e-49da-b736-78f67e46e060",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "b506720d-cf10-4d6a-bd36-7f5cdca48c04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fcc90ae-2c25-4965-b7cd-a8b4c910312c",
        "cursor": {
          "ref": "12bab74e-9051-442b-9a30-73a0652a2ab3",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "42a7e191-3d49-4971-8ce0-f71d86bb9c2d"
        },
        "item": {
          "id": "8fcc90ae-2c25-4965-b7cd-a8b4c910312c",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c57e5e59-6116-4f3f-aaa3-1faeb339a38f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a92aa2a-6b5b-450c-a801-3a1c1189b4c5",
        "cursor": {
          "ref": "57b9c758-bd0b-44ff-a308-78df3f1c5d1e",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "99c49f5f-8266-4706-b515-87c4ba084033"
        },
        "item": {
          "id": "6a92aa2a-6b5b-450c-a801-3a1c1189b4c5",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "6df16376-2f42-418f-b83c-3b4d05fdfe8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daab6924-3526-45c9-9cd7-498703a16c96",
        "cursor": {
          "ref": "67926b44-5103-4556-8cb1-64e8743341a0",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "88e98a49-6921-4a74-b92d-50dcd2b3ec9f"
        },
        "item": {
          "id": "daab6924-3526-45c9-9cd7-498703a16c96",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "addefd0f-97f2-4de4-9975-940b434ef9ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e6d2e92-7661-4179-85e3-f0b4253b1162",
        "cursor": {
          "ref": "8b523ba8-d5cc-4e32-bc97-77dce99c1339",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "595bbe1e-db62-4638-bc9f-e456f73dd103"
        },
        "item": {
          "id": "9e6d2e92-7661-4179-85e3-f0b4253b1162",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "efd4e02a-18a7-42a0-8a77-779412866f91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3e432d9-cb82-4dbb-add6-bfd2974c34bc",
        "cursor": {
          "ref": "28328326-4959-407b-b431-ade6e299fc79",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "952ab26d-62dc-4b5b-8bb5-69cb6c434d1c"
        },
        "item": {
          "id": "c3e432d9-cb82-4dbb-add6-bfd2974c34bc",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "334b682c-c15c-40cf-910a-13b2fc8d501e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b759a59-948f-4110-9c0b-89ad2d992a22",
        "cursor": {
          "ref": "0a0b63a6-7512-4af1-ad73-a75c4b2eee77",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "66305640-5ac5-47a5-8f09-bfccb797e9e7"
        },
        "item": {
          "id": "9b759a59-948f-4110-9c0b-89ad2d992a22",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "1c0e2510-84d5-47e6-9132-0d9df916580f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bfcd269-6ea3-4863-abdb-e7d704597b30",
        "cursor": {
          "ref": "01ef545b-4748-4408-9a6b-7871383e34d0",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "7d0d9eda-9bbb-4922-a531-2999714e9956"
        },
        "item": {
          "id": "4bfcd269-6ea3-4863-abdb-e7d704597b30",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "b466d873-1b6c-416c-99f3-2acf4f6977fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ce21ace-77bc-458c-bf68-a4bb92f6f9f2",
        "cursor": {
          "ref": "368e8fb6-5965-4cd6-bf8e-5b36d07b6f19",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "8afe2fa1-9779-4deb-97b2-45d9a3823fba"
        },
        "item": {
          "id": "6ce21ace-77bc-458c-bf68-a4bb92f6f9f2",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "09225dbf-d3c7-4f80-b3f2-089422d9b3a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77be31b3-a703-4e05-b1dd-42032e94415f",
        "cursor": {
          "ref": "f4eee449-4954-4787-9435-e207fe8c637c",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "a49354de-19c6-4093-8d7e-8d2c8951c12b"
        },
        "item": {
          "id": "77be31b3-a703-4e05-b1dd-42032e94415f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "90175ea6-d70b-49c0-80c6-3891eb4d609b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb275dd0-634d-46b8-8e14-c923f9b8508d",
        "cursor": {
          "ref": "f54e6b18-411a-4c60-847d-0fe58ccff63c",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "55e8fc5c-9509-4f25-946b-eaaaad2f46d4"
        },
        "item": {
          "id": "eb275dd0-634d-46b8-8e14-c923f9b8508d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "6021b035-c599-48b5-8804-4c7b812df25e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df7147cc-52de-4c53-bade-c7b2ac623d07",
        "cursor": {
          "ref": "0ebc64e9-ddef-406f-b7c3-bd6d6c1168c5",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "4eba663a-6c38-4d9b-8b77-902716a78976"
        },
        "item": {
          "id": "df7147cc-52de-4c53-bade-c7b2ac623d07",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "93859dc8-856c-4f89-9f2d-d641ea1a98e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 242,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0ab1389-fb49-4dc6-81b3-7349e48a885c",
        "cursor": {
          "ref": "30929518-fa9c-461b-8a40-02fb5bf20f20",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c631151b-3e55-4ced-bb2a-9050ad993132"
        },
        "item": {
          "id": "c0ab1389-fb49-4dc6-81b3-7349e48a885c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "e40dc9bd-e10b-4bdb-a3c3-c5ec39bd2427",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2396990d-e25d-478a-881f-b610568042ba",
        "cursor": {
          "ref": "5688d9a3-cb57-4bdc-b098-d22d58d8e43d",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "06d2032f-4003-497e-afc6-43a69306dc17"
        },
        "item": {
          "id": "2396990d-e25d-478a-881f-b610568042ba",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "18c725f4-1ba6-4b75-a524-3cd578a7a250",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dc2b19e-4a5a-484e-aff4-d51def44e9c3",
        "cursor": {
          "ref": "d2ae6a4f-3b99-4e8b-ad71-f1dfd42a154a",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "66a3f094-1ae8-403e-88f9-6f0c5c8140da"
        },
        "item": {
          "id": "3dc2b19e-4a5a-484e-aff4-d51def44e9c3",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "9719dfc7-fff7-49b3-ab27-394185c8a85a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67a8c935-2feb-4b50-81b3-caa5bc292715",
        "cursor": {
          "ref": "d0c4050d-694b-4a95-9f76-62f361d6cb95",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "7136345b-0318-4cbf-a910-a17c412b9db5"
        },
        "item": {
          "id": "67a8c935-2feb-4b50-81b3-caa5bc292715",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "7b1e3b25-ad80-4586-bc79-51c512c25288",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbaacbb2-1df7-4b4f-bdbd-8cdc01604dd2",
        "cursor": {
          "ref": "7d696412-edf9-494e-87ab-5ede5beb537a",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "2a6564a2-7da3-4377-b897-c8e495945489"
        },
        "item": {
          "id": "fbaacbb2-1df7-4b4f-bdbd-8cdc01604dd2",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "7d0ec8cd-0744-428d-8455-c95ddc539905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59dc8535-527f-469c-b9a0-ca2c83867924",
        "cursor": {
          "ref": "0effcb1b-d968-4be0-a63b-ee031273f955",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "56f8338e-ab7a-4754-8c48-503240701df9"
        },
        "item": {
          "id": "59dc8535-527f-469c-b9a0-ca2c83867924",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "4e57fbf4-ed27-4cd3-9107-645ac79455ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbc722a4-5d3e-414f-8b92-b21ef2c29164",
        "cursor": {
          "ref": "2e626e79-6a5a-43d3-8e93-0a56b43b4981",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "bc17d455-c5dd-4886-8e47-9c1296671dd9"
        },
        "item": {
          "id": "bbc722a4-5d3e-414f-8b92-b21ef2c29164",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "25e54d44-85c8-4385-ab1e-ebf57d746c04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2eaa838-4482-4bbf-b42a-2a4a9fc0e863",
        "cursor": {
          "ref": "7fd261b7-7e56-4edc-93a3-0b99cd096a5d",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "6a2585cd-57be-40f0-8a59-2be897a7d7b3"
        },
        "item": {
          "id": "a2eaa838-4482-4bbf-b42a-2a4a9fc0e863",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "9a4cb75b-a80c-4232-808d-90cce79d5632",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16730312-5005-4f45-82f9-2418ea6bf125",
        "cursor": {
          "ref": "bbe44109-e242-4237-a721-b3a398aa55f0",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "ad5c0bc9-d15c-49b7-adcc-8ca0ffc6ba8c"
        },
        "item": {
          "id": "16730312-5005-4f45-82f9-2418ea6bf125",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "35c14be5-8aac-496f-8fa3-0cfa19e1a6fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a9beb55-2219-4296-963f-0cf05e37dc24",
        "cursor": {
          "ref": "a5ca613c-322e-42be-8a36-6734bdfb8f53",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "dcb39f1b-bd11-4f43-838a-9afe32e20e2e"
        },
        "item": {
          "id": "5a9beb55-2219-4296-963f-0cf05e37dc24",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "2824c3fa-690a-4982-b1ee-c90375e129e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95f0a518-f3ee-4c2c-adee-8489b7687bab",
        "cursor": {
          "ref": "e5886cd3-55a9-4ac0-b6dc-d081e36b2e87",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "3652c72b-e077-4db9-bd4d-e7f02b50e59d"
        },
        "item": {
          "id": "95f0a518-f3ee-4c2c-adee-8489b7687bab",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "9367521d-bf34-4e64-be89-fbfcdad927c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e41e429-0095-4f41-8e1b-c8f0a19dfc49",
        "cursor": {
          "ref": "57af0624-53fb-460c-a444-a2ecd13b9d96",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "2169113a-82cf-481c-a2e1-cf22a5cbc01e"
        },
        "item": {
          "id": "9e41e429-0095-4f41-8e1b-c8f0a19dfc49",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "430758d8-72f4-46e6-8720-9426967ac3ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "835f0ac5-1f26-49fe-8ee6-2dd76ea4c19b",
        "cursor": {
          "ref": "fd382f15-2ea2-472a-9a29-c3d4deb6989c",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "b20cd218-f182-4b94-baa2-4c635eab4ef4"
        },
        "item": {
          "id": "835f0ac5-1f26-49fe-8ee6-2dd76ea4c19b",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "e952fc90-b8e3-42ce-9fef-e75fd1cf0423",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "016ef2ca-5361-49e2-b8f2-74fd3b96418c",
        "cursor": {
          "ref": "e71060fe-8efd-4db2-8a41-82d77507e484",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "7dd87668-51c5-4aa1-a880-d09364f53379"
        },
        "item": {
          "id": "016ef2ca-5361-49e2-b8f2-74fd3b96418c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "be74f4f2-bd26-4344-9b39-d1a3db31c581",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 351,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f33bf5d7-b1a8-4576-9f96-8feaa4c5de8d",
        "cursor": {
          "ref": "1eb2c29d-2512-45ac-9672-c0308bec0623",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "1ca0d90b-0bf1-4929-8089-e24e0c079388"
        },
        "item": {
          "id": "f33bf5d7-b1a8-4576-9f96-8feaa4c5de8d",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "88271f01-dc49-4669-aeab-56a0b46be5c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "503af07c-4cf7-4c5c-a8f4-c8ae79f8a555",
        "cursor": {
          "ref": "fe1a5231-ccb1-4c34-9793-a28affbb497b",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "b1119018-6817-4810-bf83-2a18930d2ca9"
        },
        "item": {
          "id": "503af07c-4cf7-4c5c-a8f4-c8ae79f8a555",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "0470b9ab-59d9-48ab-9452-631434a74b55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1090de49-cbbb-4e3e-84fe-b9d6de91795d",
        "cursor": {
          "ref": "41e73a19-7d45-4008-8c14-2fbe6080d45d",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "be0e5e2d-04b4-442a-a6f3-062aeadd7eea"
        },
        "item": {
          "id": "1090de49-cbbb-4e3e-84fe-b9d6de91795d",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "71b94cca-9bb0-4eb5-803c-0b83afdb744d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "651ff430-32b8-4838-8dc7-2735bd47eb4c",
        "cursor": {
          "ref": "2c037e5d-c6b2-4cc4-a1fb-9ab3b7cb6b14",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "3a831204-25d0-4532-ab30-f4b0993456f4"
        },
        "item": {
          "id": "651ff430-32b8-4838-8dc7-2735bd47eb4c",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "edb4ba13-c055-4eff-82eb-7cb76faebe84",
          "status": "Created",
          "code": 201,
          "responseTime": 350,
          "responseSize": 635
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "f97a4656-fa91-493d-9e3f-ea35ae30e9a4",
        "cursor": {
          "ref": "c90da71d-9a2d-4088-9102-542fc498ce9c",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "6a8d26bf-8d79-40a4-85a4-366f3202deb7"
        },
        "item": {
          "id": "f97a4656-fa91-493d-9e3f-ea35ae30e9a4",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "465e71f5-f940-4f07-83a3-cb5317f2675a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "855d9be6-6c0a-433d-a507-6c25c0b45d08",
        "cursor": {
          "ref": "26d1abb3-a8b0-42de-ac5b-82458d9d300c",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "e926b15e-9d52-423a-8c83-1bcce0645ac5"
        },
        "item": {
          "id": "855d9be6-6c0a-433d-a507-6c25c0b45d08",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "d53fc030-69b2-4b33-b795-2fbf62f0526d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a838081-bf3c-4bbe-bf63-e5512a392ef8",
        "cursor": {
          "ref": "66178ddf-f6a9-49f6-a131-8708132bfcec",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "bdf3ac31-e330-44c8-8af7-aa149462d8e6"
        },
        "item": {
          "id": "3a838081-bf3c-4bbe-bf63-e5512a392ef8",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "1b753faf-d5d3-49d9-ba61-5a55a7698b15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d6df2aa-b97c-4768-ad87-f88d40a6b2d0",
        "cursor": {
          "ref": "2dd981bd-97dd-42a1-bb43-af25f025eee8",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "fb2e2b9a-aa04-40f2-bfa4-73747b91b6a1"
        },
        "item": {
          "id": "4d6df2aa-b97c-4768-ad87-f88d40a6b2d0",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "adb8a8d8-c963-419d-b204-96aa05cce634",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ddd6f35-f338-4f89-9776-2f0b4b3b1144",
        "cursor": {
          "ref": "6b0e7767-7054-42f4-ac1f-422899c190cc",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "545643cb-2241-437b-b242-6ddda66c6f26"
        },
        "item": {
          "id": "5ddd6f35-f338-4f89-9776-2f0b4b3b1144",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "3009d3c2-7371-410d-8f81-f1acd12bad12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "add58386-8451-4310-b581-f7a2909faebb",
        "cursor": {
          "ref": "2b93813c-6f77-45c5-a580-798386c743be",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "59a73c0a-3056-4a32-b187-a4be105a41a4"
        },
        "item": {
          "id": "add58386-8451-4310-b581-f7a2909faebb",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "63290622-d585-4590-970a-da905057e6ff",
          "status": "Created",
          "code": 201,
          "responseTime": 427,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "7f0483e3-8037-4d0c-8af3-9705e72fd551",
        "cursor": {
          "ref": "e6acb03d-7e2e-4444-a44f-b0cc89a08c4b",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "a5b92e50-908f-43e8-9821-20594889057b"
        },
        "item": {
          "id": "7f0483e3-8037-4d0c-8af3-9705e72fd551",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "ca40199b-2ba2-4f18-95a8-854f43529c93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "516433c8-d0a0-4f66-8bfb-5912b9ea7860",
        "cursor": {
          "ref": "2f419945-3073-4c14-9c98-8f9f0a8896e4",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "bbad3610-bc0b-47db-bcea-f7cc175b3de1"
        },
        "item": {
          "id": "516433c8-d0a0-4f66-8bfb-5912b9ea7860",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "7446160f-d6d1-4710-a497-9a965e195e36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e10ba006-f744-4a4e-90d2-1132c8d5d158",
        "cursor": {
          "ref": "8a157aa9-dc78-4f61-92cf-386097e19e16",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "d3d9ad63-f0f2-4a89-bcac-bab1ba2978c0"
        },
        "item": {
          "id": "e10ba006-f744-4a4e-90d2-1132c8d5d158",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "4ed6c7b8-e69f-47de-8a6f-6f4d7e28026a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e1b62d5-9f7d-4a52-a752-e1196ec547a9",
        "cursor": {
          "ref": "da67c76b-b302-4bff-8920-55c75de4459b",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "171f7ab9-f656-4b35-ba2a-8baa27ec7ecc"
        },
        "item": {
          "id": "1e1b62d5-9f7d-4a52-a752-e1196ec547a9",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "353ccf62-249e-4dda-a55e-9d751bb84d27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dcecc3d-b6e2-4367-99ae-024cc3f1c39c",
        "cursor": {
          "ref": "22828963-7c0b-4bdb-9e6e-0d276c762e81",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "b69a5ac3-6862-4107-a2fd-8743bc51468f"
        },
        "item": {
          "id": "9dcecc3d-b6e2-4367-99ae-024cc3f1c39c",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "75f88c3f-ca24-4a16-aac5-6b03a1616b5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f833952-9114-40d6-94ec-54d34a89bd3c",
        "cursor": {
          "ref": "d300cf86-0a30-43f5-9313-fa9cc9ddb1b1",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "2e7b077f-e15d-4bb0-b1b7-b538f8627ce6"
        },
        "item": {
          "id": "2f833952-9114-40d6-94ec-54d34a89bd3c",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "71df0d84-32ed-4a11-9946-e5779faed3b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "735026e0-8059-40cd-ab92-bc8d562f0d23",
        "cursor": {
          "ref": "19577f82-9be8-4b04-94f8-4878979db064",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "2601ce2c-570f-4015-b446-fe4dfc11783a"
        },
        "item": {
          "id": "735026e0-8059-40cd-ab92-bc8d562f0d23",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "0b5771e2-cfd8-463f-b0be-ab7226eb7cd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "376606ee-6e8e-4161-b739-d3172f9066ef",
        "cursor": {
          "ref": "0d4b8970-6dc8-4c9e-8e9c-1163b7d96f8f",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "c5c8d47d-2b5c-40ec-a967-8bbcf5952287"
        },
        "item": {
          "id": "376606ee-6e8e-4161-b739-d3172f9066ef",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "58922c65-a186-4b12-93d4-a1efcf1e17b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0697fab-c851-4b2a-bb95-267b242d6f84",
        "cursor": {
          "ref": "f0eb6bdb-dd69-41e9-99f0-b8a44e279a60",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "ea1ec5ba-2fbd-4b8f-94ce-9c55b2c61190"
        },
        "item": {
          "id": "c0697fab-c851-4b2a-bb95-267b242d6f84",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "98ea33aa-f0e1-4c9e-a1cd-2b4b951c4b09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "36747b9a-6bb8-4b9b-96ca-3003239e9cc5",
        "cursor": {
          "ref": "2124b236-49c0-4fa7-b9d9-0f6e1e1bd9b1",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "eb954fe6-c697-4c19-a2bd-65edc58f4045"
        },
        "item": {
          "id": "36747b9a-6bb8-4b9b-96ca-3003239e9cc5",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "7a6d765a-438a-4352-a131-5dd87d8e686a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 256,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "c2696ad3-e39c-4c4c-b6e7-8ae8051d6674",
        "cursor": {
          "ref": "bddb7776-8086-4649-b16b-810038772634",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "2ee48fa8-5dfe-404d-b757-558b9cfc178f"
        },
        "item": {
          "id": "c2696ad3-e39c-4c4c-b6e7-8ae8051d6674",
          "name": "credentials_issue"
        },
        "response": {
          "id": "24eb808c-0ccc-4caa-853d-0b1b6adc7415",
          "status": "Created",
          "code": 201,
          "responseTime": 432,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "d84fb8ed-2484-4631-8a8f-9bae05aa9af8",
        "cursor": {
          "ref": "3628f241-2863-4691-b90d-066717b77113",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "12ac1cf3-d2da-433f-91e2-c13cd9f1b1fc"
        },
        "item": {
          "id": "d84fb8ed-2484-4631-8a8f-9bae05aa9af8",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "a8158a4b-82ee-479a-8d0e-928ba201e1c2",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6bbdd66-ac8c-494b-8ef5-71490e1e0327",
        "cursor": {
          "ref": "38618c4d-00c4-4960-8a5f-57921403a7d5",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "6bdeb9fa-fd81-4883-84d7-6500ed4f8759"
        },
        "item": {
          "id": "c6bbdd66-ac8c-494b-8ef5-71490e1e0327",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "5046f775-9182-4450-bca5-a9aca5f08c46",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "00c025d8-a533-4bae-b8d0-afe0e7db3441",
        "cursor": {
          "ref": "07f2c7c3-0809-4a85-9a75-847022abe446",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "09f0c837-f43f-41aa-9601-5181d12e2d72"
        },
        "item": {
          "id": "00c025d8-a533-4bae-b8d0-afe0e7db3441",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "25754c48-7a3d-48fe-8832-5f6ed0e51bbb",
          "status": "Created",
          "code": 201,
          "responseTime": 335,
          "responseSize": 659
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "cccd15b5-d2fe-4c88-9900-c04a217f7a11",
        "cursor": {
          "ref": "f38b5bc1-acb2-45f3-be69-93fa68490557",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "68435d8b-831e-4310-9c17-5ee7d47c1203"
        },
        "item": {
          "id": "cccd15b5-d2fe-4c88-9900-c04a217f7a11",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "19aab9ea-75f0-4808-b91f-ef261024d5ae",
          "status": "Created",
          "code": 201,
          "responseTime": 349,
          "responseSize": 627
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "371d9dbd-af70-412c-90b0-895aa1923987",
        "cursor": {
          "ref": "86eaa403-4aba-4d7b-a15e-1497b3540d4f",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "ef6d7c7e-dac5-42cd-89d8-cbd4d3c8f2a6"
        },
        "item": {
          "id": "371d9dbd-af70-412c-90b0-895aa1923987",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "0485c27c-8fe4-476f-b055-fb537999c668",
          "status": "Created",
          "code": 201,
          "responseTime": 317,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d80f2e5-28ca-4380-b4b9-525564c2a735",
        "cursor": {
          "ref": "5f11135d-d9e3-414b-b444-f70e37fd4553",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "52017f11-2661-4aea-903b-58922158283e"
        },
        "item": {
          "id": "9d80f2e5-28ca-4380-b4b9-525564c2a735",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8baa084f-3b77-4e70-9800-438cbe3e1d2c",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "9d80f2e5-28ca-4380-b4b9-525564c2a735",
        "cursor": {
          "ref": "5f11135d-d9e3-414b-b444-f70e37fd4553",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "52017f11-2661-4aea-903b-58922158283e"
        },
        "item": {
          "id": "9d80f2e5-28ca-4380-b4b9-525564c2a735",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8baa084f-3b77-4e70-9800-438cbe3e1d2c",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "637f95ea-5aff-4db1-81cc-0458e73ecde1",
        "cursor": {
          "ref": "658ba208-2339-428d-84f9-4ba42dfd28df",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "88f5abc6-0103-46c4-8478-48fa37d6d8cb"
        },
        "item": {
          "id": "637f95ea-5aff-4db1-81cc-0458e73ecde1",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f5845649-4574-4091-b5ae-049ab2f4d685",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "24dd7cd7-780d-44da-ba3f-80e726a515a5",
        "cursor": {
          "ref": "a0194488-6334-4a31-959c-a453f462de7d",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "0e84fe19-c753-4c37-84dd-20eb33cd3704"
        },
        "item": {
          "id": "24dd7cd7-780d-44da-ba3f-80e726a515a5",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "4b20394c-97bf-4667-8818-198fc15f44fc",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "935a9b30-71c8-4e48-a64b-8bf7b5576b0f",
        "cursor": {
          "ref": "45f38224-4371-492a-8af1-56ef36bf20df",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "d34a3740-64cd-4c77-b99a-ac88c4f2628b"
        },
        "item": {
          "id": "935a9b30-71c8-4e48-a64b-8bf7b5576b0f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1d592eb9-810a-4c0e-8782-832b15d96c4f",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "a56d5a32-da0b-4541-8bd9-28766892865b",
        "cursor": {
          "ref": "0e7a1068-00f7-45a6-ba65-6fd94b88f08f",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "80f36b38-9ea2-495a-8caf-1a7dc3329145"
        },
        "item": {
          "id": "a56d5a32-da0b-4541-8bd9-28766892865b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5e8fb21f-9ad5-46e3-ba7c-07661b940ef7",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "e2b168da-adac-4898-bc03-e7aa5dcb73b5",
        "cursor": {
          "ref": "ff8b1936-810d-4df5-82b8-ddb1cbee89ce",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "5ea3ef6a-4875-4d34-bd56-79712719da0c"
        },
        "item": {
          "id": "e2b168da-adac-4898-bc03-e7aa5dcb73b5",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "aae40a01-67f1-4e69-9c1b-c8cc10b4eb9b",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "f4e9069b-a6a9-4c51-936c-db69780c2541",
        "cursor": {
          "ref": "91644c48-0c30-4377-a7d6-a6c99ff76449",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "6881cb3a-e234-4db0-a9c3-dcb1a674006d"
        },
        "item": {
          "id": "f4e9069b-a6a9-4c51-936c-db69780c2541",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d2c509af-719c-4546-b4bf-652562c4b24a",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "fc2b7665-44b8-4c63-8fe0-405b896b5a48",
        "cursor": {
          "ref": "204168b7-0453-4a28-8e60-90c718999748",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "75ba8b3c-088a-4693-9ad0-36c28acb8949"
        },
        "item": {
          "id": "fc2b7665-44b8-4c63-8fe0-405b896b5a48",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "442ff18e-d239-4b8e-9df7-a1526ed7f322",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "5b3f3b4a-b989-48fc-a1be-06c2f9a9a4be",
        "cursor": {
          "ref": "1a30a461-e027-4e49-88e7-418810725a18",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "0edbd78b-82f1-4e7c-921b-d49de8e27de9"
        },
        "item": {
          "id": "5b3f3b4a-b989-48fc-a1be-06c2f9a9a4be",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f10f75bc-97e7-469a-8b61-3493d46878c6",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "91305a1d-3b4d-4ec3-ad7c-969ef9fff04a",
        "cursor": {
          "ref": "fff245b7-fe34-49e9-bf50-aad75c58786f",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "3ff16de0-f714-4ae6-b964-8cde286c1f2d"
        },
        "item": {
          "id": "91305a1d-3b4d-4ec3-ad7c-969ef9fff04a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e187a70c-abf0-4319-b4cc-6b19b966b778",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "21b0426e-5376-4bad-9ba2-ec6b14e5c8de",
        "cursor": {
          "ref": "5812f867-63dc-4ecc-8e6e-f1ac7d5f9c7c",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "505b2069-722e-4a46-933a-e45f39156770"
        },
        "item": {
          "id": "21b0426e-5376-4bad-9ba2-ec6b14e5c8de",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a7fed008-8991-4955-8522-228d198e3618",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "c3479161-8f9c-44a0-a722-93738f3b2f02",
        "cursor": {
          "ref": "c9918ee1-89b6-4840-98b8-5de155465ae2",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "5d964a8f-9dc3-4828-9607-84554485edf9"
        },
        "item": {
          "id": "c3479161-8f9c-44a0-a722-93738f3b2f02",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "fb144ea3-5706-424a-9990-31a240c2063c",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "e62ccb7b-74ed-46af-9ec6-e436979d20be",
        "cursor": {
          "ref": "29324927-e16a-4948-8ef2-3429d3e7ec02",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "38687de1-ad67-4fbe-82e8-6b5dbc717e11"
        },
        "item": {
          "id": "e62ccb7b-74ed-46af-9ec6-e436979d20be",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "143cf431-a85c-431f-9864-da6926004e33",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "f625ca81-543d-4e3c-811f-8b188b66009f",
        "cursor": {
          "ref": "730c276a-cb05-4178-82e6-a779298e11e5",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "02cab3d5-9b89-447f-88d0-708fc26f050f"
        },
        "item": {
          "id": "f625ca81-543d-4e3c-811f-8b188b66009f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "cbe38d46-43e0-42d9-aac5-d6ebf3b582c9",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "d4eb33fe-97e9-4515-9bd7-e4343d436b41",
        "cursor": {
          "ref": "e0139887-4852-4f50-a052-1066781033c2",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "2a15597b-dd0d-465b-8b00-608189287f49"
        },
        "item": {
          "id": "d4eb33fe-97e9-4515-9bd7-e4343d436b41",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c86de4a3-8ac4-48a6-944c-7ffe35ef0d27",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "d1ba95c7-cbf1-4080-864c-84b2698e14b7",
        "cursor": {
          "ref": "a9c88d35-345c-4f08-b9ba-3315afc1fc57",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "5d2fbcd7-bbd4-4ac2-adbd-deaf30e3aebe"
        },
        "item": {
          "id": "d1ba95c7-cbf1-4080-864c-84b2698e14b7",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "bee94ecc-8d16-4670-94de-8483b1f3e465",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "a617b455-94b3-43a4-8cee-e112c7134cf5",
        "cursor": {
          "ref": "872b2bee-d2db-4d65-ba80-a347eaf5c323",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "ab99a78f-b939-43b9-bfc7-404ccd8d219c"
        },
        "item": {
          "id": "a617b455-94b3-43a4-8cee-e112c7134cf5",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "71e533c3-c029-4812-9832-affbd8514b21",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "567da645-b768-4558-94a2-70ab71946cda",
        "cursor": {
          "ref": "109a1883-e10c-48b0-8b7a-37c59a5142ff",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "f9dd9589-df04-4eae-909a-1d11108fa43c"
        },
        "item": {
          "id": "567da645-b768-4558-94a2-70ab71946cda",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "f58fe2ff-ca85-4472-a645-ab696c820983",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "4c77afd9-7a58-4b2e-9e96-3a8b0fb7fc60",
        "cursor": {
          "ref": "de0e61db-1fcd-4bba-b97c-2a578b7a15bd",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "3d7bde9b-1190-4092-8027-14763128220e"
        },
        "item": {
          "id": "4c77afd9-7a58-4b2e-9e96-3a8b0fb7fc60",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "fa7fd531-1664-4dbb-be1f-5aaf1e6caeb5",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "c8382d6e-b586-4d0e-af71-0b27725ec855",
        "cursor": {
          "ref": "55cd27b0-ba36-4342-86f3-d32c6a924b37",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "8817c050-de4c-490c-9423-ba4a8eca818b"
        },
        "item": {
          "id": "c8382d6e-b586-4d0e-af71-0b27725ec855",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e0dd5d1d-6aaf-4a92-9900-f04f6b7ec3dc",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "c14f48b2-1db5-46e8-859c-6ebb48d004ed",
        "cursor": {
          "ref": "ccc01f5e-5c94-4e4a-a065-503f314f55da",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "a2429d75-ec48-48ed-8b0c-f03b10251183"
        },
        "item": {
          "id": "c14f48b2-1db5-46e8-859c-6ebb48d004ed",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "92c31822-0aa5-4e70-b8a5-d3cf95fe4ca4",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "02681d57-b286-4452-b427-180bdac657a2",
        "cursor": {
          "ref": "08c37d26-9119-4a80-9109-c79c7736ff9f",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "8c860615-3339-4fd4-aaab-08626adcab4e"
        },
        "item": {
          "id": "02681d57-b286-4452-b427-180bdac657a2",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c2a7d8b8-a14e-404e-bfd2-0dd815e5dffd",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "818409e8-7794-4940-a389-0a8c66021fce",
        "cursor": {
          "ref": "63a5f2b5-57da-46f9-9cc5-a8fd88ea2f3e",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "2c9656c5-0ba5-4d09-ace7-2e1bbfbe85c5"
        },
        "item": {
          "id": "818409e8-7794-4940-a389-0a8c66021fce",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a1f370d8-e5a4-4b5b-a8a8-509b669ed54e",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "c98fd5e4-017a-4cf4-abc1-132a8572687d",
        "cursor": {
          "ref": "83977f3b-2057-4c6f-92ce-2077021e1971",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "212f2bac-87ad-4d5f-ac65-fd6e02240111"
        },
        "item": {
          "id": "c98fd5e4-017a-4cf4-abc1-132a8572687d",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "3cb32d9b-dd7d-4e10-b746-2c9820518914",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "a8b02bf1-cff3-4ae0-af4b-1bd09cb29b51",
        "cursor": {
          "ref": "ee255371-0a42-4f02-8abe-4702287070c7",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "12bba290-fc9f-458d-93a8-2ffa0297ed59"
        },
        "item": {
          "id": "a8b02bf1-cff3-4ae0-af4b-1bd09cb29b51",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "83c0c630-0767-41b7-8b80-c1896c989492",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "0057ad20-4159-48a3-a5e3-675f1bc2be90",
        "cursor": {
          "ref": "76f98a46-8d93-4ab9-9670-ba7bf6e6619a",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "4a62c750-7af6-43f4-8133-b57378cd9852"
        },
        "item": {
          "id": "0057ad20-4159-48a3-a5e3-675f1bc2be90",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "62e91be7-7f18-4d43-84b9-215b4759d10f",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "9a231b9d-7fed-4632-be1e-be104838e2e6",
        "cursor": {
          "ref": "73226a50-0ecf-4727-8f4a-b33c4212c3cf",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "90be868e-7e63-4059-b750-3a29ebadf379"
        },
        "item": {
          "id": "9a231b9d-7fed-4632-be1e-be104838e2e6",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c3c1bd00-aa7b-44ec-ac41-779bbce2d642",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "84f6f708-386c-4b4e-be2e-587d73dc9964",
        "cursor": {
          "ref": "d79138c4-53fe-4fa1-9415-1d87add002c2",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "9f79c576-53db-493d-9477-3213d069d257"
        },
        "item": {
          "id": "84f6f708-386c-4b4e-be2e-587d73dc9964",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "dea86531-12e2-4385-8f41-a9088585f0e0",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "fb675cd6-ec11-4038-9c31-69959c4a167e",
        "cursor": {
          "ref": "4aa72e36-7fe6-465d-bbc7-4bf740d94c0d",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "85bbb0d1-4fb7-4dad-8dee-fddac73bda2d"
        },
        "item": {
          "id": "fb675cd6-ec11-4038-9c31-69959c4a167e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "485f9709-3ba6-44e6-afba-2114ebd2b542",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "3a34a70f-35d1-4921-93f2-efba5753b6c0",
        "cursor": {
          "ref": "aed738ab-7aa3-46a0-863a-8244fcc3cb11",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "d1996960-b0cf-41e3-ba5b-a974f3b943b5"
        },
        "item": {
          "id": "3a34a70f-35d1-4921-93f2-efba5753b6c0",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "61c36e0d-d07a-4f16-ac80-9d30eb5aaadf",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "d0e2caed-6777-4e37-b363-0f52be7150d2",
        "cursor": {
          "ref": "35b17570-1932-447c-bbd4-bb31949f67be",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "827de1e1-503f-4e6c-933d-108135e2bde7"
        },
        "item": {
          "id": "d0e2caed-6777-4e37-b363-0f52be7150d2",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c1b8ff56-a656-4108-8290-24ffd66429c7",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "de779c0b-18a7-4613-b6b7-e3b9919a1cf6",
        "cursor": {
          "ref": "130f1dcb-62dd-41ed-9f42-96f8dc248820",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "4dca567c-e31b-4f3e-9510-53f114cab046"
        },
        "item": {
          "id": "de779c0b-18a7-4613-b6b7-e3b9919a1cf6",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "8f525548-5ba3-4158-8573-594ffe9e0a67",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "9af183ef-f539-4ec4-9842-37a9a535b202",
        "cursor": {
          "ref": "627a1a81-a021-43a3-bbb7-d324c242946b",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "96157673-8e88-4d2e-9582-7ef383eecdd0"
        },
        "item": {
          "id": "9af183ef-f539-4ec4-9842-37a9a535b202",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "244bb587-af73-4b34-9fa2-a24b0b35850c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28ac9f7f-04b1-4884-81c1-f5422a32f18f",
        "cursor": {
          "ref": "e77fa1a4-6276-4c83-8232-bb176cf45c1c",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "5c319777-31cf-4f42-8734-c712e772e0d9"
        },
        "item": {
          "id": "28ac9f7f-04b1-4884-81c1-f5422a32f18f",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "775936a6-3a26-4df6-b041-46cb62f20167",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 70,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0118120-ed10-4c8e-9075-191a4c785cea",
        "cursor": {
          "ref": "8133bd89-b8a7-4127-bd6d-ef7076e70491",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ceda7a08-8638-4f01-8583-eeea41ee8f53"
        },
        "item": {
          "id": "d0118120-ed10-4c8e-9075-191a4c785cea",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "32db86e4-0637-44d7-9223-0d9c01b7248a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0118120-ed10-4c8e-9075-191a4c785cea",
        "cursor": {
          "ref": "8133bd89-b8a7-4127-bd6d-ef7076e70491",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ceda7a08-8638-4f01-8583-eeea41ee8f53"
        },
        "item": {
          "id": "d0118120-ed10-4c8e-9075-191a4c785cea",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "32db86e4-0637-44d7-9223-0d9c01b7248a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c621cea-9455-427c-a04b-f79475e84469",
        "cursor": {
          "ref": "1f09322f-f88d-4e75-a302-3f8b7824cd2a",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "1fa950e2-84eb-4f6b-94f3-f5193aa8f254"
        },
        "item": {
          "id": "9c621cea-9455-427c-a04b-f79475e84469",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "75b276dc-dc04-40a7-b41f-7621aec8f072",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bed64fc-fb63-4d24-b530-e4970a2e53ac",
        "cursor": {
          "ref": "3401ce88-f2c5-4250-a614-b3613d805fda",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "695cbca1-49cd-42c9-a42f-355bc33c1799"
        },
        "item": {
          "id": "5bed64fc-fb63-4d24-b530-e4970a2e53ac",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "ad0383bf-73a6-44ad-9de9-94d4928e3070",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "851648d0-67dc-4410-a8d9-9c76dbeeebef",
        "cursor": {
          "ref": "73ee1425-af26-4798-ae62-6a7752d79c4c",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "7028f3a1-a518-469a-8b4a-a89fb26e6949"
        },
        "item": {
          "id": "851648d0-67dc-4410-a8d9-9c76dbeeebef",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "cf14d1b0-f5fb-45f3-b512-7ca706a1296c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07e1cc59-52e6-4909-9f90-4c65617539cf",
        "cursor": {
          "ref": "dc5ecde7-4da0-42b8-af55-1e4160ee0101",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "582f7fe8-528c-4a47-866e-14bd818800ae"
        },
        "item": {
          "id": "07e1cc59-52e6-4909-9f90-4c65617539cf",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "d53e9a40-418f-44b9-bb6f-ef02f6917121",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17988974-08b5-4bbc-ba65-c3d83859b51e",
        "cursor": {
          "ref": "1389faae-9595-4bb4-891c-7054fde85a15",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "1d576766-2b1a-4e6a-8f4a-5e48048e7b33"
        },
        "item": {
          "id": "17988974-08b5-4bbc-ba65-c3d83859b51e",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "39d3c157-6222-4100-8d27-14500a039355",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cb2c391-9ffc-4afc-8d76-3a0e187bb358",
        "cursor": {
          "ref": "09e2ff16-71e0-478d-97a0-a5c7498a2cc2",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "5cfbd5aa-e2a4-40e7-b626-cc7af7ca4982"
        },
        "item": {
          "id": "4cb2c391-9ffc-4afc-8d76-3a0e187bb358",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "1724c1b0-d57c-454a-be69-92ec5928c724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 630,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9764a40-9213-418e-94ad-7f62ade32052",
        "cursor": {
          "ref": "df4e9f91-167b-4270-a89d-d2df5cbb2d0f",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "b5c8403e-b9c8-4568-8425-81f12d3ebef1"
        },
        "item": {
          "id": "c9764a40-9213-418e-94ad-7f62ade32052",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "458f6231-ad42-41f4-af03-113b0a0fc3a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b985e9a9-d0eb-4220-96eb-9fdf2940d7df",
        "cursor": {
          "ref": "784e92e2-003d-4f4f-b373-2e6bf46eb698",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "c96ea0a3-00f0-4dd9-a186-f6cfb5e717b7"
        },
        "item": {
          "id": "b985e9a9-d0eb-4220-96eb-9fdf2940d7df",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "ec6a7ff0-1e15-49ce-b4c7-150675e79246",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f755f71a-4e4d-4fbb-9e2d-6dc6fb1fda75",
        "cursor": {
          "ref": "803e3555-4595-4afd-a443-12d9b4951467",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "782bd7d2-f65d-4db1-8dc2-37e572e66c4a"
        },
        "item": {
          "id": "f755f71a-4e4d-4fbb-9e2d-6dc6fb1fda75",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "b365e072-89cb-4dd7-a181-9417ef45e032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07ebfab1-0f9c-4a0a-aaf5-f22ca6647dca",
        "cursor": {
          "ref": "7ee1da69-97b3-4893-85f7-12f4e12ee531",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "6685f94a-d29c-44d8-8991-8f2e7398d804"
        },
        "item": {
          "id": "07ebfab1-0f9c-4a0a-aaf5-f22ca6647dca",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "dc6a5bc5-a5ca-4d23-b310-7bf6d49671d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ef16615-4ecf-431e-ae1f-007034f47775",
        "cursor": {
          "ref": "fef9f3be-a7eb-4131-b8c8-2d78be7a5083",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "7bbb9c1f-14df-4eac-8e8d-84386d3d75be"
        },
        "item": {
          "id": "4ef16615-4ecf-431e-ae1f-007034f47775",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "1ccdbf19-3448-42e7-8c88-14a1e8a3b5b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68cfd3bd-02fc-4ce8-83c3-aaec2665c730",
        "cursor": {
          "ref": "ff79d468-efa0-491f-ac2a-c822ba9c0db1",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "3ee41600-610d-4a81-83f8-6390fa37768e"
        },
        "item": {
          "id": "68cfd3bd-02fc-4ce8-83c3-aaec2665c730",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "a37d62f9-3487-4f5c-ae30-86d48db5eeea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f00e699-3e48-4ce4-a876-5e0569808bac",
        "cursor": {
          "ref": "b207c548-22b6-46c2-802a-2c609ac9db6f",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "46c5fc12-dc72-4aed-88b6-9001bea7610d"
        },
        "item": {
          "id": "8f00e699-3e48-4ce4-a876-5e0569808bac",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "5677ccae-a6b9-4f21-b5bc-0d8e7e5c2656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8b2af49-8358-4e44-a191-6a581a505def",
        "cursor": {
          "ref": "03b7e195-9ee4-483b-a351-d68318000f3b",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "a1610924-874e-4880-ba06-360ad322bcd6"
        },
        "item": {
          "id": "d8b2af49-8358-4e44-a191-6a581a505def",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "d8ab4787-462d-4068-bd47-b8f5f971d93d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48bf8088-e997-48d3-8eed-16738844b2ba",
        "cursor": {
          "ref": "e26bd09d-dabe-4a78-85f3-bb714947c61e",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "47633c2d-f184-4c65-863a-16e21c157c57"
        },
        "item": {
          "id": "48bf8088-e997-48d3-8eed-16738844b2ba",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f329ed58-be9b-4b58-8d01-ebde2079314f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35f14cab-786a-4ec6-8ae5-85a4c6bb63f1",
        "cursor": {
          "ref": "a688ad2f-cee9-4fb3-87b4-333610c66ec8",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "4755442c-d0b3-4118-a211-b060247275a4"
        },
        "item": {
          "id": "35f14cab-786a-4ec6-8ae5-85a4c6bb63f1",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "9b28d4af-f3d2-4a9b-b047-aa0726508ae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc484dfb-2cb2-4cb2-a697-dd34f4f5fcf3",
        "cursor": {
          "ref": "57a96edd-f50b-4602-8279-5ca0abd50472",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "6a0c300f-d540-4cfa-af49-3af8b3e1e9d3"
        },
        "item": {
          "id": "bc484dfb-2cb2-4cb2-a697-dd34f4f5fcf3",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "d3ce841c-18b9-4d01-ac27-9b703adbf2ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 334,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36b590c3-5169-4c33-bb30-9408ff6c94b1",
        "cursor": {
          "ref": "d8dff2a1-b052-4485-961c-3b210d3db2b4",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "fe9acdec-e4cc-4759-99b7-87f04894eaea"
        },
        "item": {
          "id": "36b590c3-5169-4c33-bb30-9408ff6c94b1",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "6238bb56-092d-4e1c-b04e-cd62f607089c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 226,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97c4b6b6-35a2-4689-b9f8-1a46fb834724",
        "cursor": {
          "ref": "2478f21a-7682-40d1-a667-2646ceb51bdb",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "c5617917-dc68-440c-92aa-ffec2041ab66"
        },
        "item": {
          "id": "97c4b6b6-35a2-4689-b9f8-1a46fb834724",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "6d188ecd-8de3-4e75-8c1d-a526976a339c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 221,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53299070-c6cc-4bfd-b54c-577f2417690e",
        "cursor": {
          "ref": "06fd7817-0565-48f4-8050-efc1c9e97506",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "0beb59f0-32a2-46fc-87e8-84158c37f1c7"
        },
        "item": {
          "id": "53299070-c6cc-4bfd-b54c-577f2417690e",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "b406f899-73ed-4907-b05a-3b4e337b3d4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 229,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4534a01-f144-485e-9141-649e6bc0cab7",
        "cursor": {
          "ref": "d458c615-efca-4f6e-9825-cb86dc144c9c",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "9a860fa1-c9c8-428d-bf9d-6d2254bb2c35"
        },
        "item": {
          "id": "a4534a01-f144-485e-9141-649e6bc0cab7",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "54ccc8fd-8c11-4604-9577-5b2a15a085d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 227,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37d3387e-444f-4e6b-a654-9ac31a5ae421",
        "cursor": {
          "ref": "f4372f63-0e78-4b7a-acaf-ab5fb0047415",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "84723c9c-2974-4468-ba4b-abab97c82e5f"
        },
        "item": {
          "id": "37d3387e-444f-4e6b-a654-9ac31a5ae421",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "ba848376-cc88-420f-9aaa-9b2412e09b00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 224,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "590c9f53-b42d-491a-af1d-57c76cf54082",
        "cursor": {
          "ref": "9a3c5af4-5c83-4d8b-b81e-4e7f19cddae8",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "32eb73f5-1fb4-4a04-99d7-7fe334bc5dcc"
        },
        "item": {
          "id": "590c9f53-b42d-491a-af1d-57c76cf54082",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "99c61002-9c22-4481-9da5-240e3d9deb58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acf6c29a-6cce-4ed2-a81b-ba8bc1b974f9",
        "cursor": {
          "ref": "379afc6d-82a3-49aa-a06f-85111b0645ae",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "5a8a02ca-9521-4086-8792-009382d6b35d"
        },
        "item": {
          "id": "acf6c29a-6cce-4ed2-a81b-ba8bc1b974f9",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "c7efffff-4101-4ac2-83ab-5185707c1e46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7654a8f-eb5d-4f7b-98c7-5c697d434aca",
        "cursor": {
          "ref": "312ad447-4217-404d-a157-f5c08dcc4745",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "0b30623b-0821-49b9-aa6f-6544886bc36c"
        },
        "item": {
          "id": "e7654a8f-eb5d-4f7b-98c7-5c697d434aca",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "3dc2dd11-081f-424a-897a-76acc1bb4e91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 235,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62778677-4d04-4ff9-88e9-6e104afc16b9",
        "cursor": {
          "ref": "8efa43f3-2905-4fd3-8415-01b0cf29b698",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "586b40d2-0fe4-40e7-8dbe-7beee24db27a"
        },
        "item": {
          "id": "62778677-4d04-4ff9-88e9-6e104afc16b9",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "39cb6a8f-08b1-4ca8-a969-746baefaef01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf4321f6-c098-4313-90f8-c1dba68354f9",
        "cursor": {
          "ref": "0a77510f-b18d-49eb-9c94-0159a140ecbb",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e931ffd9-d642-453c-be34-a12eb5e5a4c2"
        },
        "item": {
          "id": "bf4321f6-c098-4313-90f8-c1dba68354f9",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "5da30ba2-9089-4ab7-992a-482f2c8493eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ccc152d-84a4-48fa-a793-e5addefd5078",
        "cursor": {
          "ref": "b75a2895-a989-4f3b-90b0-65573bee7c2c",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "457e7477-8719-49d1-a20b-a441061ec3a2"
        },
        "item": {
          "id": "3ccc152d-84a4-48fa-a793-e5addefd5078",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "c6dc7614-7f4d-4efd-bc82-904f38d99fe2",
          "status": "OK",
          "code": 200,
          "responseTime": 232,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "bc87bb36-6e6e-4ffa-863d-d56f8f14a182",
        "cursor": {
          "ref": "629b4992-408f-41c3-909b-2ff96456a839",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "49bb429b-2ccc-4507-9b11-e5b5967749d8"
        },
        "item": {
          "id": "bc87bb36-6e6e-4ffa-863d-d56f8f14a182",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "c3d178fa-2d8f-4cd7-9e33-2f1a597bb36d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fb71b66-883c-4a52-a2de-d2cca304054e",
        "cursor": {
          "ref": "b1fb3a7e-1347-421d-b88a-d786248951f8",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "1b731b76-c708-4305-9eed-933990aad0ae"
        },
        "item": {
          "id": "4fb71b66-883c-4a52-a2de-d2cca304054e",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b8bd3ac5-4569-4710-8a4e-6f886ff9e7fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66838814-e371-411f-a907-71f09bf80b05",
        "cursor": {
          "ref": "05febc28-9029-4e96-9cfb-312285021bf2",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "89a632b2-d671-4073-8fc0-ce1adade4286"
        },
        "item": {
          "id": "66838814-e371-411f-a907-71f09bf80b05",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "e2af1843-3e99-4da4-a946-0436b698fcb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97710485-4a1b-494b-a095-8449ca9e5a30",
        "cursor": {
          "ref": "bdbd2edb-7202-499a-bc8d-eb11d6c27668",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "24ef2dcd-8049-4503-bbe0-4bd3e1f914f4"
        },
        "item": {
          "id": "97710485-4a1b-494b-a095-8449ca9e5a30",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "51497544-f74c-471b-8f80-f8a982f6b1b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 225,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c095437-efbc-4a9b-90dc-48faa10a5355",
        "cursor": {
          "ref": "f3810696-96a8-4ddd-88b2-aded877387ae",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "2cf99d35-1082-40fe-8e1f-8b7bce8a9719"
        },
        "item": {
          "id": "7c095437-efbc-4a9b-90dc-48faa10a5355",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "353dd162-edd6-4a2c-95ff-775017d9e7e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d3eb434-40e2-46be-9360-44ebb4d45ddf",
        "cursor": {
          "ref": "218a2d4c-41cd-43f5-9657-7416ab5b668f",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "f9aaf02e-1541-41e1-901e-ed0dd4ccbf88"
        },
        "item": {
          "id": "9d3eb434-40e2-46be-9360-44ebb4d45ddf",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a2fead16-8c65-4459-8557-f96cf298e61c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 230,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fffd71e-e7d1-475b-be60-8a8b182d461c",
        "cursor": {
          "ref": "3a76eb3d-97b4-430b-b542-9fec469f5ee8",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "ab4d1fde-3ab5-4461-a450-cbe399cd7d51"
        },
        "item": {
          "id": "0fffd71e-e7d1-475b-be60-8a8b182d461c",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "37acf103-7227-4838-abcc-3de79ac9d8bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 223,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c1d2da7-1cf7-4831-8653-a2f256170bd1",
        "cursor": {
          "ref": "11d759d9-ee6a-48a9-b70f-aefdebcaa459",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "325a1515-eb63-489b-87bf-a054942082cd"
        },
        "item": {
          "id": "9c1d2da7-1cf7-4831-8653-a2f256170bd1",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "0a69a62c-e0c0-4916-83b4-ef7e56daf63a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 225,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "827d3882-e059-40b1-aa84-f8c4b18d7a11",
        "cursor": {
          "ref": "444691ec-fe50-420f-aaa2-0d5cd262da7f",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "829bb150-18ea-474e-a005-d5c691151e31"
        },
        "item": {
          "id": "827d3882-e059-40b1-aa84-f8c4b18d7a11",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "c0f80fca-397b-436f-89d3-333ded2465b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 229,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cd46ac5-d81f-4693-9667-295a7c65e549",
        "cursor": {
          "ref": "1b5bc583-eae4-42b5-a4f3-a406e79bc064",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "9ae083ce-ce23-46ca-bc7d-6f4bffc33624"
        },
        "item": {
          "id": "3cd46ac5-d81f-4693-9667-295a7c65e549",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "60a6abc4-d6f6-4d1a-b654-3716d811894e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b954bfa3-78e9-47d1-a71e-fc2a78920c34",
        "cursor": {
          "ref": "8e01dce5-fdae-4aab-b959-443a0ca00fa4",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "d0263408-e7f0-4f8e-bcf8-7f1db7f3ae93"
        },
        "item": {
          "id": "b954bfa3-78e9-47d1-a71e-fc2a78920c34",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "667cb559-795f-4a14-acfe-eb1a16a84b17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 247,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90312850-b0d8-4d9a-ac78-dfa11bec85ae",
        "cursor": {
          "ref": "59507bde-1e5e-470f-b9ff-f75d03148707",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "9a95bfaa-8c2e-406a-bd94-4f8e2330c57c"
        },
        "item": {
          "id": "90312850-b0d8-4d9a-ac78-dfa11bec85ae",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "555fd368-4991-45d9-a7df-ff63334afd00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 225,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "454657a2-354c-45d2-83da-87b8bb3f10d0",
        "cursor": {
          "ref": "0751f755-9256-4d51-bc56-e0d903e221e7",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "dac4c978-1cdd-45ee-ae3c-cd7d63f08fc6"
        },
        "item": {
          "id": "454657a2-354c-45d2-83da-87b8bb3f10d0",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ecc90ba0-8a15-40ca-9b60-fb0ea2d6e650",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b3e4ead-0775-4d29-953d-d261380e1371",
        "cursor": {
          "ref": "2b858d12-5e88-46c5-a136-1cd67b9f4278",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "109b72bb-8b06-40e6-981b-d1f65c97e79f"
        },
        "item": {
          "id": "7b3e4ead-0775-4d29-953d-d261380e1371",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "ec80e8a4-21db-4e06-9071-4443f32543bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 229,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b147bd1e-3d93-409e-9263-f1370c4ca46d",
        "cursor": {
          "ref": "9beb1932-ed74-4b68-a7db-c32fc83e500b",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "c7e46b28-86e4-442b-9b5f-69245c011d54"
        },
        "item": {
          "id": "b147bd1e-3d93-409e-9263-f1370c4ca46d",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "c29d834d-d46a-4fe3-826c-b7c9d4b92ac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 228,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d5a94c4-280c-4bfc-8ea9-3a2eab1bccd7",
        "cursor": {
          "ref": "5d83b87c-87e1-4fb2-9e4b-e416a7219144",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "3eefee19-f866-42e5-bbe2-135308d82d71"
        },
        "item": {
          "id": "0d5a94c4-280c-4bfc-8ea9-3a2eab1bccd7",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "287cd826-0dea-46de-845f-6c9f8d9fdaa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 232,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58f74c2e-b215-4bf4-b78f-f476c96b3ec3",
        "cursor": {
          "ref": "d5aa4539-4758-47ec-ac30-a2ea110d2cbd",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "ecc7f485-f068-4884-9b6b-cf36d6c3fb82"
        },
        "item": {
          "id": "58f74c2e-b215-4bf4-b78f-f476c96b3ec3",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "e993db94-0286-41bb-b5ab-2f8f77dccf57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 227,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffc554b2-6eb0-4960-93f4-2fc7ad123661",
        "cursor": {
          "ref": "c7d27a07-92f6-4de8-aa98-b9022aa7f856",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "fc90bd33-a7da-4c00-bb81-15f347a40710"
        },
        "item": {
          "id": "ffc554b2-6eb0-4960-93f4-2fc7ad123661",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "9f4b5bcb-44f2-4056-bf98-ae77dde447ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 233,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c9bf478-297d-4628-96d5-ca62d1975d91",
        "cursor": {
          "ref": "0dc8696f-9cfb-4b39-8657-710d51018e55",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "c70b3836-4d66-4e1a-aa07-81340bd7c6bc"
        },
        "item": {
          "id": "9c9bf478-297d-4628-96d5-ca62d1975d91",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "e1a83a4d-6792-4566-9c52-a03f0cb597a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 225,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d587bf6b-c140-4fe5-b988-7a6880c5a4a7",
        "cursor": {
          "ref": "af8c92f4-af0b-475e-83e4-89dd2df462b1",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "4c7a18df-f857-4a62-ae92-ae2cc6aaef82"
        },
        "item": {
          "id": "d587bf6b-c140-4fe5-b988-7a6880c5a4a7",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "b142eee2-bea9-4a13-bc86-e0688b1f3dae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 232,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec79f86c-1efa-44bd-84fc-9c0dce9df0aa",
        "cursor": {
          "ref": "e52d845b-4bdb-4e59-9a09-6e7d86aa57e7",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "1d2256c1-add5-42ca-8bc0-c6125b7660c1"
        },
        "item": {
          "id": "ec79f86c-1efa-44bd-84fc-9c0dce9df0aa",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "febd06e0-9d8a-433a-9f1f-ea45eff4d699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 241,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef495489-e0ca-4363-a7b4-bc0d6acc8fd2",
        "cursor": {
          "ref": "9e23bba0-4783-4f6d-bed8-998e6ce4a1a4",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "c9f70b99-2442-4323-8a6a-45327326c81a"
        },
        "item": {
          "id": "ef495489-e0ca-4363-a7b4-bc0d6acc8fd2",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "67509f34-8d78-41f6-8a85-1547371fcecb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 247,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5426456c-e893-4586-a612-842805d93cfa",
        "cursor": {
          "ref": "2dc125fb-bd3c-42ad-8e2f-aa075e58bee4",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "0674b765-2155-4ba1-b8be-f5a8e26ce4a3"
        },
        "item": {
          "id": "5426456c-e893-4586-a612-842805d93cfa",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "f95a2f7e-c274-474a-9a90-9a774956daa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 228,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16e41cea-fa3b-4aa8-9657-a1a65c9b1fcc",
        "cursor": {
          "ref": "3383ca1c-7879-431c-bed2-ca9a9e51b2da",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "254664e2-6c22-4837-b21d-a3b162cb8017"
        },
        "item": {
          "id": "16e41cea-fa3b-4aa8-9657-a1a65c9b1fcc",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "3f2172d9-9811-4571-af0d-c8d9a4c941c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 223,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8df2c6f8-4abf-4670-8e0b-57a8c5a5ff0d",
        "cursor": {
          "ref": "88f9e580-7618-431d-bc7a-03f0044538aa",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "473cb24b-95b7-4b19-998e-66c37bf6493d"
        },
        "item": {
          "id": "8df2c6f8-4abf-4670-8e0b-57a8c5a5ff0d",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "44c1884a-d226-4c82-b0cf-d85890b4131f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "582b846a-ad66-4ca0-94af-dc5335b7d6ea",
        "cursor": {
          "ref": "90823c2c-5bf0-4cc4-966c-fe1f8b279fd3",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "9b0d3b6c-951a-4626-b018-c09ba8b7f2d8"
        },
        "item": {
          "id": "582b846a-ad66-4ca0-94af-dc5335b7d6ea",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "caef0eae-8a76-4e31-b029-437796ed43de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04626249-caac-4f0f-9c55-e631954f8c6f",
        "cursor": {
          "ref": "65c87e7e-dcfe-4062-b03e-8a9c775120a5",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "ee90ca54-6424-41ad-bcca-a6613d988c6b"
        },
        "item": {
          "id": "04626249-caac-4f0f-9c55-e631954f8c6f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f816e30b-d02a-4ec8-be63-4c56105ffddd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b86e8319-034a-4468-86f3-94bda8f8179d",
        "cursor": {
          "ref": "88df970a-cd0c-4996-b702-93397bba3a17",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "edf266c2-5704-4af5-a747-690d96aac558"
        },
        "item": {
          "id": "b86e8319-034a-4468-86f3-94bda8f8179d",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "567e9a1b-5009-4dbc-a295-593e28523f22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 248,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7f2dc73-986f-4957-ab64-61ea3b43dbe9",
        "cursor": {
          "ref": "48a0f09f-cbb1-4120-a179-8534fa1605fe",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "8d1fcffb-f431-4086-b007-8f611bc0c49b"
        },
        "item": {
          "id": "b7f2dc73-986f-4957-ab64-61ea3b43dbe9",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "40ffb65b-735f-41a7-af4e-75ea8b5fd4cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "416e7c3a-3eb6-484a-a208-3b7ebf51e47a",
        "cursor": {
          "ref": "3745b446-2c32-4dfc-a84a-24b534e0a9a7",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "8d55f817-5646-4ca3-a8ee-479c6df9bf0c"
        },
        "item": {
          "id": "416e7c3a-3eb6-484a-a208-3b7ebf51e47a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "78675e7c-378a-42f0-a300-e61c33ed858e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aa8964c-3818-44a5-858d-6c4d542522f1",
        "cursor": {
          "ref": "f13d844a-d8ba-4fc9-9fb3-3474dc22b667",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "9508a182-e633-46dc-8ac4-34259aa16624"
        },
        "item": {
          "id": "4aa8964c-3818-44a5-858d-6c4d542522f1",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "f599a6b1-4db4-48e5-90a1-fd6a76c8311c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 233,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c918bb60-7acb-4c33-b1b0-58ad6288972e",
        "cursor": {
          "ref": "a7b27e44-0080-406e-9e88-31a5db5c47a6",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "76e87b0f-6c09-4225-a0c0-882b3d91429c"
        },
        "item": {
          "id": "c918bb60-7acb-4c33-b1b0-58ad6288972e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "9ea8ee12-c436-4d08-961d-9d09f3bf1d59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee975b18-c5e5-4a0c-8e24-8e9fe752fcda",
        "cursor": {
          "ref": "4c1e7a81-dc61-4fdb-a7a3-9d531af5c04a",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "ba403f22-ff92-412a-b9e9-655d10589a34"
        },
        "item": {
          "id": "ee975b18-c5e5-4a0c-8e24-8e9fe752fcda",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "22352a9e-f48f-4676-8c77-576774b6d7b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 351,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87b9da51-d76e-4b72-9fa9-c96171cd9e28",
        "cursor": {
          "ref": "42c5eea4-0ac3-4437-81c2-0f20b93a99f3",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "f3f15692-afe6-45be-9397-9785ccf448f1"
        },
        "item": {
          "id": "87b9da51-d76e-4b72-9fa9-c96171cd9e28",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "1ea49167-0139-4cf2-8f65-a6ec9abaf53f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "472e41a3-d2ad-48a4-8d17-322b151415d0",
        "cursor": {
          "ref": "df09f21c-b7dd-4593-9454-b916acdd7eab",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "4e874017-4855-4c22-b6b7-fb11bb5440c5"
        },
        "item": {
          "id": "472e41a3-d2ad-48a4-8d17-322b151415d0",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "ac1ad1a7-f771-49db-ad42-a354be1ceb45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f7df584-c6ff-42ff-9210-16edbaf049c9",
        "cursor": {
          "ref": "c9f6ee3a-ee13-4a61-8249-c7cfc615ea68",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "e09d7bdd-68fa-4184-b2ec-5f4df9731dff"
        },
        "item": {
          "id": "0f7df584-c6ff-42ff-9210-16edbaf049c9",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "d6356b28-8328-4735-9035-5969eb2d48c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ec6c2ab-d454-4e07-a233-2a627e95635a",
        "cursor": {
          "ref": "21cab608-6f00-4ba9-bce8-0f114966bc59",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "8092ff5a-308e-4acb-ae5d-53449898bb26"
        },
        "item": {
          "id": "5ec6c2ab-d454-4e07-a233-2a627e95635a",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "5d0328da-615d-4522-bb19-d13216ae1786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f03c4eb-6560-4bf0-9e16-4ad1d661ed84",
        "cursor": {
          "ref": "f7d4fcd3-c711-422f-a4b3-870090fad1ea",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "b4dc6b34-82a3-4435-832f-8a336fd1c96c"
        },
        "item": {
          "id": "5f03c4eb-6560-4bf0-9e16-4ad1d661ed84",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "1993517e-616e-45b2-8d53-81358bda1da0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33831163-2fad-4db0-9671-9354c522d161",
        "cursor": {
          "ref": "d0021855-5a78-4196-9b80-a311724b2429",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "bd2d2d14-13a5-4736-9e38-005e80c355d4"
        },
        "item": {
          "id": "33831163-2fad-4db0-9671-9354c522d161",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "2e6583f6-2a99-47d2-abba-7545e43b7271",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8837454-1bee-4141-be0c-c7f1a75fb6d5",
        "cursor": {
          "ref": "8ce30e2e-428d-4f12-b090-b8532aae4fa4",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "f4972349-ac4f-49c9-ad4e-444d83906990"
        },
        "item": {
          "id": "f8837454-1bee-4141-be0c-c7f1a75fb6d5",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "69496dbc-5fc2-4a65-8963-22939b74a5b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5990fd1-6c80-416a-9197-09c44ed2883b",
        "cursor": {
          "ref": "fe9d5fcb-de1b-420c-b519-46949ac6fd77",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "35200828-c274-44da-bf97-393be45d857b"
        },
        "item": {
          "id": "c5990fd1-6c80-416a-9197-09c44ed2883b",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "3f308fa8-549c-4c24-9cac-ad12e82c13d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46220352-b455-41e4-9cf2-2f5770ec5a1a",
        "cursor": {
          "ref": "87326bf3-71ff-41b1-8254-6e79087276a0",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "a527ff1b-6fc4-406b-aa25-926a7783c922"
        },
        "item": {
          "id": "46220352-b455-41e4-9cf2-2f5770ec5a1a",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "f3e28d28-f58c-41f5-9892-9b98774c4327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8437e124-cd8a-4918-b4ef-be0781eb586c",
        "cursor": {
          "ref": "7c84ba16-3377-4dfc-85b7-324c89e8affe",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "d96984ca-6e9b-453d-b838-0d8b4a0ff7bf"
        },
        "item": {
          "id": "8437e124-cd8a-4918-b4ef-be0781eb586c",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "e441df82-26d9-4ae0-8bc8-aa5a2d19c21a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3d26e6e-04ab-4acf-b964-53d54f831e75",
        "cursor": {
          "ref": "f4c59ba5-9381-44bd-a024-c61cd733b094",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "5b4f0d5a-7795-4e9a-9c2e-4b6a1154b47d"
        },
        "item": {
          "id": "f3d26e6e-04ab-4acf-b964-53d54f831e75",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "20891dc3-76e7-410a-ab59-4a2ff669e267",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dc6aae8-e48d-4ff4-9aa9-8b35e65cf37c",
        "cursor": {
          "ref": "656885c5-cef9-4ccc-9ea0-fe6bf6f9c0e2",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "b9fd3c19-ab71-44a2-9316-539c0351cacf"
        },
        "item": {
          "id": "5dc6aae8-e48d-4ff4-9aa9-8b35e65cf37c",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "3f6bd792-27db-4373-941e-e631e9c04479",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf855f68-6b67-4286-9af9-ed41d8941ffc",
        "cursor": {
          "ref": "f5180474-50d5-46bf-8821-6c8da53c6cf5",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "5aab483d-f885-455d-938b-2bc993cad834"
        },
        "item": {
          "id": "bf855f68-6b67-4286-9af9-ed41d8941ffc",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "5cd17c02-cf59-4b8f-95aa-e7d55c47cc4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4454fca5-9351-4bec-aa65-b08d27d6e32b",
        "cursor": {
          "ref": "14dcd7c1-65cd-4f5c-a774-2c6dd4895ca1",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "25c9b32f-c069-4046-b070-02e5974bae90"
        },
        "item": {
          "id": "4454fca5-9351-4bec-aa65-b08d27d6e32b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "a22839f6-fb95-45c3-99c8-15dbba9aa37c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f31385bf-9365-4f58-887f-b4520d8a6770",
        "cursor": {
          "ref": "16e6240f-bc44-4813-9c7f-e6e901030d01",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "eb280af9-9b91-4caf-88a8-93eb84ef545b"
        },
        "item": {
          "id": "f31385bf-9365-4f58-887f-b4520d8a6770",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "da3530ae-ed9a-4726-90e3-572d88bbfb6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6778990f-ec08-40e1-8d41-4bceb7916d2a",
        "cursor": {
          "ref": "d8145311-065a-48a4-9f68-6ef84cba54f5",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "117a5851-aa40-448c-ad91-b4736c00af6d"
        },
        "item": {
          "id": "6778990f-ec08-40e1-8d41-4bceb7916d2a",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "db4995e9-bd19-4fb0-9b5b-955c30fd013b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02862ce9-daa9-4ff9-a7fd-49105e175f08",
        "cursor": {
          "ref": "b8c554b3-48e9-497e-b1de-cddd6ad2d585",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "606abff1-85ad-4c5e-8eca-4c5c9dda387d"
        },
        "item": {
          "id": "02862ce9-daa9-4ff9-a7fd-49105e175f08",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "7a09c9b7-8563-406a-9cab-11f737927e01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec62d157-9bd9-43d3-9459-1c9446a4fa5b",
        "cursor": {
          "ref": "251a4eb3-2fdd-4415-b773-a43a1166a032",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "e2f6e75f-6263-4a9c-bb55-d8188f5c73ea"
        },
        "item": {
          "id": "ec62d157-9bd9-43d3-9459-1c9446a4fa5b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "ba380b21-1309-4d5d-b541-760c1b7455e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae44da61-797e-45ae-8255-bfebc99e16c6",
        "cursor": {
          "ref": "1fde79ae-b293-4d47-92c0-12bb8dea05b6",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "56df9df1-818d-49be-ac3d-3283bd79d3ae"
        },
        "item": {
          "id": "ae44da61-797e-45ae-8255-bfebc99e16c6",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "59b82904-8f92-46d7-8a2c-78e5bd4e0bb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb491b6f-89a4-4885-9c8f-2e976644dcda",
        "cursor": {
          "ref": "12f7e711-7d1b-48a1-b905-a133394d7f48",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "e3f09d3e-4621-4e48-9cd6-6e20f5fd721f"
        },
        "item": {
          "id": "cb491b6f-89a4-4885-9c8f-2e976644dcda",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "f8dcce6c-b7e2-408d-a556-fdcc3282625a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e7791a2-d116-4103-a94e-e33774864a82",
        "cursor": {
          "ref": "cb71d006-0e85-43b8-9e00-922ce99823e5",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "eed5914c-9718-418b-9fe8-6624dd8d0132"
        },
        "item": {
          "id": "6e7791a2-d116-4103-a94e-e33774864a82",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "db891aa3-4f81-4d62-88f4-8f951dd6f902",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a683019-54da-405e-aa7a-6d3936628ce2",
        "cursor": {
          "ref": "04a50d09-f0c1-45dd-81fe-f95e0b307c93",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "5be41397-22b5-4ccb-8d5a-ae972462fda5"
        },
        "item": {
          "id": "8a683019-54da-405e-aa7a-6d3936628ce2",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "aeb8a036-f237-468b-8b11-bf301143268f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "010ba6de-1233-4bf2-a2cf-c4389e72f248",
        "cursor": {
          "ref": "725cd9ad-1c05-4957-8663-4c5503bf370d",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "41f82378-71af-4c66-bd14-2f3f1080f17c"
        },
        "item": {
          "id": "010ba6de-1233-4bf2-a2cf-c4389e72f248",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "1ce96f07-ecb9-48a9-b1c9-dd9329ebdf80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d089ea38-e741-4ac4-9b65-00f94f585562",
        "cursor": {
          "ref": "f2a961b2-0d6c-494c-8e90-0f2559f9b5b8",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "5df4b876-74f3-4509-9041-be97570d310f"
        },
        "item": {
          "id": "d089ea38-e741-4ac4-9b65-00f94f585562",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "b13ad7f0-8f85-4994-ba33-7d329a556001",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02d1c696-a380-4cd0-b618-9a521959f7fa",
        "cursor": {
          "ref": "a8eb9c61-eb19-4a9d-afc0-09b65d329fbc",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "e3cace3b-2dfe-485e-bf78-624c6f40525d"
        },
        "item": {
          "id": "02d1c696-a380-4cd0-b618-9a521959f7fa",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "0dcd2004-a83d-4e1a-b09f-50307e7c6fd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3631657c-5d4b-45a1-a969-2431247a01b7",
        "cursor": {
          "ref": "69990922-c65c-45a3-bacc-a2c694c8fd58",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "589b9758-a9cf-437c-b634-f6ed5dbce5d5"
        },
        "item": {
          "id": "3631657c-5d4b-45a1-a969-2431247a01b7",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "7b4bd88b-d030-48c0-995c-c0c11df2eb94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a176c0a3-72ce-446a-a32c-caf90e4924aa",
        "cursor": {
          "ref": "eff41f6c-b1ef-470d-8f8c-bb6ce6a9cc02",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "f87682f4-0b9c-4dab-af1a-47a25b92f023"
        },
        "item": {
          "id": "a176c0a3-72ce-446a-a32c-caf90e4924aa",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "4f112082-0454-4a52-abb5-d11270c8a882",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "450cbe83-088e-42e9-a32c-0de2659ea284",
        "cursor": {
          "ref": "5d5dfb00-3167-4c8b-a830-782fa38aab81",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "8da17870-a6a6-4cd3-9630-fdb2e52d97f2"
        },
        "item": {
          "id": "450cbe83-088e-42e9-a32c-0de2659ea284",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "4e1e0073-dcc3-4a84-9681-dd9c106db971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9ebcf84-16e2-418d-8e4a-84732a2bc5c0",
        "cursor": {
          "ref": "958a4d28-0c8b-4617-836f-b4b838cd3a8e",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "df9ec1af-c881-4a06-918c-9d96725e39a5"
        },
        "item": {
          "id": "d9ebcf84-16e2-418d-8e4a-84732a2bc5c0",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "099f80cf-95a1-4189-bc37-a3fbae4dfec7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f33c4aa-0675-4e79-8322-81fb54121263",
        "cursor": {
          "ref": "e71deb30-28bf-4182-8b77-3a32f5210832",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "fbec9ff6-9d7a-4ac7-bbca-3a71fda08a36"
        },
        "item": {
          "id": "4f33c4aa-0675-4e79-8322-81fb54121263",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "d9e72b45-fe8f-4d80-8ba6-9254ca5884cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6c247a9-994a-4f58-aaab-b46cd13e0672",
        "cursor": {
          "ref": "b47d8839-679e-44fd-b1e4-a3860f1174c2",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "3ce4051f-8fde-4b13-81c1-ad7958c4159a"
        },
        "item": {
          "id": "f6c247a9-994a-4f58-aaab-b46cd13e0672",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "d8be71e9-0323-4dba-8e7a-84044511aa5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "849f65d0-ca8a-4942-ae58-4d8af3c56cab",
        "cursor": {
          "ref": "f618de84-3e69-48b2-aabb-7513c88984ad",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "4ca51c07-9af0-48a0-bd2c-bb121b9ca7b9"
        },
        "item": {
          "id": "849f65d0-ca8a-4942-ae58-4d8af3c56cab",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "27874779-6edb-43ad-b76b-b6d44a9d2797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "363a9cd0-4641-4355-a76d-63d6d11ab12a",
        "cursor": {
          "ref": "56aa775f-6991-4104-b348-9f0586457068",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "a2077ce1-8dcc-4906-af96-aebef5b4d989"
        },
        "item": {
          "id": "363a9cd0-4641-4355-a76d-63d6d11ab12a",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "b3245c93-ff5a-47ca-a266-520b506e10b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d519d5b-fc0e-46ca-95c7-02c41d58c756",
        "cursor": {
          "ref": "38e311ee-8056-4f97-8b1e-a13fbd9904b9",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "2c87c7e0-4306-456d-9fab-02951f81094b"
        },
        "item": {
          "id": "0d519d5b-fc0e-46ca-95c7-02c41d58c756",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "05d32f2b-c0d0-44a6-ad96-701ba82ffc32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78bf073a-c2d9-4805-9973-97d69d3da48d",
        "cursor": {
          "ref": "fd0b18ae-1f24-40f5-abed-b1a735e0499b",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "e470f700-740b-4a64-91cd-219812ec078e"
        },
        "item": {
          "id": "78bf073a-c2d9-4805-9973-97d69d3da48d",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "26aae718-c9c0-42e6-8323-ab9811f03cd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35f1f125-ffdf-44f1-bedc-c08c0bf87b59",
        "cursor": {
          "ref": "61c60b55-1c25-4491-9207-890cbc532de3",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "09c57acb-a82e-4fa5-a009-570b9c01ff92"
        },
        "item": {
          "id": "35f1f125-ffdf-44f1-bedc-c08c0bf87b59",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "8eadb9d9-ba91-4b9d-ad28-6cb0be8a2371",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1286dee8-0ff4-47c4-81dd-443b252a72bd",
        "cursor": {
          "ref": "56c813cd-97d8-4175-aa52-dad2b296b04b",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "2b14a812-0478-4a64-a59b-77785e00223f"
        },
        "item": {
          "id": "1286dee8-0ff4-47c4-81dd-443b252a72bd",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "4b7601a9-7390-4b00-9815-dcdf5a8bffed",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 71,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0d09d3a-d416-402b-8d72-4383fa73f27c",
        "cursor": {
          "ref": "6958e50d-26c7-4c3b-9965-09923c8e8a90",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "e4289227-44b7-4829-994d-746f21ef67cb"
        },
        "item": {
          "id": "e0d09d3a-d416-402b-8d72-4383fa73f27c",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "f3e03e15-3a5d-4439-bb87-321fc95fad83",
          "status": "OK",
          "code": 200,
          "responseTime": 695,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "d18b442c-6ea7-4a55-a72e-8a74260e020c",
        "cursor": {
          "ref": "c49da951-9132-4ac9-943c-3694726bef39",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "4fe18726-8759-41e2-b8db-dac9d157cb8f"
        },
        "item": {
          "id": "d18b442c-6ea7-4a55-a72e-8a74260e020c",
          "name": "credentials_verify"
        },
        "response": {
          "id": "3143b169-23c7-4ec4-96fc-63f87124e78d",
          "status": "OK",
          "code": 200,
          "responseTime": 368,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cdfca7e-706b-4724-8c6b-fa14cdbefa5d",
        "cursor": {
          "ref": "23b9a7b6-7727-473d-9d13-acddd876576b",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "906f3780-2bd6-4a54-ac64-f23ed6789fde"
        },
        "item": {
          "id": "1cdfca7e-706b-4724-8c6b-fa14cdbefa5d",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "c0e0e824-b302-4be2-8191-26d47065b9c0",
          "status": "OK",
          "code": 200,
          "responseTime": 383,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6f5107b-3fed-4f80-b450-a05d35213af6",
        "cursor": {
          "ref": "4cee10da-c88e-488e-9f7b-9d840e3dd324",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "1e48783d-5c76-4908-b8b3-87fb9d7b716a"
        },
        "item": {
          "id": "c6f5107b-3fed-4f80-b450-a05d35213af6",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "aed797c3-d719-4f1c-b2a6-1bb03afc380b",
          "status": "OK",
          "code": 200,
          "responseTime": 372,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8c95d0a-c709-4a90-bd5b-d4ffa890e2f8",
        "cursor": {
          "ref": "04ea7cda-d321-4548-8faa-fe6da767595d",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "0aeb7dd4-55d2-4ebe-9a6b-bb812cff0d74"
        },
        "item": {
          "id": "d8c95d0a-c709-4a90-bd5b-d4ffa890e2f8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8bcc4768-1afa-42c1-9bc8-ffe156d29082",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8c95d0a-c709-4a90-bd5b-d4ffa890e2f8",
        "cursor": {
          "ref": "04ea7cda-d321-4548-8faa-fe6da767595d",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "0aeb7dd4-55d2-4ebe-9a6b-bb812cff0d74"
        },
        "item": {
          "id": "d8c95d0a-c709-4a90-bd5b-d4ffa890e2f8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8bcc4768-1afa-42c1-9bc8-ffe156d29082",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8c95d0a-c709-4a90-bd5b-d4ffa890e2f8",
        "cursor": {
          "ref": "04ea7cda-d321-4548-8faa-fe6da767595d",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "0aeb7dd4-55d2-4ebe-9a6b-bb812cff0d74"
        },
        "item": {
          "id": "d8c95d0a-c709-4a90-bd5b-d4ffa890e2f8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8bcc4768-1afa-42c1-9bc8-ffe156d29082",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8b6ee65-0044-4648-8c1f-d5bf800a6e1a",
        "cursor": {
          "ref": "147e10cf-6efc-4791-b638-a731ac1f1b58",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f71c0c96-e3bb-4f31-accc-dc01f3a93de1"
        },
        "item": {
          "id": "d8b6ee65-0044-4648-8c1f-d5bf800a6e1a",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "6614ccbe-e8a9-4347-90e4-422397945da3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 76,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2430b54a-4705-4dce-9ede-f26252c73d62",
        "cursor": {
          "ref": "3cf7634f-78fb-434f-bf14-a232f408362c",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "bd10df52-8a7a-46a6-808b-2ce39eb4ba84"
        },
        "item": {
          "id": "2430b54a-4705-4dce-9ede-f26252c73d62",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "482251c0-44b0-4a35-b125-8fa876596ee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "2430b54a-4705-4dce-9ede-f26252c73d62",
        "cursor": {
          "ref": "3cf7634f-78fb-434f-bf14-a232f408362c",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "bd10df52-8a7a-46a6-808b-2ce39eb4ba84"
        },
        "item": {
          "id": "2430b54a-4705-4dce-9ede-f26252c73d62",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "482251c0-44b0-4a35-b125-8fa876596ee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "3afb1af2-3227-48fb-ab58-8871129b0d88",
        "cursor": {
          "ref": "52209766-ec49-4556-8d7a-f1580955a47e",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "bb9afd40-842c-4e48-a953-9fcb692dbc52"
        },
        "item": {
          "id": "3afb1af2-3227-48fb-ab58-8871129b0d88",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "d20ae339-2df2-4565-a912-350cbe41333a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "a4374d40-fb8a-4315-9a02-ff141b4cc3de",
        "cursor": {
          "ref": "ebdb6db6-3d01-43af-b975-1c55c8285d9c",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "87a7ce02-59a8-440f-bd2b-180d69f654e9"
        },
        "item": {
          "id": "a4374d40-fb8a-4315-9a02-ff141b4cc3de",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "6991a261-07b0-451c-b09e-51367cc3fdcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "a4374d40-fb8a-4315-9a02-ff141b4cc3de",
        "cursor": {
          "ref": "ebdb6db6-3d01-43af-b975-1c55c8285d9c",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "87a7ce02-59a8-440f-bd2b-180d69f654e9"
        },
        "item": {
          "id": "a4374d40-fb8a-4315-9a02-ff141b4cc3de",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "6991a261-07b0-451c-b09e-51367cc3fdcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "276d9315-10ba-478a-bb5d-ec4f071ddc0f",
        "cursor": {
          "ref": "7e70280a-07ab-40f2-a7f3-e69bcb156693",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "47caf67e-fba0-4309-ae8d-6a40ec1798bc"
        },
        "item": {
          "id": "276d9315-10ba-478a-bb5d-ec4f071ddc0f",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "ffb7f18e-55b5-43b2-8cfb-f14215a7636d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}