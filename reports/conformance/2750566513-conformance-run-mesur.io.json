{
  "collection": {
    "info": {
      "_postman_id": "cc41d416-e316-4a7c-aa1b-7c6f06394282",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "6ae4960b-88dc-49a2-ae89-8f8019ad8fb6",
        "name": "API Configuration",
        "item": [
          {
            "id": "abb033b2-adfa-4de4-bbfb-27b403e015b4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f0154bb9-d8ec-45f8-80b7-ce6a3e3e1b5b",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8426e0e4-0a7e-4137-bf0d-827924b3d147",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d1af0f85-1a0f-41c5-9e01-61f7a99687cc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "38edb0bd-5c16-4b5b-a492-050c61e59ea1",
        "name": "Resolve Identifiers",
        "item": [
          {
            "id": "e63570cf-d365-40a6-ab62-774ed393ffe2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7cf700c9-e80c-4172-a91d-eab56e356c12",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2c3cc072-087f-42db-88f3-930fbecb2903",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70703a94-69a4-441b-9b36-4ce3d4417a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e66dda47-8bf8-4c56-b75d-1d6e1ef01fa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2826597e-ddf4-4ba2-bdce-faab3f5c7ec0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbbbb7ac-241e-40c7-bd9d-a12d92108b51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97cdb875-3d69-480f-b01d-c493990e7dde",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcd0c6ad-1f64-4af3-bbbb-af2ad0379ec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d4a8d49b-b64c-4c37-89fc-ed7c7d8601fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b957ba81-ae89-4266-84e5-f7c3eea3f7e1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ec176676-f057-445d-b9e3-f7f15c749b7e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4ee3009d-0b0b-407c-a457-c297f8f02f5b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d55f8842-31c2-42b4-960d-739723b3939f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "04b307f5-d03c-41eb-9f7e-702af83b1c4a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "e779f1f3-a89c-45fd-bc6a-6251d06d935e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3a897cbe-4a67-42a3-96e7-8a1c2a70a761",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('resolve:dids', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}"
              ],
              "_lastExecutionId": "9d0af0f3-4579-4d94-9543-9b545cfd427d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "888b8d8e-8d8e-48b4-85c9-9de7a57e709e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "393ad733-a242-4266-b2a4-580a5b1d7f4d"
            }
          }
        ]
      },
      {
        "id": "f4aaae8c-8ea9-4bc4-bc2f-89b769e9e0d3",
        "name": "Issue Credential",
        "item": [
          {
            "id": "37e7a5d3-7d52-4ce4-92ce-5591b19ee3e0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6c0ca327-d289-478c-a96e-1fb7f9a21ee3",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "f92026a5-a601-4795-8d7a-750ce651a744",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5effa38c-fb34-420f-94d8-10430fe3691b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19f71ae4-ab1d-4f9e-a78b-4a38e6b38570"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "601676ae-d0e3-48cb-af3e-3ac798d1fc5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "154ad24d-a3fe-4a26-8b47-7d0482aac3d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67df20f8-6b28-49f5-8b20-764a20307aba",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6968002a-2a32-49aa-94f0-4e134955c93a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a084ed5c-c74d-48c2-a916-ff6bc4e3173d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ee1747a-2bd6-4a01-a69e-affb85eb870b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d64ed004-5c44-4c29-96f6-348394ea6de9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3641f35-e6b4-468a-b377-2c1d6ea3ae2f",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eed86d3-fea9-479a-93d9-f233cbfe7966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcad925d-0271-4571-962d-4b88ce34fa6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12632dd0-25f0-42eb-8882-45b52c2a535d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f44dea45-33ec-425d-ba41-45e860f75246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "935db787-d999-4060-9745-2c6437674575",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4da75653-726a-48e2-8dcb-49228586479e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4236d50-1a22-4264-bb8d-1363443f46a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eec0e07-7e78-417e-a592-b73a436d1b52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c36690a-ac01-4469-854f-85610de2d56f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15881541-de55-4c9d-a93d-4cad2e510d57",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63311654-e6ac-40a7-8c6c-5f11a07cd014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e963090-e0a5-45d6-b4d9-ba3d719c5b7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4454a4d9-141c-4ce2-9c0b-3d89bbce24e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5c66311-acfc-4ba0-8f16-b948e80ca909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fba1779a-184e-42b4-a9bb-3a05d96049ec",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44840f8a-5a91-4eb0-bb12-f04e7d1b6dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea57d74e-11b7-4063-91fb-9801d476703a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "511dc700-8999-4f63-9c4d-fb61b8504a34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8984291f-3108-43ef-b1e1-10145b62cfcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a21eb063-1b4d-428e-8a5f-37b6842076c4",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bb8f857-6f95-4ea3-8d91-879fddcad60f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b60d6bf8-4141-4403-8042-b8b9f0a78c16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b852664e-8ebe-41b0-ba1b-2efdb4c2246e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7aed41b-38d7-46c9-9d8f-06f01f8ea201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b1261b7-43d6-4b20-a267-3461742eba60",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "224ff9eb-2b7d-45e8-9f84-1a7bb2721502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "661f36c4-e581-4297-b4cf-771aaaa901aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88a74dd9-dcd6-4eab-ac38-a473aebc2f90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6ffc9dc-fb8f-41b3-bed6-6aa7c5273084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e39bebea-601b-4c2a-9f73-fe10062e2624",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fde90c67-affb-4af9-a998-1bb15e1073c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2478b5f7-0fc8-4a05-b8dc-bfbd2df3a55e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e09eaef6-9552-45e9-adcf-497da9d16a88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9ee4034-a30d-4f7f-9082-03c9162f3486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34bb3cbe-7d70-46a5-bd18-4e112f13b0ea",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b443ce6c-65aa-402d-8955-4aae32a38964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5121fbb1-f9c4-4472-9652-12bd1581fef9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a6ada33-0404-45e5-a037-b4b19176a8dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dff674d0-6099-4ac0-a1f8-ba88abcd19d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91bf61bf-e2ae-4994-b3fe-24d08d3d474b",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f12d7f15-6a85-4770-9efa-57b0ca824a70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc723554-0a45-4a8d-90be-3cf4c3669ee1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59aa3674-77f0-4955-82ba-50a167b32041",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "da3cccaf-e7a8-46c1-bac4-d05e105298e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3d1965b-f88e-4584-9efc-1f6494408ff8",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eae8327-3d35-4581-a97c-3e025b61e11a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09fb64dd-d56a-48b7-b120-5ddbf54b3140"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa36ec15-b544-45a9-99ae-2f715a4e9336",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47fb109a-ebe9-4994-ad4c-4e6d6fd2d75d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af8a5e9a-d76d-4ff2-a62f-ffb4788beaf1",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5010c4c9-aa6e-4342-88ac-d24f7ad48829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56c4f9c8-bfe8-49a3-aa8b-60c3f6b94af7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37c3d737-a036-4218-adae-bffa1b23d348",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a URI when present.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "068f9fa7-efb9-4c00-886d-0e57db10894e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8c9df71-3fa6-4b08-a2f7-9f5fb2736e80",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57877efd-8a4a-47ea-bf8c-65252507512f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e89f267-19f2-4a04-93b8-da80caa5a4d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8fafe7a-09c0-4bde-b7d0-9af96d4958d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf067de6-e5a3-48d2-a9fe-61897799771c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd0f916a-6813-4e69-a3a7-2fccb7fa5145",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0884f0b2-946b-415a-b4b6-dd8b899452b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8147f025-61e0-46f3-b9a5-b467587480da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bc2c227-2c16-4498-9c98-d2727f79414a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e5a84d5-acd8-4b32-a5ce-aee6d96b2147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99c2c286-d570-4e39-a5b4-87bccb4c1cae",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53b4cc55-1014-4205-be71-50f548b97700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "508d9ab4-4080-4464-9735-1fd7a4752d13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90281382-8c2a-46a0-8997-01dbe9070587",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "991a4614-71ba-4040-8660-f5b418c5be05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e753320-bd0f-4042-b3a6-d02490a81ff0",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df0e7620-189b-430f-800a-93b7e5f51d81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be25e543-dd5f-4079-b117-b18de6f1d3d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb7fd11f-a6b7-42d4-af8d-86f91f8611e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe38d1a1-edda-403c-86a0-bd55336fc402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b27c83b-4d75-4d51-82f2-db0323044131",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd9897fa-1b6c-4a3f-ad77-52bbd61c03a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cebfc04-ba8a-4957-9505-9242a925fd01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50bf3982-43c6-4a5b-a46a-249c4872e386",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ceb9383c-0242-44ac-9293-ab2602d55a38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9975e8f9-faec-4e42-807b-d2019143018e",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "011e93c6-08f2-4bc2-b92f-2fe69ebfbf11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6992fa93-fb2e-47f5-a663-0833c0012bef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bf87329-f23b-4344-9070-a52bcaf8c4e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbb02484-fbf3-46a7-9d4f-3611994dd6a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65f4af69-433e-47c3-b436-2612f5396d7b",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f11c673-6914-4244-8ba9-e5e62a3f857f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53193adb-2120-4388-b54b-da1c3d3c898e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84e94725-4c56-458b-92e5-32530c8d9e86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01fd30e1-fa80-4ff5-9bb5-21e56e8703c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbbe737e-7e1e-4b76-9921-ed0afbbf61e3",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b441a79f-2e2a-4b6c-82d4-4c9b3558f9e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41a4a925-f70d-48ab-81c0-745262a14157"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "668d203b-8b3e-4a94-97c1-a15a5aba694f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c553757a-4d33-456b-9cbe-633e1b918ddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "799988b9-7d4b-42ba-978e-6541cc214004",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74fe55f5-4913-4528-a70b-199efdcf47e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c1173b2-d5ca-444e-89bc-b5d70aceca81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9cc7c8d-80d2-4e21-8554-7189ac189d08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72a8983c-fe45-4aa6-910b-3cfc5e62ad70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47c38d19-f2ed-4110-9e04-eb44729cba8f",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adb3e9be-6d44-4cd9-9553-d9b615038ffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d125c204-0f4f-44aa-81bc-1753b6edf55d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0745dd48-c25c-4a0f-ac9b-44befb9e21a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "737088f5-2cef-4071-a06d-d93dbabd0a2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9221012-9ade-4d43-a0a6-1aea5542f026",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "682cd474-b670-4b99-aa1e-9c098f6396fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5811fba3-4129-461f-99c0-87b3854a48df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d832405-83fd-4df6-aee6-b9667afb422a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1195c3eb-16d7-4a44-9e16-5a5293271884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67199733-4aa4-4dd0-b4eb-4e45865a6c5e",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a5af88d-d3c3-4b3f-a027-087113eb35f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c5d5c1f-7adb-4b02-b81a-360897633044"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de1714f1-1f26-4185-b41b-5b07dd872737",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69a42adc-c89f-4be7-b1aa-2f6b50b8f50d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72194cfc-563d-4bf7-8219-23d916bbb301",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2b24a05-e658-4fc9-a41b-1ccc032e37d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3944d52-f74f-48f4-a2dc-f5fe0b9fcf49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae32e868-f0a2-4fa6-a6da-04af011455f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "954d17fb-72e9-42e8-9575-d134d80edba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9e6d135-80d5-4e41-a25a-a073aa9bb644",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d42178d-573c-4038-9819-36b50cb10c83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dab2ade5-42b4-49cb-85cc-5ea6df820d77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7afb771-272e-4279-8c86-23677f7b9c36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26133f2b-ae41-4d8b-9e69-8ee60d07f5df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1d5e70b-a2a5-4039-9f6f-9007f85640f0",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdd53642-1b80-4ade-87b8-a49831d191aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "fd0f6701-bf98-4b49-9203-24e9d1eb0879"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eab083d4-fe6b-48f7-938e-e3aad792495b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38527ee0-2f9d-4a80-8ea3-da96ea4d366e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "46cf87a5-65ff-4511-93c5-da8e6539056c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f867ac10-ce2d-4985-b22f-c5ac27aa1a3c",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "704dfde6-fb09-4faa-9d73-ab7bb6dd8488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fec885e0-760d-49da-b731-18a4945f3e25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f7405c2-e742-4775-897d-c28b860b2f7c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"requestBody\")));"
                          ],
                          "_lastExecutionId": "9cfbbc81-d2b4-4d2f-833e-5459635cfa31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7f99993-83d1-4ec8-aefc-57844d195cad",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc0f5bc-9a83-4013-9768-88c9c461c4b7",
                          "type": "text/javascript",
                          "exec": [
                            "// Missing scope tests should be skipped if the OAuth2 provider does",
                            "// not support requesting tokens with specific scopes.",
                            "const maybe = utils(pm).tokenHasScope(",
                            "    pm.variables.get('currentAccessToken'),",
                            "    'issue:credentials'",
                            ") ? pm.test : pm.test.skip;",
                            "",
                            "maybe(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "maybe(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f2f16e3b-375e-4cad-8700-c53c8880c7a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "486b15e7-c650-4066-b4f0-0c3c034d0cb9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"requestBody\")));"
                          ],
                          "_lastExecutionId": "d888aa02-f46a-4d09-9ff4-3419c958f6f1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8723e34b-a6ad-49f4-994e-b793822ae51e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b0dd8c99-1b30-44a5-97bc-f48164c378c1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a8673dc-1875-4f2d-9497-646bfe845f02",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ef53be2d-4eba-4e9b-a559-2ded22e39b07"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "003865a1-a88b-4867-881e-e180e4b0a692",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f70be55a-1ba3-4ef1-af44-66db8942d660"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b7c3a985-5299-472e-999d-41ccea6419a1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "659ac764-350a-4eb4-825e-05de7d2a44c8"
                }
              }
            ]
          },
          {
            "id": "344552a4-2366-4425-9f56-56c583fa5617",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4f04e801-3239-4584-a3cc-6c6951c9157a",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e0fd1b5-e475-44ef-8fbb-5799f152d9f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "de1ce0f5-19b4-4d7b-8e9c-fba656bd6e6b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "76d1a3ab-6048-46ae-85cf-4008d5b6c110",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "8e8f2fc7-2723-4880-b46a-efe8fd4d3d34"
                    }
                  }
                ]
              },
              {
                "id": "7e077966-653e-4eea-90b9-2b1283f62b1b",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fa6cb9b0-46ce-4b8c-a416-a45fe93fe711",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "71d26761-f44e-4ed8-b521-ba2034ed059e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f7809c50-f281-4da3-8f62-196497ad53e5",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "f3236881-91d8-4203-bb62-81d23a74fae6"
                    }
                  }
                ]
              },
              {
                "id": "a1683b25-b6d8-44de-99d8-af7d80f100c8",
                "name": "credentials_issue:credential:alt.issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5fce923e-7422-4248-b02e-86235ee8f2cf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "889d8dd7-9d29-4eca-be1d-a6d44587d1ac"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "241945ad-0397-47ad-a2aa-426416637f90",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with optional 'id' element.",
                        "rawBody.credential.issuer = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "d3499528-4027-4fb4-8e1b-7002cb63d852"
                    }
                  }
                ]
              },
              {
                "id": "a13b7d19-8d64-4d50-86ae-f0ebc5f51289",
                "name": "credentials_issue:credential:alt.issuer.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "377dd102-457b-4f0c-aadc-2e9f743f0562",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ecefc75c-fc5a-40d5-8b1f-0eee417540be"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cf165751-87a8-4f5a-b040-0cdf9c0598aa",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with optional 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "565a621c-5966-4f62-87ca-13f33c833612"
                    }
                  }
                ]
              },
              {
                "id": "c2bbb4d8-4dae-4dc3-a404-74d0796aac72",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ae9ecb5-7316-416b-bfa2-b72ecbb13947",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4f30fdfa-9361-4fff-866e-ef05863cdd40"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6bf247ea-28b0-4fb1-be3e-e03bda502b0f",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "fd950c08-59a7-48ca-b4dc-ebbd365348e9"
                    }
                  }
                ]
              },
              {
                "id": "4784ccc0-9748-4051-879d-01dabbfa33d4",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fdb1538d-fece-4ff6-b164-bcd0eaad2fc1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4e959ced-2b98-4c2b-a093-169839f346f8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "466771bd-52be-431c-a809-378494ba8da3",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "f9f0b167-0b86-495d-915d-ae071942747a"
                    }
                  }
                ]
              },
              {
                "id": "871d9827-5ca2-4b82-bb23-d5e54855e378",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cf5854e3-146a-41a6-8dee-004c16c65d7b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "369cef31-c02b-43f2-87ea-3cc08ffe478a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3f6d8c39-e971-4316-8b57-854c17f73331",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "5baa9594-0c2e-4dce-97cb-ef2af422c6c5"
                    }
                  }
                ]
              },
              {
                "id": "d13531a8-af69-4ac9-ac90-fa2dfb60e5e3",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "930672a9-88d0-4245-a46e-bf1680b55e2d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c19eb42f-4318-43aa-94bd-bf8ed70b0913"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "40bce729-172e-4a1d-b4d9-5f79f0d0893c",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "0df52716-5956-48fd-bc73-b2fa21d0c91b"
                    }
                  }
                ]
              },
              {
                "id": "80cc0f7e-1e70-4d04-b7fa-f95bfdf52c3f",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cfdcbc27-5dd8-4cd4-9370-9662507dd37d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cd678972-8f45-41d5-84ce-951de9dc0550"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fffbcb0f-9e21-4976-bc5f-c27bd3c3c25e",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "c0c81acb-4168-4c04-b39e-d70ca3dc6847"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "21209272-5b7d-45d4-8181-546d893cb151",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "31d7da01-0045-4249-9ade-4abaa221d429"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bc17edcf-0607-438d-8136-ba040a3e1215",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f28b424b-4496-431c-a42d-8d2433d6cb2e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "99b1b2ad-6d95-4b62-8195-3884e3409696",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"2010-01-01T19:23:24Z\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('issue:credentials', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "if (!pm.variables.get('credential_issuer_id')) {",
                "    // TODO: This needs to be populated correctly",
                "    pm.variables.set('credential_issuer_id', 'temporary.placeholder')",
                "}",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "e4accf27-53ee-47fd-b98b-be04c51ec700"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0fd5b95d-3a35-4931-a06c-e315640cc93e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fee17fdf-2005-4cdf-8594-692975561081"
            }
          }
        ]
      },
      {
        "id": "4c79335a-c60c-4ab5-955f-35050a5d4a51",
        "name": "Credentials Status",
        "item": [
          {
            "id": "c2e89adb-4c1e-4019-9072-62ae0b4fe334",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0595ddb5-1390-43dd-b402-377d8553e8d8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e64f7108-3a4c-480c-af8e-019b00fc1544",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99b0704e-f707-4109-ba6d-52956e9223e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4cf6f63-7844-4b47-8769-62d023bba7ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "023d4042-94c9-4372-a517-0ca28e5fa5bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c083ae10-c2aa-4c1a-b553-b3a11491472d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0f16f14-d00b-4a51-afad-91b462436397",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a825fcb-eefa-4db9-891c-02f70cb6becf",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "43a38d03-d3ed-4d35-9244-29675a45fd3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3bfcbc4-b428-4b9f-845d-1595efc11844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "59cfb3d8-1f0d-4b68-9df5-3f2d10ab758d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1ddafb35-ec46-42cd-baf5-33e0ff42911b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ec942921-6b4e-439a-9656-9b62a4acc9a9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b950a1c6-a24a-4c61-89e8-5301d140fb3b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9e07c22b-fa1c-46dc-8aad-ef8603d5865f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5d465e96-708c-4790-b0a3-205772da269f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('update:credentials', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                ""
              ],
              "_lastExecutionId": "e0de7100-fde2-40dc-892b-d3066a107be8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a038be0c-1a8b-443d-a445-b528fc923749",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e5c8cb90-e0ec-41d4-9c62-b1019dfe3e11"
            }
          }
        ]
      },
      {
        "id": "2c84c7ec-6efe-4401-870a-b274eea79a1c",
        "name": "Presentations",
        "item": [
          {
            "id": "4ba147ee-f1d4-46b0-b296-f1749168f316",
            "name": "Negative Testing",
            "item": [
              {
                "id": "606913f5-e745-46c9-938e-8d65681b8c42",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b06fafd4-5804-4a7c-86bf-ccc3dc3267a1",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7414779-eecc-48d5-afcb-57f5bd2126da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13f750f0-b77e-4271-87fc-d234b06451e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05f18d50-1190-4934-a59c-cad522edaf91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e783d6a1-eb6c-4013-a044-b6919c9af804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "655f2140-f4e3-483b-a1a5-4d9f6f16bb1d",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3617d9ac-6626-4276-97e2-aa60fde4dd58",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ed248940-a77c-49c9-bd0f-f0a2a207c473"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c04b13-993c-4bc2-9925-f7448cf392dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5603251f-1abf-4c00-bb1b-56ad1980d1da"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "94e616a9-20f5-46cd-872c-da153f18dd3d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cb6627c0-e7aa-4ff1-9462-35b0de03b886"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f9c42c95-c052-4668-bb17-ef839f5a8558",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7cfdf654-2b34-4704-bb09-3d05b047c2ce"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5e13b0a3-c6a4-4579-a0b1-41ab3a9189ad",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('submit:presentations', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                ""
              ],
              "_lastExecutionId": "7863aafe-fe4a-4f10-8f21-6746a07a7db6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4870452d-8cbd-4c97-9a82-7dac1f897d68",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c1020d46-0bd5-4ec8-b15e-a64ddeea0eb5"
            }
          }
        ]
      },
      {
        "id": "1410f398-e0fb-4d53-8624-3df4468a8107",
        "name": "Credentials Verify",
        "item": [
          {
            "id": "b3cb720e-5c37-4c13-a728-c39402eae5d8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b3652078-d3b1-4133-9155-76fe591b48cf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "706add2f-3aea-4200-a1a2-98b9dd0ce85c",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5480d6ad-c6a7-49c7-a1b5-71411b29e87e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9a11563-d93e-4e11-acd4-a13373193c6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fdd209c-ebc7-4425-a92d-7c531b69a764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8248533a-c9e1-4a2d-8abb-9ad4918e04e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1dd27fe-b9e1-4d88-b319-542fbabdf7f0",
                    "name": "credentials_verify:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31186125-d5e5-4ae8-90c0-529f7bf99f26",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ae27def6-b20b-4627-958c-8bb13e7e46aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c90706b-f950-4a98-8696-de9dee75c289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f8454dc3-4c6f-48a3-b31e-9722c64110e3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9cf23852-71f4-486d-a3e9-a85f23f11dc4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8263ad8-6f49-485b-b0f0-385f9c8e295d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c4e8e48d-45de-44af-8e22-6deeb69f4917",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "47cf696e-e76f-4969-8a6f-7c85108e29ea"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a3829e0d-16b5-4b32-a86e-fbbf28c876b0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('verify:credentials', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                ""
              ],
              "_lastExecutionId": "5f05b905-cd91-4d74-9a36-8e571994caf9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ffb7c569-03f5-4bdf-96ce-6bb58de88ce9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5e196625-cf86-470e-81b1-d8fcfee87872"
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 49,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 384,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 49,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 55,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 49,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 98,
        "pending": 0,
        "failed": 80
      },
      "testScripts": {
        "total": 193,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 191,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 109.14545454545454,
      "responseMin": 5,
      "responseMax": 2373,
      "responseSd": 321.66003612972366,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1658969108718,
      "completed": 1658969117077
    },
    "executions": [
      {
        "id": "f0154bb9-d8ec-45f8-80b7-ce6a3e3e1b5b",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 49,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "47108b0e-6636-4d37-9b81-6f4c213b209e",
          "httpRequestId": "7352fac5-49bd-4f12-87d7-b53e6bed5d22"
        },
        "item": {
          "id": "f0154bb9-d8ec-45f8-80b7-ce6a3e3e1b5b",
          "name": "did_json"
        },
        "response": {
          "id": "71428e53-c117-449e-82c6-0f06c115e395",
          "status": "OK",
          "code": 200,
          "responseTime": 311,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c3cc072-087f-42db-88f3-930fbecb2903",
        "cursor": {
          "ref": "5c484350-75b1-4e8d-b663-566bb3939f3a",
          "length": 49,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "430a1789-e974-46da-a454-156c88d21996"
        },
        "item": {
          "id": "2c3cc072-087f-42db-88f3-930fbecb2903",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "754e78e7-74a0-4bd9-977d-ed84cf9ab596",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "2c3cc072-087f-42db-88f3-930fbecb2903",
        "cursor": {
          "ref": "5c484350-75b1-4e8d-b663-566bb3939f3a",
          "length": 49,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "430a1789-e974-46da-a454-156c88d21996"
        },
        "item": {
          "id": "2c3cc072-087f-42db-88f3-930fbecb2903",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "754e78e7-74a0-4bd9-977d-ed84cf9ab596",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "97cdb875-3d69-480f-b01d-c493990e7dde",
        "cursor": {
          "ref": "6572a25d-242f-4da5-b4ed-08c100ef6abf",
          "length": 49,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "4d18603f-1508-4579-a731-7aa7294a0e0f"
        },
        "item": {
          "id": "97cdb875-3d69-480f-b01d-c493990e7dde",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "595ebce1-2503-4ecb-a62d-613ed5d4e026",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "97cdb875-3d69-480f-b01d-c493990e7dde",
        "cursor": {
          "ref": "6572a25d-242f-4da5-b4ed-08c100ef6abf",
          "length": 49,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "4d18603f-1508-4579-a731-7aa7294a0e0f"
        },
        "item": {
          "id": "97cdb875-3d69-480f-b01d-c493990e7dde",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "595ebce1-2503-4ecb-a62d-613ed5d4e026",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "d55f8842-31c2-42b4-960d-739723b3939f",
        "cursor": {
          "ref": "ca7ce0f1-d545-4cac-8361-112bc60c527b",
          "length": 49,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "fbedaf92-31b7-4b26-b933-1e62d4044a2a"
        },
        "item": {
          "id": "d55f8842-31c2-42b4-960d-739723b3939f",
          "name": "identifiers"
        },
        "response": {
          "id": "92588a03-2795-4b6c-906c-24a8ef857ef1",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f92026a5-a601-4795-8d7a-750ce651a744",
        "cursor": {
          "ref": "e1804cee-d989-4961-beda-1c5276edbeaa",
          "length": 49,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "79725931-9cce-4696-a420-5f11b5255acd"
        },
        "item": {
          "id": "f92026a5-a601-4795-8d7a-750ce651a744",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "abb2a5ca-5b2e-42f8-986e-9448deb1c34e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 268,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "67df20f8-6b28-49f5-8b20-764a20307aba",
        "cursor": {
          "ref": "4e68ee49-61f8-4221-8881-f59d91ed0088",
          "length": 49,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "28348ab6-30d5-4e09-9577-7b248fb61603"
        },
        "item": {
          "id": "67df20f8-6b28-49f5-8b20-764a20307aba",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "af44016d-b58c-4de9-88c2-92698cf9548d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "e3641f35-e6b4-468a-b377-2c1d6ea3ae2f",
        "cursor": {
          "ref": "8db8bf9d-a844-46c4-ae02-acb7783a787e",
          "length": 49,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "16a10c25-7a8d-4a9f-a693-24d5ee0b3dd7"
        },
        "item": {
          "id": "e3641f35-e6b4-468a-b377-2c1d6ea3ae2f",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "413c65bf-448e-46a5-be6c-36e48b2c945c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "935db787-d999-4060-9745-2c6437674575",
        "cursor": {
          "ref": "edbbfb55-309c-49f0-948b-9f03985568d0",
          "length": 49,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "09f11855-dc03-4cf4-aa2a-ffdbaeefba03"
        },
        "item": {
          "id": "935db787-d999-4060-9745-2c6437674575",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "2d04c31d-5164-488b-9f9f-64a9ac2ae1f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "15881541-de55-4c9d-a93d-4cad2e510d57",
        "cursor": {
          "ref": "e7662afb-d3ef-40d5-8499-69385304d4af",
          "length": 49,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4a451359-2345-44dd-abac-05ea78456881"
        },
        "item": {
          "id": "15881541-de55-4c9d-a93d-4cad2e510d57",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "81f5405d-48e2-41ed-a33d-2f0af3b45f0d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "fba1779a-184e-42b4-a9bb-3a05d96049ec",
        "cursor": {
          "ref": "c67e1e3c-2948-4259-8962-7a5182927b20",
          "length": 49,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c284513b-970a-43f2-b592-5bd0d6c4c642"
        },
        "item": {
          "id": "fba1779a-184e-42b4-a9bb-3a05d96049ec",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "ad5cd1dc-5ec7-4fd3-8c03-f678428122e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "a21eb063-1b4d-428e-8a5f-37b6842076c4",
        "cursor": {
          "ref": "26fa3849-2a6a-4f2d-b116-f39bbb583434",
          "length": 49,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "f6f3cdb3-6915-4a87-a01e-1db6873ee1c4"
        },
        "item": {
          "id": "a21eb063-1b4d-428e-8a5f-37b6842076c4",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "65b4c3e2-f8f8-4a1f-9b88-1ae5a1cd2be4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "9b1261b7-43d6-4b20-a267-3461742eba60",
        "cursor": {
          "ref": "3f34ac4b-59d1-42fd-9248-a57fd9f55a7b",
          "length": 49,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "705c5745-9ed8-45a5-a032-97a4bbd86a58"
        },
        "item": {
          "id": "9b1261b7-43d6-4b20-a267-3461742eba60",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "b8091077-2461-4e01-b1fd-f555cc0bc954",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "e39bebea-601b-4c2a-9f73-fe10062e2624",
        "cursor": {
          "ref": "9c7fe844-ea0d-4ecb-8841-2d7d5f9de509",
          "length": 49,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b0e1377a-77f3-46eb-af91-d2484d5ba18a"
        },
        "item": {
          "id": "e39bebea-601b-4c2a-9f73-fe10062e2624",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "371e1544-ad9b-42ec-a209-ea1eaeec2e0e",
          "status": "Created",
          "code": 201,
          "responseTime": 38,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "34bb3cbe-7d70-46a5-bd18-4e112f13b0ea",
        "cursor": {
          "ref": "39ea7865-a143-432e-8b71-f7e9820f4516",
          "length": 49,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "42844056-13c1-4dcf-bcca-3714095a8025"
        },
        "item": {
          "id": "34bb3cbe-7d70-46a5-bd18-4e112f13b0ea",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "03745c78-f950-4d17-86b7-335cdeb29634",
          "status": "Created",
          "code": 201,
          "responseTime": 43,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "91bf61bf-e2ae-4994-b3fe-24d08d3d474b",
        "cursor": {
          "ref": "2fde7966-2e67-4d9d-b062-5757c27483fd",
          "length": 49,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "1258a866-0c03-4891-994c-8170a791d958"
        },
        "item": {
          "id": "91bf61bf-e2ae-4994-b3fe-24d08d3d474b",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "de4ce535-bc50-4236-9cdd-c66715d075ca",
          "status": "Created",
          "code": 201,
          "responseTime": 49,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "c3d1965b-f88e-4584-9efc-1f6494408ff8",
        "cursor": {
          "ref": "c2a71d76-7d16-4544-b0e7-2bffd04b7215",
          "length": 49,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "334e6737-9f03-4ae1-9c0d-b94d6e6f2f56"
        },
        "item": {
          "id": "c3d1965b-f88e-4584-9efc-1f6494408ff8",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "033c4e8c-dbec-4f26-9ad7-96180d7f8066",
          "status": "Created",
          "code": 201,
          "responseTime": 42,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "af8a5e9a-d76d-4ff2-a62f-ffb4788beaf1",
        "cursor": {
          "ref": "4964775a-573c-49e7-93cd-6cc638a88557",
          "length": 49,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "57a85bed-1bf4-4b17-99c3-4f095e593f79"
        },
        "item": {
          "id": "af8a5e9a-d76d-4ff2-a62f-ffb4788beaf1",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "0dd35ace-8fb9-4185-b4cb-e4801a6dbc7d",
          "status": "Created",
          "code": 201,
          "responseTime": 44,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "e8c9df71-3fa6-4b08-a2f7-9f5fb2736e80",
        "cursor": {
          "ref": "b5d47c1d-2b96-48d8-9188-a6255aea16b2",
          "length": 49,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "81b676ca-a578-406a-b681-72d0b5aeb114"
        },
        "item": {
          "id": "e8c9df71-3fa6-4b08-a2f7-9f5fb2736e80",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "000ce460-ba72-47af-8bc7-6719d8eca9e0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "bd0f916a-6813-4e69-a3a7-2fccb7fa5145",
        "cursor": {
          "ref": "01b5d530-57ad-4a10-ad68-441d122a3bba",
          "length": 49,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "f925d84f-b4ee-422a-996d-98c2e7a4f8e8"
        },
        "item": {
          "id": "bd0f916a-6813-4e69-a3a7-2fccb7fa5145",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "f475a3a6-7b88-4ec7-a05b-86579b0b704b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "99c2c286-d570-4e39-a5b4-87bccb4c1cae",
        "cursor": {
          "ref": "60d14dbb-054d-4107-a763-96bfee6af84f",
          "length": 49,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "0676ccea-9638-4912-a4b1-48e565b7a2c7"
        },
        "item": {
          "id": "99c2c286-d570-4e39-a5b4-87bccb4c1cae",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "5d83c9ff-44fc-4206-8a43-614b4315031e",
          "status": "Created",
          "code": 201,
          "responseTime": 54,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "8e753320-bd0f-4042-b3a6-d02490a81ff0",
        "cursor": {
          "ref": "45cbc71f-8895-4c6b-8c8e-08e33f802b01",
          "length": 49,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "b2aad126-42c7-42ce-ab93-c8c5625d6054"
        },
        "item": {
          "id": "8e753320-bd0f-4042-b3a6-d02490a81ff0",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "d92c7051-be53-4af6-91f8-67f1ff81c127",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "4b27c83b-4d75-4d51-82f2-db0323044131",
        "cursor": {
          "ref": "b0a9dffa-c3b7-4dd4-8492-49c258d4eab5",
          "length": 49,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "66c5091d-6d63-4cdc-87c9-1460551aa4dc"
        },
        "item": {
          "id": "4b27c83b-4d75-4d51-82f2-db0323044131",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "4a11511f-5940-466e-b8f8-68d39ea27067",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 624
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "9975e8f9-faec-4e42-807b-d2019143018e",
        "cursor": {
          "ref": "841d9a50-7845-4e7d-9b57-a44e5198ee2a",
          "length": 49,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "4e8a1ddb-7100-4982-8beb-1e1b00350051"
        },
        "item": {
          "id": "9975e8f9-faec-4e42-807b-d2019143018e",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "d25ce53f-65d4-4f28-80a4-dc0eac4ca4a8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "65f4af69-433e-47c3-b436-2612f5396d7b",
        "cursor": {
          "ref": "7a3b1fdc-1940-41c4-85a9-ad933c0d0175",
          "length": 49,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "b224dc24-e045-4163-9a93-90c5947a782d"
        },
        "item": {
          "id": "65f4af69-433e-47c3-b436-2612f5396d7b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "000f91b0-5755-493b-8489-ca7d00998481",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 11,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "bbbe737e-7e1e-4b76-9921-ed0afbbf61e3",
        "cursor": {
          "ref": "d50ec0b6-e356-44a7-a21c-20143234e1db",
          "length": 49,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ba84defd-87eb-44ae-8c6b-fdbaf9a16205"
        },
        "item": {
          "id": "bbbe737e-7e1e-4b76-9921-ed0afbbf61e3",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "20ef7781-7309-49f9-9052-4ad8ac737af3",
          "status": "Created",
          "code": 201,
          "responseTime": 53,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "799988b9-7d4b-42ba-978e-6541cc214004",
        "cursor": {
          "ref": "4e08b1df-a629-4330-bb19-0fb81e4d868d",
          "length": 49,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "42382979-86ba-400c-9fd4-7b8655402adf"
        },
        "item": {
          "id": "799988b9-7d4b-42ba-978e-6541cc214004",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "b809b25f-b52a-48c6-a6b6-2f0b67a14fce",
          "status": "Created",
          "code": 201,
          "responseTime": 38,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "47c38d19-f2ed-4110-9e04-eb44729cba8f",
        "cursor": {
          "ref": "fa6f76ef-5b16-4a5a-bb29-98acc4793fe7",
          "length": 49,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "c9b42503-bfc2-4865-a095-503419b6c5e8"
        },
        "item": {
          "id": "47c38d19-f2ed-4110-9e04-eb44729cba8f",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "3fe416c6-e65b-4965-b03d-54d6c9ad1c9b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 18,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "f9221012-9ade-4d43-a0a6-1aea5542f026",
        "cursor": {
          "ref": "0bf50911-adbd-432b-94ce-ea7f4542dc78",
          "length": 49,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "04cd7411-c9a3-43d7-8ad7-6de61fe563da"
        },
        "item": {
          "id": "f9221012-9ade-4d43-a0a6-1aea5542f026",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "6d1efb29-e534-43e5-a7d5-afa424dc861a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 21,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "67199733-4aa4-4dd0-b4eb-4e45865a6c5e",
        "cursor": {
          "ref": "29df2602-20cb-4d57-96e4-51e282ed3031",
          "length": 49,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "e4675368-3206-4a2c-93ae-5875a82dd868"
        },
        "item": {
          "id": "67199733-4aa4-4dd0-b4eb-4e45865a6c5e",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "b2132da9-248a-4337-a7e3-8829196eee9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "72194cfc-563d-4bf7-8219-23d916bbb301",
        "cursor": {
          "ref": "89d82264-23d0-4f01-8eb1-c819eeadc4bc",
          "length": 49,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "5f5dd67f-e15a-4aac-a555-8ff26118a1e1"
        },
        "item": {
          "id": "72194cfc-563d-4bf7-8219-23d916bbb301",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "0b7f99a4-a181-444c-a2ce-a265bd281f6f",
          "status": "Created",
          "code": 201,
          "responseTime": 30,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "d9e6d135-80d5-4e41-a25a-a073aa9bb644",
        "cursor": {
          "ref": "61ba4593-823c-435a-99d7-714044f3154e",
          "length": 49,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "01978ce9-99d6-4735-ade1-8e416b4693db"
        },
        "item": {
          "id": "d9e6d135-80d5-4e41-a25a-a073aa9bb644",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "c0da7dad-2f2d-48de-bbb3-b2a7aa060078",
          "status": "Created",
          "code": 201,
          "responseTime": 36,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "e1d5e70b-a2a5-4039-9f6f-9007f85640f0",
        "cursor": {
          "ref": "a9a1f37a-60fb-4b72-970b-65a4ab1acc38",
          "length": 49,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "483ff7ef-2c28-497a-9ca7-a23a91ed641e"
        },
        "item": {
          "id": "e1d5e70b-a2a5-4039-9f6f-9007f85640f0",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "87f77d09-93c8-4529-b712-73e6529c8356",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "f867ac10-ce2d-4985-b22f-c5ac27aa1a3c",
        "cursor": {
          "ref": "1a606ce0-b5f0-4f03-b801-a34fc6c0cbf2",
          "length": 49,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "cf883e55-f9cf-4b0e-90bb-93e203926c0c"
        },
        "item": {
          "id": "f867ac10-ce2d-4985-b22f-c5ac27aa1a3c",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "1655e669-f0ec-4624-91d2-b35260ecd931",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "b7f99993-83d1-4ec8-aefc-57844d195cad",
        "cursor": {
          "ref": "0750e81e-116e-4a40-b478-6b94def97a14",
          "length": 49,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "72fc89d9-78e0-477d-9753-24c7139ed451"
        },
        "item": {
          "id": "b7f99993-83d1-4ec8-aefc-57844d195cad",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "da9bf65d-952c-40ac-93f4-743ef9196880",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 6,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": true
          },
          {
            "assertion": "response validates against schema",
            "skipped": true
          }
        ]
      },
      {
        "id": "b7f99993-83d1-4ec8-aefc-57844d195cad",
        "cursor": {
          "ref": "0750e81e-116e-4a40-b478-6b94def97a14",
          "length": 49,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "72fc89d9-78e0-477d-9753-24c7139ed451"
        },
        "item": {
          "id": "b7f99993-83d1-4ec8-aefc-57844d195cad",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "da9bf65d-952c-40ac-93f4-743ef9196880",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 6,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": true
          },
          {
            "assertion": "response validates against schema",
            "skipped": true
          }
        ]
      },
      {
        "id": "4f04e801-3239-4584-a3cc-6c6951c9157a",
        "cursor": {
          "ref": "6eaaed98-df62-428b-9e70-6ecfc184910d",
          "length": 49,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "3715bd88-8702-4114-842f-aef7bf3d22db"
        },
        "item": {
          "id": "4f04e801-3239-4584-a3cc-6c6951c9157a",
          "name": "credentials_issue"
        },
        "response": {
          "id": "7a056bdc-8697-4a49-a3c8-24b560e2c843",
          "status": "Created",
          "code": 201,
          "responseTime": 36,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "7e077966-653e-4eea-90b9-2b1283f62b1b",
        "cursor": {
          "ref": "2f49c2bc-7854-40a9-9649-14093cedd461",
          "length": 49,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "bdf5a7b9-f9e0-4f02-a938-2e8c054daa71"
        },
        "item": {
          "id": "7e077966-653e-4eea-90b9-2b1283f62b1b",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "1cd89496-d191-4ad4-9994-3956b51503bf",
          "status": "Created",
          "code": 201,
          "responseTime": 37,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "a1683b25-b6d8-44de-99d8-af7d80f100c8",
        "cursor": {
          "ref": "248ca2cf-c19d-44bf-95da-5b6cabbf5844",
          "length": 49,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "b896b7aa-7ce4-4ab3-ab4b-601f91b2d907"
        },
        "item": {
          "id": "a1683b25-b6d8-44de-99d8-af7d80f100c8",
          "name": "credentials_issue:credential:alt.issuer:object"
        },
        "response": {
          "id": "aa049c26-22dd-4a76-9620-479df9dce5d4",
          "status": "Created",
          "code": 201,
          "responseTime": 63,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "a13b7d19-8d64-4d50-86ae-f0ebc5f51289",
        "cursor": {
          "ref": "a825ba6e-f4e8-466b-b3b9-f876dbd25659",
          "length": 49,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "ef737a8a-368a-434e-84d6-d162bed27598"
        },
        "item": {
          "id": "a13b7d19-8d64-4d50-86ae-f0ebc5f51289",
          "name": "credentials_issue:credential:alt.issuer.object:opt.id"
        },
        "response": {
          "id": "cedbe634-fa19-46dc-b8e5-775221c2135d",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "c2bbb4d8-4dae-4dc3-a404-74d0796aac72",
        "cursor": {
          "ref": "98b6d7f9-ffbd-47da-a554-53942dde0d71",
          "length": 49,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "cbd72ed6-882d-41ff-85cf-f6ed7f72b3fe"
        },
        "item": {
          "id": "c2bbb4d8-4dae-4dc3-a404-74d0796aac72",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "2d974567-5c3a-473e-82f8-6544de4e3474",
          "status": "Created",
          "code": 201,
          "responseTime": 42,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "4784ccc0-9748-4051-879d-01dabbfa33d4",
        "cursor": {
          "ref": "40a42063-038f-455b-8cd1-50287c69a00e",
          "length": 49,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "09f415ac-63af-4dd5-a265-a7aaa7658f9e"
        },
        "item": {
          "id": "4784ccc0-9748-4051-879d-01dabbfa33d4",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "f22fa6ac-7752-481b-88e6-c5b2bf2a206d",
          "status": "Created",
          "code": 201,
          "responseTime": 36,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "871d9827-5ca2-4b82-bb23-d5e54855e378",
        "cursor": {
          "ref": "d0fab29d-ca4f-4b2d-8e79-c619b29ba0f9",
          "length": 49,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "cdbcff44-a21d-4a2d-92c9-ed2221340a37"
        },
        "item": {
          "id": "871d9827-5ca2-4b82-bb23-d5e54855e378",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "bb633bcd-07d7-42e8-8b52-e84a510e0c0a",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "d13531a8-af69-4ac9-ac90-fa2dfb60e5e3",
        "cursor": {
          "ref": "7e40bf87-859f-4651-a520-9527ce77e48b",
          "length": 49,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "8f0d724c-d46c-46e0-97d8-76cf151ca38c"
        },
        "item": {
          "id": "d13531a8-af69-4ac9-ac90-fa2dfb60e5e3",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "c9107ff9-d7aa-4120-a793-2223794957fb",
          "status": "Created",
          "code": 201,
          "responseTime": 36,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "80cc0f7e-1e70-4d04-b7fa-f95bfdf52c3f",
        "cursor": {
          "ref": "0d38b0fc-891a-4fe7-96b9-4112975b6fca",
          "length": 49,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "314bc10e-e9fd-4afe-bb3f-fd57f17e05bb"
        },
        "item": {
          "id": "80cc0f7e-1e70-4d04-b7fa-f95bfdf52c3f",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "20a318d3-8120-4817-87dc-01892d717dad",
          "status": "Created",
          "code": 201,
          "responseTime": 32,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "e64f7108-3a4c-480c-af8e-019b00fc1544",
        "cursor": {
          "ref": "bd2f6b73-deab-43a2-85bb-2801dcf1d846",
          "length": 49,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "bbbfd0a8-e6ef-4367-ae28-7a4977f79b99"
        },
        "item": {
          "id": "e64f7108-3a4c-480c-af8e-019b00fc1544",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "0933b19a-6c2f-468c-8aee-149e73f2374a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 7,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "c0f16f14-d00b-4a51-afad-91b462436397",
        "cursor": {
          "ref": "50d2f329-54d5-455a-9e79-0137a22f9466",
          "length": 49,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "28ece412-443c-4373-bb74-0daa6a7610fd"
        },
        "item": {
          "id": "c0f16f14-d00b-4a51-afad-91b462436397",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "82344e78-1cdf-412c-a67e-f2d7e1219182",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 6,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "c0f16f14-d00b-4a51-afad-91b462436397",
        "cursor": {
          "ref": "50d2f329-54d5-455a-9e79-0137a22f9466",
          "length": 49,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "28ece412-443c-4373-bb74-0daa6a7610fd"
        },
        "item": {
          "id": "c0f16f14-d00b-4a51-afad-91b462436397",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "82344e78-1cdf-412c-a67e-f2d7e1219182",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 6,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "b06fafd4-5804-4a7c-86bf-ccc3dc3267a1",
        "cursor": {
          "ref": "a87ef26a-9c6a-4499-ab69-348c1176686f",
          "length": 49,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "5e581cef-8fe7-4d2f-91c7-3eacee722306"
        },
        "item": {
          "id": "b06fafd4-5804-4a7c-86bf-ccc3dc3267a1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "805a2b96-fcba-4f31-83c9-52668395d879",
          "status": "Not Found",
          "code": 404,
          "responseTime": 14,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "655f2140-f4e3-483b-a1a5-4d9f6f16bb1d",
        "cursor": {
          "ref": "80637c19-475c-4d71-9294-76fad5a027f2",
          "length": 49,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "1fb89a6f-a5cb-4a53-b01d-a8c733804b88"
        },
        "item": {
          "id": "655f2140-f4e3-483b-a1a5-4d9f6f16bb1d",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "5d8598df-e00b-4540-a008-bb28942f4a57",
          "status": "Not Found",
          "code": 404,
          "responseTime": 8,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "655f2140-f4e3-483b-a1a5-4d9f6f16bb1d",
        "cursor": {
          "ref": "80637c19-475c-4d71-9294-76fad5a027f2",
          "length": 49,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "1fb89a6f-a5cb-4a53-b01d-a8c733804b88"
        },
        "item": {
          "id": "655f2140-f4e3-483b-a1a5-4d9f6f16bb1d",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "5d8598df-e00b-4540-a008-bb28942f4a57",
          "status": "Not Found",
          "code": 404,
          "responseTime": 8,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "706add2f-3aea-4200-a1a2-98b9dd0ce85c",
        "cursor": {
          "ref": "c692ed96-1cf2-4650-a8db-28c62d18bc94",
          "length": 49,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "1a922be6-54e8-4e5d-8daf-93f6e8dac146"
        },
        "item": {
          "id": "706add2f-3aea-4200-a1a2-98b9dd0ce85c",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "6272f580-3738-4cf9-872e-670833bd9686",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "a1dd27fe-b9e1-4d88-b319-542fbabdf7f0",
        "cursor": {
          "ref": "0e606d04-5013-41f3-9b8a-6be98fab2aaa",
          "length": 49,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "5a8894e8-0623-4868-9b89-4a5054d0f7d2"
        },
        "item": {
          "id": "a1dd27fe-b9e1-4d88-b319-542fbabdf7f0",
          "name": "credentials_verify:missing_scope:update_credentials"
        },
        "response": {
          "id": "a4728c2c-a1ad-46ec-92d3-01d2bec2104d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 6,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "a1dd27fe-b9e1-4d88-b319-542fbabdf7f0",
        "cursor": {
          "ref": "0e606d04-5013-41f3-9b8a-6be98fab2aaa",
          "length": 49,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "5a8894e8-0623-4868-9b89-4a5054d0f7d2"
        },
        "item": {
          "id": "a1dd27fe-b9e1-4d88-b319-542fbabdf7f0",
          "name": "credentials_verify:missing_scope:update_credentials"
        },
        "response": {
          "id": "a4728c2c-a1ad-46ec-92d3-01d2bec2104d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 6,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      }
    ]
  }
}