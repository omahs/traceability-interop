{
  "collection": {
    "info": {
      "_postman_id": "cc41d416-e316-4a7c-aa1b-7c6f06394282",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "0e689623-e7ac-463e-9c3c-c09e54c9d476",
        "name": "Issue Credential",
        "item": [
          {
            "id": "7b4b17e6-96bf-4ded-9f4b-ba8708c16e30",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2fea7053-920f-423c-aa40-1f93ba18638e",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "87dbf619-fd68-45de-92dd-ccf98269105f",
                    "name": "credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "122a14cd-d0ca-47ed-ad9d-dfc3e9b579a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55e3fdda-2e0f-4aeb-9453-3f32b5d5cbe8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62224242-cdfd-4acf-8a65-7608207046b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a3dff22-5dfb-468d-b52f-cb52380d6a78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9314b2d6-0542-469e-a6ad-c9f23718524f",
                    "name": "credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d32367-1d01-4f7e-9648-0d0ac24cf69f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39b233a9-a6f8-46da-a938-c10de07da1cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85ca42a4-ba8b-4f5e-8924-99917be56cc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7799055-855c-4d97-9bfe-affe17b9cdd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32698048-deb2-4d8e-bbbe-917dd0636d42",
                    "name": "credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6178fb3-1889-413d-a4b7-8b04561ff801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb058ada-3c42-4bb8-b362-c5988cb49649"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1835af4-336a-4e64-b19d-674b883f1d3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bd38a76-f4da-400e-ac15-400b8593af39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7fb5451-ac31-40c5-aca5-2558a12cdb57",
                    "name": "credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e16822a-29a8-4525-bd98-27b104e845ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e22cf34-562a-41f0-a0e3-666a12cb138b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cab18f96-da90-4f00-9cc8-80af601697a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db54a95c-6d97-44ec-849f-a66a5f583ea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8442c1f3-8f30-4ae8-908f-a43a594dba8e",
                    "name": "credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f081b0b-feb0-4948-b217-f926feb143b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f96661cc-dec9-4609-b9c5-ab64aed29d55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffa31f53-0300-4d6b-ab0f-3e2c5edb49c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a39a4b45-b651-4f93-92b9-e8a24a6a1dd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a4abf8a-bec2-4393-9371-b00ccd261701",
                    "name": "credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af5bd7c6-9292-47e3-8f0c-83dc5f7be59e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91993ccb-6287-4193-bdc5-4354115782a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67c4667f-87a2-4178-99b0-8b2661746c3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb04a586-2959-47da-a556-d7eab49ae165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6df8fca4-4731-4ce0-a0af-3ed2f190dd9f",
                    "name": "credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5425f7a-11c0-4bde-94af-5924cbb86af9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baa6d5c1-80ec-427d-934b-57429a08b6a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b31f429d-2c50-4c88-9316-933140a8890a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd1c2b96-99d8-4df3-aac7-4a53dbad9971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c93a8ac-35d0-4420-8ed7-391a68484f72",
                    "name": "credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fa82478-3c11-4f9a-b90b-f353e3b77cb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f0ca2a0-4599-4e30-876f-ecf85ecb0d22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57a3d9dd-4ac4-410f-82d7-02651b028b1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07011f4b-c9ae-4350-86ce-9b88f87a469d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fad2026-2d7c-4e23-a400-488b26f3e919",
                    "name": "credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e24e38c5-7add-492c-891f-f7e60210bb00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76b0119a-6dbe-498a-860a-7da7217ad3c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34257290-4af5-4188-94c7-2f1024d348df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3346010-4608-496d-803d-adde4b872589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "445c86ac-cbc3-4d23-ba7d-740397d3cdf2",
                    "name": "credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8baae73-039a-4802-bc3d-4a0a1f50b002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e32fae4e-4f6f-42e0-be6d-e52663812e3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "128da43e-731e-44d3-8640-23abdc5af0eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "060317f6-4243-4703-b0f0-cf125cf7b5b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "742e9519-40d4-450b-98f8-12ad817b9640",
                    "name": "credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9c05d33-4d9e-4b34-a1c9-68df70a26c7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0678ee07-2da4-42a5-9919-986055970d6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9160b2cc-9ee7-479c-8155-ffa50cfe5b54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f5e27fc-db58-4d01-88ae-bfb32b287df0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bebf4d85-b8a9-432d-88a7-b1db0b58ae26",
                    "name": "credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28d35e92-f4a3-4e46-8c78-5f2d25e5ce81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63b0eadb-f2c0-4f80-ad30-fdf5d03699e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3d3d921-c016-4498-b088-a97c9ba79332",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5792eca-2f76-4920-86d6-5c614eb24910"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61c5d7bf-3e6b-4d5d-8d27-ce15c0808f19",
                    "name": "credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cacf379-e4ce-4c87-9491-a845f4075d84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f0da60d-ebc1-4826-84dd-966f244bbaed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "065d0c97-00aa-4ed2-b626-99ee522dab06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0df8e71-d7ae-4720-901c-097f4e9e0b6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e91caa6f-1211-4f99-b743-673d7791bbdf",
                    "name": "credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1811fdb-376e-4192-b622-70d514c8761a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db966d5a-ee10-42cc-9d8d-ec483e0d4aca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23170a21-c891-4c53-8c22-a09ae8a7dc4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0317ca3-db74-4561-b4a5-c889d7b79b39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea77b5bc-b88b-4803-b362-0bb2e4e5bd4a",
                    "name": "credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae6c9e60-2283-4c6d-81bc-1c076e32b66b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47caf362-3577-475d-9fdd-269228fb08d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7717de20-173a-4508-834b-7725a308c1b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e129ad86-c318-4eb5-8cad-62aec5fbb1d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fce19b02-23ff-40c3-b3c8-00497e63c811",
                    "name": "credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd7f427c-58d4-42fc-8cd1-7f4ac290458b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89dfd5cb-7519-47b0-bdc8-d9ae4bec2041"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cded2365-d307-4335-ac37-437c94e0f8a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21d3d0b3-494d-42d0-842b-4a0acf8c45d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77b91bc2-f35d-4171-a69a-7408cd777920",
                    "name": "credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1584017a-a9b4-4d53-9fb4-0e96cf8411fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a66f923-85e3-40e9-8b0a-0cda582527b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8705d33-5f39-4eb4-bd6f-23c8f11addee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41cb4545-fb9d-4414-8512-4f46c62194ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d6f9bd0-fb5b-406f-bd96-563535d1d22a",
                    "name": "options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fb49a6f-ceb0-4b2c-bf35-3ef26b28aa29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7989c80-bc25-4da7-8e29-9ae6f2955d24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a42bef4-9461-41d6-8e9e-5a2292582dc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd3e74ed-1cf6-404b-b698-1349a05ad0a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f0b3336-1d9c-4a08-ade3-99cd195e179d",
                    "name": "options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6402c15b-4200-4edc-861c-4d45df679955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "042aaf0f-f116-4081-ae00-2b737b327dad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f052830-52e8-42d6-b5e8-d9b4aa7787df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22967b69-7822-4b89-aaf3-b36952ceeb7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "560ee6d3-cd73-4b49-bc1f-43404132c310",
                    "name": "options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b163d835-c230-4966-99d1-026dd5be8097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "512d61bd-6a96-49cb-a279-ddece423e342"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab957bce-22fa-46d6-8a4c-22840bdc7c46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b2c98f9-1a48-4f76-9594-48c041f1517e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "139a7319-d707-425e-84c1-de665a0468a3",
                    "name": "options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f99c9a9a-1372-4432-a8a2-d9e563150673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e712fa0-a7bb-499d-b047-4abee9ff2216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b18fb30-8ebc-43ac-9aa1-0c57cc1346db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33333ce9-43dd-48c1-b2f9-1ef131c50808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77789afd-b330-4949-9a3e-81c47315cf94",
                    "name": "options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51dfad91-4d31-4139-aa0f-466ee04a11d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b50829d-0d50-489d-aee6-b1cd7fb9205a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a77ffb9-eeb2-46b3-a810-64b6a19e5297",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f149a73-f7be-4d45-b54f-601de3672c0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21ccc23b-150b-4b36-bc8f-b16ae19df2ab",
                    "name": "options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5124d9fc-0e2b-4cfb-8da5-79d86dabc009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "145dd345-5e5c-48f4-b199-dc45a1193eaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2b0f67d-e517-4217-a067-7aaaa7a1bea4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65e986be-920d-449e-a9b4-923950eb2748"
                        }
                      }
                    ]
                  },
                  {
                    "id": "578aee73-156d-488c-917c-ea01e1276f1f",
                    "name": "options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6186a457-b4b9-4072-8d49-e99c121874c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39602dbd-e571-4db3-b993-a2f8f03bac82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f311a81f-5704-4d0c-89ef-9d665c39cf89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06004020-02d2-4a9b-b9cf-729b8d3df453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e576d054-3cda-4dbc-ad60-23745acaba1d",
                    "name": "options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f243a109-d1f5-482f-bff1-986b399f95bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86ff67c5-67bc-495e-ba71-55d4f36c59e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cbab58f-9795-4dc6-a665-d832ed46a61a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe9d335a-7958-43af-90ce-fcbc4d58151c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29588a1c-9e00-448a-bf06-4ae554c8277f",
                    "name": "options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bda98da-dfb4-4b1c-a2f5-383b78b656bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "60debb04-8b0c-4ce5-a2d3-6b3290aae26a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8effb830-0ab1-48e4-8602-03787fc4c5eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c5ada8e-23f7-428d-9478-7467d0edb6f6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "757f4ce1-a5b6-4a59-9efb-7facdfe7e583",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5a757fa8-8413-4b49-b3fe-1a53a187b98c",
                    "name": "missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fe0da8a-f78a-4714-8124-c0e8ff12fafb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "11478013-d5ec-4cc1-97cd-974e238ebb63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdc1e496-61e9-4325-bdd5-8aa7ca88f507",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"requestBody\")));"
                          ],
                          "_lastExecutionId": "4ae32dd7-166a-422f-acb3-8567b2b6fabd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00e9c017-b44c-464c-b18c-0f75b4d53aed",
                    "name": "missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04767f91-3452-45f4-9539-cba74323a2b2",
                          "type": "text/javascript",
                          "exec": [
                            "// Missing scope tests should be skipped if the OAuth2 provider does",
                            "// not support requesting tokens with specific scopes.",
                            "const maybe = utils(pm).tokenHasScope(",
                            "    pm.variables.get('currentAccessToken'),",
                            "    'issue:credentials'",
                            ") ? pm.test : pm.test.skip;",
                            "",
                            "maybe(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "maybe(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "34cc8573-9b80-4489-9d30-8ea5f7ad1236"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba8adfe5-05ce-4be6-9b9b-5b78c86b5d41",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"requestBody\")));"
                          ],
                          "_lastExecutionId": "3cf4341d-0d76-4f0f-9657-2ee9b2d693a2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a7f4784d-c2b6-4159-83b7-90b39bc4008a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "55f37870-fe2e-416d-8edb-7c4f6fd15b98"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e7b7f267-880f-480c-b4e0-f22179ae1647",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e64caaf8-2b73-4d9d-836a-d273e5b83f5e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "caf1f8d3-23ac-44da-904f-f529fa73dd7a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5ad433d8-d778-40ca-b755-565ac74fae37"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e83a06c6-7937-4c0a-afa2-4700389fce83",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "725bc96e-1547-4a99-b5be-168fb1f0ef67"
                }
              }
            ]
          },
          {
            "id": "7b5b7608-cb27-40dc-b670-8983dbcffca0",
            "name": "Happy Path",
            "item": [
              {
                "id": "0141e3a6-cf5b-46f0-b944-c39c0b5f1241",
                "name": "base",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a584953-2025-4edd-9d5e-e366e184cf4e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "59a7ca93-47d3-45c1-81cd-fe6a31c82908"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d09afdbb-3c1f-4fe7-8276-969a3ae5d065",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "b5b45eb0-a592-42e7-9331-d9666e3cd381"
                    }
                  }
                ]
              },
              {
                "id": "ed33902f-846c-4cb2-90ef-d1f4ebf113b2",
                "name": "credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2bd94f4f-8e2c-4576-8f61-080be8624a26",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ea6e1541-1882-4fc2-b68b-15ee302874b1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2917ac3d-ccb3-4361-9b4a-e79cb73d4bfc",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "2899c24e-6976-426a-8fd2-5ff20a0d6b6f"
                    }
                  }
                ]
              },
              {
                "id": "7693a4cf-0552-4b81-bb52-f8855b88962c",
                "name": "credential:alt.issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5788cae5-b1a0-4e6f-bf3b-7d825c9ab16d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fab94d02-a265-4863-ac4c-906419609473"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3555000a-39f4-45ba-98ba-ddcf6fbeec9d",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with optional 'id' element.",
                        "rawBody.credential.issuer = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "1b98ba14-8eae-41a8-b733-cf317eb9b990"
                    }
                  }
                ]
              },
              {
                "id": "3a459e81-9f02-4ee5-a51d-b170835de3d9",
                "name": "credential:alt.issuer.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d19f5c88-ff2d-4214-8fe2-c62f42d593a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0ea63747-e9a6-4706-8b74-bfddec45e0f9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cfa14c5a-525c-4b07-8b4b-3faf2593df20",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with optional 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "52188356-b6c7-4206-8249-9b4a29a7b68a"
                    }
                  }
                ]
              },
              {
                "id": "c48f1354-a16b-4b4e-ba67-06b41cb80634",
                "name": "credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a65024c7-59ef-47c9-a6b6-c7a331433feb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ca124372-3fa9-469d-ac67-b386fb274471"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f740c02f-2bc9-4462-a3f9-4c258e919466",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "77a970a1-348b-4e6d-bd42-f1a72918dbba"
                    }
                  }
                ]
              },
              {
                "id": "7ecfa3a9-318e-42f5-9ebd-6e7e5b7c217f",
                "name": "credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7871a68c-bd5c-44b8-8890-4cc4e5d65193",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cb2b7335-68b9-4202-8159-d10c5102062c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2f93f5c4-9986-4217-82da-7df016f9aa24",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "06f49080-e028-4587-ad1d-a430d0cd4c07"
                    }
                  }
                ]
              },
              {
                "id": "df72af20-2375-4c1e-8095-07c65092ad9a",
                "name": "options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f3f8a34c-d0cf-4dd1-a67d-da755220c1dc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2d586709-3909-408f-b8ca-6a080280fa7d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f440a21b-32ad-40c9-a7ea-d860c2bb0749",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "091897fb-01f7-41be-b27f-ef9e7fe37ed8"
                    }
                  }
                ]
              },
              {
                "id": "5536a0d9-d26b-4875-855d-357f920f0a4d",
                "name": "options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "36a35627-e7c3-4b76-a51b-4fe9aa730aa2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e06c9730-18d7-46b8-9fe1-4dc900a5b77d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4e2ed4ac-b7b8-4762-9003-d3cbcc3b5759",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "372acb89-eb0e-475d-97c8-fb869b72913d"
                    }
                  }
                ]
              },
              {
                "id": "6bb665ae-a14f-47a7-b165-35c3c0e0ee87",
                "name": "options:opt.credentialStatus Copy",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1e13c766-6332-46b5-b5d6-9159b0c3ec7d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c9fde506-021b-4644-8dd7-c5a4037db137"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ec708fab-0e8c-475e-8f13-e64286ec6efd",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "139b58d9-1ef1-47d1-9527-2bab6079968a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8a5d25e1-8ada-424e-89f3-6fe35bc01cf3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6c486afd-31fb-48e5-ae8b-58042a112593"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5dd768df-9ddc-4535-bad4-86f9491f94b1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1cb971fd-c6e1-4aac-bc96-a584937a4612"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e0c47a14-717a-4eec-8f97-173340333d3a",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"2010-01-01T19:23:24Z\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('issue:credentials', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "if (!pm.variables.get('credential_issuer_id')) {",
                "    // TODO: This needs to be populated correctly",
                "    pm.variables.set('credential_issuer_id', 'temporary.placeholder')",
                "}",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "ee0a7f6c-011c-40b8-8cc8-ea5f9151cef8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aba374f0-97a7-41f8-9eef-22ad0f06d7c6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cd555a15-76a3-4652-8b50-e63966195227"
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 37,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 300,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 37,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 39,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 37,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 74,
        "pending": 0,
        "failed": 64
      },
      "testScripts": {
        "total": 150,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 150,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 66.02564102564105,
      "responseMin": 12,
      "responseMax": 513,
      "responseSd": 101.0365476346179,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1657846582788,
      "completed": 1657846587388
    },
    "executions": [
      {
        "id": "87dbf619-fd68-45de-92dd-ccf98269105f",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 37,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "10662b8d-9148-4e32-a914-a7077e9edfdb",
          "httpRequestId": "351853db-eba2-42c2-b6ec-1ca1ed851b96"
        },
        "item": {
          "id": "87dbf619-fd68-45de-92dd-ccf98269105f",
          "name": "credential:missing"
        },
        "response": {
          "id": "1a7d99dd-27c2-4dde-ac53-3822f9d5ddc0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 513,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "id": "87dbf619-fd68-45de-92dd-ccf98269105f",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 37,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "10662b8d-9148-4e32-a914-a7077e9edfdb",
          "httpRequestId": "351853db-eba2-42c2-b6ec-1ca1ed851b96"
        },
        "item": {
          "id": "87dbf619-fd68-45de-92dd-ccf98269105f",
          "name": "credential:missing"
        },
        "response": {
          "id": "1a7d99dd-27c2-4dde-ac53-3822f9d5ddc0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 513,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "id": "9314b2d6-0542-469e-a6ad-c9f23718524f",
        "cursor": {
          "ref": "80b94979-8b1f-4f97-a0b0-3b9ece8d166d",
          "length": 37,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8f121b8e-772c-42d4-b61c-9a4dd40e6994"
        },
        "item": {
          "id": "9314b2d6-0542-469e-a6ad-c9f23718524f",
          "name": "credential.@context:missing"
        },
        "response": {
          "id": "21b1b6f8-4f1f-401e-a212-9c556432c3bc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "32698048-deb2-4d8e-bbbe-917dd0636d42",
        "cursor": {
          "ref": "d2d9a2fc-aa63-44fb-8200-09f276a0229d",
          "length": 37,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b5a10f04-9782-48fe-a0be-4f84fcea52a8"
        },
        "item": {
          "id": "32698048-deb2-4d8e-bbbe-917dd0636d42",
          "name": "credential.@context:wrong_type"
        },
        "response": {
          "id": "aab2fd44-3628-4369-a517-25afe8c0eb76",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "a7fb5451-ac31-40c5-aca5-2558a12cdb57",
        "cursor": {
          "ref": "00900e43-82fb-4483-9dde-9157d63de9cd",
          "length": 37,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3c647672-ea92-4bc9-b051-bc693592c7b8"
        },
        "item": {
          "id": "a7fb5451-ac31-40c5-aca5-2558a12cdb57",
          "name": "credential.@context.members:wrong_type"
        },
        "response": {
          "id": "ae963e0b-38bc-4cc0-a13e-67a5f32657a1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "8442c1f3-8f30-4ae8-908f-a43a594dba8e",
        "cursor": {
          "ref": "f26195ab-dea5-4d1e-b9c5-42ac11d881c1",
          "length": 37,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9fa0c000-c877-456b-9ae9-aaf211099cbe"
        },
        "item": {
          "id": "8442c1f3-8f30-4ae8-908f-a43a594dba8e",
          "name": "credential.id:wrong_type"
        },
        "response": {
          "id": "eaf67e7f-faed-43ba-ba62-44e694853163",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "9a4abf8a-bec2-4393-9371-b00ccd261701",
        "cursor": {
          "ref": "a1e08295-1af6-40f4-8d0a-530dff392133",
          "length": 37,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "20241061-7893-44ae-981d-10325d95f5c1"
        },
        "item": {
          "id": "9a4abf8a-bec2-4393-9371-b00ccd261701",
          "name": "credential.type:missing"
        },
        "response": {
          "id": "da1e3c21-2656-48cb-a3e4-f6ae95c83bf7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "6df8fca4-4731-4ce0-a0af-3ed2f190dd9f",
        "cursor": {
          "ref": "75aa7f3e-2d77-4687-a4f1-54cdf362681d",
          "length": 37,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "161bd562-80ff-4bfc-a267-3d8a7b7737a6"
        },
        "item": {
          "id": "6df8fca4-4731-4ce0-a0af-3ed2f190dd9f",
          "name": "credential.type:wrong_type"
        },
        "response": {
          "id": "f5292075-84af-4bcb-b904-49c9f584b683",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "7c93a8ac-35d0-4420-8ed7-391a68484f72",
        "cursor": {
          "ref": "d42abe41-0633-489d-b9e4-9457732b387d",
          "length": 37,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b29eb780-90f8-4bb9-99f2-03d14a922f8f"
        },
        "item": {
          "id": "7c93a8ac-35d0-4420-8ed7-391a68484f72",
          "name": "credential.type.members:wrong_type"
        },
        "response": {
          "id": "4ac8f77a-865b-479e-94a3-c28b7c29608f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 44,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "0fad2026-2d7c-4e23-a400-488b26f3e919",
        "cursor": {
          "ref": "d52683a6-bf11-401e-85a6-1dd09b119956",
          "length": 37,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b699bdaa-b75b-4002-b2f0-98820b30e971"
        },
        "item": {
          "id": "0fad2026-2d7c-4e23-a400-488b26f3e919",
          "name": "credential.issuer:missing"
        },
        "response": {
          "id": "2965e2d4-04d9-408f-8ae2-4112de9ee748",
          "status": "Created",
          "code": 201,
          "responseTime": 46,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "445c86ac-cbc3-4d23-ba7d-740397d3cdf2",
        "cursor": {
          "ref": "87432ccc-c009-49c0-8053-8aa8c83c01a0",
          "length": 37,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "6497c57d-ed2c-4eb6-b76b-c7e4fb7384b8"
        },
        "item": {
          "id": "445c86ac-cbc3-4d23-ba7d-740397d3cdf2",
          "name": "credential.issuer:wrong_type"
        },
        "response": {
          "id": "289b5433-47cb-4536-a7e5-cf8677fefe49",
          "status": "Created",
          "code": 201,
          "responseTime": 41,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "742e9519-40d4-450b-98f8-12ad817b9640",
        "cursor": {
          "ref": "6f738b1d-212a-4aae-986b-4028de71df76",
          "length": 37,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "5b16067e-232f-42c7-bc35-d1346ebe1836"
        },
        "item": {
          "id": "742e9519-40d4-450b-98f8-12ad817b9640",
          "name": "credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "bcdf4703-3885-450b-b3bc-c3c523ef829c",
          "status": "Created",
          "code": 201,
          "responseTime": 43,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "bebf4d85-b8a9-432d-88a7-b1db0b58ae26",
        "cursor": {
          "ref": "84b3a6fb-c326-431b-bd17-0ccd09e7fa0f",
          "length": 37,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "42c08912-8606-4b6f-8e67-3dffe48d908c"
        },
        "item": {
          "id": "bebf4d85-b8a9-432d-88a7-b1db0b58ae26",
          "name": "credential.issuanceDate.missing"
        },
        "response": {
          "id": "6e941f2c-8262-4630-8881-ee2dd121bfdd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "61c5d7bf-3e6b-4d5d-8d27-ce15c0808f19",
        "cursor": {
          "ref": "579310f8-ee78-4fd9-aeab-c6e19cd611cf",
          "length": 37,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "8fbdcfaa-55e1-4cfb-9639-50c248d41c07"
        },
        "item": {
          "id": "61c5d7bf-3e6b-4d5d-8d27-ce15c0808f19",
          "name": "credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "e388be61-c3ca-40cb-9493-20342f26c82d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "e91caa6f-1211-4f99-b743-673d7791bbdf",
        "cursor": {
          "ref": "96833b71-b640-4d05-97a9-4243c1b8af1a",
          "length": 37,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b8cc4395-5dca-48a1-a5a6-ca1f728b8343"
        },
        "item": {
          "id": "e91caa6f-1211-4f99-b743-673d7791bbdf",
          "name": "credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "79696dc4-47da-4f11-b05b-5106b9fde81f",
          "status": "Created",
          "code": 201,
          "responseTime": 43,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "ea77b5bc-b88b-4803-b362-0bb2e4e5bd4a",
        "cursor": {
          "ref": "982404ef-f632-494c-80c0-a946b01d0f19",
          "length": 37,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b9ba04ba-6ce1-4cb2-a1bc-6c11169c0b83"
        },
        "item": {
          "id": "ea77b5bc-b88b-4803-b362-0bb2e4e5bd4a",
          "name": "credential.credentialSubject:missing"
        },
        "response": {
          "id": "5b6fbaf0-d186-4f41-993e-bb916f07fc3d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "fce19b02-23ff-40c3-b3c8-00497e63c811",
        "cursor": {
          "ref": "680d81b7-659e-4858-a9d4-56118e257616",
          "length": 37,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "67d3870a-7300-44c8-9961-e39ff8f45ab4"
        },
        "item": {
          "id": "fce19b02-23ff-40c3-b3c8-00497e63c811",
          "name": "credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "6d4f8fae-646a-4414-9bca-6b865d69718c",
          "status": "Created",
          "code": 201,
          "responseTime": 56,
          "responseSize": 624
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "77b91bc2-f35d-4171-a69a-7408cd777920",
        "cursor": {
          "ref": "ef04e9a9-4743-4c8f-bada-da954ee85a83",
          "length": 37,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "7da88b89-d48b-434f-94e3-89d9c09933ec"
        },
        "item": {
          "id": "77b91bc2-f35d-4171-a69a-7408cd777920",
          "name": "credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "0673831e-2392-4b0c-aacc-18709bcf9479",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "7d6f9bd0-fb5b-406f-bd96-563535d1d22a",
        "cursor": {
          "ref": "e3e59bf6-841e-4224-b14d-890aa3e058ed",
          "length": 37,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "9e7d3377-ec41-45f5-bd62-1e51c1816929"
        },
        "item": {
          "id": "7d6f9bd0-fb5b-406f-bd96-563535d1d22a",
          "name": "options:missing"
        },
        "response": {
          "id": "4ad10c6b-bc6f-4422-969b-0ab37a1eccf1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 12,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "2f0b3336-1d9c-4a08-ade3-99cd195e179d",
        "cursor": {
          "ref": "de17d51b-d500-43a2-b5e3-4b6e78719f86",
          "length": 37,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "b3658b3f-ac90-4a25-8d9e-a579563391c4"
        },
        "item": {
          "id": "2f0b3336-1d9c-4a08-ade3-99cd195e179d",
          "name": "options:wrong_type"
        },
        "response": {
          "id": "80699621-6693-444d-a275-875d0c607f67",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "560ee6d3-cd73-4b49-bc1f-43404132c310",
        "cursor": {
          "ref": "32c78891-bdb9-4929-8ceb-6829336279b6",
          "length": 37,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "1343ed3b-906e-48aa-9872-94d333429315"
        },
        "item": {
          "id": "560ee6d3-cd73-4b49-bc1f-43404132c310",
          "name": "options.type:missing"
        },
        "response": {
          "id": "9768fa09-0add-4137-a048-d72abca0490e",
          "status": "Created",
          "code": 201,
          "responseTime": 41,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "139a7319-d707-425e-84c1-de665a0468a3",
        "cursor": {
          "ref": "9c54c7d1-d7cd-4bbe-8ed5-2f755e35914a",
          "length": 37,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "0c2aa3b0-9d65-40f6-b240-29acf4d6fd1c"
        },
        "item": {
          "id": "139a7319-d707-425e-84c1-de665a0468a3",
          "name": "options.type:wrong_type"
        },
        "response": {
          "id": "bba2b6c1-7901-453f-bbed-2ef35fcdf985",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "77789afd-b330-4949-9a3e-81c47315cf94",
        "cursor": {
          "ref": "c13679e2-afe6-4255-944e-f073687a410c",
          "length": 37,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8ba55959-a5bd-4f3b-8bb8-7abec3765bba"
        },
        "item": {
          "id": "77789afd-b330-4949-9a3e-81c47315cf94",
          "name": "options.type:invalid_value"
        },
        "response": {
          "id": "23743377-ac1c-47e5-ba0d-70485888ac87",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "21ccc23b-150b-4b36-bc8f-b16ae19df2ab",
        "cursor": {
          "ref": "dba5b9c3-db9d-45c3-8a7b-0b41edea7b9f",
          "length": 37,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "6874e417-c52a-4519-8805-5fdf0a654aff"
        },
        "item": {
          "id": "21ccc23b-150b-4b36-bc8f-b16ae19df2ab",
          "name": "options.created:wrong_type"
        },
        "response": {
          "id": "cafa50b8-8513-4440-8c9c-b79de22743da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "578aee73-156d-488c-917c-ea01e1276f1f",
        "cursor": {
          "ref": "84f2e6dd-c695-4ea0-aa08-cbdff73dbc65",
          "length": 37,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "5aae0e8c-feda-4493-b046-c6d7d017dbb2"
        },
        "item": {
          "id": "578aee73-156d-488c-917c-ea01e1276f1f",
          "name": "options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "85cc2762-3f58-41c8-a47b-6ed3d11b2501",
          "status": "Created",
          "code": 201,
          "responseTime": 46,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "e576d054-3cda-4dbc-ad60-23745acaba1d",
        "cursor": {
          "ref": "d09979db-0e85-4926-9930-47fea75c4585",
          "length": 37,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "12334ac1-1301-47b9-89c9-14efb6cde40e"
        },
        "item": {
          "id": "e576d054-3cda-4dbc-ad60-23745acaba1d",
          "name": "options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "31000843-0f05-4ddd-8bc0-4b3bc8e1ee3e",
          "status": "Created",
          "code": 201,
          "responseTime": 53,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "29588a1c-9e00-448a-bf06-4ae554c8277f",
        "cursor": {
          "ref": "350773a3-fe6d-43b7-8300-6e81587d36f3",
          "length": 37,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "35bd0d03-3ac5-444e-8363-81499539837c"
        },
        "item": {
          "id": "29588a1c-9e00-448a-bf06-4ae554c8277f",
          "name": "options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "40c91210-4ad6-4619-9976-ceeaaebcfd06",
          "status": "Created",
          "code": 201,
          "responseTime": 42,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "5a757fa8-8413-4b49-b3fe-1a53a187b98c",
        "cursor": {
          "ref": "651b8b03-bd79-47d0-9205-2459826589ee",
          "length": 37,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f590c90d-b933-42a5-aac5-f425c16e1c20"
        },
        "item": {
          "id": "5a757fa8-8413-4b49-b3fe-1a53a187b98c",
          "name": "missing_auth"
        },
        "response": {
          "id": "2bb738b4-8064-4929-95cb-eece2725b4b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "00e9c017-b44c-464c-b18c-0f75b4d53aed",
        "cursor": {
          "ref": "22780984-f782-4217-80d1-2ab2596ec79d",
          "length": 37,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "07a03556-ce25-4593-a0d4-e339089f1ce7"
        },
        "item": {
          "id": "00e9c017-b44c-464c-b18c-0f75b4d53aed",
          "name": "missing_scope:issue_credentials"
        },
        "response": {
          "id": "c73cd9f4-3da9-4916-aa1d-25b85198ea30",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 14,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "00e9c017-b44c-464c-b18c-0f75b4d53aed",
        "cursor": {
          "ref": "22780984-f782-4217-80d1-2ab2596ec79d",
          "length": 37,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "07a03556-ce25-4593-a0d4-e339089f1ce7"
        },
        "item": {
          "id": "00e9c017-b44c-464c-b18c-0f75b4d53aed",
          "name": "missing_scope:issue_credentials"
        },
        "response": {
          "id": "c73cd9f4-3da9-4916-aa1d-25b85198ea30",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 14,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "0141e3a6-cf5b-46f0-b944-c39c0b5f1241",
        "cursor": {
          "ref": "238859d3-cda4-427e-9dd0-8bfe5c62a584",
          "length": 37,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "def0c17e-9ebd-49e1-aadf-34d088912299"
        },
        "item": {
          "id": "0141e3a6-cf5b-46f0-b944-c39c0b5f1241",
          "name": "base"
        },
        "response": {
          "id": "17e1ace1-4931-4fc3-9d43-3ee6a35ecbee",
          "status": "Created",
          "code": 201,
          "responseTime": 64,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "ed33902f-846c-4cb2-90ef-d1f4ebf113b2",
        "cursor": {
          "ref": "065425f5-afee-44dc-9bc2-f30dbb695d76",
          "length": 37,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "b5be3956-75b4-48e4-8149-c1b6b5713c5d"
        },
        "item": {
          "id": "ed33902f-846c-4cb2-90ef-d1f4ebf113b2",
          "name": "credential:opt.id"
        },
        "response": {
          "id": "edab1eca-42d7-4604-9447-fba231bf0d85",
          "status": "Created",
          "code": 201,
          "responseTime": 40,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "7693a4cf-0552-4b81-bb52-f8855b88962c",
        "cursor": {
          "ref": "acb244bd-14bc-44a8-897d-e6e987c3faed",
          "length": 37,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "93f4991d-3cd4-492b-99a3-80736725f068"
        },
        "item": {
          "id": "7693a4cf-0552-4b81-bb52-f8855b88962c",
          "name": "credential:alt.issuer:object"
        },
        "response": {
          "id": "331510a0-d58a-4a31-853d-48de9d1c4215",
          "status": "Created",
          "code": 201,
          "responseTime": 82,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "3a459e81-9f02-4ee5-a51d-b170835de3d9",
        "cursor": {
          "ref": "735a3b58-5b9e-4fb6-9a8e-6d62a570dca1",
          "length": 37,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "5d7d8dd9-9a58-44de-ac70-8812f0252eb3"
        },
        "item": {
          "id": "3a459e81-9f02-4ee5-a51d-b170835de3d9",
          "name": "credential:alt.issuer.object:opt.id"
        },
        "response": {
          "id": "ced65c7b-77cd-42cb-9d48-1b1f471e0ece",
          "status": "Created",
          "code": 201,
          "responseTime": 54,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "c48f1354-a16b-4b4e-ba67-06b41cb80634",
        "cursor": {
          "ref": "f40aade0-8518-4c53-9d9f-9a2903ef1f79",
          "length": 37,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "95dbe25c-1ebc-48b9-9f0f-3c4560f7ce5e"
        },
        "item": {
          "id": "c48f1354-a16b-4b4e-ba67-06b41cb80634",
          "name": "credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "76254b90-81ae-4972-bc70-ca6f096af057",
          "status": "Created",
          "code": 201,
          "responseTime": 41,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "7ecfa3a9-318e-42f5-9ebd-6e7e5b7c217f",
        "cursor": {
          "ref": "1f83b6d1-2f55-4d76-91a3-2c430951e27a",
          "length": 37,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "0a593ba5-80de-43f4-8e13-e5d9c7cddbe4"
        },
        "item": {
          "id": "7ecfa3a9-318e-42f5-9ebd-6e7e5b7c217f",
          "name": "credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "37c88ba4-c5e5-4a84-9ddc-5cfa1fa25d8a",
          "status": "Created",
          "code": 201,
          "responseTime": 41,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "df72af20-2375-4c1e-8095-07c65092ad9a",
        "cursor": {
          "ref": "bebba08e-3cd2-4d9e-ba3f-470bfa07462f",
          "length": 37,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "e74a0c0c-d4c0-49ed-a459-0159eb075c89"
        },
        "item": {
          "id": "df72af20-2375-4c1e-8095-07c65092ad9a",
          "name": "options:opt.created"
        },
        "response": {
          "id": "e7a479fd-0c7c-44d1-bd75-3d1952b5abd1",
          "status": "Created",
          "code": 201,
          "responseTime": 40,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "5536a0d9-d26b-4875-855d-357f920f0a4d",
        "cursor": {
          "ref": "bc099699-7e35-48a8-b338-b4ddbcbe64be",
          "length": 37,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "400db3ac-09cd-4eab-ba05-b49a39271862"
        },
        "item": {
          "id": "5536a0d9-d26b-4875-855d-357f920f0a4d",
          "name": "options:opt.credentialStatus"
        },
        "response": {
          "id": "95c56f6f-f24e-4791-a6db-2a05fb2ed645",
          "status": "Created",
          "code": 201,
          "responseTime": 53,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "6bb665ae-a14f-47a7-b165-35c3c0e0ee87",
        "cursor": {
          "ref": "ece28dd8-bc88-46dc-80e8-275ad24aa090",
          "length": 37,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "f6c75e67-fe39-4e2f-a523-d46991ff78c2"
        },
        "item": {
          "id": "6bb665ae-a14f-47a7-b165-35c3c0e0ee87",
          "name": "options:opt.credentialStatus Copy"
        },
        "response": {
          "id": "b2356793-4635-4837-aa5f-f71643375c57",
          "status": "Created",
          "code": 201,
          "responseTime": 43,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      }
    ]
  }
}